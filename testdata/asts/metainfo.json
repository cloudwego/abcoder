{
    "id": "/Users/bytedance/golang/work/abcoder/tmp/metainfo",
    "Modules": {
        "ahash@0.8.11": {
            "Language": "rust",
            "Version": "0.8.11",
            "Name": "ahash",
            "Dir": "",
            "Packages": {
                "ahash::hash_map": {
                    "IsMain": false,
                    "IsTest": false,
                    "PkgPath": "ahash::hash_map",
                    "Functions": {
                        "AHashMap.deref": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "ahash@0.8.11",
                            "PkgPath": "ahash::hash_map",
                            "Name": "AHashMap.deref",
                            "File": "hash_map.rs",
                            "Line": 280,
                            "StartOffset": 8076,
                            "EndOffset": 8132,
                            "Content": "impl<K, V, S> Deref for AHashMap<K, V, S> {\n    type Target = HashMap<K, V, S>;\n    fn deref(&self) -> &Self::Target {\n        &self.0\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap"
                                }
                            }
                        },
                        "AHashMap.deref_mut": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "ahash@0.8.11",
                            "PkgPath": "ahash::hash_map",
                            "Name": "AHashMap.deref_mut",
                            "File": "hash_map.rs",
                            "Line": 286,
                            "StartOffset": 8187,
                            "EndOffset": 8259,
                            "Content": "impl<K, V, S> DerefMut for AHashMap<K, V, S> {\n    fn deref_mut(&mut self) -> &mut Self::Target {\n        &mut self.0\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap"
                                }
                            }
                        },
                        "AHashMap.eq": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "ahash@0.8.11",
                            "PkgPath": "ahash::hash_map",
                            "Name": "AHashMap.eq",
                            "File": "hash_map.rs",
                            "Line": 304,
                            "StartOffset": 8473,
                            "EndOffset": 8556,
                            "Content": "impl<K, V, S> PartialEq for AHashMap<K, V, S>\nwhere\n    K: Eq + Hash,\n    V: PartialEq,\n    S: BuildHasher,\n{\n    fn eq(&self, other: &AHashMap<K, V, S>) -> bool {\n        self.0.eq(&other.0)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap"
                                }
                            }
                        },
                        "AHashMap.extend": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "ahash@0.8.11",
                            "PkgPath": "ahash::hash_map",
                            "Name": "AHashMap.extend",
                            "File": "hash_map.rs",
                            "Line": 389,
                            "StartOffset": 10454,
                            "EndOffset": 10565,
                            "Content": "impl<K, V, S> Extend<(K, V)> for AHashMap<K, V, S>\nwhere\n    K: Eq + Hash,\n    S: BuildHasher,\n{\n    #[inline]\n    #[inline]\n    fn extend<T: IntoIterator<Item = (K, V)>>(&mut self, iter: T) {\n        self.0.extend(iter)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap"
                                }
                            }
                        },
                        "AHashMap.fmt": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "ahash@0.8.11",
                            "PkgPath": "ahash::hash_map",
                            "Name": "AHashMap.fmt",
                            "File": "hash_map.rs",
                            "Line": 342,
                            "StartOffset": 9170,
                            "EndOffset": 9256,
                            "Content": "impl<K, V, S> Debug for AHashMap<K, V, S>\nwhere\n    K: Debug,\n    V: Debug,\n    S: BuildHasher,\n{\n    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n        self.0.fmt(fmt)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap"
                                }
                            }
                        },
                        "AHashMap.get": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "ahash@0.8.11",
                            "PkgPath": "ahash::hash_map",
                            "Name": "AHashMap.get",
                            "File": "hash_map.rs",
                            "Line": 85,
                            "StartOffset": 2421,
                            "EndOffset": 3065,
                            "Content": "impl<K, V, S> AHashMap<K, V, S>\nwhere\n    K: Hash + Eq,\n    S: BuildHasher,\n{\n    /// Returns a reference to the value corresponding to the key.\n    ///\n    /// The key may be any borrowed form of the map's key type, but\n    /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for\n    /// the key type.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::collections::HashMap;\n    ///\n    /// let mut map = HashMap::new();\n    /// map.insert(1, \"a\");\n    /// assert_eq!(map.get(&1), Some(&\"a\"));\n    /// assert_eq!(map.get(&2), None);\n    /// ```\n    #[inline]\n    /// Returns a reference to the value corresponding to the key.\n    ///\n    /// The key may be any borrowed form of the map's key type, but\n    /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for\n    /// the key type.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::collections::HashMap;\n    ///\n    /// let mut map = HashMap::new();\n    /// map.insert(1, \"a\");\n    /// assert_eq!(map.get(&1), Some(&\"a\"));\n    /// assert_eq!(map.get(&2), None);\n    /// ```\n    #[inline]\n    pub fn get<Q: ?Sized>(&self, k: &Q) -> Option<&V>\n    where\n        K: Borrow<Q>,\n        Q: Hash + Eq,\n    {\n        self.0.get(k)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap"
                                }
                            }
                        },
                        "AHashMap.get_key_value": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "ahash@0.8.11",
                            "PkgPath": "ahash::hash_map",
                            "Name": "AHashMap.get_key_value",
                            "File": "hash_map.rs",
                            "Line": 110,
                            "StartOffset": 3071,
                            "EndOffset": 3779,
                            "Content": "impl<K, V, S> AHashMap<K, V, S>\nwhere\n    K: Hash + Eq,\n    S: BuildHasher,\n{\n    /// Returns a reference to the value corresponding to the key.\n    ///\n    /// The key may be any borrowed form of the map's key type, but\n    /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for\n    /// the key type.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::collections::HashMap;\n    ///\n    /// let mut map = HashMap::new();\n    /// map.insert(1, \"a\");\n    /// assert_eq!(map.get(&1), Some(&\"a\"));\n    /// assert_eq!(map.get(&2), None);\n    /// ```\n    #[inline]\n    /// Returns the key-value pair corresponding to the supplied key.\n    ///\n    /// The supplied key may be any borrowed form of the map's key type, but\n    /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for\n    /// the key type.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::collections::HashMap;\n    ///\n    /// let mut map = HashMap::new();\n    /// map.insert(1, \"a\");\n    /// assert_eq!(map.get_key_value(&1), Some((&1, &\"a\")));\n    /// assert_eq!(map.get_key_value(&2), None);\n    /// ```\n    #[inline]\n    pub fn get_key_value<Q: ?Sized>(&self, k: &Q) -> Option<(&K, &V)>\n    where\n        K: Borrow<Q>,\n        Q: Hash + Eq,\n    {\n        self.0.get_key_value(k)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap"
                                }
                            }
                        },
                        "AHashMap.get_mut": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "ahash@0.8.11",
                            "PkgPath": "ahash::hash_map",
                            "Name": "AHashMap.get_mut",
                            "File": "hash_map.rs",
                            "Line": 135,
                            "StartOffset": 3785,
                            "EndOffset": 4478,
                            "Content": "impl<K, V, S> AHashMap<K, V, S>\nwhere\n    K: Hash + Eq,\n    S: BuildHasher,\n{\n    /// Returns a reference to the value corresponding to the key.\n    ///\n    /// The key may be any borrowed form of the map's key type, but\n    /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for\n    /// the key type.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::collections::HashMap;\n    ///\n    /// let mut map = HashMap::new();\n    /// map.insert(1, \"a\");\n    /// assert_eq!(map.get(&1), Some(&\"a\"));\n    /// assert_eq!(map.get(&2), None);\n    /// ```\n    #[inline]\n    /// Returns a mutable reference to the value corresponding to the key.\n    ///\n    /// The key may be any borrowed form of the map's key type, but\n    /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for\n    /// the key type.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::collections::HashMap;\n    ///\n    /// let mut map = HashMap::new();\n    /// map.insert(1, \"a\");\n    /// if let Some(x) = map.get_mut(&1) {\n    ///     *x = \"b\";\n    /// }\n    /// assert_eq!(map[&1], \"b\");\n    /// ```\n    #[inline]\n    pub fn get_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut V>\n    where\n        K: Borrow<Q>,\n        Q: Hash + Eq,\n    {\n        self.0.get_mut(k)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap"
                                }
                            }
                        },
                        "AHashMap.index": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "ahash@0.8.11",
                            "PkgPath": "ahash::hash_map",
                            "Name": "AHashMap.index",
                            "File": "hash_map.rs",
                            "Line": 325,
                            "StartOffset": 8818,
                            "EndOffset": 9064,
                            "Content": "impl<K, Q: ?Sized, V, S> Index<&Q> for AHashMap<K, V, S>\nwhere\n    K: Eq + Hash + Borrow<Q>,\n    Q: Eq + Hash,\n    S: BuildHasher,\n{\n    type Output = V;\n\n    /// Returns a reference to the value corresponding to the supplied key.\n    ///\n    /// # Panics\n    ///\n    /// Panics if the key is not present in the `HashMap`.\n    #[inline]\n    /// Returns a reference to the value corresponding to the supplied key.\n    ///\n    /// # Panics\n    ///\n    /// Panics if the key is not present in the `HashMap`.\n    #[inline]\n    fn index(&self, key: &Q) -> &V {\n        self.0.index(key)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap"
                                }
                            }
                        },
                        "AHashMap.insert": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "ahash@0.8.11",
                            "PkgPath": "ahash::hash_map",
                            "Name": "AHashMap.insert",
                            "File": "hash_map.rs",
                            "Line": 162,
                            "StartOffset": 4484,
                            "EndOffset": 5343,
                            "Content": "impl<K, V, S> AHashMap<K, V, S>\nwhere\n    K: Hash + Eq,\n    S: BuildHasher,\n{\n    /// Returns a reference to the value corresponding to the key.\n    ///\n    /// The key may be any borrowed form of the map's key type, but\n    /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for\n    /// the key type.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::collections::HashMap;\n    ///\n    /// let mut map = HashMap::new();\n    /// map.insert(1, \"a\");\n    /// assert_eq!(map.get(&1), Some(&\"a\"));\n    /// assert_eq!(map.get(&2), None);\n    /// ```\n    #[inline]\n    /// Inserts a key-value pair into the map.\n    ///\n    /// If the map did not have this key present, [`None`] is returned.\n    ///\n    /// If the map did have this key present, the value is updated, and the old\n    /// value is returned. The key is not updated, though; this matters for\n    /// types that can be `==` without being identical. See the [module-level\n    /// documentation] for more.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::collections::HashMap;\n    ///\n    /// let mut map = HashMap::new();\n    /// assert_eq!(map.insert(37, \"a\"), None);\n    /// assert_eq!(map.is_empty(), false);\n    ///\n    /// map.insert(37, \"b\");\n    /// assert_eq!(map.insert(37, \"c\"), Some(\"b\"));\n    /// assert_eq!(map[&37], \"c\");\n    /// ```\n    #[inline]\n    pub fn insert(&mut self, k: K, v: V) -> Option<V> {\n        self.0.insert(k, v)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap"
                                }
                            }
                        },
                        "AHashMap.into": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "ahash@0.8.11",
                            "PkgPath": "ahash::hash_map",
                            "Name": "AHashMap.into",
                            "File": "hash_map.rs",
                            "Line": 48,
                            "StartOffset": 1311,
                            "EndOffset": 1384,
                            "Content": "impl<K, V> Into<HashMap<K, V, crate::RandomState>> for AHashMap<K, V> {\n    fn into(self) -> HashMap<K, V, crate::RandomState> {\n        self.0\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap"
                                }
                            }
                        },
                        "AHashMap.into_iter": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "ahash@0.8.11",
                            "PkgPath": "ahash::hash_map",
                            "Name": "AHashMap.into_iter",
                            "File": "hash_map.rs",
                            "Line": 363,
                            "StartOffset": 9847,
                            "EndOffset": 9916,
                            "Content": "impl<'a, K, V, S> IntoIterator for &'a AHashMap<K, V, S> {\n    type Item = (&'a K, &'a V);\n    type IntoIter = hash_map::Iter<'a, K, V>;\n    fn into_iter(self) -> Self::IntoIter {\n        (&self.0).iter()\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap"
                                }
                            }
                        },
                        "AHashMap.into_keys": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "ahash@0.8.11",
                            "PkgPath": "ahash::hash_map",
                            "Name": "AHashMap.into_keys",
                            "File": "hash_map.rs",
                            "Line": 189,
                            "StartOffset": 5349,
                            "EndOffset": 6305,
                            "Content": "impl<K, V, S> AHashMap<K, V, S>\nwhere\n    K: Hash + Eq,\n    S: BuildHasher,\n{\n    /// Returns a reference to the value corresponding to the key.\n    ///\n    /// The key may be any borrowed form of the map's key type, but\n    /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for\n    /// the key type.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::collections::HashMap;\n    ///\n    /// let mut map = HashMap::new();\n    /// map.insert(1, \"a\");\n    /// assert_eq!(map.get(&1), Some(&\"a\"));\n    /// assert_eq!(map.get(&2), None);\n    /// ```\n    #[inline]\n    /// Creates a consuming iterator visiting all the keys in arbitrary order.\n    /// The map cannot be used after calling this.\n    /// The iterator element type is `K`.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::collections::HashMap;\n    ///\n    /// let map = HashMap::from([\n    ///     (\"a\", 1),\n    ///     (\"b\", 2),\n    ///     (\"c\", 3),\n    /// ]);\n    ///\n    /// let mut vec: Vec<&str> = map.into_keys().collect();\n    /// // The `IntoKeys` iterator produces keys in arbitrary order, so the\n    /// // keys must be sorted to test them against a sorted array.\n    /// vec.sort_unstable();\n    /// assert_eq!(vec, [\"a\", \"b\", \"c\"]);\n    /// ```\n    ///\n    /// # Performance\n    ///\n    /// In the current implementation, iterating over keys takes O(capacity) time\n    /// instead of O(len) because it internally visits empty buckets too.\n    #[inline]\n    pub fn into_keys(self) -> IntoKeys<K, V> {\n        self.0.into_keys()\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap"
                                }
                            }
                        },
                        "AHashMap.into_values": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "ahash@0.8.11",
                            "PkgPath": "ahash::hash_map",
                            "Name": "AHashMap.into_values",
                            "File": "hash_map.rs",
                            "Line": 220,
                            "StartOffset": 6311,
                            "EndOffset": 7278,
                            "Content": "impl<K, V, S> AHashMap<K, V, S>\nwhere\n    K: Hash + Eq,\n    S: BuildHasher,\n{\n    /// Returns a reference to the value corresponding to the key.\n    ///\n    /// The key may be any borrowed form of the map's key type, but\n    /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for\n    /// the key type.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::collections::HashMap;\n    ///\n    /// let mut map = HashMap::new();\n    /// map.insert(1, \"a\");\n    /// assert_eq!(map.get(&1), Some(&\"a\"));\n    /// assert_eq!(map.get(&2), None);\n    /// ```\n    #[inline]\n    /// Creates a consuming iterator visiting all the values in arbitrary order.\n    /// The map cannot be used after calling this.\n    /// The iterator element type is `V`.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::collections::HashMap;\n    ///\n    /// let map = HashMap::from([\n    ///     (\"a\", 1),\n    ///     (\"b\", 2),\n    ///     (\"c\", 3),\n    /// ]);\n    ///\n    /// let mut vec: Vec<i32> = map.into_values().collect();\n    /// // The `IntoValues` iterator produces values in arbitrary order, so\n    /// // the values must be sorted to test them against a sorted array.\n    /// vec.sort_unstable();\n    /// assert_eq!(vec, [1, 2, 3]);\n    /// ```\n    ///\n    /// # Performance\n    ///\n    /// In the current implementation, iterating over values takes O(capacity) time\n    /// instead of O(len) because it internally visits empty buckets too.\n    #[inline]\n    pub fn into_values(self) -> IntoValues<K, V> {\n        self.0.into_values()\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap"
                                }
                            }
                        },
                        "AHashMap.remove": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "ahash@0.8.11",
                            "PkgPath": "ahash::hash_map",
                            "Name": "AHashMap.remove",
                            "File": "hash_map.rs",
                            "Line": 251,
                            "StartOffset": 7284,
                            "EndOffset": 7988,
                            "Content": "impl<K, V, S> AHashMap<K, V, S>\nwhere\n    K: Hash + Eq,\n    S: BuildHasher,\n{\n    /// Returns a reference to the value corresponding to the key.\n    ///\n    /// The key may be any borrowed form of the map's key type, but\n    /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for\n    /// the key type.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::collections::HashMap;\n    ///\n    /// let mut map = HashMap::new();\n    /// map.insert(1, \"a\");\n    /// assert_eq!(map.get(&1), Some(&\"a\"));\n    /// assert_eq!(map.get(&2), None);\n    /// ```\n    #[inline]\n    /// Removes a key from the map, returning the value at the key if the key\n    /// was previously in the map.\n    ///\n    /// The key may be any borrowed form of the map's key type, but\n    /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for\n    /// the key type.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::collections::HashMap;\n    ///\n    /// let mut map = HashMap::new();\n    /// map.insert(1, \"a\");\n    /// assert_eq!(map.remove(&1), Some(\"a\"));\n    /// assert_eq!(map.remove(&1), None);\n    /// ```\n    #[inline]\n    pub fn remove<Q: ?Sized>(&mut self, k: &Q) -> Option<V>\n    where\n        K: Borrow<Q>,\n        Q: Hash + Eq,\n    {\n        self.0.remove(k)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap"
                                }
                            }
                        },
                        "AHashMap.serialize": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "ahash@0.8.11",
                            "PkgPath": "ahash::hash_map",
                            "Name": "AHashMap.serialize",
                            "File": "hash_map.rs",
                            "Line": 424,
                            "StartOffset": 11502,
                            "EndOffset": 11629,
                            "Content": "#[cfg(feature = \"serde\")]\nimpl<K, V> Serialize for AHashMap<K, V>\nwhere\n    K: Serialize + Eq + Hash,\n    V: Serialize,\n{\n    fn serialize<S: Serializer>(&self, serializer: S) -> Result<S::Ok, S::Error> {\n        self.deref().serialize(serializer)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap"
                                }
                            }
                        },
                        "AHashMap::with_capacity": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "ahash@0.8.11",
                            "PkgPath": "ahash::hash_map",
                            "Name": "AHashMap::with_capacity",
                            "File": "hash_map.rs",
                            "Line": 60,
                            "StartOffset": 1703,
                            "EndOffset": 2000,
                            "Content": "impl<K, V> AHashMap<K, V, RandomState> {\n    /// This crates a hashmap using [RandomState::new] which obtains its keys from [RandomSource].\n    /// See the documentation in [RandomSource] for notes about key strength.\n    /// This crates a hashmap with the specified capacity using [RandomState::new].\n    /// See the documentation in [RandomSource] for notes about key strength.\n    pub fn with_capacity(capacity: usize) -> Self {\n        AHashMap(HashMap::with_capacity_and_hasher(capacity, RandomState::new()))\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap"
                                }
                            }
                        }
                    },
                    "Types": {
                        "AHashMap": {
                            "Exported": false,
                            "TypeKind": "struct",
                            "ModPath": "ahash@0.8.11",
                            "PkgPath": "ahash::hash_map",
                            "Name": "AHashMap",
                            "File": "hash_map.rs",
                            "Line": 18,
                            "StartOffset": 426,
                            "EndOffset": 665,
                            "Content": "/// A [`HashMap`](std::collections::HashMap) using [`RandomState`](crate::RandomState) to hash the items.\n/// (Requires the `std` feature to be enabled.)\n#[derive(Clone)]\npub struct AHashMap<K, V, S = crate::RandomState>(HashMap<K, V, S>);",
                            "Methods": {
                                "deref": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap.deref"
                                },
                                "deref_mut": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap.deref_mut"
                                },
                                "eq": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap.eq"
                                },
                                "extend": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap.extend"
                                },
                                "fmt": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap.fmt"
                                },
                                "get": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap.get"
                                },
                                "get_key_value": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap.get_key_value"
                                },
                                "get_mut": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap.get_mut"
                                },
                                "index": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap.index"
                                },
                                "insert": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap.insert"
                                },
                                "into": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap.into"
                                },
                                "into_iter": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap.into_iter"
                                },
                                "into_keys": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap.into_keys"
                                },
                                "into_values": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap.into_values"
                                },
                                "remove": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap.remove"
                                },
                                "serialize": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap.serialize"
                                }
                            }
                        }
                    },
                    "Vars": {}
                }
            },
            "Dependencies": {},
            "Files": {
                "hash_map.rs": {
                    "Path": "hash_map.rs"
                }
            }
        },
        "bytes@1.10.0": {
            "Language": "rust",
            "Version": "1.10.0",
            "Name": "bytes",
            "Dir": "",
            "Packages": {
                "bytes::bytes": {
                    "IsMain": false,
                    "IsTest": false,
                    "PkgPath": "bytes::bytes",
                    "Functions": {
                        "_split_off_must_use": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.10.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "_split_off_must_use",
                            "File": "bytes.rs",
                            "Line": 1635,
                            "StartOffset": 47713,
                            "EndOffset": 47905,
                            "Content": "/// ```compile_fail\n/// use bytes::Bytes;\n/// #[deny(unused_must_use)]\n/// {\n///     let mut b1 = Bytes::from(\"hello world\");\n///     b1.split_off(6);\n/// }\n/// ```\nfn _split_off_must_use() {}"
                        },
                        "_split_to_must_use": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.10.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "_split_to_must_use",
                            "File": "bytes.rs",
                            "Line": 1625,
                            "StartOffset": 47521,
                            "EndOffset": 47711,
                            "Content": "/// ```compile_fail\n/// use bytes::Bytes;\n/// #[deny(unused_must_use)]\n/// {\n///     let mut b1 = Bytes::from(\"hello world\");\n///     b1.split_to(6);\n/// }\n/// ```\nfn _split_to_must_use() {}"
                        },
                        "free_boxed_slice": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.10.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "free_boxed_slice",
                            "File": "bytes.rs",
                            "Line": 1346,
                            "StartOffset": 37917,
                            "EndOffset": 38097,
                            "Content": "unsafe fn free_boxed_slice(buf: *mut u8, offset: *const u8, len: usize) {\n    let cap = offset_from(offset, buf) + len;\n    dealloc(buf, Layout::from_size_align(cap, 1).unwrap())\n}"
                        },
                        "owned_box_and_drop": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.10.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "owned_box_and_drop",
                            "File": "bytes.rs",
                            "Line": 1123,
                            "StartOffset": 31463,
                            "EndOffset": 31577,
                            "Content": "unsafe fn owned_box_and_drop<T>(ptr: *mut ()) {\n    let b: Box<Owned<T>> = Box::from_raw(ptr as _);\n    drop(b);\n}"
                        },
                        "owned_clone": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.10.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "owned_clone",
                            "File": "bytes.rs",
                            "Line": 1128,
                            "StartOffset": 31579,
                            "EndOffset": 32011,
                            "Content": "unsafe fn owned_clone(data: &AtomicPtr<()>, ptr: *const u8, len: usize) -> Bytes {\n    let owned = data.load(Ordering::Relaxed);\n    let ref_cnt = &(*owned.cast::<OwnedLifetime>()).ref_cnt;\n    let old_cnt = ref_cnt.fetch_add(1, Ordering::Relaxed);\n    if old_cnt > usize::MAX >> 1 {\n        crate::abort()\n    }\n\n    Bytes {\n        ptr,\n        len,\n        data: AtomicPtr::new(owned as _),\n        vtable: &OWNED_VTABLE,\n    }\n}"
                        },
                        "owned_drop": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.10.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "owned_drop",
                            "File": "bytes.rs",
                            "Line": 1173,
                            "StartOffset": 32803,
                            "EndOffset": 32957,
                            "Content": "unsafe fn owned_drop(data: &mut AtomicPtr<()>, _ptr: *const u8, _len: usize) {\n    let owned = data.load(Ordering::Relaxed);\n    owned_drop_impl(owned);\n}"
                        },
                        "owned_drop_impl": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.10.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "owned_drop_impl",
                            "File": "bytes.rs",
                            "Line": 1159,
                            "StartOffset": 32468,
                            "EndOffset": 32801,
                            "Content": "unsafe fn owned_drop_impl(owned: *mut ()) {\n    let lifetime = owned.cast::<OwnedLifetime>();\n    let ref_cnt = &(*lifetime).ref_cnt;\n\n    let old_cnt = ref_cnt.fetch_sub(1, Ordering::Release);\n    if old_cnt != 1 {\n        return;\n    }\n    ref_cnt.load(Ordering::Acquire);\n\n    let drop_fn = &(*lifetime).drop;\n    drop_fn(owned)\n}"
                        },
                        "owned_is_unique": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.10.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "owned_is_unique",
                            "File": "bytes.rs",
                            "Line": 1155,
                            "StartOffset": 32396,
                            "EndOffset": 32466,
                            "Content": "unsafe fn owned_is_unique(_data: &AtomicPtr<()>) -> bool {\n    false\n}"
                        },
                        "owned_to_mut": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.10.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "owned_to_mut",
                            "File": "bytes.rs",
                            "Line": 1149,
                            "StartOffset": 32171,
                            "EndOffset": 32394,
                            "Content": "unsafe fn owned_to_mut(data: &AtomicPtr<()>, ptr: *const u8, len: usize) -> BytesMut {\n    let bytes_mut = BytesMut::from_vec(owned_to_vec(data, ptr, len));\n    owned_drop_impl(data.load(Ordering::Relaxed));\n    bytes_mut\n}"
                        },
                        "owned_to_vec": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.10.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "owned_to_vec",
                            "File": "bytes.rs",
                            "Line": 1144,
                            "StartOffset": 32013,
                            "EndOffset": 32169,
                            "Content": "unsafe fn owned_to_vec(_data: &AtomicPtr<()>, ptr: *const u8, len: usize) -> Vec<u8> {\n    let slice = slice::from_raw_parts(ptr, len);\n    slice.to_vec()\n}"
                        },
                        "promotable_even_clone": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.10.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "promotable_even_clone",
                            "File": "bytes.rs",
                            "Line": 1204,
                            "StartOffset": 33621,
                            "EndOffset": 34068,
                            "Content": "unsafe fn promotable_even_clone(data: &AtomicPtr<()>, ptr: *const u8, len: usize) -> Bytes {\n    let shared = data.load(Ordering::Acquire);\n    let kind = shared as usize & KIND_MASK;\n\n    if kind == KIND_ARC {\n        shallow_clone_arc(shared.cast(), ptr, len)\n    } else {\n        debug_assert_eq!(kind, KIND_VEC);\n        let buf = ptr_map(shared.cast(), |addr| addr & !KIND_MASK);\n        shallow_clone_vec(data, shared, buf, ptr, len)\n    }\n}"
                        },
                        "promotable_even_drop": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.10.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "promotable_even_drop",
                            "File": "bytes.rs",
                            "Line": 1284,
                            "StartOffset": 36013,
                            "EndOffset": 36480,
                            "Content": "unsafe fn promotable_even_drop(data: &mut AtomicPtr<()>, ptr: *const u8, len: usize) {\n    data.with_mut(|shared| {\n        let shared = *shared;\n        let kind = shared as usize & KIND_MASK;\n\n        if kind == KIND_ARC {\n            release_shared(shared.cast());\n        } else {\n            debug_assert_eq!(kind, KIND_VEC);\n            let buf = ptr_map(shared.cast(), |addr| addr & !KIND_MASK);\n            free_boxed_slice(buf, ptr, len);\n        }\n    });\n}"
                        },
                        "promotable_even_to_mut": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.10.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "promotable_even_to_mut",
                            "File": "bytes.rs",
                            "Line": 1278,
                            "StartOffset": 35800,
                            "EndOffset": 36011,
                            "Content": "unsafe fn promotable_even_to_mut(data: &AtomicPtr<()>, ptr: *const u8, len: usize) -> BytesMut {\n    promotable_to_mut(data, ptr, len, |shared| {\n        ptr_map(shared.cast(), |addr| addr & !KIND_MASK)\n    })\n}"
                        },
                        "promotable_even_to_vec": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.10.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "promotable_even_to_vec",
                            "File": "bytes.rs",
                            "Line": 1272,
                            "StartOffset": 35588,
                            "EndOffset": 35798,
                            "Content": "unsafe fn promotable_even_to_vec(data: &AtomicPtr<()>, ptr: *const u8, len: usize) -> Vec<u8> {\n    promotable_to_vec(data, ptr, len, |shared| {\n        ptr_map(shared.cast(), |addr| addr & !KIND_MASK)\n    })\n}"
                        },
                        "promotable_is_unique": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.10.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "promotable_is_unique",
                            "File": "bytes.rs",
                            "Line": 1334,
                            "StartOffset": 37598,
                            "EndOffset": 37915,
                            "Content": "unsafe fn promotable_is_unique(data: &AtomicPtr<()>) -> bool {\n    let shared = data.load(Ordering::Acquire);\n    let kind = shared as usize & KIND_MASK;\n\n    if kind == KIND_ARC {\n        let ref_cnt = (*shared.cast::<Shared>()).ref_cnt.load(Ordering::Relaxed);\n        ref_cnt == 1\n    } else {\n        true\n    }\n}"
                        },
                        "promotable_odd_clone": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.10.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "promotable_odd_clone",
                            "File": "bytes.rs",
                            "Line": 1299,
                            "StartOffset": 36482,
                            "EndOffset": 36868,
                            "Content": "unsafe fn promotable_odd_clone(data: &AtomicPtr<()>, ptr: *const u8, len: usize) -> Bytes {\n    let shared = data.load(Ordering::Acquire);\n    let kind = shared as usize & KIND_MASK;\n\n    if kind == KIND_ARC {\n        shallow_clone_arc(shared as _, ptr, len)\n    } else {\n        debug_assert_eq!(kind, KIND_VEC);\n        shallow_clone_vec(data, shared, shared.cast(), ptr, len)\n    }\n}"
                        },
                        "promotable_odd_drop": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.10.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "promotable_odd_drop",
                            "File": "bytes.rs",
                            "Line": 1319,
                            "StartOffset": 37191,
                            "EndOffset": 37596,
                            "Content": "unsafe fn promotable_odd_drop(data: &mut AtomicPtr<()>, ptr: *const u8, len: usize) {\n    data.with_mut(|shared| {\n        let shared = *shared;\n        let kind = shared as usize & KIND_MASK;\n\n        if kind == KIND_ARC {\n            release_shared(shared.cast());\n        } else {\n            debug_assert_eq!(kind, KIND_VEC);\n\n            free_boxed_slice(shared.cast(), ptr, len);\n        }\n    });\n}"
                        },
                        "promotable_odd_to_mut": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.10.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "promotable_odd_to_mut",
                            "File": "bytes.rs",
                            "Line": 1315,
                            "StartOffset": 37030,
                            "EndOffset": 37189,
                            "Content": "unsafe fn promotable_odd_to_mut(data: &AtomicPtr<()>, ptr: *const u8, len: usize) -> BytesMut {\n    promotable_to_mut(data, ptr, len, |shared| shared.cast())\n}"
                        },
                        "promotable_odd_to_vec": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.10.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "promotable_odd_to_vec",
                            "File": "bytes.rs",
                            "Line": 1311,
                            "StartOffset": 36870,
                            "EndOffset": 37028,
                            "Content": "unsafe fn promotable_odd_to_vec(data: &AtomicPtr<()>, ptr: *const u8, len: usize) -> Vec<u8> {\n    promotable_to_vec(data, ptr, len, |shared| shared.cast())\n}"
                        },
                        "promotable_to_mut": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.10.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "promotable_to_mut",
                            "File": "bytes.rs",
                            "Line": 1243,
                            "StartOffset": 34686,
                            "EndOffset": 35586,
                            "Content": "unsafe fn promotable_to_mut(\n    data: &AtomicPtr<()>,\n    ptr: *const u8,\n    len: usize,\n    f: fn(*mut ()) -> *mut u8,\n) -> BytesMut {\n    let shared = data.load(Ordering::Acquire);\n    let kind = shared as usize & KIND_MASK;\n\n    if kind == KIND_ARC {\n        shared_to_mut_impl(shared.cast(), ptr, len)\n    } else {\n        // KIND_VEC is a view of an underlying buffer at a certain offset.\n        // The ptr + len always represents the end of that buffer.\n        // Before truncating it, it is first promoted to KIND_ARC.\n        // Thus, we can safely reconstruct a Vec from it without leaking memory.\n        debug_assert_eq!(kind, KIND_VEC);\n\n        let buf = f(shared);\n        let off = offset_from(ptr, buf);\n        let cap = off + len;\n        let v = Vec::from_raw_parts(buf, cap, cap);\n\n        let mut b = BytesMut::from_vec(v);\n        b.advance_unchecked(off);\n        b\n    }\n}"
                        },
                        "promotable_to_vec": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.10.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "promotable_to_vec",
                            "File": "bytes.rs",
                            "Line": 1217,
                            "StartOffset": 34070,
                            "EndOffset": 34684,
                            "Content": "unsafe fn promotable_to_vec(\n    data: &AtomicPtr<()>,\n    ptr: *const u8,\n    len: usize,\n    f: fn(*mut ()) -> *mut u8,\n) -> Vec<u8> {\n    let shared = data.load(Ordering::Acquire);\n    let kind = shared as usize & KIND_MASK;\n\n    if kind == KIND_ARC {\n        shared_to_vec_impl(shared.cast(), ptr, len)\n    } else {\n        // If Bytes holds a Vec, then the offset must be 0.\n        debug_assert_eq!(kind, KIND_VEC);\n\n        let buf = f(shared);\n\n        let cap = offset_from(ptr, buf) + len;\n\n        // Copy back buffer\n        ptr::copy(ptr, buf, len);\n\n        Vec::from_raw_parts(buf, len, cap)\n    }\n}"
                        },
                        "ptr_map": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.10.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "ptr_map",
                            "File": "bytes.rs",
                            "Line": 1592,
                            "StartOffset": 46647,
                            "EndOffset": 47209,
                            "Content": "// Ideally we would always use this version of `ptr_map` since it is strict\n// provenance compatible, but it results in worse codegen. We will however still\n// use it on miri because it gives better diagnostics for people who test bytes\n// code with miri.\n//\n// See https://github.com/tokio-rs/bytes/pull/545 for more info.\n#[cfg(miri)]\nfn ptr_map<F>(ptr: *mut u8, f: F) -> *mut u8\nwhere\n    F: FnOnce(usize) -> usize,\n{\n    let old_addr = ptr as usize;\n    let new_addr = f(old_addr);\n    let diff = new_addr.wrapping_sub(old_addr);\n    ptr.wrapping_add(diff)\n}"
                        },
                        "release_shared": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.10.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "release_shared",
                            "File": "bytes.rs",
                            "Line": 1560,
                            "StartOffset": 45279,
                            "EndOffset": 46645,
                            "Content": "unsafe fn release_shared(ptr: *mut Shared) {\n    // `Shared` storage... follow the drop steps from Arc.\n    if (*ptr).ref_cnt.fetch_sub(1, Ordering::Release) != 1 {\n        return;\n    }\n\n    // This fence is needed to prevent reordering of use of the data and\n    // deletion of the data.  Because it is marked `Release`, the decreasing\n    // of the reference count synchronizes with this `Acquire` fence. This\n    // means that use of the data happens before decreasing the reference\n    // count, which happens before this fence, which happens before the\n    // deletion of the data.\n    //\n    // As explained in the [Boost documentation][1],\n    //\n    // > It is important to enforce any possible access to the object in one\n    // > thread (through an existing reference) to *happen before* deleting\n    // > the object in a different thread. This is achieved by a \"release\"\n    // > operation after dropping a reference (any access to the object\n    // > through this reference must obviously happened before), and an\n    // > \"acquire\" operation before deleting the object.\n    //\n    // [1]: (www.boost.org/doc/libs/1_55_0/doc/html/atomic/usage_examples.html)\n    //\n    // Thread sanitizer does not support atomic fences. Use an atomic load\n    // instead.\n    (*ptr).ref_cnt.load(Ordering::Acquire);\n\n    // Drop the data\n    drop(Box::from_raw(ptr));\n}"
                        },
                        "shallow_clone_arc": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.10.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "shallow_clone_arc",
                            "File": "bytes.rs",
                            "Line": 1473,
                            "StartOffset": 42288,
                            "EndOffset": 42634,
                            "Content": "unsafe fn shallow_clone_arc(shared: *mut Shared, ptr: *const u8, len: usize) -> Bytes {\n    let old_size = (*shared).ref_cnt.fetch_add(1, Ordering::Relaxed);\n\n    if old_size > usize::MAX >> 1 {\n        crate::abort();\n    }\n\n    Bytes {\n        ptr,\n        len,\n        data: AtomicPtr::new(shared as _),\n        vtable: &SHARED_VTABLE,\n    }\n}"
                        },
                        "shallow_clone_vec": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.10.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "shallow_clone_vec",
                            "File": "bytes.rs",
                            "Line": 1488,
                            "StartOffset": 42636,
                            "EndOffset": 45277,
                            "Content": "#[cold]\nunsafe fn shallow_clone_vec(\n    atom: &AtomicPtr<()>,\n    ptr: *const (),\n    buf: *mut u8,\n    offset: *const u8,\n    len: usize,\n) -> Bytes {\n    // If the buffer is still tracked in a `Vec<u8>`. It is time to\n    // promote the vec to an `Arc`. This could potentially be called\n    // concurrently, so some care must be taken.\n\n    // First, allocate a new `Shared` instance containing the\n    // `Vec` fields. It's important to note that `ptr`, `len`,\n    // and `cap` cannot be mutated without having `&mut self`.\n    // This means that these fields will not be concurrently\n    // updated and since the buffer hasn't been promoted to an\n    // `Arc`, those three fields still are the components of the\n    // vector.\n    let shared = Box::new(Shared {\n        buf,\n        cap: offset_from(offset, buf) + len,\n        // Initialize refcount to 2. One for this reference, and one\n        // for the new clone that will be returned from\n        // `shallow_clone`.\n        ref_cnt: AtomicUsize::new(2),\n    });\n\n    let shared = Box::into_raw(shared);\n\n    // The pointer should be aligned, so this assert should\n    // always succeed.\n    debug_assert!(\n        0 == (shared as usize & KIND_MASK),\n        \"internal: Box<Shared> should have an aligned pointer\",\n    );\n\n    // Try compare & swapping the pointer into the `arc` field.\n    // `Release` is used synchronize with other threads that\n    // will load the `arc` field.\n    //\n    // If the `compare_exchange` fails, then the thread lost the\n    // race to promote the buffer to shared. The `Acquire`\n    // ordering will synchronize with the `compare_exchange`\n    // that happened in the other thread and the `Shared`\n    // pointed to by `actual` will be visible.\n    match atom.compare_exchange(ptr as _, shared as _, Ordering::AcqRel, Ordering::Acquire) {\n        Ok(actual) => {\n            debug_assert!(actual as usize == ptr as usize);\n            // The upgrade was successful, the new handle can be\n            // returned.\n            Bytes {\n                ptr: offset,\n                len,\n                data: AtomicPtr::new(shared as _),\n                vtable: &SHARED_VTABLE,\n            }\n        }\n        Err(actual) => {\n            // The upgrade failed, a concurrent clone happened. Release\n            // the allocation that was made in this thread, it will not\n            // be needed.\n            let shared = Box::from_raw(shared);\n            mem::forget(*shared);\n\n            // Buffer already promoted to shared storage, so increment ref\n            // count.\n            shallow_clone_arc(actual as _, offset, len)\n        }\n    }\n}"
                        },
                        "shared_clone": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.10.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "shared_clone",
                            "File": "bytes.rs",
                            "Line": 1384,
                            "StartOffset": 39059,
                            "EndOffset": 39236,
                            "Content": "unsafe fn shared_clone(data: &AtomicPtr<()>, ptr: *const u8, len: usize) -> Bytes {\n    let shared = data.load(Ordering::Relaxed);\n    shallow_clone_arc(shared as _, ptr, len)\n}"
                        },
                        "shared_drop": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.10.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "shared_drop",
                            "File": "bytes.rs",
                            "Line": 1467,
                            "StartOffset": 42129,
                            "EndOffset": 42286,
                            "Content": "unsafe fn shared_drop(data: &mut AtomicPtr<()>, _ptr: *const u8, _len: usize) {\n    data.with_mut(|shared| {\n        release_shared(shared.cast());\n    });\n}"
                        },
                        "shared_is_unique": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.10.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "shared_is_unique",
                            "File": "bytes.rs",
                            "Line": 1461,
                            "StartOffset": 41914,
                            "EndOffset": 42127,
                            "Content": "pub(crate) unsafe fn shared_is_unique(data: &AtomicPtr<()>) -> bool {\n    let shared = data.load(Ordering::Acquire);\n    let ref_cnt = (*shared.cast::<Shared>()).ref_cnt.load(Ordering::Relaxed);\n    ref_cnt == 1\n}"
                        },
                        "shared_to_mut": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.10.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "shared_to_mut",
                            "File": "bytes.rs",
                            "Line": 1457,
                            "StartOffset": 41753,
                            "EndOffset": 41912,
                            "Content": "unsafe fn shared_to_mut(data: &AtomicPtr<()>, ptr: *const u8, len: usize) -> BytesMut {\n    shared_to_mut_impl(data.load(Ordering::Relaxed).cast(), ptr, len)\n}"
                        },
                        "shared_to_mut_impl": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.10.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "shared_to_mut_impl",
                            "File": "bytes.rs",
                            "Line": 1422,
                            "StartOffset": 40308,
                            "EndOffset": 41751,
                            "Content": "unsafe fn shared_to_mut_impl(shared: *mut Shared, ptr: *const u8, len: usize) -> BytesMut {\n    // The goal is to check if the current handle is the only handle\n    // that currently has access to the buffer. This is done by\n    // checking if the `ref_cnt` is currently 1.\n    //\n    // The `Acquire` ordering synchronizes with the `Release` as\n    // part of the `fetch_sub` in `release_shared`. The `fetch_sub`\n    // operation guarantees that any mutations done in other threads\n    // are ordered before the `ref_cnt` is decremented. As such,\n    // this `Acquire` will guarantee that those mutations are\n    // visible to the current thread.\n    //\n    // Otherwise, we take the other branch, copy the data and call `release_shared`.\n    if (*shared).ref_cnt.load(Ordering::Acquire) == 1 {\n        // Deallocate the `Shared` instance without running its destructor.\n        let shared = *Box::from_raw(shared);\n        let shared = ManuallyDrop::new(shared);\n        let buf = shared.buf;\n        let cap = shared.cap;\n\n        // Rebuild Vec\n        let off = offset_from(ptr, buf);\n        let v = Vec::from_raw_parts(buf, len + off, cap);\n\n        let mut b = BytesMut::from_vec(v);\n        b.advance_unchecked(off);\n        b\n    } else {\n        // Copy the data from Shared in a new Vec, then release it\n        let v = slice::from_raw_parts(ptr, len).to_vec();\n        release_shared(shared);\n        BytesMut::from_vec(v)\n    }\n}"
                        },
                        "shared_to_vec": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.10.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "shared_to_vec",
                            "File": "bytes.rs",
                            "Line": 1418,
                            "StartOffset": 40148,
                            "EndOffset": 40306,
                            "Content": "unsafe fn shared_to_vec(data: &AtomicPtr<()>, ptr: *const u8, len: usize) -> Vec<u8> {\n    shared_to_vec_impl(data.load(Ordering::Relaxed).cast(), ptr, len)\n}"
                        },
                        "shared_to_vec_impl": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.10.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "shared_to_vec_impl",
                            "File": "bytes.rs",
                            "Line": 1389,
                            "StartOffset": 39238,
                            "EndOffset": 40146,
                            "Content": "unsafe fn shared_to_vec_impl(shared: *mut Shared, ptr: *const u8, len: usize) -> Vec<u8> {\n    // Check that the ref_cnt is 1 (unique).\n    //\n    // If it is unique, then it is set to 0 with AcqRel fence for the same\n    // reason in release_shared.\n    //\n    // Otherwise, we take the other branch and call release_shared.\n    if (*shared)\n        .ref_cnt\n        .compare_exchange(1, 0, Ordering::AcqRel, Ordering::Relaxed)\n        .is_ok()\n    {\n        // Deallocate the `Shared` instance without running its destructor.\n        let shared = *Box::from_raw(shared);\n        let shared = ManuallyDrop::new(shared);\n        let buf = shared.buf;\n        let cap = shared.cap;\n\n        // Copy back buffer\n        ptr::copy(ptr, buf, len);\n\n        Vec::from_raw_parts(buf, len, cap)\n    } else {\n        let v = slice::from_raw_parts(ptr, len).to_vec();\n        release_shared(shared);\n        v\n    }\n}"
                        },
                        "static_clone": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.10.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "static_clone",
                            "File": "bytes.rs",
                            "Line": 1086,
                            "StartOffset": 30604,
                            "EndOffset": 30765,
                            "Content": "unsafe fn static_clone(_: &AtomicPtr<()>, ptr: *const u8, len: usize) -> Bytes {\n    let slice = slice::from_raw_parts(ptr, len);\n    Bytes::from_static(slice)\n}"
                        },
                        "static_drop": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.10.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "static_drop",
                            "File": "bytes.rs",
                            "Line": 1105,
                            "StartOffset": 31147,
                            "EndOffset": 31260,
                            "Content": "unsafe fn static_drop(_: &mut AtomicPtr<()>, _: *const u8, _: usize) {\n    // nothing to drop for &'static [u8]\n}"
                        },
                        "static_is_unique": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.10.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "static_is_unique",
                            "File": "bytes.rs",
                            "Line": 1101,
                            "StartOffset": 31085,
                            "EndOffset": 31145,
                            "Content": "fn static_is_unique(_: &AtomicPtr<()>) -> bool {\n    false\n}"
                        },
                        "static_to_mut": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.10.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "static_to_mut",
                            "File": "bytes.rs",
                            "Line": 1096,
                            "StartOffset": 30922,
                            "EndOffset": 31083,
                            "Content": "unsafe fn static_to_mut(_: &AtomicPtr<()>, ptr: *const u8, len: usize) -> BytesMut {\n    let slice = slice::from_raw_parts(ptr, len);\n    BytesMut::from(slice)\n}"
                        },
                        "static_to_vec": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.10.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "static_to_vec",
                            "File": "bytes.rs",
                            "Line": 1091,
                            "StartOffset": 30767,
                            "EndOffset": 30920,
                            "Content": "unsafe fn static_to_vec(_: &AtomicPtr<()>, ptr: *const u8, len: usize) -> Vec<u8> {\n    let slice = slice::from_raw_parts(ptr, len);\n    slice.to_vec()\n}"
                        },
                        "without_provenance": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.10.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "without_provenance",
                            "File": "bytes.rs",
                            "Line": 1619,
                            "StartOffset": 47405,
                            "EndOffset": 47501,
                            "Content": "fn without_provenance(ptr: usize) -> *const u8 {\n    core::ptr::null::<u8>().wrapping_add(ptr)\n}"
                        }
                    },
                    "Types": {
                        "Bytes": {
                            "Exported": false,
                            "TypeKind": "struct",
                            "ModPath": "bytes@1.10.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "Bytes",
                            "File": "bytes.rs",
                            "Line": 21,
                            "StartOffset": 487,
                            "EndOffset": 4236,
                            "Content": "/// A cheaply cloneable and sliceable chunk of contiguous memory.\n///\n/// `Bytes` is an efficient container for storing and operating on contiguous\n/// slices of memory. It is intended for use primarily in networking code, but\n/// could have applications elsewhere as well.\n///\n/// `Bytes` values facilitate zero-copy network programming by allowing multiple\n/// `Bytes` objects to point to the same underlying memory.\n///\n/// `Bytes` does not have a single implementation. It is an interface, whose\n/// exact behavior is implemented through dynamic dispatch in several underlying\n/// implementations of `Bytes`.\n///\n/// All `Bytes` implementations must fulfill the following requirements:\n/// - They are cheaply cloneable and thereby shareable between an unlimited amount\n///   of components, for example by modifying a reference count.\n/// - Instances can be sliced to refer to a subset of the original buffer.\n///\n/// ```\n/// use bytes::Bytes;\n///\n/// let mut mem = Bytes::from(\"Hello world\");\n/// let a = mem.slice(0..5);\n///\n/// assert_eq!(a, \"Hello\");\n///\n/// let b = mem.split_to(6);\n///\n/// assert_eq!(mem, \"world\");\n/// assert_eq!(b, \"Hello \");\n/// ```\n///\n/// # Memory layout\n///\n/// The `Bytes` struct itself is fairly small, limited to 4 `usize` fields used\n/// to track information about which segment of the underlying memory the\n/// `Bytes` handle has access to.\n///\n/// `Bytes` keeps both a pointer to the shared state containing the full memory\n/// slice and a pointer to the start of the region visible by the handle.\n/// `Bytes` also tracks the length of its view into the memory.\n///\n/// # Sharing\n///\n/// `Bytes` contains a vtable, which allows implementations of `Bytes` to define\n/// how sharing/cloning is implemented in detail.\n/// When `Bytes::clone()` is called, `Bytes` will call the vtable function for\n/// cloning the backing storage in order to share it behind multiple `Bytes`\n/// instances.\n///\n/// For `Bytes` implementations which refer to constant memory (e.g. created\n/// via `Bytes::from_static()`) the cloning implementation will be a no-op.\n///\n/// For `Bytes` implementations which point to a reference counted shared storage\n/// (e.g. an `Arc<[u8]>`), sharing will be implemented by increasing the\n/// reference count.\n///\n/// Due to this mechanism, multiple `Bytes` instances may point to the same\n/// shared memory region.\n/// Each `Bytes` instance can point to different sections within that\n/// memory region, and `Bytes` instances may or may not have overlapping views\n/// into the memory.\n///\n/// The following diagram visualizes a scenario where 2 `Bytes` instances make\n/// use of an `Arc`-based backing storage, and provide access to different views:\n///\n/// ```text\n///\n///    Arc ptrs                   ┌─────────┐\n///    ________________________ / │ Bytes 2 │\n///   /                           └─────────┘\n///  /          ┌───────────┐     |         |\n/// |_________/ │  Bytes 1  │     |         |\n/// |           └───────────┘     |         |\n/// |           |           | ___/ data     | tail\n/// |      data |      tail |/              |\n/// v           v           v               v\n/// ┌─────┬─────┬───────────┬───────────────┬─────┐\n/// │ Arc │     │           │               │     │\n/// └─────┴─────┴───────────┴───────────────┴─────┘\n/// ```\npub struct Bytes {\n    ptr: *const u8,\n    len: usize,\n    // inlined \"trait object\"\n    data: AtomicPtr<()>,\n    vtable: &'static Vtable,\n}"
                        },
                        "Owned": {
                            "Exported": false,
                            "TypeKind": "struct",
                            "ModPath": "bytes@1.10.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "Owned",
                            "File": "bytes.rs",
                            "Line": 1117,
                            "StartOffset": 31388,
                            "EndOffset": 31461,
                            "Content": "#[repr(C)]\nstruct Owned<T> {\n    lifetime: OwnedLifetime,\n    owner: T,\n}"
                        },
                        "OwnedLifetime": {
                            "Exported": false,
                            "TypeKind": "struct",
                            "ModPath": "bytes@1.10.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "OwnedLifetime",
                            "File": "bytes.rs",
                            "Line": 1111,
                            "StartOffset": 31295,
                            "EndOffset": 31386,
                            "Content": "#[repr(C)]\nstruct OwnedLifetime {\n    ref_cnt: AtomicUsize,\n    drop: unsafe fn(*mut ()),\n}"
                        },
                        "Shared": {
                            "Exported": false,
                            "TypeKind": "struct",
                            "ModPath": "bytes@1.10.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "Shared",
                            "File": "bytes.rs",
                            "Line": 1353,
                            "StartOffset": 38133,
                            "EndOffset": 38286,
                            "Content": "struct Shared {\n    // Holds arguments to dealloc upon Drop, but otherwise doesn't use them\n    buf: *mut u8,\n    cap: usize,\n    ref_cnt: AtomicUsize,\n}"
                        },
                        "Vtable": {
                            "Exported": false,
                            "TypeKind": "struct",
                            "ModPath": "bytes@1.10.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "Vtable",
                            "File": "bytes.rs",
                            "Line": 110,
                            "StartOffset": 4238,
                            "EndOffset": 4734,
                            "Content": "pub(crate) struct Vtable {\n    /// fn(data, ptr, len)\n    pub clone: unsafe fn(&AtomicPtr<()>, *const u8, usize) -> Bytes,\n    /// fn(data, ptr, len)\n    ///\n    /// takes `Bytes` to value\n    pub to_vec: unsafe fn(&AtomicPtr<()>, *const u8, usize) -> Vec<u8>,\n    pub to_mut: unsafe fn(&AtomicPtr<()>, *const u8, usize) -> BytesMut,\n    /// fn(data)\n    pub is_unique: unsafe fn(&AtomicPtr<()>) -> bool,\n    /// fn(data, ptr, len)\n    pub drop: unsafe fn(&mut AtomicPtr<()>, *const u8, usize),\n}"
                        }
                    },
                    "Vars": {
                        "KIND_ARC": {
                            "IsExported": false,
                            "IsConst": true,
                            "IsPointer": false,
                            "ModPath": "bytes@1.10.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "KIND_ARC",
                            "File": "bytes.rs",
                            "Line": 1380,
                            "StartOffset": 38970,
                            "EndOffset": 38998,
                            "Content": "const KIND_ARC: usize = 0b0;"
                        },
                        "KIND_MASK": {
                            "IsExported": false,
                            "IsConst": true,
                            "IsPointer": false,
                            "ModPath": "bytes@1.10.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "KIND_MASK",
                            "File": "bytes.rs",
                            "Line": 1382,
                            "StartOffset": 39028,
                            "EndOffset": 39057,
                            "Content": "const KIND_MASK: usize = 0b1;"
                        },
                        "KIND_VEC": {
                            "IsExported": false,
                            "IsConst": true,
                            "IsPointer": false,
                            "ModPath": "bytes@1.10.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "KIND_VEC",
                            "File": "bytes.rs",
                            "Line": 1381,
                            "StartOffset": 38999,
                            "EndOffset": 39027,
                            "Content": "const KIND_VEC: usize = 0b1;"
                        },
                        "OWNED_VTABLE": {
                            "IsExported": false,
                            "IsConst": true,
                            "IsPointer": false,
                            "ModPath": "bytes@1.10.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "OWNED_VTABLE",
                            "File": "bytes.rs",
                            "Line": 1178,
                            "StartOffset": 32959,
                            "EndOffset": 33130,
                            "Content": "static OWNED_VTABLE: Vtable = Vtable {\n    clone: owned_clone,\n    to_vec: owned_to_vec,\n    to_mut: owned_to_mut,\n    is_unique: owned_is_unique,\n    drop: owned_drop,\n};"
                        },
                        "PROMOTABLE_EVEN_VTABLE": {
                            "IsExported": false,
                            "IsConst": true,
                            "IsPointer": false,
                            "ModPath": "bytes@1.10.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "PROMOTABLE_EVEN_VTABLE",
                            "File": "bytes.rs",
                            "Line": 1188,
                            "StartOffset": 33170,
                            "EndOffset": 33396,
                            "Content": "static PROMOTABLE_EVEN_VTABLE: Vtable = Vtable {\n    clone: promotable_even_clone,\n    to_vec: promotable_even_to_vec,\n    to_mut: promotable_even_to_mut,\n    is_unique: promotable_is_unique,\n    drop: promotable_even_drop,\n};"
                        },
                        "PROMOTABLE_ODD_VTABLE": {
                            "IsExported": false,
                            "IsConst": true,
                            "IsPointer": false,
                            "ModPath": "bytes@1.10.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "PROMOTABLE_ODD_VTABLE",
                            "File": "bytes.rs",
                            "Line": 1196,
                            "StartOffset": 33398,
                            "EndOffset": 33619,
                            "Content": "static PROMOTABLE_ODD_VTABLE: Vtable = Vtable {\n    clone: promotable_odd_clone,\n    to_vec: promotable_odd_to_vec,\n    to_mut: promotable_odd_to_mut,\n    is_unique: promotable_is_unique,\n    drop: promotable_odd_drop,\n};"
                        },
                        "SHARED_VTABLE": {
                            "IsExported": false,
                            "IsConst": true,
                            "IsPointer": false,
                            "ModPath": "bytes@1.10.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "SHARED_VTABLE",
                            "File": "bytes.rs",
                            "Line": 1372,
                            "StartOffset": 38791,
                            "EndOffset": 38968,
                            "Content": "static SHARED_VTABLE: Vtable = Vtable {\n    clone: shared_clone,\n    to_vec: shared_to_vec,\n    to_mut: shared_to_mut,\n    is_unique: shared_is_unique,\n    drop: shared_drop,\n};"
                        },
                        "STATIC_VTABLE": {
                            "IsExported": false,
                            "IsConst": true,
                            "IsPointer": false,
                            "ModPath": "bytes@1.10.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "STATIC_VTABLE",
                            "File": "bytes.rs",
                            "Line": 1078,
                            "StartOffset": 30426,
                            "EndOffset": 30602,
                            "Content": "const STATIC_VTABLE: Vtable = Vtable {\n    clone: static_clone,\n    to_vec: static_to_vec,\n    to_mut: static_to_mut,\n    is_unique: static_is_unique,\n    drop: static_drop,\n};"
                        }
                    }
                }
            },
            "Dependencies": {},
            "Files": {
                "bytes.rs": {
                    "Path": "bytes.rs"
                }
            }
        },
        "faststr@0.2.31": {
            "Language": "rust",
            "Version": "0.2.31",
            "Name": "faststr",
            "Dir": "",
            "Packages": {
                "faststr": {
                    "IsMain": false,
                    "IsTest": false,
                    "PkgPath": "faststr",
                    "Functions": {
                        "FastStr.as_ref": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.31",
                            "PkgPath": "faststr",
                            "Name": "FastStr.as_ref",
                            "File": "lib.rs",
                            "Line": 322,
                            "StartOffset": 10088,
                            "EndOffset": 10164,
                            "Content": "impl AsRef<str> for FastStr {\n    #[inline(always)]\n    #[inline(always)]\n    fn as_ref(&self) -> &str {\n        self.as_str()\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr"
                                }
                            }
                        },
                        "FastStr.as_str": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.31",
                            "PkgPath": "faststr",
                            "Name": "FastStr.as_str",
                            "File": "lib.rs",
                            "Line": 209,
                            "StartOffset": 6596,
                            "EndOffset": 6726,
                            "Content": "impl FastStr {\n    /// Return the `FastStr` as a string slice.\n    #[inline(always)]\n    /// Return the `FastStr` as a string slice.\n    #[inline(always)]\n    pub fn as_str(&self) -> &str {\n        self.0.as_str()\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr"
                                }
                            }
                        },
                        "FastStr.borrow": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.31",
                            "PkgPath": "faststr",
                            "Name": "FastStr.borrow",
                            "File": "lib.rs",
                            "Line": 505,
                            "StartOffset": 14086,
                            "EndOffset": 14154,
                            "Content": "impl Borrow<str> for FastStr {\n    #[inline]\n    #[inline]\n    fn borrow(&self) -> &str {\n        self.as_str()\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr"
                                }
                            }
                        },
                        "FastStr.cmp": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.31",
                            "PkgPath": "faststr",
                            "Name": "FastStr.cmp",
                            "File": "lib.rs",
                            "Line": 418,
                            "StartOffset": 11783,
                            "EndOffset": 11889,
                            "Content": "impl Ord for FastStr {\n    #[inline]\n    #[inline]\n    fn cmp(&self, other: &FastStr) -> Ordering {\n        self.as_str().cmp(other.as_str())\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr"
                                }
                            }
                        },
                        "FastStr.deep_clone_bytes": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.31",
                            "PkgPath": "faststr",
                            "Name": "FastStr.deep_clone_bytes",
                            "File": "lib.rs",
                            "Line": 266,
                            "StartOffset": 8368,
                            "EndOffset": 8832,
                            "Content": "impl FastStr {\n    /// Return the `FastStr` as a string slice.\n    #[inline(always)]\n    /// If the inner repr of FastStr is a Bytes, then it will be deep cloned and returned as a new FastStr.\n    /// Otherwise, it will return a new FastStr with the same repr which has no cost.\n    ///\n    /// This is used to free the original memory of the Bytes.\n    ///\n    /// This is not stable and may be removed or renamed in the future.\n    #[inline]\n    #[doc(hidden)]\n    pub fn deep_clone_bytes(&self) -> Self {\n        Self(self.0.deep_clone_bytes())\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr"
                                }
                            }
                        },
                        "FastStr.deref": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.31",
                            "PkgPath": "faststr",
                            "Name": "FastStr.deref",
                            "File": "lib.rs",
                            "Line": 331,
                            "StartOffset": 10221,
                            "EndOffset": 10288,
                            "Content": "impl Deref for FastStr {\n    type Target = str;\n\n    #[inline]\n    #[inline]\n    fn deref(&self) -> &str {\n        self.as_str()\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr"
                                }
                            }
                        },
                        "FastStr.eq": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.31",
                            "PkgPath": "faststr",
                            "Name": "FastStr.eq",
                            "File": "lib.rs",
                            "Line": 404,
                            "StartOffset": 11539,
                            "EndOffset": 11624,
                            "Content": "impl<'a> PartialEq<&'a String> for FastStr {\n    #[inline]\n    #[inline]\n    fn eq(&self, other: &&'a String) -> bool {\n        self == *other\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr"
                                }
                            }
                        },
                        "FastStr.fmt": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.31",
                            "PkgPath": "faststr",
                            "Name": "FastStr.fmt",
                            "File": "lib.rs",
                            "Line": 439,
                            "StartOffset": 12217,
                            "EndOffset": 12333,
                            "Content": "impl fmt::Debug for FastStr {\n    #[inline]\n    #[inline]\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        fmt::Debug::fmt(self.as_str(), f)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr"
                                }
                            }
                        },
                        "FastStr.hash": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.31",
                            "PkgPath": "faststr",
                            "Name": "FastStr.hash",
                            "File": "lib.rs",
                            "Line": 432,
                            "StartOffset": 12075,
                            "EndOffset": 12179,
                            "Content": "impl hash::Hash for FastStr {\n    #[inline]\n    #[inline]\n    fn hash<H: hash::Hasher>(&self, hasher: &mut H) {\n        self.as_str().hash(hasher)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr"
                                }
                            }
                        },
                        "FastStr.index": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.31",
                            "PkgPath": "faststr",
                            "Name": "FastStr.index",
                            "File": "lib.rs",
                            "Line": 245,
                            "StartOffset": 7633,
                            "EndOffset": 8008,
                            "Content": "impl FastStr {\n    /// Return the `FastStr` as a string slice.\n    #[inline(always)]\n    /// Return a new `FastStr` starting at index `start` and ending at index `end`. `[start..end)`\n    ///\n    /// # Safety\n    ///\n    /// The caller must guarantee that the string between `start` and `end` is valid utf-8.\n    #[inline(always)]\n    pub unsafe fn index(&self, start: usize, end: usize) -> Self {\n        Self(self.0.slice_ref(&self.as_bytes()[start..end]))\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr"
                                }
                            }
                        },
                        "FastStr.into_bytes": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.31",
                            "PkgPath": "faststr",
                            "Name": "FastStr.into_bytes",
                            "File": "lib.rs",
                            "Line": 215,
                            "StartOffset": 6732,
                            "EndOffset": 6889,
                            "Content": "impl FastStr {\n    /// Return the `FastStr` as a string slice.\n    #[inline(always)]\n    /// Consumes and converts the `FastStr` into a `Bytes` object.\n    #[inline(always)]\n    pub fn into_bytes(self) -> Bytes {\n        self.0.into_bytes()\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr"
                                }
                            }
                        },
                        "FastStr.into_string": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.31",
                            "PkgPath": "faststr",
                            "Name": "FastStr.into_string",
                            "File": "lib.rs",
                            "Line": 255,
                            "StartOffset": 8014,
                            "EndOffset": 8362,
                            "Content": "impl FastStr {\n    /// Return the `FastStr` as a string slice.\n    #[inline(always)]\n    /// Consumes and converts the `FastStr` into a `String` at best effort.\n    #[deprecated(\n        since = \"0.2.13\",\n        note = \"This method does not really express the `into` semantic. Use `to_string` instead.\"\n    )]\n    #[inline(always)]\n    pub fn into_string(self) -> String {\n        #[allow(deprecated)]\n        self.0.into_string()\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr"
                                }
                            }
                        },
                        "FastStr.is_empty": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.31",
                            "PkgPath": "faststr",
                            "Name": "FastStr.is_empty",
                            "File": "lib.rs",
                            "Line": 227,
                            "StartOffset": 7015,
                            "EndOffset": 7150,
                            "Content": "impl FastStr {\n    /// Return the `FastStr` as a string slice.\n    #[inline(always)]\n    /// Return `true` if the `FastStr` is empty.\n    #[inline(always)]\n    pub fn is_empty(&self) -> bool {\n        self.0.is_empty()\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr"
                                }
                            }
                        },
                        "FastStr.len": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.31",
                            "PkgPath": "faststr",
                            "Name": "FastStr.len",
                            "File": "lib.rs",
                            "Line": 221,
                            "StartOffset": 6895,
                            "EndOffset": 7009,
                            "Content": "impl FastStr {\n    /// Return the `FastStr` as a string slice.\n    #[inline(always)]\n    /// Return the `FastStr` length.\n    #[inline(always)]\n    pub fn len(&self) -> usize {\n        self.0.len()\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr"
                                }
                            }
                        },
                        "FastStr.partial_cmp": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.31",
                            "PkgPath": "faststr",
                            "Name": "FastStr.partial_cmp",
                            "File": "lib.rs",
                            "Line": 425,
                            "StartOffset": 11927,
                            "EndOffset": 12037,
                            "Content": "impl PartialOrd for FastStr {\n    #[inline]\n    #[inline]\n    fn partial_cmp(&self, other: &FastStr) -> Option<Ordering> {\n        Some(self.cmp(other))\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr"
                                }
                            }
                        },
                        "FastStr.slice_ref": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.31",
                            "PkgPath": "faststr",
                            "Name": "FastStr.slice_ref",
                            "File": "lib.rs",
                            "Line": 233,
                            "StartOffset": 7156,
                            "EndOffset": 7627,
                            "Content": "impl FastStr {\n    /// Return the `FastStr` as a string slice.\n    #[inline(always)]\n    /// Return a new `FastStr` that represents a subset of the current string.\n    ///\n    /// Note: If the subset is small enough, it will be inlined.\n    #[inline(always)]\n    pub fn slice_ref(&self, subset: &str) -> Self {\n        if subset.len() <= INLINE_CAP {\n            // Safety: we have checked the length of subset <= `INLINE_CAP`.\n            return Self(unsafe { Repr::new_inline_impl(subset) });\n        }\n        Self(self.0.slice_ref(subset.as_bytes()))\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr"
                                }
                            }
                        },
                        "FastStr::from_string": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.31",
                            "PkgPath": "faststr",
                            "Name": "FastStr::from_string",
                            "File": "lib.rs",
                            "Line": 92,
                            "StartOffset": 2770,
                            "EndOffset": 2989,
                            "Content": "impl FastStr {\n    /// Create a new `FastStr` from any type `T` that can be converted to a string slice\n    /// (e.g., `String`, `&str`, `Arc<String>`, `Arc<str>`).\n    ///\n    /// For small strings (up to 24 bytes), this avoids heap allocation, and copies on stack.\n    #[inline]\n    /// Create a new `FastStr` from a `String`.\n    #[inline]\n    pub fn from_string(s: String) -> Self {\n        if Self::can_inline(&s) {\n            return Self::new(s);\n        }\n        Self(Repr::from_string(s))\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr"
                                }
                            }
                        },
                        "FastStr::from_vec_u8_unchecked": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.31",
                            "PkgPath": "faststr",
                            "Name": "FastStr::from_vec_u8_unchecked",
                            "File": "lib.rs",
                            "Line": 170,
                            "StartOffset": 5347,
                            "EndOffset": 5693,
                            "Content": "impl FastStr {\n    /// Create a new `FastStr` from any type `T` that can be converted to a string slice\n    /// (e.g., `String`, `&str`, `Arc<String>`, `Arc<str>`).\n    ///\n    /// For small strings (up to 24 bytes), this avoids heap allocation, and copies on stack.\n    #[inline]\n    /// Create a new `FastStr` from a `Vec<u8>`. This is an unsafe method because\n    /// the caller must ensure that the bytes passed to it are valid UTF-8.\n    ///\n    /// # Safety\n    ///\n    /// `v` must be valid UTF-8.\n    #[inline]\n    pub unsafe fn from_vec_u8_unchecked(v: Vec<u8>) -> Self {\n        Self::from_bytes_unchecked(v.into())\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr"
                                }
                            }
                        },
                        "FastStr::new": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.31",
                            "PkgPath": "faststr",
                            "Name": "FastStr::new",
                            "File": "lib.rs",
                            "Line": 30,
                            "StartOffset": 890,
                            "EndOffset": 1261,
                            "Content": "impl FastStr {\n    /// Create a new `FastStr` from any type `T` that can be converted to a string slice\n    /// (e.g., `String`, `&str`, `Arc<String>`, `Arc<str>`).\n    ///\n    /// For small strings (up to 24 bytes), this avoids heap allocation, and copies on stack.\n    #[inline]\n    /// Create a new `FastStr` from any type `T` that can be converted to a string slice\n    /// (e.g., `String`, `&str`, `Arc<String>`, `Arc<str>`).\n    ///\n    /// For small strings (up to 24 bytes), this avoids heap allocation, and copies on stack.\n    #[inline]\n    pub fn new<T>(text: T) -> Self\n    where\n        T: AsRef<str>,\n    {\n        Self(Repr::new(text))\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr"
                                }
                            }
                        },
                        "FastStr::new_u8_slice_unchecked": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.31",
                            "PkgPath": "faststr",
                            "Name": "FastStr::new_u8_slice_unchecked",
                            "File": "lib.rs",
                            "Line": 65,
                            "StartOffset": 2025,
                            "EndOffset": 2413,
                            "Content": "impl FastStr {\n    /// Create a new `FastStr` from any type `T` that can be converted to a string slice\n    /// (e.g., `String`, `&str`, `Arc<String>`, `Arc<str>`).\n    ///\n    /// For small strings (up to 24 bytes), this avoids heap allocation, and copies on stack.\n    #[inline]\n    /// Create a new `FastStr` from a byte slice `v`. This is an unsafe method because\n    /// the caller must ensure that the bytes passed to it are valid UTF-8.\n    ///\n    /// # Safety\n    ///\n    /// `v` must be valid UTF-8.\n    #[inline]\n    pub unsafe fn new_u8_slice_unchecked(v: &[u8]) -> Self {\n        let s = unsafe { core::str::from_utf8_unchecked(v) };\n        Self::new(s)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr"
                                }
                            }
                        },
                        "Repr.as_ref": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.31",
                            "PkgPath": "faststr",
                            "Name": "Repr.as_ref",
                            "File": "lib.rs",
                            "Line": 786,
                            "StartOffset": 22288,
                            "EndOffset": 22674,
                            "Content": "impl AsRef<[u8]> for Repr {\n    #[inline]\n    #[inline]\n    fn as_ref(&self) -> &[u8] {\n        match self {\n            Self::Empty => &[],\n            Self::Bytes(bytes) => bytes.as_ref(),\n            Self::ArcStr(arc_str) => arc_str.as_bytes(),\n            Self::ArcString(arc_string) => arc_string.as_bytes(),\n            Self::StaticStr(s) => s.as_bytes(),\n            Self::Inline { len, buf } => &buf[..*len],\n        }\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "Repr"
                                }
                            }
                        },
                        "Repr.as_str": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.31",
                            "PkgPath": "faststr",
                            "Name": "Repr.as_str",
                            "File": "lib.rs",
                            "Line": 674,
                            "StartOffset": 18135,
                            "EndOffset": 18646,
                            "Content": "impl Repr {\n    #[inline]\n    #[inline]\n    fn as_str(&self) -> &str {\n        match self {\n            Self::Empty => \"\",\n            // Safety: this is guaranteed by the user when creating the `FastStr`.\n            Self::Bytes(bytes) => unsafe { core::str::from_utf8_unchecked(bytes) },\n            Self::ArcStr(arc_str) => arc_str,\n            Self::ArcString(arc_string) => arc_string,\n            Self::StaticStr(s) => s,\n            Self::Inline { len, buf } => unsafe { core::str::from_utf8_unchecked(&buf[..*len]) },\n        }\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "Repr"
                                }
                            }
                        },
                        "Repr.deep_clone_bytes": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.31",
                            "PkgPath": "faststr",
                            "Name": "Repr.deep_clone_bytes",
                            "File": "lib.rs",
                            "Line": 718,
                            "StartOffset": 19810,
                            "EndOffset": 20450,
                            "Content": "impl Repr {\n    #[inline]\n    #[inline]\n    fn deep_clone_bytes(&self) -> Self {\n        match self {\n            Self::Empty => Self::Empty,\n            // Safety: this is guaranteed by the user when creating the `FastStr`.\n            Self::Bytes(bytes) => unsafe { Self::new(core::str::from_utf8_unchecked(bytes)) },\n            Self::ArcStr(arc_str) => Self::ArcStr(Arc::clone(arc_str)),\n            Self::ArcString(arc_string) => Self::ArcString(Arc::clone(arc_string)),\n            Self::StaticStr(s) => Self::StaticStr(s),\n            Self::Inline { len, buf } => Self::Inline {\n                len: *len,\n                buf: *buf,\n            },\n        }\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "Repr"
                                }
                            }
                        },
                        "Repr.into_bytes": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.31",
                            "PkgPath": "faststr",
                            "Name": "Repr.into_bytes",
                            "File": "lib.rs",
                            "Line": 704,
                            "StartOffset": 19266,
                            "EndOffset": 19804,
                            "Content": "impl Repr {\n    #[inline]\n    #[inline]\n    fn into_bytes(self) -> Bytes {\n        match self {\n            Self::Empty => Bytes::new(),\n            Self::Bytes(bytes) => bytes,\n            Self::ArcStr(arc_str) => Bytes::from(arc_str.as_bytes().to_vec()),\n            Self::ArcString(arc_string) => {\n                Bytes::from(Arc::try_unwrap(arc_string).unwrap_or_else(|arc| (*arc).clone()))\n            }\n            Self::StaticStr(s) => Bytes::from_static(s.as_bytes()),\n            Self::Inline { len, buf } => Bytes::from(buf[..len].to_vec()),\n        }\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "Repr"
                                }
                            }
                        },
                        "Repr.into_string": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.31",
                            "PkgPath": "faststr",
                            "Name": "Repr.into_string",
                            "File": "lib.rs",
                            "Line": 687,
                            "StartOffset": 18652,
                            "EndOffset": 19260,
                            "Content": "impl Repr {\n    #[inline]\n    #[inline]\n    #[deprecated]\n    fn into_string(self) -> String {\n        match self {\n            Self::Empty => String::new(),\n            Self::Bytes(bytes) => unsafe { String::from_utf8_unchecked(bytes.into()) },\n            Self::ArcStr(arc_str) => arc_str.to_string(),\n            Self::ArcString(arc_string) => {\n                Arc::try_unwrap(arc_string).unwrap_or_else(|arc| (*arc).clone())\n            }\n            Self::StaticStr(s) => s.to_string(),\n            Self::Inline { len, buf } => unsafe {\n                String::from_utf8_unchecked(buf[..len].to_vec())\n            },\n        }\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "Repr"
                                }
                            }
                        },
                        "Repr.is_empty": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.31",
                            "PkgPath": "faststr",
                            "Name": "Repr.is_empty",
                            "File": "lib.rs",
                            "Line": 662,
                            "StartOffset": 17743,
                            "EndOffset": 18129,
                            "Content": "impl Repr {\n    #[inline]\n    #[inline]\n    fn is_empty(&self) -> bool {\n        match self {\n            Self::Empty => true,\n            Self::Bytes(bytes) => bytes.is_empty(),\n            Self::ArcStr(arc_str) => arc_str.is_empty(),\n            Self::ArcString(arc_string) => arc_string.is_empty(),\n            Self::StaticStr(s) => s.is_empty(),\n            Self::Inline { len, .. } => *len == 0,\n        }\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "Repr"
                                }
                            }
                        },
                        "Repr.len": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.31",
                            "PkgPath": "faststr",
                            "Name": "Repr.len",
                            "File": "lib.rs",
                            "Line": 650,
                            "StartOffset": 17383,
                            "EndOffset": 17737,
                            "Content": "impl Repr {\n    #[inline]\n    #[inline]\n    fn len(&self) -> usize {\n        match self {\n            Self::Empty => 0,\n            Self::Bytes(bytes) => bytes.len(),\n            Self::ArcStr(arc_str) => arc_str.len(),\n            Self::ArcString(arc_string) => arc_string.len(),\n            Self::StaticStr(s) => s.len(),\n            Self::Inline { len, .. } => *len,\n        }\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "Repr"
                                }
                            }
                        },
                        "Repr.slice_ref": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.31",
                            "PkgPath": "faststr",
                            "Name": "Repr.slice_ref",
                            "File": "lib.rs",
                            "Line": 734,
                            "StartOffset": 20456,
                            "EndOffset": 22252,
                            "Content": "impl Repr {\n    #[inline]\n    #[inline]\n    fn slice_ref(&self, subset: &[u8]) -> Self {\n        if subset.is_empty() {\n            return Self::Empty;\n        }\n        let bytes_p = self.as_ref().as_ptr() as usize;\n        let bytes_len = self.len();\n\n        let sub_p = subset.as_ptr() as usize;\n        let sub_len = subset.len();\n\n        assert!(\n            sub_p >= bytes_p,\n            \"subset pointer ({:p}) is smaller than self pointer ({:p})\",\n            subset.as_ptr(),\n            self.as_ref().as_ptr(),\n        );\n        assert!(\n            sub_p + sub_len <= bytes_p + bytes_len,\n            \"subset is out of bounds: self = ({:p}, {}), subset = ({:p}, {})\",\n            self.as_ref().as_ptr(),\n            bytes_len,\n            subset.as_ptr(),\n            sub_len,\n        );\n\n        let sub_offset = sub_p - bytes_p;\n        match self {\n            Repr::Empty => panic!(\"invalid slice ref, self is empty but subset is not\"),\n            Repr::Bytes(b) => Self::Bytes(b.slice_ref(subset)),\n            Repr::ArcStr(s) => Self::Bytes(Bytes::copy_from_slice(\n                s[sub_offset..sub_offset + sub_len].as_bytes(),\n            )),\n            Repr::ArcString(s) => Self::Bytes(Bytes::copy_from_slice(\n                s[sub_offset..sub_offset + sub_len].as_bytes(),\n            )),\n            Repr::StaticStr(s) => Self::StaticStr(unsafe {\n                core::str::from_utf8_unchecked(&s.as_bytes()[sub_offset..sub_offset + sub_len])\n            }),\n            Repr::Inline { len: _, buf } => Self::Inline {\n                len: sub_len,\n                buf: {\n                    let mut new_buf = [0; INLINE_CAP];\n                    new_buf[..sub_len].copy_from_slice(&buf[sub_offset..sub_offset + sub_len]);\n                    new_buf\n                },\n            },\n        }\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "Repr"
                                }
                            }
                        },
                        "build_from_str_iter": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.31",
                            "PkgPath": "faststr",
                            "Name": "build_from_str_iter",
                            "File": "lib.rs",
                            "Line": 460,
                            "StartOffset": 12709,
                            "EndOffset": 13436,
                            "Content": "fn build_from_str_iter<T>(mut iter: impl Iterator<Item = T>) -> FastStr\nwhere\n    T: AsRef<str>,\n    String: iter::Extend<T>,\n{\n    let mut len = 0;\n    let mut buf = [0u8; INLINE_CAP];\n    while let Some(slice) = iter.next() {\n        let slice = slice.as_ref();\n        let size = slice.len();\n        if size + len > INLINE_CAP {\n            let mut s = String::with_capacity(size + len);\n            s.push_str(unsafe { core::str::from_utf8_unchecked(&buf[..len]) });\n            s.push_str(slice);\n            s.extend(iter);\n            return FastStr(Repr::Bytes(Bytes::from(s)));\n        }\n        buf[len..][..size].copy_from_slice(slice.as_bytes());\n        len += size;\n    }\n    FastStr(Repr::Inline { len, buf })\n}"
                        }
                    },
                    "Types": {
                        "FastStr": {
                            "Exported": false,
                            "TypeKind": "struct",
                            "ModPath": "faststr@0.2.31",
                            "PkgPath": "faststr",
                            "Name": "FastStr",
                            "File": "lib.rs",
                            "Line": 18,
                            "StartOffset": 412,
                            "EndOffset": 722,
                            "Content": "/// `FastStr` is a string type that try to avoid the cost of clone.\n///\n/// **Note:** The memory size of `FastStr` is not `24`, so switching from [`String`] or [`SmolStr`](https://docs.rs/smol_str/latest/smol_str/struct.SmolStr.html) to `FastStr` may not be harmless.\n#[derive(Clone)]\npub struct FastStr(Repr);",
                            "Methods": {
                                "as_ref": {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr.as_ref"
                                },
                                "as_str": {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr.as_str"
                                },
                                "borrow": {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr.borrow"
                                },
                                "cmp": {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr.cmp"
                                },
                                "deep_clone_bytes": {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr.deep_clone_bytes"
                                },
                                "deref": {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr.deref"
                                },
                                "eq": {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr.eq"
                                },
                                "fmt": {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr.fmt"
                                },
                                "hash": {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr.hash"
                                },
                                "index": {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr.index"
                                },
                                "into_bytes": {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr.into_bytes"
                                },
                                "into_string": {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr.into_string"
                                },
                                "is_empty": {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr.is_empty"
                                },
                                "len": {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr.len"
                                },
                                "partial_cmp": {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr.partial_cmp"
                                },
                                "slice_ref": {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr.slice_ref"
                                }
                            }
                        },
                        "Repr": {
                            "Exported": false,
                            "TypeKind": "enum",
                            "ModPath": "faststr@0.2.31",
                            "PkgPath": "faststr",
                            "Name": "Repr",
                            "File": "lib.rs",
                            "Line": 571,
                            "StartOffset": 15351,
                            "EndOffset": 15539,
                            "Content": "#[derive(Clone)]\nenum Repr {\n    Empty,\n    Bytes(Bytes),\n    ArcStr(Arc<str>),\n    ArcString(Arc<String>),\n    StaticStr(&'static str),\n    Inline { len: usize, buf: [u8; INLINE_CAP] },\n}",
                            "Methods": {
                                "as_ref": {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "Repr.as_ref"
                                },
                                "as_str": {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "Repr.as_str"
                                },
                                "deep_clone_bytes": {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "Repr.deep_clone_bytes"
                                },
                                "into_bytes": {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "Repr.into_bytes"
                                },
                                "into_string": {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "Repr.into_string"
                                },
                                "is_empty": {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "Repr.is_empty"
                                },
                                "len": {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "Repr.len"
                                },
                                "slice_ref": {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "Repr.slice_ref"
                                }
                            }
                        }
                    },
                    "Vars": {
                        "INLINE_CAP": {
                            "IsExported": false,
                            "IsConst": true,
                            "IsPointer": false,
                            "ModPath": "faststr@0.2.31",
                            "PkgPath": "faststr",
                            "Name": "INLINE_CAP",
                            "File": "lib.rs",
                            "Line": 569,
                            "StartOffset": 15320,
                            "EndOffset": 15349,
                            "Content": "const INLINE_CAP: usize = 24;"
                        }
                    }
                }
            },
            "Dependencies": {},
            "Files": {
                "lib.rs": {
                    "Path": "lib.rs"
                }
            }
        },
        "metainfo": {
            "Language": "rust",
            "Version": "",
            "Name": "metainfo",
            "Dir": "src",
            "Packages": {
                "metainfo": {
                    "IsMain": false,
                    "IsTest": false,
                    "PkgPath": "metainfo",
                    "Functions": {
                        "Backward<MetaInfo>.get_all_backward_downstreams": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "Backward<MetaInfo>.get_all_backward_downstreams",
                            "File": "src/lib.rs",
                            "Line": 541,
                            "StartOffset": 16325,
                            "EndOffset": 16539,
                            "Content": "impl backward::Backward for MetaInfo {\n    get_impl!(backward_transient, backward, transient);\n    get_impl!(backward_downstream, backward, stale);\n\n    set_impl!(backward_transient, backward, transient);\n    set_impl!(backward_downstream, backward, stale);\n\n    del_impl!(backward_transient, backward, transient);\n    del_impl!(backward_downstream, backward, stale);\n\n    fn get_all_backward_downstreams(&self) -> Option<&AHashMap<FastStr, FastStr>> {\n        match self.backward_node.as_ref() {\n            Some(node) => node.get_all_stales(),\n            None => None,\n        }\n    }\n}",
                            "Signature": "fn get_all_backward_downstreams(&self) -> Option<&AHashMap<FastStr, FastStr>> {\n    ",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "Results": [
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap",
                                    "File": "src/lib.rs",
                                    "Line": 541,
                                    "StartOffset": 16375,
                                    "EndOffset": 16383
                                },
                                {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/lib.rs",
                                    "Line": 541,
                                    "StartOffset": 16384,
                                    "EndOffset": 16391
                                }
                            ],
                            "FunctionCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::kv",
                                    "Name": "get_all_impl",
                                    "File": "src/lib.rs",
                                    "Line": 543,
                                    "StartOffset": 16480,
                                    "EndOffset": 16494
                                }
                            ]
                        },
                        "Backward<MetaInfo>.get_all_backward_transients": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "Backward<MetaInfo>.get_all_backward_transients",
                            "File": "src/lib.rs",
                            "Line": 534,
                            "StartOffset": 16102,
                            "EndOffset": 16319,
                            "Content": "impl backward::Backward for MetaInfo {\n    get_impl!(backward_transient, backward, transient);\n    get_impl!(backward_downstream, backward, stale);\n\n    set_impl!(backward_transient, backward, transient);\n    set_impl!(backward_downstream, backward, stale);\n\n    del_impl!(backward_transient, backward, transient);\n    del_impl!(backward_downstream, backward, stale);\n\n    fn get_all_backward_transients(&self) -> Option<&AHashMap<FastStr, FastStr>> {\n        match self.backward_node.as_ref() {\n            Some(node) => node.get_all_transients(),\n            None => None,\n        }\n    }\n}",
                            "Signature": "fn get_all_backward_transients(&self) -> Option<&AHashMap<FastStr, FastStr>> {\n    ",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "Results": [
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap",
                                    "File": "src/lib.rs",
                                    "Line": 534,
                                    "StartOffset": 16151,
                                    "EndOffset": 16159
                                },
                                {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/lib.rs",
                                    "Line": 534,
                                    "StartOffset": 16160,
                                    "EndOffset": 16167
                                }
                            ],
                            "FunctionCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::kv",
                                    "Name": "get_all_impl",
                                    "File": "src/lib.rs",
                                    "Line": 536,
                                    "StartOffset": 16256,
                                    "EndOffset": 16274
                                }
                            ]
                        },
                        "Backward<MetaInfo>.get_all_backward_transients_with_http_prefix": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "Backward<MetaInfo>.get_all_backward_transients_with_http_prefix",
                            "File": "src/lib.rs",
                            "Line": 552,
                            "StartOffset": 16717,
                            "EndOffset": 16885,
                            "Content": "impl backward::Backward for MetaInfo {\n    get_impl!(backward_transient, backward, transient);\n    get_impl!(backward_downstream, backward, stale);\n\n    set_impl!(backward_transient, backward, transient);\n    set_impl!(backward_downstream, backward, stale);\n\n    del_impl!(backward_transient, backward, transient);\n    del_impl!(backward_downstream, backward, stale);\n\n    fn get_all_backward_transients_with_http_prefix(&self) -> Option<AHashMap<FastStr, FastStr>> {\n        self.get_all_backword_transients_with_prefix(HttpConverter)\n    }\n}",
                            "Signature": "fn get_all_backward_transients_with_http_prefix(&self) -> Option<AHashMap<FastStr, FastStr>> {\n    ",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "Results": [
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap",
                                    "File": "src/lib.rs",
                                    "Line": 552,
                                    "StartOffset": 16782,
                                    "EndOffset": 16790
                                },
                                {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/lib.rs",
                                    "Line": 552,
                                    "StartOffset": 16791,
                                    "EndOffset": 16798
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo.get_all_backword_transients_with_prefix",
                                    "File": "src/lib.rs",
                                    "Line": 553,
                                    "StartOffset": 16825,
                                    "EndOffset": 16864
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter",
                                    "File": "src/lib.rs",
                                    "Line": 553,
                                    "StartOffset": 16865,
                                    "EndOffset": 16878
                                }
                            ]
                        },
                        "Backward<MetaInfo>.get_all_backward_transients_with_rpc_prefix": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "Backward<MetaInfo>.get_all_backward_transients_with_rpc_prefix",
                            "File": "src/lib.rs",
                            "Line": 548,
                            "StartOffset": 16545,
                            "EndOffset": 16711,
                            "Content": "impl backward::Backward for MetaInfo {\n    get_impl!(backward_transient, backward, transient);\n    get_impl!(backward_downstream, backward, stale);\n\n    set_impl!(backward_transient, backward, transient);\n    set_impl!(backward_downstream, backward, stale);\n\n    del_impl!(backward_transient, backward, transient);\n    del_impl!(backward_downstream, backward, stale);\n\n    fn get_all_backward_transients_with_rpc_prefix(&self) -> Option<AHashMap<FastStr, FastStr>> {\n        self.get_all_backword_transients_with_prefix(RpcConverter)\n    }\n}",
                            "Signature": "fn get_all_backward_transients_with_rpc_prefix(&self) -> Option<AHashMap<FastStr, FastStr>> {\n    ",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "Results": [
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap",
                                    "File": "src/lib.rs",
                                    "Line": 548,
                                    "StartOffset": 16609,
                                    "EndOffset": 16617
                                },
                                {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/lib.rs",
                                    "Line": 548,
                                    "StartOffset": 16618,
                                    "EndOffset": 16625
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo.get_all_backword_transients_with_prefix",
                                    "File": "src/lib.rs",
                                    "Line": 549,
                                    "StartOffset": 16652,
                                    "EndOffset": 16691
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "RpcConverter",
                                    "File": "src/lib.rs",
                                    "Line": 549,
                                    "StartOffset": 16692,
                                    "EndOffset": 16704
                                }
                            ]
                        },
                        "Backward<MetaInfo>.iter_backward_transients_with_http_prefix": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "Backward<MetaInfo>.iter_backward_transients_with_http_prefix",
                            "File": "src/lib.rs",
                            "Line": 562,
                            "StartOffset": 17083,
                            "EndOffset": 17271,
                            "Content": "impl backward::Backward for MetaInfo {\n    get_impl!(backward_transient, backward, transient);\n    get_impl!(backward_downstream, backward, stale);\n\n    set_impl!(backward_transient, backward, transient);\n    set_impl!(backward_downstream, backward, stale);\n\n    del_impl!(backward_transient, backward, transient);\n    del_impl!(backward_downstream, backward, stale);\n\n    fn iter_backward_transients_with_http_prefix(\n        &self,\n    ) -> impl Iterator<Item = (FastStr, &FastStr)> {\n        self.iter_all_backword_transients_with_prefix(HttpConverter)\n    }\n}",
                            "Signature": "fn iter_backward_transients_with_http_prefix(\n        &self,\n    ) -> impl Iterator<Item = (FastStr, &FastStr)> {\n    ",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "Results": [
                                {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/lib.rs",
                                    "Line": 564,
                                    "StartOffset": 17175,
                                    "EndOffset": 17182
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo.iter_all_backword_transients_with_prefix",
                                    "File": "src/lib.rs",
                                    "Line": 565,
                                    "StartOffset": 17210,
                                    "EndOffset": 17250
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter",
                                    "File": "src/lib.rs",
                                    "Line": 565,
                                    "StartOffset": 17251,
                                    "EndOffset": 17264
                                }
                            ]
                        },
                        "Backward<MetaInfo>.iter_backward_transients_with_rpc_prefix": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "Backward<MetaInfo>.iter_backward_transients_with_rpc_prefix",
                            "File": "src/lib.rs",
                            "Line": 556,
                            "StartOffset": 16891,
                            "EndOffset": 17077,
                            "Content": "impl backward::Backward for MetaInfo {\n    get_impl!(backward_transient, backward, transient);\n    get_impl!(backward_downstream, backward, stale);\n\n    set_impl!(backward_transient, backward, transient);\n    set_impl!(backward_downstream, backward, stale);\n\n    del_impl!(backward_transient, backward, transient);\n    del_impl!(backward_downstream, backward, stale);\n\n    fn iter_backward_transients_with_rpc_prefix(\n        &self,\n    ) -> impl Iterator<Item = (FastStr, &FastStr)> {\n        self.iter_all_backword_transients_with_prefix(RpcConverter)\n    }\n}",
                            "Signature": "fn iter_backward_transients_with_rpc_prefix(\n        &self,\n    ) -> impl Iterator<Item = (FastStr, &FastStr)> {\n    ",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "Results": [
                                {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/lib.rs",
                                    "Line": 558,
                                    "StartOffset": 16982,
                                    "EndOffset": 16989
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo.iter_all_backword_transients_with_prefix",
                                    "File": "src/lib.rs",
                                    "Line": 559,
                                    "StartOffset": 17017,
                                    "EndOffset": 17057
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "RpcConverter",
                                    "File": "src/lib.rs",
                                    "Line": 559,
                                    "StartOffset": 17058,
                                    "EndOffset": 17070
                                }
                            ]
                        },
                        "Backward<MetaInfo>.strip_http_prefix_and_set_backward_downstream": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "Backward<MetaInfo>.strip_http_prefix_and_set_backward_downstream",
                            "File": "src/lib.rs",
                            "Line": 579,
                            "StartOffset": 17597,
                            "EndOffset": 17913,
                            "Content": "impl backward::Backward for MetaInfo {\n    get_impl!(backward_transient, backward, transient);\n    get_impl!(backward_downstream, backward, stale);\n\n    set_impl!(backward_transient, backward, transient);\n    set_impl!(backward_downstream, backward, stale);\n\n    del_impl!(backward_transient, backward, transient);\n    del_impl!(backward_downstream, backward, stale);\n\n    fn strip_http_prefix_and_set_backward_downstream<K: AsRef<str>, V: Into<FastStr>>(\n        &mut self,\n        key: K,\n        value: V,\n    ) {\n        let key = key.as_ref();\n        if let Some(key) = HttpConverter.remove_backward_prefix(key) {\n            self.set_backward_downstream(key, value);\n        }\n    }\n}",
                            "Signature": "fn strip_http_prefix_and_set_backward_downstream<K: AsRef<str>, V: Into<FastStr>>(\n     ",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "FunctionCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "set_impl",
                                    "File": "src/lib.rs",
                                    "Line": 586,
                                    "StartOffset": 17861,
                                    "EndOffset": 17884
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "Converter<HttpConverter>.remove_backward_prefix",
                                    "File": "src/lib.rs",
                                    "Line": 585,
                                    "StartOffset": 17814,
                                    "EndOffset": 17836
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/lib.rs",
                                    "Line": 579,
                                    "StartOffset": 17669,
                                    "EndOffset": 17676
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter",
                                    "File": "src/lib.rs",
                                    "Line": 585,
                                    "StartOffset": 17800,
                                    "EndOffset": 17813
                                }
                            ]
                        },
                        "Backward<MetaInfo>.strip_rpc_prefix_and_set_backward_downstream": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "Backward<MetaInfo>.strip_rpc_prefix_and_set_backward_downstream",
                            "File": "src/lib.rs",
                            "Line": 568,
                            "StartOffset": 17277,
                            "EndOffset": 17591,
                            "Content": "impl backward::Backward for MetaInfo {\n    get_impl!(backward_transient, backward, transient);\n    get_impl!(backward_downstream, backward, stale);\n\n    set_impl!(backward_transient, backward, transient);\n    set_impl!(backward_downstream, backward, stale);\n\n    del_impl!(backward_transient, backward, transient);\n    del_impl!(backward_downstream, backward, stale);\n\n    fn strip_rpc_prefix_and_set_backward_downstream<K: AsRef<str>, V: Into<FastStr>>(\n        &mut self,\n        key: K,\n        value: V,\n    ) {\n        let key = key.as_ref();\n        if let Some(key) = RpcConverter.remove_backward_prefix(key) {\n            self.set_backward_downstream(key, value);\n        }\n    }\n}",
                            "Signature": "fn strip_rpc_prefix_and_set_backward_downstream<K: AsRef<str>, V: Into<FastStr>>(\n     ",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "FunctionCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "set_impl",
                                    "File": "src/lib.rs",
                                    "Line": 575,
                                    "StartOffset": 17539,
                                    "EndOffset": 17562
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "Converter<RpcConverter>.remove_backward_prefix",
                                    "File": "src/lib.rs",
                                    "Line": 574,
                                    "StartOffset": 17492,
                                    "EndOffset": 17514
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/lib.rs",
                                    "Line": 568,
                                    "StartOffset": 17348,
                                    "EndOffset": 17355
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "RpcConverter",
                                    "File": "src/lib.rs",
                                    "Line": 574,
                                    "StartOffset": 17479,
                                    "EndOffset": 17491
                                }
                            ]
                        },
                        "Forward<MetaInfo>.get_all_persistents": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "Forward<MetaInfo>.get_all_persistents",
                            "File": "src/lib.rs",
                            "Line": 423,
                            "StartOffset": 12913,
                            "EndOffset": 13136,
                            "Content": "impl forward::Forward for MetaInfo {\n    get_impl!(persistent, forward, persistent);\n    get_impl!(transient, forward, transient);\n    get_impl!(upstream, forward, stale);\n\n    set_impl!(persistent, forward, persistent);\n    set_impl!(transient, forward, transient);\n    set_impl!(upstream, forward, stale);\n\n    del_impl!(persistent, forward, persistent);\n    del_impl!(transient, forward, transient);\n    del_impl!(upstream, forward, stale);\n\n    #[inline]\n    #[inline]\n    fn get_all_persistents(&self) -> Option<&AHashMap<FastStr, FastStr>> {\n        match self.forward_node.as_ref() {\n            Some(node) => node.get_all_persistents(),\n            None => None,\n        }\n    }\n}",
                            "Signature": "#[inline]\n    fn get_all_persistents(&self) -> Option<&AHashMap<FastStr, FastStr>> {\n    ",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "Results": [
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap",
                                    "File": "src/lib.rs",
                                    "Line": 424,
                                    "StartOffset": 12968,
                                    "EndOffset": 12976
                                },
                                {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/lib.rs",
                                    "Line": 424,
                                    "StartOffset": 12977,
                                    "EndOffset": 12984
                                }
                            ],
                            "FunctionCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::kv",
                                    "Name": "get_all_impl",
                                    "File": "src/lib.rs",
                                    "Line": 426,
                                    "StartOffset": 13072,
                                    "EndOffset": 13091
                                }
                            ]
                        },
                        "Forward<MetaInfo>.get_all_persistents_and_transients_with_http_prefix": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "Forward<MetaInfo>.get_all_persistents_and_transients_with_http_prefix",
                            "File": "src/lib.rs",
                            "Line": 454,
                            "StartOffset": 13806,
                            "EndOffset": 14017,
                            "Content": "impl forward::Forward for MetaInfo {\n    get_impl!(persistent, forward, persistent);\n    get_impl!(transient, forward, transient);\n    get_impl!(upstream, forward, stale);\n\n    set_impl!(persistent, forward, persistent);\n    set_impl!(transient, forward, transient);\n    set_impl!(upstream, forward, stale);\n\n    del_impl!(persistent, forward, persistent);\n    del_impl!(transient, forward, transient);\n    del_impl!(upstream, forward, stale);\n\n    #[inline]\n    #[inline]\n    fn get_all_persistents_and_transients_with_http_prefix(\n        &self,\n    ) -> Option<AHashMap<FastStr, FastStr>> {\n        self.get_all_persistents_and_transients_with_prefix(HttpConverter)\n    }\n}",
                            "Signature": "#[inline]\n    fn get_all_persistents_and_transients_with_http_prefix(\n        &self,\n    ) -> Option<AHashMap<FastStr, FastStr>> {\n    ",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "Results": [
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap",
                                    "File": "src/lib.rs",
                                    "Line": 457,
                                    "StartOffset": 13907,
                                    "EndOffset": 13915
                                },
                                {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/lib.rs",
                                    "Line": 457,
                                    "StartOffset": 13916,
                                    "EndOffset": 13923
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo.get_all_persistents_and_transients_with_prefix",
                                    "File": "src/lib.rs",
                                    "Line": 458,
                                    "StartOffset": 13950,
                                    "EndOffset": 13996
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter",
                                    "File": "src/lib.rs",
                                    "Line": 458,
                                    "StartOffset": 13997,
                                    "EndOffset": 14010
                                }
                            ]
                        },
                        "Forward<MetaInfo>.get_all_persistents_and_transients_with_rpc_prefix": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "Forward<MetaInfo>.get_all_persistents_and_transients_with_rpc_prefix",
                            "File": "src/lib.rs",
                            "Line": 447,
                            "StartOffset": 13591,
                            "EndOffset": 13800,
                            "Content": "impl forward::Forward for MetaInfo {\n    get_impl!(persistent, forward, persistent);\n    get_impl!(transient, forward, transient);\n    get_impl!(upstream, forward, stale);\n\n    set_impl!(persistent, forward, persistent);\n    set_impl!(transient, forward, transient);\n    set_impl!(upstream, forward, stale);\n\n    del_impl!(persistent, forward, persistent);\n    del_impl!(transient, forward, transient);\n    del_impl!(upstream, forward, stale);\n\n    #[inline]\n    #[inline]\n    fn get_all_persistents_and_transients_with_rpc_prefix(\n        &self,\n    ) -> Option<AHashMap<FastStr, FastStr>> {\n        self.get_all_persistents_and_transients_with_prefix(RpcConverter)\n    }\n}",
                            "Signature": "#[inline]\n    fn get_all_persistents_and_transients_with_rpc_prefix(\n        &self,\n    ) -> Option<AHashMap<FastStr, FastStr>> {\n    ",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "Results": [
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap",
                                    "File": "src/lib.rs",
                                    "Line": 450,
                                    "StartOffset": 13691,
                                    "EndOffset": 13699
                                },
                                {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/lib.rs",
                                    "Line": 450,
                                    "StartOffset": 13700,
                                    "EndOffset": 13707
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo.get_all_persistents_and_transients_with_prefix",
                                    "File": "src/lib.rs",
                                    "Line": 451,
                                    "StartOffset": 13734,
                                    "EndOffset": 13780
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "RpcConverter",
                                    "File": "src/lib.rs",
                                    "Line": 451,
                                    "StartOffset": 13781,
                                    "EndOffset": 13793
                                }
                            ]
                        },
                        "Forward<MetaInfo>.get_all_transients": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "Forward<MetaInfo>.get_all_transients",
                            "File": "src/lib.rs",
                            "Line": 431,
                            "StartOffset": 13142,
                            "EndOffset": 13363,
                            "Content": "impl forward::Forward for MetaInfo {\n    get_impl!(persistent, forward, persistent);\n    get_impl!(transient, forward, transient);\n    get_impl!(upstream, forward, stale);\n\n    set_impl!(persistent, forward, persistent);\n    set_impl!(transient, forward, transient);\n    set_impl!(upstream, forward, stale);\n\n    del_impl!(persistent, forward, persistent);\n    del_impl!(transient, forward, transient);\n    del_impl!(upstream, forward, stale);\n\n    #[inline]\n    #[inline]\n    fn get_all_transients(&self) -> Option<&AHashMap<FastStr, FastStr>> {\n        match self.forward_node.as_ref() {\n            Some(node) => node.get_all_transients(),\n            None => None,\n        }\n    }\n}",
                            "Signature": "#[inline]\n    fn get_all_transients(&self) -> Option<&AHashMap<FastStr, FastStr>> {\n    ",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "Results": [
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap",
                                    "File": "src/lib.rs",
                                    "Line": 432,
                                    "StartOffset": 13196,
                                    "EndOffset": 13204
                                },
                                {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/lib.rs",
                                    "Line": 432,
                                    "StartOffset": 13205,
                                    "EndOffset": 13212
                                }
                            ],
                            "FunctionCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::kv",
                                    "Name": "get_all_impl",
                                    "File": "src/lib.rs",
                                    "Line": 434,
                                    "StartOffset": 13300,
                                    "EndOffset": 13318
                                }
                            ]
                        },
                        "Forward<MetaInfo>.get_all_upstreams": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "Forward<MetaInfo>.get_all_upstreams",
                            "File": "src/lib.rs",
                            "Line": 439,
                            "StartOffset": 13369,
                            "EndOffset": 13585,
                            "Content": "impl forward::Forward for MetaInfo {\n    get_impl!(persistent, forward, persistent);\n    get_impl!(transient, forward, transient);\n    get_impl!(upstream, forward, stale);\n\n    set_impl!(persistent, forward, persistent);\n    set_impl!(transient, forward, transient);\n    set_impl!(upstream, forward, stale);\n\n    del_impl!(persistent, forward, persistent);\n    del_impl!(transient, forward, transient);\n    del_impl!(upstream, forward, stale);\n\n    #[inline]\n    #[inline]\n    fn get_all_upstreams(&self) -> Option<&AHashMap<FastStr, FastStr>> {\n        match self.forward_node.as_ref() {\n            Some(node) => node.get_all_stales(),\n            None => None,\n        }\n    }\n}",
                            "Signature": "#[inline]\n    fn get_all_upstreams(&self) -> Option<&AHashMap<FastStr, FastStr>> {\n    ",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "Results": [
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap",
                                    "File": "src/lib.rs",
                                    "Line": 440,
                                    "StartOffset": 13422,
                                    "EndOffset": 13430
                                },
                                {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/lib.rs",
                                    "Line": 440,
                                    "StartOffset": 13431,
                                    "EndOffset": 13438
                                }
                            ],
                            "FunctionCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::kv",
                                    "Name": "get_all_impl",
                                    "File": "src/lib.rs",
                                    "Line": 442,
                                    "StartOffset": 13526,
                                    "EndOffset": 13540
                                }
                            ]
                        },
                        "Forward<MetaInfo>.iter_persistents_and_transients_with_http_prefix": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "Forward<MetaInfo>.iter_persistents_and_transients_with_http_prefix",
                            "File": "src/lib.rs",
                            "Line": 468,
                            "StartOffset": 14243,
                            "EndOffset": 14459,
                            "Content": "impl forward::Forward for MetaInfo {\n    get_impl!(persistent, forward, persistent);\n    get_impl!(transient, forward, transient);\n    get_impl!(upstream, forward, stale);\n\n    set_impl!(persistent, forward, persistent);\n    set_impl!(transient, forward, transient);\n    set_impl!(upstream, forward, stale);\n\n    del_impl!(persistent, forward, persistent);\n    del_impl!(transient, forward, transient);\n    del_impl!(upstream, forward, stale);\n\n    #[inline]\n    #[inline]\n    fn iter_persistents_and_transients_with_http_prefix(\n        &self,\n    ) -> impl Iterator<Item = (FastStr, &FastStr)> {\n        self.iter_all_persistents_and_transients_with_prefix(HttpConverter)\n    }\n}",
                            "Signature": "#[inline]\n    fn iter_persistents_and_transients_with_http_prefix(\n        &self,\n    ) -> impl Iterator<Item = (FastStr, &FastStr)> {\n    ",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "Results": [
                                {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/lib.rs",
                                    "Line": 471,
                                    "StartOffset": 14356,
                                    "EndOffset": 14363
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo.iter_all_persistents_and_transients_with_prefix",
                                    "File": "src/lib.rs",
                                    "Line": 472,
                                    "StartOffset": 14391,
                                    "EndOffset": 14438
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter",
                                    "File": "src/lib.rs",
                                    "Line": 472,
                                    "StartOffset": 14439,
                                    "EndOffset": 14452
                                }
                            ]
                        },
                        "Forward<MetaInfo>.iter_persistents_and_transients_with_rpc_prefix": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "Forward<MetaInfo>.iter_persistents_and_transients_with_rpc_prefix",
                            "File": "src/lib.rs",
                            "Line": 461,
                            "StartOffset": 14023,
                            "EndOffset": 14237,
                            "Content": "impl forward::Forward for MetaInfo {\n    get_impl!(persistent, forward, persistent);\n    get_impl!(transient, forward, transient);\n    get_impl!(upstream, forward, stale);\n\n    set_impl!(persistent, forward, persistent);\n    set_impl!(transient, forward, transient);\n    set_impl!(upstream, forward, stale);\n\n    del_impl!(persistent, forward, persistent);\n    del_impl!(transient, forward, transient);\n    del_impl!(upstream, forward, stale);\n\n    #[inline]\n    #[inline]\n    fn iter_persistents_and_transients_with_rpc_prefix(\n        &self,\n    ) -> impl Iterator<Item = (FastStr, &FastStr)> {\n        self.iter_all_persistents_and_transients_with_prefix(RpcConverter)\n    }\n}",
                            "Signature": "#[inline]\n    fn iter_persistents_and_transients_with_rpc_prefix(\n        &self,\n    ) -> impl Iterator<Item = (FastStr, &FastStr)> {\n    ",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "Results": [
                                {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/lib.rs",
                                    "Line": 464,
                                    "StartOffset": 14135,
                                    "EndOffset": 14142
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo.iter_all_persistents_and_transients_with_prefix",
                                    "File": "src/lib.rs",
                                    "Line": 465,
                                    "StartOffset": 14170,
                                    "EndOffset": 14217
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "RpcConverter",
                                    "File": "src/lib.rs",
                                    "Line": 465,
                                    "StartOffset": 14218,
                                    "EndOffset": 14230
                                }
                            ]
                        },
                        "Forward<MetaInfo>.strip_http_prefix_and_set_persistent": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "Forward<MetaInfo>.strip_http_prefix_and_set_persistent",
                            "File": "src/lib.rs",
                            "Line": 499,
                            "StartOffset": 15096,
                            "EndOffset": 15410,
                            "Content": "impl forward::Forward for MetaInfo {\n    get_impl!(persistent, forward, persistent);\n    get_impl!(transient, forward, transient);\n    get_impl!(upstream, forward, stale);\n\n    set_impl!(persistent, forward, persistent);\n    set_impl!(transient, forward, transient);\n    set_impl!(upstream, forward, stale);\n\n    del_impl!(persistent, forward, persistent);\n    del_impl!(transient, forward, transient);\n    del_impl!(upstream, forward, stale);\n\n    #[inline]\n    #[inline]\n    fn strip_http_prefix_and_set_persistent<K: AsRef<str>, V: Into<FastStr>>(\n        &mut self,\n        key: K,\n        value: V,\n    ) {\n        let key = key.as_ref();\n        if let Some(key) = HttpConverter.remove_persistent_prefix(key) {\n            self.set_persistent(key, value);\n        }\n    }\n}",
                            "Signature": "#[inline]\n    fn strip_http_prefix_and_set_persistent<K: AsRef<str>, V: Into<FastStr>>(\n     ",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "Results": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "strip_http_prefix_and_set_persistent",
                                    "File": "src/lib.rs",
                                    "Line": 500,
                                    "StartOffset": 15113,
                                    "EndOffset": 15149
                                },
                                {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/lib.rs",
                                    "Line": 500,
                                    "StartOffset": 15173,
                                    "EndOffset": 15180
                                }
                            ],
                            "FunctionCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "set_impl",
                                    "File": "src/lib.rs",
                                    "Line": 507,
                                    "StartOffset": 15367,
                                    "EndOffset": 15381
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "Converter<HttpConverter>.remove_persistent_prefix",
                                    "File": "src/lib.rs",
                                    "Line": 506,
                                    "StartOffset": 15318,
                                    "EndOffset": 15342
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/lib.rs",
                                    "Line": 500,
                                    "StartOffset": 15173,
                                    "EndOffset": 15180
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter",
                                    "File": "src/lib.rs",
                                    "Line": 506,
                                    "StartOffset": 15304,
                                    "EndOffset": 15317
                                }
                            ]
                        },
                        "Forward<MetaInfo>.strip_http_prefix_and_set_upstream": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "Forward<MetaInfo>.strip_http_prefix_and_set_upstream",
                            "File": "src/lib.rs",
                            "Line": 511,
                            "StartOffset": 15416,
                            "EndOffset": 15725,
                            "Content": "impl forward::Forward for MetaInfo {\n    get_impl!(persistent, forward, persistent);\n    get_impl!(transient, forward, transient);\n    get_impl!(upstream, forward, stale);\n\n    set_impl!(persistent, forward, persistent);\n    set_impl!(transient, forward, transient);\n    set_impl!(upstream, forward, stale);\n\n    del_impl!(persistent, forward, persistent);\n    del_impl!(transient, forward, transient);\n    del_impl!(upstream, forward, stale);\n\n    #[inline]\n    #[inline]\n    fn strip_http_prefix_and_set_upstream<K: AsRef<str>, V: Into<FastStr>>(\n        &mut self,\n        key: K,\n        value: V,\n    ) {\n        let key = key.as_ref();\n        if let Some(key) = HttpConverter.remove_transient_prefix(key) {\n            self.set_upstream(key, value);\n        }\n    }\n}",
                            "Signature": "#[inline]\n    fn strip_http_prefix_and_set_upstream<K: AsRef<str>, V: Into<FastStr>>(\n     ",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "Results": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "strip_http_prefix_and_set_upstream",
                                    "File": "src/lib.rs",
                                    "Line": 512,
                                    "StartOffset": 15433,
                                    "EndOffset": 15467
                                },
                                {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/lib.rs",
                                    "Line": 512,
                                    "StartOffset": 15491,
                                    "EndOffset": 15498
                                }
                            ],
                            "FunctionCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "set_impl",
                                    "File": "src/lib.rs",
                                    "Line": 519,
                                    "StartOffset": 15684,
                                    "EndOffset": 15696
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "Converter<HttpConverter>.remove_transient_prefix",
                                    "File": "src/lib.rs",
                                    "Line": 518,
                                    "StartOffset": 15636,
                                    "EndOffset": 15659
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/lib.rs",
                                    "Line": 512,
                                    "StartOffset": 15491,
                                    "EndOffset": 15498
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter",
                                    "File": "src/lib.rs",
                                    "Line": 518,
                                    "StartOffset": 15622,
                                    "EndOffset": 15635
                                }
                            ]
                        },
                        "Forward<MetaInfo>.strip_rpc_prefix_and_set_persistent": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "Forward<MetaInfo>.strip_rpc_prefix_and_set_persistent",
                            "File": "src/lib.rs",
                            "Line": 475,
                            "StartOffset": 14465,
                            "EndOffset": 14777,
                            "Content": "impl forward::Forward for MetaInfo {\n    get_impl!(persistent, forward, persistent);\n    get_impl!(transient, forward, transient);\n    get_impl!(upstream, forward, stale);\n\n    set_impl!(persistent, forward, persistent);\n    set_impl!(transient, forward, transient);\n    set_impl!(upstream, forward, stale);\n\n    del_impl!(persistent, forward, persistent);\n    del_impl!(transient, forward, transient);\n    del_impl!(upstream, forward, stale);\n\n    #[inline]\n    #[inline]\n    fn strip_rpc_prefix_and_set_persistent<K: AsRef<str>, V: Into<FastStr>>(\n        &mut self,\n        key: K,\n        value: V,\n    ) {\n        let key = key.as_ref();\n        if let Some(key) = RpcConverter.remove_persistent_prefix(key) {\n            self.set_persistent(key, value);\n        }\n    }\n}",
                            "Signature": "#[inline]\n    fn strip_rpc_prefix_and_set_persistent<K: AsRef<str>, V: Into<FastStr>>(\n     ",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "Results": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "strip_rpc_prefix_and_set_persistent",
                                    "File": "src/lib.rs",
                                    "Line": 476,
                                    "StartOffset": 14482,
                                    "EndOffset": 14517
                                },
                                {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/lib.rs",
                                    "Line": 476,
                                    "StartOffset": 14541,
                                    "EndOffset": 14548
                                }
                            ],
                            "FunctionCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "set_impl",
                                    "File": "src/lib.rs",
                                    "Line": 483,
                                    "StartOffset": 14734,
                                    "EndOffset": 14748
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "Converter<RpcConverter>.remove_persistent_prefix",
                                    "File": "src/lib.rs",
                                    "Line": 482,
                                    "StartOffset": 14685,
                                    "EndOffset": 14709
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/lib.rs",
                                    "Line": 476,
                                    "StartOffset": 14541,
                                    "EndOffset": 14548
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "RpcConverter",
                                    "File": "src/lib.rs",
                                    "Line": 482,
                                    "StartOffset": 14672,
                                    "EndOffset": 14684
                                }
                            ]
                        },
                        "Forward<MetaInfo>.strip_rpc_prefix_and_set_upstream": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "Forward<MetaInfo>.strip_rpc_prefix_and_set_upstream",
                            "File": "src/lib.rs",
                            "Line": 487,
                            "StartOffset": 14783,
                            "EndOffset": 15090,
                            "Content": "impl forward::Forward for MetaInfo {\n    get_impl!(persistent, forward, persistent);\n    get_impl!(transient, forward, transient);\n    get_impl!(upstream, forward, stale);\n\n    set_impl!(persistent, forward, persistent);\n    set_impl!(transient, forward, transient);\n    set_impl!(upstream, forward, stale);\n\n    del_impl!(persistent, forward, persistent);\n    del_impl!(transient, forward, transient);\n    del_impl!(upstream, forward, stale);\n\n    #[inline]\n    #[inline]\n    fn strip_rpc_prefix_and_set_upstream<K: AsRef<str>, V: Into<FastStr>>(\n        &mut self,\n        key: K,\n        value: V,\n    ) {\n        let key = key.as_ref();\n        if let Some(key) = RpcConverter.remove_transient_prefix(key) {\n            self.set_upstream(key, value);\n        }\n    }\n}",
                            "Signature": "#[inline]\n    fn strip_rpc_prefix_and_set_upstream<K: AsRef<str>, V: Into<FastStr>>(\n     ",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "Results": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "strip_rpc_prefix_and_set_upstream",
                                    "File": "src/lib.rs",
                                    "Line": 488,
                                    "StartOffset": 14800,
                                    "EndOffset": 14833
                                },
                                {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/lib.rs",
                                    "Line": 488,
                                    "StartOffset": 14857,
                                    "EndOffset": 14864
                                }
                            ],
                            "FunctionCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "set_impl",
                                    "File": "src/lib.rs",
                                    "Line": 495,
                                    "StartOffset": 15049,
                                    "EndOffset": 15061
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "Converter<RpcConverter>.remove_transient_prefix",
                                    "File": "src/lib.rs",
                                    "Line": 494,
                                    "StartOffset": 15001,
                                    "EndOffset": 15024
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/lib.rs",
                                    "Line": 488,
                                    "StartOffset": 14857,
                                    "EndOffset": 14864
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "RpcConverter",
                                    "File": "src/lib.rs",
                                    "Line": 494,
                                    "StartOffset": 14988,
                                    "EndOffset": 15000
                                }
                            ]
                        },
                        "MetaInfo.clear": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "MetaInfo.clear",
                            "File": "src/lib.rs",
                            "Line": 288,
                            "StartOffset": 8875,
                            "EndOffset": 9538,
                            "Content": "impl MetaInfo {\n    /// Creates an empty `MetaInfo`.\n    #[inline]\n    /// Clear the `MetaInfo` of all inserted MetaInfo.\n    /// This will not clear the parent.\n    #[inline]\n    pub fn clear(&mut self) {\n        self.parent = None;\n        if let Some(tmap) = self.tmap.as_mut() {\n            tmap.clear()\n        }\n        if let Some(smap) = self.smap.as_mut() {\n            smap.clear()\n        }\n        if let Some(faststr_tmap) = self.faststr_tmap.as_mut() {\n            faststr_tmap.clear()\n        }\n        if let Some(forward_node) = self.forward_node.as_mut() {\n            forward_node.clear()\n        }\n        if let Some(backward_node) = self.backward_node.as_mut() {\n            backward_node.clear()\n        }\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap.clear",
                                    "File": "src/lib.rs",
                                    "Line": 294,
                                    "StartOffset": 9104,
                                    "EndOffset": 9109
                                },
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "clear",
                                    "File": "src/lib.rs",
                                    "Line": 297,
                                    "StartOffset": 9188,
                                    "EndOffset": 9193
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap.clear",
                                    "File": "src/lib.rs",
                                    "Line": 300,
                                    "StartOffset": 9296,
                                    "EndOffset": 9301
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::kv",
                                    "Name": "Node.clear",
                                    "File": "src/lib.rs",
                                    "Line": 303,
                                    "StartOffset": 9404,
                                    "EndOffset": 9409
                                }
                            ]
                        },
                        "MetaInfo.contains": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "MetaInfo.contains",
                            "File": "src/lib.rs",
                            "Line": 176,
                            "StartOffset": 5363,
                            "EndOffset": 5778,
                            "Content": "impl MetaInfo {\n    /// Creates an empty `MetaInfo`.\n    #[inline]\n    /// Check if `MetaInfo` contains entry\n    #[inline]\n    pub fn contains<T: 'static>(&self) -> bool {\n        if self\n            .tmap\n            .as_ref()\n            .map(|tmap| tmap.contains::<T>())\n            .unwrap_or(false)\n        {\n            return true;\n        }\n        self.parent\n            .as_ref()\n            .map(|parent| parent.as_ref().contains::<T>())\n            .unwrap_or(false)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap.contains",
                                    "File": "src/lib.rs",
                                    "Line": 182,
                                    "StartOffset": 5550,
                                    "EndOffset": 5558
                                }
                            ]
                        },
                        "MetaInfo.contains_faststr": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "MetaInfo.contains_faststr",
                            "File": "src/lib.rs",
                            "Line": 193,
                            "StartOffset": 5784,
                            "EndOffset": 6259,
                            "Content": "impl MetaInfo {\n    /// Creates an empty `MetaInfo`.\n    #[inline]\n    /// Check if `MetaInfo` contains the given Faststr newtype\n    #[inline]\n    pub fn contains_faststr<T: 'static>(&self) -> bool {\n        if self\n            .faststr_tmap\n            .as_ref()\n            .map(|faststr_tmap| faststr_tmap.contains::<T>())\n            .unwrap_or(false)\n        {\n            return true;\n        }\n        self.parent\n            .as_ref()\n            .map(|parent| parent.as_ref().contains_faststr::<T>())\n            .unwrap_or(false)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap.contains",
                                    "File": "src/lib.rs",
                                    "Line": 199,
                                    "StartOffset": 6023,
                                    "EndOffset": 6031
                                }
                            ]
                        },
                        "MetaInfo.contains_string": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "MetaInfo.contains_string",
                            "File": "src/lib.rs",
                            "Line": 210,
                            "StartOffset": 6265,
                            "EndOffset": 6729,
                            "Content": "impl MetaInfo {\n    /// Creates an empty `MetaInfo`.\n    #[inline]\n    /// Check if `MetaInfo` contains the given string k-v\n    #[inline]\n    pub fn contains_string<K: AsRef<str>>(&self, key: K) -> bool {\n        if self\n            .smap\n            .as_ref()\n            .map(|smap| smap.contains_key(key.as_ref()))\n            .unwrap_or(false)\n        {\n            return true;\n        }\n        self.parent\n            .as_ref()\n            .map(|parent| parent.as_ref().contains_string(key))\n            .unwrap_or(false)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "contains_key",
                                    "File": "src/lib.rs",
                                    "Line": 216,
                                    "StartOffset": 6485,
                                    "EndOffset": 6497
                                }
                            ]
                        },
                        "MetaInfo.derive": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "MetaInfo.derive",
                            "File": "src/lib.rs",
                            "Line": 106,
                            "StartOffset": 2976,
                            "EndOffset": 4134,
                            "Content": "impl MetaInfo {\n    /// Creates an empty `MetaInfo`.\n    #[inline]\n    /// Derives the current [`MetaInfo`], returns two new equivalent `Metainfo`s.\n    ///\n    /// When the info is not found in the current scope, `MetaInfo` will try to get from parent.\n    ///\n    /// This is the recommended way.\n    #[inline]\n    pub fn derive(mut self) -> (MetaInfo, MetaInfo) {\n        if self.tmap.is_none() && self.smap.is_none() && self.faststr_tmap.is_none() {\n            // we can use the same parent as self to make the tree small\n            let new = MetaInfo {\n                parent: self.parent.clone(),\n                tmap: None,\n                smap: None,\n                faststr_tmap: None,\n                forward_node: self.forward_node.clone(),\n                backward_node: self.backward_node.clone(),\n            };\n            (self, new)\n        } else {\n            let forward_node = self.forward_node.take();\n            let backward_node = self.backward_node.take();\n            let mi = Arc::new(self);\n            (\n                MetaInfo::from_node(mi.clone(), forward_node.clone(), backward_node.clone()),\n                MetaInfo::from_node(mi, forward_node, backward_node),\n            )\n        }\n    }\n}",
                            "Signature": "/// Derives the current [`MetaInfo`]",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "Results": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo",
                                    "File": "src/lib.rs",
                                    "Line": 106,
                                    "StartOffset": 3000,
                                    "EndOffset": 3012
                                }
                            ],
                            "FunctionCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo::from_node",
                                    "File": "src/lib.rs",
                                    "Line": 129,
                                    "StartOffset": 3967,
                                    "EndOffset": 3976
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo",
                                    "File": "src/lib.rs",
                                    "Line": 112,
                                    "StartOffset": 3250,
                                    "EndOffset": 3258
                                }
                            ]
                        },
                        "MetaInfo.ensure_backward_node": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "MetaInfo.ensure_backward_node",
                            "File": "src/lib.rs",
                            "Line": 355,
                            "StartOffset": 10983,
                            "EndOffset": 11132,
                            "Content": "impl MetaInfo {\n    /// Creates an empty `MetaInfo`.\n    #[inline]\n    fn ensure_backward_node(&mut self) {\n        if self.backward_node.is_none() {\n            self.backward_node = Some(Node::default())\n        }\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "Types": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::kv",
                                    "Name": "Node",
                                    "File": "src/lib.rs",
                                    "Line": 357,
                                    "StartOffset": 11100,
                                    "EndOffset": 11104
                                }
                            ]
                        },
                        "MetaInfo.ensure_forward_node": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "MetaInfo.ensure_forward_node",
                            "File": "src/lib.rs",
                            "Line": 349,
                            "StartOffset": 10831,
                            "EndOffset": 10977,
                            "Content": "impl MetaInfo {\n    /// Creates an empty `MetaInfo`.\n    #[inline]\n    fn ensure_forward_node(&mut self) {\n        if self.forward_node.is_none() {\n            self.forward_node = Some(Node::default())\n        }\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "Types": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::kv",
                                    "Name": "Node",
                                    "File": "src/lib.rs",
                                    "Line": 351,
                                    "StartOffset": 10945,
                                    "EndOffset": 10949
                                }
                            ]
                        },
                        "MetaInfo.extend": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "MetaInfo.extend",
                            "File": "src/lib.rs",
                            "Line": 310,
                            "StartOffset": 9544,
                            "EndOffset": 10825,
                            "Content": "impl MetaInfo {\n    /// Creates an empty `MetaInfo`.\n    #[inline]\n    /// Extends self with the items from another `MetaInfo`.\n    /// Only extend the items in the current scope.\n    #[inline]\n    pub fn extend(&mut self, other: MetaInfo) {\n        if let Some(tmap) = other.tmap {\n            self.tmap\n                .get_or_insert_with(|| TypeMap::with_capacity(DEFAULT_MAP_SIZE))\n                .extend(tmap);\n        }\n\n        if let Some(smap) = other.smap {\n            self.smap\n                .get_or_insert_with(|| AHashMap::with_capacity(DEFAULT_MAP_SIZE))\n                .extend(smap);\n        }\n\n        if let Some(faststr_tmap) = other.faststr_tmap {\n            self.faststr_tmap\n                .get_or_insert_with(|| FastStrMap::with_capacity(DEFAULT_MAP_SIZE))\n                .extend(faststr_tmap);\n        }\n\n        if let Some(node) = other.forward_node {\n            if self.forward_node.is_none() {\n                self.forward_node = Some(node);\n            } else {\n                self.forward_node.as_mut().unwrap().extend(node);\n            }\n        }\n\n        if let Some(node) = other.backward_node {\n            if self.backward_node.is_none() {\n                self.backward_node = Some(node);\n            } else {\n                self.backward_node.as_mut().unwrap().extend(node);\n            }\n        }\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "FunctionCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap::with_capacity",
                                    "File": "src/lib.rs",
                                    "Line": 316,
                                    "StartOffset": 9826,
                                    "EndOffset": 9839
                                },
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap::with_capacity",
                                    "File": "src/lib.rs",
                                    "Line": 322,
                                    "StartOffset": 10013,
                                    "EndOffset": 10026
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap::with_capacity",
                                    "File": "src/lib.rs",
                                    "Line": 328,
                                    "StartOffset": 10226,
                                    "EndOffset": 10239
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap.extend",
                                    "File": "src/lib.rs",
                                    "Line": 317,
                                    "StartOffset": 9876,
                                    "EndOffset": 9882
                                },
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap.extend",
                                    "File": "src/lib.rs",
                                    "Line": 323,
                                    "StartOffset": 10063,
                                    "EndOffset": 10069
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap.extend",
                                    "File": "src/lib.rs",
                                    "Line": 329,
                                    "StartOffset": 10276,
                                    "EndOffset": 10282
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::kv",
                                    "Name": "Node.extend",
                                    "File": "src/lib.rs",
                                    "Line": 336,
                                    "StartOffset": 10524,
                                    "EndOffset": 10530
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo",
                                    "File": "src/lib.rs",
                                    "Line": 313,
                                    "StartOffset": 9703,
                                    "EndOffset": 9711
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap",
                                    "File": "src/lib.rs",
                                    "Line": 316,
                                    "StartOffset": 9817,
                                    "EndOffset": 9824
                                },
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap",
                                    "File": "src/lib.rs",
                                    "Line": 322,
                                    "StartOffset": 10003,
                                    "EndOffset": 10011
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap",
                                    "File": "src/lib.rs",
                                    "Line": 328,
                                    "StartOffset": 10214,
                                    "EndOffset": 10224
                                }
                            ],
                            "GlobalVars": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "DEFAULT_MAP_SIZE",
                                    "File": "src/lib.rs",
                                    "Line": 316,
                                    "StartOffset": 9840,
                                    "EndOffset": 9856
                                }
                            ]
                        },
                        "MetaInfo.fmt": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "MetaInfo.fmt",
                            "File": "src/lib.rs",
                            "Line": 704,
                            "StartOffset": 21541,
                            "EndOffset": 21649,
                            "Content": "impl fmt::Debug for MetaInfo {\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n        f.debug_struct(\"MetaInfo\").finish()\n    }\n}",
                            "Signature": "fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n    ",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            }
                        },
                        "MetaInfo.get": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "MetaInfo.get",
                            "File": "src/lib.rs",
                            "Line": 227,
                            "StartOffset": 6735,
                            "EndOffset": 7066,
                            "Content": "impl MetaInfo {\n    /// Creates an empty `MetaInfo`.\n    #[inline]\n    /// Get a reference to a type previously inserted on this `MetaInfo`.\n    #[inline]\n    pub fn get<T: 'static>(&self) -> Option<&T> {\n        self.tmap.as_ref().and_then(|tmap| tmap.get()).or_else(|| {\n            self.parent\n                .as_ref()\n                .and_then(|parent| parent.as_ref().get::<T>())\n        })\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap.get",
                                    "File": "src/lib.rs",
                                    "Line": 230,
                                    "StartOffset": 6917,
                                    "EndOffset": 6920
                                }
                            ]
                        },
                        "MetaInfo.get_all_backword_transients_with_prefix": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "MetaInfo.get_all_backword_transients_with_prefix",
                            "File": "src/lib.rs",
                            "Line": 654,
                            "StartOffset": 20125,
                            "EndOffset": 20978,
                            "Content": "impl MetaInfo {\n    #[inline]\n    #[inline]\n    fn get_all_backword_transients_with_prefix<C>(\n        &self,\n        converter: C,\n    ) -> Option<AHashMap<FastStr, FastStr>>\n    where\n        C: Converter,\n    {\n        match self.backward_node.as_ref() {\n            Some(node) => {\n                if let Some(t) = node.get_all_transients() {\n                    let new_cap = t.len();\n                    if new_cap == 0 {\n                        return None;\n                    }\n                    let mut map = AHashMap::with_capacity(new_cap);\n                    map.extend(\n                        t.iter()\n                            .map(|(k, v)| (converter.add_transient_prefix(k), v.clone())),\n                    );\n                    Some(map)\n                } else {\n                    None\n                }\n            }\n            None => None,\n        }\n    }\n}",
                            "Signature": "#[inline]\n    fn get_all_backword_transients_with_prefix<C>(\n        &self,\n        converter: C,\n    ) -> Option<AHashMap<FastStr, FastStr>>\n",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "Results": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "get_all_backword_transients_with_prefix",
                                    "File": "src/lib.rs",
                                    "Line": 655,
                                    "StartOffset": 20142,
                                    "EndOffset": 20181
                                },
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap",
                                    "File": "src/lib.rs",
                                    "Line": 658,
                                    "StartOffset": 20239,
                                    "EndOffset": 20247
                                },
                                {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/lib.rs",
                                    "Line": 658,
                                    "StartOffset": 20248,
                                    "EndOffset": 20255
                                }
                            ],
                            "FunctionCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::kv",
                                    "Name": "get_all_impl",
                                    "File": "src/lib.rs",
                                    "Line": 664,
                                    "StartOffset": 20415,
                                    "EndOffset": 20433
                                },
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap::with_capacity",
                                    "File": "src/lib.rs",
                                    "Line": 669,
                                    "StartOffset": 20622,
                                    "EndOffset": 20635
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "len",
                                    "File": "src/lib.rs",
                                    "Line": 665,
                                    "StartOffset": 20474,
                                    "EndOffset": 20477
                                },
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap.extend",
                                    "File": "src/lib.rs",
                                    "Line": 670,
                                    "StartOffset": 20670,
                                    "EndOffset": 20676
                                },
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "iter",
                                    "File": "src/lib.rs",
                                    "Line": 671,
                                    "StartOffset": 20704,
                                    "EndOffset": 20708
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "add_transient_prefix",
                                    "File": "src/lib.rs",
                                    "Line": 672,
                                    "StartOffset": 20764,
                                    "EndOffset": 20784
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "Converter",
                                    "File": "src/lib.rs",
                                    "Line": 660,
                                    "StartOffset": 20288,
                                    "EndOffset": 20297
                                },
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap",
                                    "File": "src/lib.rs",
                                    "Line": 669,
                                    "StartOffset": 20612,
                                    "EndOffset": 20620
                                },
                                {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/lib.rs",
                                    "Line": 672,
                                    "StartOffset": 20791,
                                    "EndOffset": 20796
                                }
                            ]
                        },
                        "MetaInfo.get_all_persistents_and_transients_with_prefix": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "MetaInfo.get_all_persistents_and_transients_with_prefix",
                            "File": "src/lib.rs",
                            "Line": 592,
                            "StartOffset": 17937,
                            "EndOffset": 19267,
                            "Content": "impl MetaInfo {\n    #[inline]\n    #[inline]\n    fn get_all_persistents_and_transients_with_prefix<C>(\n        &self,\n        converter: C,\n    ) -> Option<AHashMap<FastStr, FastStr>>\n    where\n        C: Converter,\n    {\n        match self.forward_node.as_ref() {\n            Some(node) => {\n                let persistents = node.get_all_persistents();\n                let transients = node.get_all_transients();\n                let new_cap = persistents.map(|p| p.len()).unwrap_or(0)\n                    + transients.map(|t| t.len()).unwrap_or(0);\n                if new_cap == 0 {\n                    return None;\n                }\n                let mut map = AHashMap::with_capacity(new_cap);\n                if let Some(persistents) = persistents {\n                    map.extend(\n                        persistents\n                            .iter()\n                            .map(|(k, v)| (converter.add_persistent_prefix(k), v.clone())),\n                    );\n                }\n                if let Some(transients) = transients {\n                    map.extend(\n                        transients\n                            .iter()\n                            .map(|(k, v)| (converter.add_transient_prefix(k), v.clone())),\n                    );\n                }\n                Some(map)\n            }\n            None => None,\n        }\n    }\n}",
                            "Signature": "#[inline]\n    fn get_all_persistents_and_transients_with_prefix<C>(\n        &self,\n        converter: C,\n    ) -> Option<AHashMap<FastStr, FastStr>>\n",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "Results": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "get_all_persistents_and_transients_with_prefix",
                                    "File": "src/lib.rs",
                                    "Line": 593,
                                    "StartOffset": 17954,
                                    "EndOffset": 18000
                                },
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap",
                                    "File": "src/lib.rs",
                                    "Line": 596,
                                    "StartOffset": 18058,
                                    "EndOffset": 18066
                                },
                                {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/lib.rs",
                                    "Line": 596,
                                    "StartOffset": 18067,
                                    "EndOffset": 18074
                                }
                            ],
                            "FunctionCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::kv",
                                    "Name": "get_all_impl",
                                    "File": "src/lib.rs",
                                    "Line": 602,
                                    "StartOffset": 18234,
                                    "EndOffset": 18253
                                },
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap::with_capacity",
                                    "File": "src/lib.rs",
                                    "Line": 609,
                                    "StartOffset": 18578,
                                    "EndOffset": 18591
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "len",
                                    "File": "src/lib.rs",
                                    "Line": 604,
                                    "StartOffset": 18369,
                                    "EndOffset": 18372
                                },
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap.extend",
                                    "File": "src/lib.rs",
                                    "Line": 611,
                                    "StartOffset": 18683,
                                    "EndOffset": 18689
                                },
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "iter",
                                    "File": "src/lib.rs",
                                    "Line": 613,
                                    "StartOffset": 18756,
                                    "EndOffset": 18760
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "add_persistent_prefix",
                                    "File": "src/lib.rs",
                                    "Line": 614,
                                    "StartOffset": 18816,
                                    "EndOffset": 18837
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "add_transient_prefix",
                                    "File": "src/lib.rs",
                                    "Line": 621,
                                    "StartOffset": 19107,
                                    "EndOffset": 19127
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "Converter",
                                    "File": "src/lib.rs",
                                    "Line": 598,
                                    "StartOffset": 18107,
                                    "EndOffset": 18116
                                },
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap",
                                    "File": "src/lib.rs",
                                    "Line": 609,
                                    "StartOffset": 18568,
                                    "EndOffset": 18576
                                },
                                {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/lib.rs",
                                    "Line": 614,
                                    "StartOffset": 18844,
                                    "EndOffset": 18849
                                }
                            ]
                        },
                        "MetaInfo.get_faststr": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "MetaInfo.get_faststr",
                            "File": "src/lib.rs",
                            "Line": 244,
                            "StartOffset": 7325,
                            "EndOffset": 7786,
                            "Content": "impl MetaInfo {\n    /// Creates an empty `MetaInfo`.\n    #[inline]\n    /// Get a reference to a faststr newtype previously inserted on this `MetaInfo`.\n    #[inline]\n    pub fn get_faststr<T: 'static>(&self) -> Option<&FastStr> {\n        self.faststr_tmap\n            .as_ref()\n            .and_then(|faststr_tmap: &FastStrMap| faststr_tmap.get::<T>())\n            .or_else(|| {\n                self.parent\n                    .as_ref()\n                    .and_then(|parent| parent.as_ref().get_faststr::<T>())\n            })\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap.get",
                                    "File": "src/lib.rs",
                                    "Line": 249,
                                    "StartOffset": 7595,
                                    "EndOffset": 7598
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/lib.rs",
                                    "Line": 246,
                                    "StartOffset": 7473,
                                    "EndOffset": 7480
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap",
                                    "File": "src/lib.rs",
                                    "Line": 249,
                                    "StartOffset": 7570,
                                    "EndOffset": 7580
                                }
                            ]
                        },
                        "MetaInfo.get_string": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "MetaInfo.get_string",
                            "File": "src/lib.rs",
                            "Line": 266,
                            "StartOffset": 8120,
                            "EndOffset": 8553,
                            "Content": "impl MetaInfo {\n    /// Creates an empty `MetaInfo`.\n    #[inline]\n    /// Get a reference to a string k-v previously inserted on this `MetaInfo`.\n    #[inline]\n    pub fn get_string<K: AsRef<str>>(&self, key: K) -> Option<&FastStr> {\n        self.smap\n            .as_ref()\n            .and_then(|smap| smap.get(key.as_ref()))\n            .or_else(|| {\n                self.parent\n                    .as_ref()\n                    .and_then(|parent| parent.as_ref().get_string(key))\n            })\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap.get",
                                    "File": "src/lib.rs",
                                    "Line": 271,
                                    "StartOffset": 8358,
                                    "EndOffset": 8361
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/lib.rs",
                                    "Line": 268,
                                    "StartOffset": 8273,
                                    "EndOffset": 8280
                                }
                            ]
                        },
                        "MetaInfo.insert": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "MetaInfo.insert",
                            "File": "src/lib.rs",
                            "Line": 152,
                            "StartOffset": 4556,
                            "EndOffset": 4801,
                            "Content": "impl MetaInfo {\n    /// Creates an empty `MetaInfo`.\n    #[inline]\n    /// Insert a type into this `MetaInfo`.\n    #[inline]\n    pub fn insert<T: Send + Sync + 'static>(&mut self, val: T) {\n        self.tmap\n            .get_or_insert_with(|| TypeMap::with_capacity(DEFAULT_MAP_SIZE))\n            .insert(val);\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "FunctionCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap::with_capacity",
                                    "File": "src/lib.rs",
                                    "Line": 156,
                                    "StartOffset": 4737,
                                    "EndOffset": 4750
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap.insert",
                                    "File": "src/lib.rs",
                                    "Line": 157,
                                    "StartOffset": 4783,
                                    "EndOffset": 4789
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap",
                                    "File": "src/lib.rs",
                                    "Line": 156,
                                    "StartOffset": 4728,
                                    "EndOffset": 4735
                                }
                            ],
                            "GlobalVars": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "DEFAULT_MAP_SIZE",
                                    "File": "src/lib.rs",
                                    "Line": 156,
                                    "StartOffset": 4751,
                                    "EndOffset": 4767
                                }
                            ]
                        },
                        "MetaInfo.insert_faststr": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "MetaInfo.insert_faststr",
                            "File": "src/lib.rs",
                            "Line": 160,
                            "StartOffset": 4807,
                            "EndOffset": 5093,
                            "Content": "impl MetaInfo {\n    /// Creates an empty `MetaInfo`.\n    #[inline]\n    /// Insert a faststr newtype into this `MetaInfo`.\n    #[inline]\n    pub fn insert_faststr<T: Send + Sync + 'static>(&mut self, val: FastStr) {\n        self.faststr_tmap\n            .get_or_insert_with(|| FastStrMap::with_capacity(DEFAULT_MAP_SIZE))\n            .insert::<T>(val);\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "FunctionCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap::with_capacity",
                                    "File": "src/lib.rs",
                                    "Line": 164,
                                    "StartOffset": 5024,
                                    "EndOffset": 5037
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap.insert",
                                    "File": "src/lib.rs",
                                    "Line": 165,
                                    "StartOffset": 5070,
                                    "EndOffset": 5076
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/lib.rs",
                                    "Line": 162,
                                    "StartOffset": 4940,
                                    "EndOffset": 4947
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap",
                                    "File": "src/lib.rs",
                                    "Line": 164,
                                    "StartOffset": 5012,
                                    "EndOffset": 5022
                                }
                            ],
                            "GlobalVars": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "DEFAULT_MAP_SIZE",
                                    "File": "src/lib.rs",
                                    "Line": 164,
                                    "StartOffset": 5038,
                                    "EndOffset": 5054
                                }
                            ]
                        },
                        "MetaInfo.insert_string": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "MetaInfo.insert_string",
                            "File": "src/lib.rs",
                            "Line": 168,
                            "StartOffset": 5099,
                            "EndOffset": 5357,
                            "Content": "impl MetaInfo {\n    /// Creates an empty `MetaInfo`.\n    #[inline]\n    /// Insert a string k-v into this `MetaInfo`.\n    #[inline]\n    pub fn insert_string(&mut self, key: FastStr, val: FastStr) {\n        self.smap\n            .get_or_insert_with(|| AHashMap::with_capacity(DEFAULT_MAP_SIZE))\n            .insert(key, val);\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "FunctionCalls": [
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap::with_capacity",
                                    "File": "src/lib.rs",
                                    "Line": 172,
                                    "StartOffset": 5288,
                                    "EndOffset": 5301
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap.insert",
                                    "File": "src/lib.rs",
                                    "Line": 173,
                                    "StartOffset": 5334,
                                    "EndOffset": 5340
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/lib.rs",
                                    "Line": 170,
                                    "StartOffset": 5200,
                                    "EndOffset": 5207
                                },
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap",
                                    "File": "src/lib.rs",
                                    "Line": 172,
                                    "StartOffset": 5278,
                                    "EndOffset": 5286
                                }
                            ],
                            "GlobalVars": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "DEFAULT_MAP_SIZE",
                                    "File": "src/lib.rs",
                                    "Line": 172,
                                    "StartOffset": 5302,
                                    "EndOffset": 5318
                                }
                            ]
                        },
                        "MetaInfo.iter_all_backword_transients_with_prefix": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "MetaInfo.iter_all_backword_transients_with_prefix",
                            "File": "src/lib.rs",
                            "Line": 683,
                            "StartOffset": 20984,
                            "EndOffset": 21502,
                            "Content": "impl MetaInfo {\n    #[inline]\n    #[inline]\n    fn iter_all_backword_transients_with_prefix<C>(\n        &self,\n        converter: C,\n    ) -> impl Iterator<Item = (FastStr, &FastStr)>\n    where\n        C: Converter + 'static,\n    {\n        self.backward_node\n            .as_ref()\n            .into_iter()\n            .flat_map(|node| {\n                node.get_all_transients()\n                    .into_iter()\n                    .flat_map(|t| t.into_iter())\n            })\n            .map(move |(k, v)| (converter.add_transient_prefix(k), v))\n    }\n}",
                            "Signature": "#[inline]\n    fn iter_all_backword_transients_with_prefix<C>(\n        &self,\n        converter: C,\n    ) -> impl Iterator<Item = (FastStr, &FastStr)>\n",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "Results": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "iter_all_backword_transients_with_prefix",
                                    "File": "src/lib.rs",
                                    "Line": 684,
                                    "StartOffset": 21001,
                                    "EndOffset": 21041
                                },
                                {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/lib.rs",
                                    "Line": 687,
                                    "StartOffset": 21114,
                                    "EndOffset": 21121
                                }
                            ],
                            "FunctionCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::kv",
                                    "Name": "get_all_impl",
                                    "File": "src/lib.rs",
                                    "Line": 695,
                                    "StartOffset": 21308,
                                    "EndOffset": 21326
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap.into_iter",
                                    "File": "src/lib.rs",
                                    "Line": 697,
                                    "StartOffset": 21398,
                                    "EndOffset": 21407
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "add_transient_prefix",
                                    "File": "src/lib.rs",
                                    "Line": 699,
                                    "StartOffset": 21468,
                                    "EndOffset": 21488
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "Converter",
                                    "File": "src/lib.rs",
                                    "Line": 689,
                                    "StartOffset": 21155,
                                    "EndOffset": 21164
                                }
                            ]
                        },
                        "MetaInfo.iter_all_persistents_and_transients_with_prefix": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "MetaInfo.iter_all_persistents_and_transients_with_prefix",
                            "File": "src/lib.rs",
                            "Line": 630,
                            "StartOffset": 19273,
                            "EndOffset": 20119,
                            "Content": "impl MetaInfo {\n    #[inline]\n    #[inline]\n    fn iter_all_persistents_and_transients_with_prefix<C>(\n        &self,\n        converter: C,\n    ) -> impl Iterator<Item = (FastStr, &FastStr)>\n    where\n        C: Converter + Copy + 'static,\n    {\n        self.forward_node\n            .as_ref()\n            .into_iter()\n            .flat_map(move |node| {\n                let persistents = node.get_all_persistents().into_iter().flat_map(move |p| {\n                    p.into_iter()\n                        .map(move |(k, v)| (converter.add_persistent_prefix(k), v))\n                });\n                let transients = node.get_all_transients().into_iter().flat_map(move |t| {\n                    t.into_iter()\n                        .map(move |(k, v)| (converter.add_transient_prefix(k), v))\n                });\n                persistents.chain(transients)\n            })\n    }\n}",
                            "Signature": "#[inline]\n    fn iter_all_persistents_and_transients_with_prefix<C>(\n        &self,\n        converter: C,\n    ) -> impl Iterator<Item = (FastStr, &FastStr)>\n",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "Results": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "iter_all_persistents_and_transients_with_prefix",
                                    "File": "src/lib.rs",
                                    "Line": 631,
                                    "StartOffset": 19290,
                                    "EndOffset": 19337
                                },
                                {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/lib.rs",
                                    "Line": 634,
                                    "StartOffset": 19410,
                                    "EndOffset": 19417
                                }
                            ],
                            "FunctionCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::kv",
                                    "Name": "get_all_impl",
                                    "File": "src/lib.rs",
                                    "Line": 642,
                                    "StartOffset": 19633,
                                    "EndOffset": 19652
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap.into_iter",
                                    "File": "src/lib.rs",
                                    "Line": 643,
                                    "StartOffset": 19709,
                                    "EndOffset": 19718
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "add_persistent_prefix",
                                    "File": "src/lib.rs",
                                    "Line": 644,
                                    "StartOffset": 19775,
                                    "EndOffset": 19796
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "add_transient_prefix",
                                    "File": "src/lib.rs",
                                    "Line": 648,
                                    "StartOffset": 20004,
                                    "EndOffset": 20024
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "Converter",
                                    "File": "src/lib.rs",
                                    "Line": 636,
                                    "StartOffset": 19451,
                                    "EndOffset": 19460
                                }
                            ]
                        },
                        "MetaInfo.remove": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "MetaInfo.remove",
                            "File": "src/lib.rs",
                            "Line": 237,
                            "StartOffset": 7072,
                            "EndOffset": 7319,
                            "Content": "impl MetaInfo {\n    /// Creates an empty `MetaInfo`.\n    #[inline]\n    /// Remove a type from this `MetaInfo` and return it.\n    /// Can only remove the type in the current scope.\n    #[inline]\n    pub fn remove<T: 'static>(&mut self) -> Option<T> {\n        self.tmap.as_mut().and_then(|tmap| tmap.remove::<T>())\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap.remove",
                                    "File": "src/lib.rs",
                                    "Line": 241,
                                    "StartOffset": 7299,
                                    "EndOffset": 7305
                                }
                            ]
                        },
                        "MetaInfo.remove_faststr": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "MetaInfo.remove_faststr",
                            "File": "src/lib.rs",
                            "Line": 257,
                            "StartOffset": 7792,
                            "EndOffset": 8114,
                            "Content": "impl MetaInfo {\n    /// Creates an empty `MetaInfo`.\n    #[inline]\n    /// Remove a faststr newtype from this `MetaInfo` and return it.\n    /// Can only remove the type in the current scope.\n    #[inline]\n    pub fn remove_faststr<T: 'static>(&mut self) -> Option<FastStr> {\n        self.faststr_tmap\n            .as_mut()\n            .and_then(|faststr_tmap| faststr_tmap.remove::<T>())\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap.remove",
                                    "File": "src/lib.rs",
                                    "Line": 263,
                                    "StartOffset": 8094,
                                    "EndOffset": 8100
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/lib.rs",
                                    "Line": 260,
                                    "StartOffset": 7985,
                                    "EndOffset": 7992
                                }
                            ]
                        },
                        "MetaInfo.remove_string": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "MetaInfo.remove_string",
                            "File": "src/lib.rs",
                            "Line": 279,
                            "StartOffset": 8559,
                            "EndOffset": 8869,
                            "Content": "impl MetaInfo {\n    /// Creates an empty `MetaInfo`.\n    #[inline]\n    /// Remove a string k-v from this `MetaInfo` and return it.\n    /// Can only remove the type in the current scope.\n    #[inline]\n    pub fn remove_string<K: AsRef<str>>(&mut self, key: K) -> Option<FastStr> {\n        self.smap\n            .as_mut()\n            .and_then(|smap| smap.remove(key.as_ref()))\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap.remove",
                                    "File": "src/lib.rs",
                                    "Line": 285,
                                    "StartOffset": 8842,
                                    "EndOffset": 8848
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/lib.rs",
                                    "Line": 282,
                                    "StartOffset": 8757,
                                    "EndOffset": 8764
                                }
                            ]
                        },
                        "MetaInfo::from_node": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "MetaInfo::from_node",
                            "File": "src/lib.rs",
                            "Line": 135,
                            "StartOffset": 4140,
                            "EndOffset": 4550,
                            "Content": "impl MetaInfo {\n    /// Creates an empty `MetaInfo`.\n    #[inline]\n    /// Creates an `MetaInfo` with the parent and node given.\n    fn from_node(\n        parent: Arc<MetaInfo>,\n        forward_node: Option<kv::Node>,\n        backward_node: Option<kv::Node>,\n    ) -> MetaInfo {\n        MetaInfo {\n            parent: Some(parent),\n            tmap: None,\n            smap: None,\n            faststr_tmap: None,\n\n            forward_node,\n            backward_node,\n        }\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "Types": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo",
                                    "File": "src/lib.rs",
                                    "Line": 137,
                                    "StartOffset": 4236,
                                    "EndOffset": 4244
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::kv",
                                    "Name": "Node",
                                    "File": "src/lib.rs",
                                    "Line": 138,
                                    "StartOffset": 4280,
                                    "EndOffset": 4284
                                }
                            ]
                        },
                        "del_impl": {
                            "Exported": true,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "del_impl",
                            "File": "src/lib.rs",
                            "Line": 395,
                            "StartOffset": 12044,
                            "EndOffset": 12462,
                            "Content": "macro_rules! del_impl {\n    ($name:ident,$node:ident,$func_name:ident) => {\n        paste! {\n            #[inline]\n            fn [<del_ $name>]<K: AsRef<str>>(&mut self, key: K) -> Option<FastStr> {\n                if let Some(node) = self.[<$node _node>].as_mut() {\n                    node.[<del_ $func_name>](key)\n                } else {\n                    None\n                }\n            }\n        }\n    };\n}",
                            "Signature": "macro_rules! del_impl {\n    ($name:ident,$node:ident,$func_name:ident) ",
                            "Results": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "del_impl",
                                    "File": "src/lib.rs",
                                    "Line": 395,
                                    "StartOffset": 12057,
                                    "EndOffset": 12065
                                }
                            ]
                        },
                        "get_impl": {
                            "Exported": true,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "get_impl",
                            "File": "src/lib.rs",
                            "Line": 362,
                            "StartOffset": 11136,
                            "EndOffset": 11535,
                            "Content": "macro_rules! get_impl {\n    ($name:ident,$node:ident,$func_name:ident) => {\n        paste! {\n            #[inline]\n            fn [<get_ $name>]<K: AsRef<str>>(&self, key: K) -> Option<FastStr> {\n                match self.[<$node _node>].as_ref() {\n                    Some(node) => node.[<get_ $func_name>](key),\n                    None => None,\n                }\n            }\n        }\n    };\n}",
                            "Signature": "macro_rules! get_impl {\n    ($name:ident,$node:ident,$func_name:ident) ",
                            "Results": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "get_impl",
                                    "File": "src/lib.rs",
                                    "Line": 362,
                                    "StartOffset": 11149,
                                    "EndOffset": 11157
                                }
                            ]
                        },
                        "set_impl": {
                            "Exported": true,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "set_impl",
                            "File": "src/lib.rs",
                            "Line": 376,
                            "StartOffset": 11537,
                            "EndOffset": 12042,
                            "Content": "macro_rules! set_impl {\n    ($name:ident,$node:ident,$func_name:ident) => {\n        paste! {\n            #[inline]\n            fn [<set_ $name>]<K: Into<FastStr>, V: Into<FastStr>>(\n                &mut self,\n                key: K,\n                value: V,\n            ) {\n                self.[<ensure_ $node _node>]();\n                self.[<$node _node>]\n                    .as_mut()\n                    .unwrap()\n                    .[<set_ $func_name>](key, value)\n            }\n        }\n    };\n}",
                            "Signature": "macro_rules! set_impl {\n    ($name:ident,$node:ident,$func_name:ident) ",
                            "Results": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "set_impl",
                                    "File": "src/lib.rs",
                                    "Line": 376,
                                    "StartOffset": 11550,
                                    "EndOffset": 11558
                                }
                            ]
                        }
                    },
                    "Types": {
                        "MetaInfo": {
                            "Exported": true,
                            "TypeKind": "struct",
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "MetaInfo",
                            "File": "src/lib.rs",
                            "Line": 37,
                            "StartOffset": 892,
                            "EndOffset": 2186,
                            "Content": "/// `MetaInfo` is used to passthrough information between components and even client-server.\n///\n/// It supports two types of info: typed map and string k-v.\n///\n/// It is designed to be tree-like, which means you can share a `MetaInfo` with multiple children.\n///\n/// Note: only the current scope is mutable.\n///\n/// Examples:\n/// ```rust\n/// use metainfo::MetaInfo;\n///\n/// fn test() {\n///     let mut m1 = MetaInfo::new();\n///     m1.insert::<i8>(2);\n///     assert_eq!(*m1.get::<i8>().unwrap(), 2);\n///\n///     let (mut m1, mut m2) = m1.derive();\n///     assert_eq!(*m2.get::<i8>().unwrap(), 2);\n///\n///     m2.insert::<i8>(4);\n///     assert_eq!(*m2.get::<i8>().unwrap(), 4);\n///\n///     m2.remove::<i8>();\n///     assert_eq!(*m2.get::<i8>().unwrap(), 2);\n/// }\n/// ```\n#[derive(Default)]\npub struct MetaInfo {\n    /// Parent is read-only, if we can't find the specified key in the current,\n    /// we search it in the parent scope.\n    parent: Option<Arc<MetaInfo>>,\n    tmap: Option<TypeMap>,\n    smap: Option<AHashMap<FastStr, FastStr>>, // for str k-v\n    faststr_tmap: Option<FastStrMap>,         // for newtype wrapper of FastStr\n\n    /// for information transport through client and server.\n    /// e.g. RPC\n    forward_node: Option<kv::Node>,\n    backward_node: Option<kv::Node>,\n}",
                            "SubStruct": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap",
                                    "File": "src/lib.rs",
                                    "Line": 69,
                                    "StartOffset": 1882,
                                    "EndOffset": 1889
                                },
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap",
                                    "File": "src/lib.rs",
                                    "Line": 70,
                                    "StartOffset": 1909,
                                    "EndOffset": 1917
                                },
                                {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/lib.rs",
                                    "Line": 70,
                                    "StartOffset": 1918,
                                    "EndOffset": 1925
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap",
                                    "File": "src/lib.rs",
                                    "Line": 71,
                                    "StartOffset": 1978,
                                    "EndOffset": 1988
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::kv",
                                    "Name": "Node",
                                    "File": "src/lib.rs",
                                    "Line": 75,
                                    "StartOffset": 2141,
                                    "EndOffset": 2145
                                }
                            ],
                            "Methods": {
                                "clear": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo.clear"
                                },
                                "contains": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo.contains"
                                },
                                "contains_faststr": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo.contains_faststr"
                                },
                                "contains_string": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo.contains_string"
                                },
                                "derive": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo.derive"
                                },
                                "ensure_backward_node": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo.ensure_backward_node"
                                },
                                "ensure_forward_node": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo.ensure_forward_node"
                                },
                                "extend": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo.extend"
                                },
                                "fmt": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo.fmt"
                                },
                                "get": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo.get"
                                },
                                "get_all_backward_downstreams": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "Backward<MetaInfo>.get_all_backward_downstreams"
                                },
                                "get_all_backward_transients": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "Backward<MetaInfo>.get_all_backward_transients"
                                },
                                "get_all_backward_transients_with_http_prefix": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "Backward<MetaInfo>.get_all_backward_transients_with_http_prefix"
                                },
                                "get_all_backward_transients_with_rpc_prefix": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "Backward<MetaInfo>.get_all_backward_transients_with_rpc_prefix"
                                },
                                "get_all_backword_transients_with_prefix": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo.get_all_backword_transients_with_prefix"
                                },
                                "get_all_persistents": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "Forward<MetaInfo>.get_all_persistents"
                                },
                                "get_all_persistents_and_transients_with_http_prefix": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "Forward<MetaInfo>.get_all_persistents_and_transients_with_http_prefix"
                                },
                                "get_all_persistents_and_transients_with_prefix": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo.get_all_persistents_and_transients_with_prefix"
                                },
                                "get_all_persistents_and_transients_with_rpc_prefix": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "Forward<MetaInfo>.get_all_persistents_and_transients_with_rpc_prefix"
                                },
                                "get_all_transients": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "Forward<MetaInfo>.get_all_transients"
                                },
                                "get_all_upstreams": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "Forward<MetaInfo>.get_all_upstreams"
                                },
                                "get_faststr": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo.get_faststr"
                                },
                                "get_string": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo.get_string"
                                },
                                "insert": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo.insert"
                                },
                                "insert_faststr": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo.insert_faststr"
                                },
                                "insert_string": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo.insert_string"
                                },
                                "iter_all_backword_transients_with_prefix": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo.iter_all_backword_transients_with_prefix"
                                },
                                "iter_all_persistents_and_transients_with_prefix": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo.iter_all_persistents_and_transients_with_prefix"
                                },
                                "iter_backward_transients_with_http_prefix": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "Backward<MetaInfo>.iter_backward_transients_with_http_prefix"
                                },
                                "iter_backward_transients_with_rpc_prefix": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "Backward<MetaInfo>.iter_backward_transients_with_rpc_prefix"
                                },
                                "iter_persistents_and_transients_with_http_prefix": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "Forward<MetaInfo>.iter_persistents_and_transients_with_http_prefix"
                                },
                                "iter_persistents_and_transients_with_rpc_prefix": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "Forward<MetaInfo>.iter_persistents_and_transients_with_rpc_prefix"
                                },
                                "remove": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo.remove"
                                },
                                "remove_faststr": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo.remove_faststr"
                                },
                                "remove_string": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo.remove_string"
                                },
                                "strip_http_prefix_and_set_backward_downstream": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "Backward<MetaInfo>.strip_http_prefix_and_set_backward_downstream"
                                },
                                "strip_http_prefix_and_set_persistent": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "Forward<MetaInfo>.strip_http_prefix_and_set_persistent"
                                },
                                "strip_http_prefix_and_set_upstream": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "Forward<MetaInfo>.strip_http_prefix_and_set_upstream"
                                },
                                "strip_rpc_prefix_and_set_backward_downstream": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "Backward<MetaInfo>.strip_rpc_prefix_and_set_backward_downstream"
                                },
                                "strip_rpc_prefix_and_set_persistent": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "Forward<MetaInfo>.strip_rpc_prefix_and_set_persistent"
                                },
                                "strip_rpc_prefix_and_set_upstream": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "Forward<MetaInfo>.strip_rpc_prefix_and_set_upstream"
                                }
                            }
                        }
                    },
                    "Vars": {
                        "DEFAULT_MAP_SIZE": {
                            "IsExported": false,
                            "IsConst": true,
                            "IsPointer": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "DEFAULT_MAP_SIZE",
                            "File": "src/lib.rs",
                            "Line": 35,
                            "StartOffset": 855,
                            "EndOffset": 890,
                            "Content": "const DEFAULT_MAP_SIZE: usize = 10;"
                        },
                        "HTTP_PREFIX_BACKWARD": {
                            "IsExported": true,
                            "IsConst": true,
                            "IsPointer": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "HTTP_PREFIX_BACKWARD",
                            "File": "src/lib.rs",
                            "Line": 33,
                            "StartOffset": 798,
                            "EndOffset": 853,
                            "Content": "pub const HTTP_PREFIX_BACKWARD: &str = \"rpc-backward-\";"
                        },
                        "HTTP_PREFIX_PERSISTENT": {
                            "IsExported": true,
                            "IsConst": true,
                            "IsPointer": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "HTTP_PREFIX_PERSISTENT",
                            "File": "src/lib.rs",
                            "Line": 31,
                            "StartOffset": 685,
                            "EndOffset": 741,
                            "Content": "pub const HTTP_PREFIX_PERSISTENT: &str = \"rpc-persist-\";"
                        },
                        "HTTP_PREFIX_TRANSIENT": {
                            "IsExported": true,
                            "IsConst": true,
                            "IsPointer": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "HTTP_PREFIX_TRANSIENT",
                            "File": "src/lib.rs",
                            "Line": 32,
                            "StartOffset": 742,
                            "EndOffset": 797,
                            "Content": "pub const HTTP_PREFIX_TRANSIENT: &str = \"rpc-transit-\";"
                        },
                        "RPC_PREFIX_BACKWARD": {
                            "IsExported": true,
                            "IsConst": true,
                            "IsPointer": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "RPC_PREFIX_BACKWARD",
                            "File": "src/lib.rs",
                            "Line": 30,
                            "StartOffset": 630,
                            "EndOffset": 684,
                            "Content": "pub const RPC_PREFIX_BACKWARD: &str = \"RPC_BACKWARD_\";"
                        },
                        "RPC_PREFIX_PERSISTENT": {
                            "IsExported": true,
                            "IsConst": true,
                            "IsPointer": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "RPC_PREFIX_PERSISTENT",
                            "File": "src/lib.rs",
                            "Line": 26,
                            "StartOffset": 472,
                            "EndOffset": 574,
                            "Content": "/// Framework should all obey these prefixes.\n\npub const RPC_PREFIX_PERSISTENT: &str = \"RPC_PERSIST_\";"
                        },
                        "RPC_PREFIX_TRANSIENT": {
                            "IsExported": true,
                            "IsConst": true,
                            "IsPointer": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "RPC_PREFIX_TRANSIENT",
                            "File": "src/lib.rs",
                            "Line": 29,
                            "StartOffset": 575,
                            "EndOffset": 629,
                            "Content": "pub const RPC_PREFIX_TRANSIENT: &str = \"RPC_TRANSIT_\";"
                        }
                    }
                },
                "metainfo::backward": {
                    "IsMain": false,
                    "IsTest": false,
                    "PkgPath": "metainfo::backward",
                    "Functions": {},
                    "Types": {
                        "Backward": {
                            "Exported": true,
                            "TypeKind": "interface",
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::backward",
                            "Name": "Backward",
                            "File": "src/backward.rs",
                            "Line": 4,
                            "StartOffset": 44,
                            "EndOffset": 1530,
                            "Content": "pub trait Backward {\n    // We don't think backward persistent makes sense.\n    fn get_backward_transient<K: AsRef<str>>(&self, key: K) -> Option<FastStr>;\n    fn get_backward_downstream<K: AsRef<str>>(&self, key: K) -> Option<FastStr>;\n\n    fn get_all_backward_transients(&self) -> Option<&AHashMap<FastStr, FastStr>>;\n    fn get_all_backward_downstreams(&self) -> Option<&AHashMap<FastStr, FastStr>>;\n\n    fn get_all_backward_transients_with_rpc_prefix(&self) -> Option<AHashMap<FastStr, FastStr>>;\n    fn get_all_backward_transients_with_http_prefix(&self) -> Option<AHashMap<FastStr, FastStr>>;\n\n    fn iter_backward_transients_with_rpc_prefix(&self)\n        -> impl Iterator<Item = (FastStr, &FastStr)>;\n    fn iter_backward_transients_with_http_prefix(\n        &self,\n    ) -> impl Iterator<Item = (FastStr, &FastStr)>;\n\n    fn set_backward_transient<K: Into<FastStr>, V: Into<FastStr>>(&mut self, key: K, value: V);\n    fn set_backward_downstream<K: Into<FastStr>, V: Into<FastStr>>(&mut self, key: K, value: V);\n\n    fn strip_rpc_prefix_and_set_backward_downstream<K: AsRef<str>, V: Into<FastStr>>(\n        &mut self,\n        key: K,\n        value: V,\n    );\n\n    fn strip_http_prefix_and_set_backward_downstream<K: AsRef<str>, V: Into<FastStr>>(\n        &mut self,\n        key: K,\n        value: V,\n    );\n\n    fn del_backward_transient<K: AsRef<str>>(&mut self, key: K) -> Option<FastStr>;\n    fn del_backward_downstream<K: AsRef<str>>(&mut self, key: K) -> Option<FastStr>;\n}",
                            "SubStruct": [
                                {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/backward.rs",
                                    "Line": 6,
                                    "StartOffset": 190,
                                    "EndOffset": 197
                                },
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap",
                                    "File": "src/backward.rs",
                                    "Line": 9,
                                    "StartOffset": 335,
                                    "EndOffset": 343
                                }
                            ]
                        }
                    },
                    "Vars": {}
                },
                "metainfo::convert": {
                    "IsMain": false,
                    "IsTest": false,
                    "PkgPath": "metainfo::convert",
                    "Functions": {
                        "Converter<HttpConverter>.add_backward_prefix": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::convert",
                            "Name": "Converter<HttpConverter>.add_backward_prefix",
                            "File": "src/convert.rs",
                            "Line": 209,
                            "StartOffset": 6674,
                            "EndOffset": 6817,
                            "Content": "impl Converter for HttpConverter {\n    #[inline]\n    #[inline]\n    fn add_backward_prefix(&self, key: &str) -> FastStr {\n        self.add_prefix_and_to_http_format(HTTP_PREFIX_BACKWARD, key)\n    }\n}",
                            "Signature": "#[inline]\n    fn add_backward_prefix(&self, key: &str) -> FastStr {\n    ",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter"
                                }
                            },
                            "Results": [
                                {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/convert.rs",
                                    "Line": 210,
                                    "StartOffset": 6732,
                                    "EndOffset": 6739
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter.add_prefix_and_to_http_format",
                                    "File": "src/convert.rs",
                                    "Line": 211,
                                    "StartOffset": 6755,
                                    "EndOffset": 6784
                                }
                            ],
                            "GlobalVars": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "HTTP_PREFIX_BACKWARD",
                                    "File": "src/convert.rs",
                                    "Line": 211,
                                    "StartOffset": 6785,
                                    "EndOffset": 6805
                                }
                            ]
                        },
                        "Converter<HttpConverter>.add_persistent_prefix": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::convert",
                            "Name": "Converter<HttpConverter>.add_persistent_prefix",
                            "File": "src/convert.rs",
                            "Line": 199,
                            "StartOffset": 6370,
                            "EndOffset": 6517,
                            "Content": "impl Converter for HttpConverter {\n    #[inline]\n    #[inline]\n    fn add_persistent_prefix(&self, key: &str) -> FastStr {\n        self.add_prefix_and_to_http_format(HTTP_PREFIX_PERSISTENT, key)\n    }\n}",
                            "Signature": "#[inline]\n    fn add_persistent_prefix(&self, key: &str) -> FastStr {\n    ",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter"
                                }
                            },
                            "Results": [
                                {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/convert.rs",
                                    "Line": 200,
                                    "StartOffset": 6430,
                                    "EndOffset": 6437
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter.add_prefix_and_to_http_format",
                                    "File": "src/convert.rs",
                                    "Line": 201,
                                    "StartOffset": 6453,
                                    "EndOffset": 6482
                                }
                            ],
                            "GlobalVars": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "HTTP_PREFIX_PERSISTENT",
                                    "File": "src/convert.rs",
                                    "Line": 201,
                                    "StartOffset": 6483,
                                    "EndOffset": 6505
                                }
                            ]
                        },
                        "Converter<HttpConverter>.add_transient_prefix": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::convert",
                            "Name": "Converter<HttpConverter>.add_transient_prefix",
                            "File": "src/convert.rs",
                            "Line": 204,
                            "StartOffset": 6523,
                            "EndOffset": 6668,
                            "Content": "impl Converter for HttpConverter {\n    #[inline]\n    #[inline]\n    fn add_transient_prefix(&self, key: &str) -> FastStr {\n        self.add_prefix_and_to_http_format(HTTP_PREFIX_TRANSIENT, key)\n    }\n}",
                            "Signature": "#[inline]\n    fn add_transient_prefix(&self, key: &str) -> FastStr {\n    ",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter"
                                }
                            },
                            "Results": [
                                {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/convert.rs",
                                    "Line": 205,
                                    "StartOffset": 6582,
                                    "EndOffset": 6589
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter.add_prefix_and_to_http_format",
                                    "File": "src/convert.rs",
                                    "Line": 206,
                                    "StartOffset": 6605,
                                    "EndOffset": 6634
                                }
                            ],
                            "GlobalVars": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "HTTP_PREFIX_TRANSIENT",
                                    "File": "src/convert.rs",
                                    "Line": 206,
                                    "StartOffset": 6635,
                                    "EndOffset": 6656
                                }
                            ]
                        },
                        "Converter<HttpConverter>.remove_backward_prefix": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::convert",
                            "Name": "Converter<HttpConverter>.remove_backward_prefix",
                            "File": "src/convert.rs",
                            "Line": 224,
                            "StartOffset": 7153,
                            "EndOffset": 7309,
                            "Content": "impl Converter for HttpConverter {\n    #[inline]\n    #[inline]\n    fn remove_backward_prefix(&self, key: &str) -> Option<FastStr> {\n        self.remove_prefix_and_to_rpc_format(HTTP_PREFIX_BACKWARD, key)\n    }\n}",
                            "Signature": "#[inline]\n    fn remove_backward_prefix(&self, key: &str) -> Option<FastStr> {\n    ",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter"
                                }
                            },
                            "Results": [
                                {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/convert.rs",
                                    "Line": 225,
                                    "StartOffset": 7221,
                                    "EndOffset": 7228
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter.remove_prefix_and_to_rpc_format",
                                    "File": "src/convert.rs",
                                    "Line": 226,
                                    "StartOffset": 7245,
                                    "EndOffset": 7276
                                }
                            ],
                            "GlobalVars": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "HTTP_PREFIX_BACKWARD",
                                    "File": "src/convert.rs",
                                    "Line": 226,
                                    "StartOffset": 7277,
                                    "EndOffset": 7297
                                }
                            ]
                        },
                        "Converter<HttpConverter>.remove_persistent_prefix": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::convert",
                            "Name": "Converter<HttpConverter>.remove_persistent_prefix",
                            "File": "src/convert.rs",
                            "Line": 214,
                            "StartOffset": 6823,
                            "EndOffset": 6983,
                            "Content": "impl Converter for HttpConverter {\n    #[inline]\n    #[inline]\n    fn remove_persistent_prefix(&self, key: &str) -> Option<FastStr> {\n        self.remove_prefix_and_to_rpc_format(HTTP_PREFIX_PERSISTENT, key)\n    }\n}",
                            "Signature": "#[inline]\n    fn remove_persistent_prefix(&self, key: &str) -> Option<FastStr> {\n    ",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter"
                                }
                            },
                            "Results": [
                                {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/convert.rs",
                                    "Line": 215,
                                    "StartOffset": 6893,
                                    "EndOffset": 6900
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter.remove_prefix_and_to_rpc_format",
                                    "File": "src/convert.rs",
                                    "Line": 216,
                                    "StartOffset": 6917,
                                    "EndOffset": 6948
                                }
                            ],
                            "GlobalVars": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "HTTP_PREFIX_PERSISTENT",
                                    "File": "src/convert.rs",
                                    "Line": 216,
                                    "StartOffset": 6949,
                                    "EndOffset": 6971
                                }
                            ]
                        },
                        "Converter<HttpConverter>.remove_transient_prefix": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::convert",
                            "Name": "Converter<HttpConverter>.remove_transient_prefix",
                            "File": "src/convert.rs",
                            "Line": 219,
                            "StartOffset": 6989,
                            "EndOffset": 7147,
                            "Content": "impl Converter for HttpConverter {\n    #[inline]\n    #[inline]\n    fn remove_transient_prefix(&self, key: &str) -> Option<FastStr> {\n        self.remove_prefix_and_to_rpc_format(HTTP_PREFIX_TRANSIENT, key)\n    }\n}",
                            "Signature": "#[inline]\n    fn remove_transient_prefix(&self, key: &str) -> Option<FastStr> {\n    ",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter"
                                }
                            },
                            "Results": [
                                {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/convert.rs",
                                    "Line": 220,
                                    "StartOffset": 7058,
                                    "EndOffset": 7065
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter.remove_prefix_and_to_rpc_format",
                                    "File": "src/convert.rs",
                                    "Line": 221,
                                    "StartOffset": 7082,
                                    "EndOffset": 7113
                                }
                            ],
                            "GlobalVars": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "HTTP_PREFIX_TRANSIENT",
                                    "File": "src/convert.rs",
                                    "Line": 221,
                                    "StartOffset": 7114,
                                    "EndOffset": 7135
                                }
                            ]
                        },
                        "Converter<RpcConverter>.add_backward_prefix": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::convert",
                            "Name": "Converter<RpcConverter>.add_backward_prefix",
                            "File": "src/convert.rs",
                            "Line": 72,
                            "StartOffset": 2244,
                            "EndOffset": 2367,
                            "Content": "impl Converter for RpcConverter {\n    #[inline]\n    #[inline]\n    fn add_backward_prefix(&self, key: &str) -> FastStr {\n        self.add_prefix(RPC_PREFIX_BACKWARD, key)\n    }\n}",
                            "Signature": "#[inline]\n    fn add_backward_prefix(&self, key: &str) -> FastStr {\n    ",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "RpcConverter"
                                }
                            },
                            "Results": [
                                {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/convert.rs",
                                    "Line": 73,
                                    "StartOffset": 2302,
                                    "EndOffset": 2309
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "RpcConverter.add_prefix",
                                    "File": "src/convert.rs",
                                    "Line": 74,
                                    "StartOffset": 2325,
                                    "EndOffset": 2335
                                }
                            ],
                            "GlobalVars": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "RPC_PREFIX_BACKWARD",
                                    "File": "src/convert.rs",
                                    "Line": 74,
                                    "StartOffset": 2336,
                                    "EndOffset": 2355
                                }
                            ]
                        },
                        "Converter<RpcConverter>.add_persistent_prefix": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::convert",
                            "Name": "Converter<RpcConverter>.add_persistent_prefix",
                            "File": "src/convert.rs",
                            "Line": 62,
                            "StartOffset": 1980,
                            "EndOffset": 2107,
                            "Content": "impl Converter for RpcConverter {\n    #[inline]\n    #[inline]\n    fn add_persistent_prefix(&self, key: &str) -> FastStr {\n        self.add_prefix(RPC_PREFIX_PERSISTENT, key)\n    }\n}",
                            "Signature": "#[inline]\n    fn add_persistent_prefix(&self, key: &str) -> FastStr {\n    ",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "RpcConverter"
                                }
                            },
                            "Results": [
                                {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/convert.rs",
                                    "Line": 63,
                                    "StartOffset": 2040,
                                    "EndOffset": 2047
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "RpcConverter.add_prefix",
                                    "File": "src/convert.rs",
                                    "Line": 64,
                                    "StartOffset": 2063,
                                    "EndOffset": 2073
                                }
                            ],
                            "GlobalVars": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "RPC_PREFIX_PERSISTENT",
                                    "File": "src/convert.rs",
                                    "Line": 64,
                                    "StartOffset": 2074,
                                    "EndOffset": 2095
                                }
                            ]
                        },
                        "Converter<RpcConverter>.add_transient_prefix": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::convert",
                            "Name": "Converter<RpcConverter>.add_transient_prefix",
                            "File": "src/convert.rs",
                            "Line": 67,
                            "StartOffset": 2113,
                            "EndOffset": 2238,
                            "Content": "impl Converter for RpcConverter {\n    #[inline]\n    #[inline]\n    fn add_transient_prefix(&self, key: &str) -> FastStr {\n        self.add_prefix(RPC_PREFIX_TRANSIENT, key)\n    }\n}",
                            "Signature": "#[inline]\n    fn add_transient_prefix(&self, key: &str) -> FastStr {\n    ",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "RpcConverter"
                                }
                            },
                            "Results": [
                                {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/convert.rs",
                                    "Line": 68,
                                    "StartOffset": 2172,
                                    "EndOffset": 2179
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "RpcConverter.add_prefix",
                                    "File": "src/convert.rs",
                                    "Line": 69,
                                    "StartOffset": 2195,
                                    "EndOffset": 2205
                                }
                            ],
                            "GlobalVars": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "RPC_PREFIX_TRANSIENT",
                                    "File": "src/convert.rs",
                                    "Line": 69,
                                    "StartOffset": 2206,
                                    "EndOffset": 2226
                                }
                            ]
                        },
                        "Converter<RpcConverter>.remove_backward_prefix": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::convert",
                            "Name": "Converter<RpcConverter>.remove_backward_prefix",
                            "File": "src/convert.rs",
                            "Line": 87,
                            "StartOffset": 2665,
                            "EndOffset": 2802,
                            "Content": "impl Converter for RpcConverter {\n    #[inline]\n    #[inline]\n    fn remove_backward_prefix(&self, key: &str) -> Option<FastStr> {\n        self.remove_prefix(RPC_PREFIX_BACKWARD, key)\n    }\n}",
                            "Signature": "#[inline]\n    fn remove_backward_prefix(&self, key: &str) -> Option<FastStr> {\n    ",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "RpcConverter"
                                }
                            },
                            "Results": [
                                {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/convert.rs",
                                    "Line": 88,
                                    "StartOffset": 2733,
                                    "EndOffset": 2740
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "RpcConverter.remove_prefix",
                                    "File": "src/convert.rs",
                                    "Line": 89,
                                    "StartOffset": 2757,
                                    "EndOffset": 2770
                                }
                            ],
                            "GlobalVars": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "RPC_PREFIX_BACKWARD",
                                    "File": "src/convert.rs",
                                    "Line": 89,
                                    "StartOffset": 2771,
                                    "EndOffset": 2790
                                }
                            ]
                        },
                        "Converter<RpcConverter>.remove_persistent_prefix": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::convert",
                            "Name": "Converter<RpcConverter>.remove_persistent_prefix",
                            "File": "src/convert.rs",
                            "Line": 77,
                            "StartOffset": 2373,
                            "EndOffset": 2514,
                            "Content": "impl Converter for RpcConverter {\n    #[inline]\n    #[inline]\n    fn remove_persistent_prefix(&self, key: &str) -> Option<FastStr> {\n        self.remove_prefix(RPC_PREFIX_PERSISTENT, key)\n    }\n}",
                            "Signature": "#[inline]\n    fn remove_persistent_prefix(&self, key: &str) -> Option<FastStr> {\n    ",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "RpcConverter"
                                }
                            },
                            "Results": [
                                {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/convert.rs",
                                    "Line": 78,
                                    "StartOffset": 2443,
                                    "EndOffset": 2450
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "RpcConverter.remove_prefix",
                                    "File": "src/convert.rs",
                                    "Line": 79,
                                    "StartOffset": 2467,
                                    "EndOffset": 2480
                                }
                            ],
                            "GlobalVars": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "RPC_PREFIX_PERSISTENT",
                                    "File": "src/convert.rs",
                                    "Line": 79,
                                    "StartOffset": 2481,
                                    "EndOffset": 2502
                                }
                            ]
                        },
                        "Converter<RpcConverter>.remove_transient_prefix": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::convert",
                            "Name": "Converter<RpcConverter>.remove_transient_prefix",
                            "File": "src/convert.rs",
                            "Line": 82,
                            "StartOffset": 2520,
                            "EndOffset": 2659,
                            "Content": "impl Converter for RpcConverter {\n    #[inline]\n    #[inline]\n    fn remove_transient_prefix(&self, key: &str) -> Option<FastStr> {\n        self.remove_prefix(RPC_PREFIX_TRANSIENT, key)\n    }\n}",
                            "Signature": "#[inline]\n    fn remove_transient_prefix(&self, key: &str) -> Option<FastStr> {\n    ",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "RpcConverter"
                                }
                            },
                            "Results": [
                                {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/convert.rs",
                                    "Line": 83,
                                    "StartOffset": 2589,
                                    "EndOffset": 2596
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "RpcConverter.remove_prefix",
                                    "File": "src/convert.rs",
                                    "Line": 84,
                                    "StartOffset": 2613,
                                    "EndOffset": 2626
                                }
                            ],
                            "GlobalVars": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "RPC_PREFIX_TRANSIENT",
                                    "File": "src/convert.rs",
                                    "Line": 84,
                                    "StartOffset": 2627,
                                    "EndOffset": 2647
                                }
                            ]
                        },
                        "HttpConverter.add_prefix_and_to_http_format": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::convert",
                            "Name": "HttpConverter.add_prefix_and_to_http_format",
                            "File": "src/convert.rs",
                            "Line": 151,
                            "StartOffset": 4562,
                            "EndOffset": 5596,
                            "Content": "impl HttpConverter {\n    /// Convert `RPC_PERSIST_TEST_KEY` to `rpc-persist-test-key`\n    #[inline]\n    #[inline]\n    fn add_prefix_and_to_http_format(&self, prefix: &'static str, key: &str) -> FastStr {\n        // checks if we can use the inline buffer to reduce heap allocations\n        if prefix.len() + key.len() <= FASTSTR_INLINE_SIZE {\n            let mut inline_buf = [0u8; FASTSTR_INLINE_SIZE];\n            unsafe {\n                std::ptr::copy_nonoverlapping(\n                    prefix.as_ptr(),\n                    inline_buf.as_mut_ptr(),\n                    prefix.len(),\n                );\n                self.to_http_format(key, &mut inline_buf[prefix.len()..]);\n            }\n            return unsafe {\n                FastStr::new_u8_slice_unchecked(&inline_buf[..prefix.len() + key.len()])\n            };\n        }\n\n        let mut buf = Vec::with_capacity(prefix.len() + key.len());\n        buf.extend_from_slice(prefix.as_bytes());\n        unsafe {\n            buf.set_len(prefix.len() + key.len());\n        }\n        self.to_http_format(key, &mut buf);\n        unsafe { FastStr::from_vec_u8_unchecked(buf) }\n    }\n}",
                            "Signature": "#[inline]\n    fn add_prefix_and_to_http_format(&self, prefix: &'static str, key: &str) -> FastStr {\n    ",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter"
                                }
                            },
                            "Results": [
                                {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/convert.rs",
                                    "Line": 152,
                                    "StartOffset": 4652,
                                    "EndOffset": 4659
                                }
                            ],
                            "FunctionCalls": [
                                {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr::new_u8_slice_unchecked",
                                    "File": "src/convert.rs",
                                    "Line": 165,
                                    "StartOffset": 5206,
                                    "EndOffset": 5228
                                },
                                {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr::from_vec_u8_unchecked",
                                    "File": "src/convert.rs",
                                    "Line": 175,
                                    "StartOffset": 5562,
                                    "EndOffset": 5583
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter.to_http_format",
                                    "File": "src/convert.rs",
                                    "Line": 162,
                                    "StartOffset": 5085,
                                    "EndOffset": 5099
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/convert.rs",
                                    "Line": 165,
                                    "StartOffset": 5197,
                                    "EndOffset": 5204
                                }
                            ],
                            "GlobalVars": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "FASTSTR_INLINE_SIZE",
                                    "File": "src/convert.rs",
                                    "Line": 154,
                                    "StartOffset": 4778,
                                    "EndOffset": 4797
                                }
                            ]
                        },
                        "HttpConverter.remove_prefix_and_to_rpc_format": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::convert",
                            "Name": "HttpConverter.remove_prefix_and_to_rpc_format",
                            "File": "src/convert.rs",
                            "Line": 178,
                            "StartOffset": 5602,
                            "EndOffset": 6327,
                            "Content": "impl HttpConverter {\n    /// Convert `RPC_PERSIST_TEST_KEY` to `rpc-persist-test-key`\n    #[inline]\n    #[inline]\n    fn remove_prefix_and_to_rpc_format(&self, prefix: &'static str, key: &str) -> Option<FastStr> {\n        let key = key.strip_prefix(prefix)?;\n\n        // checks if we can use the inline buffer to reduce heap allocations\n        if key.len() <= FASTSTR_INLINE_SIZE {\n            let mut inline_buf = [0u8; FASTSTR_INLINE_SIZE];\n            self.to_rpc_format(key, &mut inline_buf);\n            return Some(unsafe { FastStr::new_u8_slice_unchecked(&inline_buf[..key.len()]) });\n        }\n\n        let mut buf = Vec::with_capacity(key.len());\n        unsafe {\n            buf.set_len(key.len());\n        }\n        self.to_rpc_format(key, &mut buf);\n        unsafe { Some(FastStr::from_vec_u8_unchecked(buf)) }\n    }\n}",
                            "Signature": "#[inline]\n    fn remove_prefix_and_to_rpc_format(&self, prefix: &'static str, key: &str) -> Option<FastStr> {\n    ",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter"
                                }
                            },
                            "Results": [
                                {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/convert.rs",
                                    "Line": 179,
                                    "StartOffset": 5701,
                                    "EndOffset": 5708
                                }
                            ],
                            "FunctionCalls": [
                                {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr::new_u8_slice_unchecked",
                                    "File": "src/convert.rs",
                                    "Line": 186,
                                    "StartOffset": 6038,
                                    "EndOffset": 6060
                                },
                                {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr::from_vec_u8_unchecked",
                                    "File": "src/convert.rs",
                                    "Line": 194,
                                    "StartOffset": 6292,
                                    "EndOffset": 6313
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter.to_rpc_format",
                                    "File": "src/convert.rs",
                                    "Line": 185,
                                    "StartOffset": 5959,
                                    "EndOffset": 5972
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/convert.rs",
                                    "Line": 186,
                                    "StartOffset": 6029,
                                    "EndOffset": 6036
                                }
                            ],
                            "GlobalVars": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "FASTSTR_INLINE_SIZE",
                                    "File": "src/convert.rs",
                                    "Line": 183,
                                    "StartOffset": 5859,
                                    "EndOffset": 5878
                                }
                            ]
                        },
                        "HttpConverter.to_http_format": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::convert",
                            "Name": "HttpConverter.to_http_format",
                            "File": "src/convert.rs",
                            "Line": 97,
                            "StartOffset": 2881,
                            "EndOffset": 3716,
                            "Content": "impl HttpConverter {\n    /// Convert `RPC_PERSIST_TEST_KEY` to `rpc-persist-test-key`\n    #[inline]\n    /// Convert `RPC_PERSIST_TEST_KEY` to `rpc-persist-test-key`\n    #[inline]\n    fn to_http_format(&self, key: &str, buf: &mut [u8]) {\n        let mut l = 0;\n        for ch in key.chars() {\n            let ch = match ch {\n                'A'..='Z' => ch.to_ascii_lowercase(),\n                '_' => '-',\n                _ => ch,\n            };\n            let len = ch.len_utf8();\n            match len {\n                1 => unsafe {\n                    *buf.get_unchecked_mut(l) = ch as u8;\n                },\n                _ => unsafe {\n                    std::ptr::copy_nonoverlapping(\n                        ch.encode_utf8(&mut [0; 4]).as_bytes().as_ptr(),\n                        buf.as_mut_ptr().add(l),\n                        len,\n                    );\n                },\n            }\n            l += len;\n        }\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter"
                                }
                            }
                        },
                        "HttpConverter.to_http_format_string": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::convert",
                            "Name": "HttpConverter.to_http_format_string",
                            "File": "src/convert.rs",
                            "Line": 340,
                            "StartOffset": 10459,
                            "EndOffset": 10747,
                            "Content": "impl HttpConverter {\n    fn to_http_format_string(&self, key: &str) -> String {\n            let mut buf = Vec::with_capacity(key.len());\n            unsafe {\n                buf.set_len(key.len());\n            }\n            self.to_http_format(key, &mut buf);\n            String::from_utf8(buf).unwrap()\n        }\n}",
                            "Signature": "fn to_http_format_string(&self, key: &str) -> String {\n    ",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter.to_http_format",
                                    "File": "src/convert.rs",
                                    "Line": 345,
                                    "StartOffset": 10663,
                                    "EndOffset": 10677
                                }
                            ]
                        },
                        "HttpConverter.to_rpc_format": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::convert",
                            "Name": "HttpConverter.to_rpc_format",
                            "File": "src/convert.rs",
                            "Line": 124,
                            "StartOffset": 3722,
                            "EndOffset": 4556,
                            "Content": "impl HttpConverter {\n    /// Convert `RPC_PERSIST_TEST_KEY` to `rpc-persist-test-key`\n    #[inline]\n    /// Convert `rpc-persist-test-key` to `RPC_PERSIST_TEST_KEY`\n    #[inline]\n    fn to_rpc_format(&self, key: &str, buf: &mut [u8]) {\n        let mut l = 0;\n        for ch in key.chars() {\n            let ch = match ch {\n                'a'..='z' => ch.to_ascii_uppercase(),\n                '-' => '_',\n                _ => ch,\n            };\n            let len = ch.len_utf8();\n            match len {\n                1 => unsafe {\n                    *buf.get_unchecked_mut(l) = ch as u8;\n                },\n                _ => unsafe {\n                    std::ptr::copy_nonoverlapping(\n                        ch.encode_utf8(&mut [0; 4]).as_bytes().as_ptr(),\n                        buf.as_mut_ptr().add(l),\n                        len,\n                    );\n                },\n            }\n            l += len;\n        }\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter"
                                }
                            }
                        },
                        "HttpConverter.to_rpc_format_string": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::convert",
                            "Name": "HttpConverter.to_rpc_format_string",
                            "File": "src/convert.rs",
                            "Line": 349,
                            "StartOffset": 10757,
                            "EndOffset": 11043,
                            "Content": "impl HttpConverter {\n    fn to_rpc_format_string(&self, key: &str) -> String {\n            let mut buf = Vec::with_capacity(key.len());\n            unsafe {\n                buf.set_len(key.len());\n            }\n            self.to_rpc_format(key, &mut buf);\n            String::from_utf8(buf).unwrap()\n        }\n}",
                            "Signature": "fn to_rpc_format_string(&self, key: &str) -> String {\n    ",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter.to_rpc_format",
                                    "File": "src/convert.rs",
                                    "Line": 354,
                                    "StartOffset": 10960,
                                    "EndOffset": 10973
                                }
                            ]
                        },
                        "RpcConverter.add_prefix": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::convert",
                            "Name": "RpcConverter.add_prefix",
                            "File": "src/convert.rs",
                            "Line": 27,
                            "StartOffset": 758,
                            "EndOffset": 1758,
                            "Content": "impl RpcConverter {\n    #[inline]\n    #[inline]\n    fn add_prefix(&self, prefix: &'static str, key: &str) -> FastStr {\n        // checks if we can use the inline buffer to reduce heap allocations\n        if prefix.len() + key.len() <= FASTSTR_INLINE_SIZE {\n            let mut inline_buf = [0u8; FASTSTR_INLINE_SIZE];\n            unsafe {\n                std::ptr::copy_nonoverlapping(\n                    prefix.as_ptr(),\n                    inline_buf.as_mut_ptr(),\n                    prefix.len(),\n                );\n                std::ptr::copy_nonoverlapping(\n                    key.as_ptr(),\n                    inline_buf.as_mut_ptr().add(prefix.len()),\n                    key.len(),\n                );\n            }\n            return unsafe {\n                FastStr::new_u8_slice_unchecked(&inline_buf[..prefix.len() + key.len()])\n            };\n        }\n        let mut res = String::with_capacity(prefix.len() + key.len());\n        res.push_str(prefix);\n        res.push_str(key);\n        FastStr::from_string(res)\n    }\n}",
                            "Signature": "#[inline]\n    fn add_prefix(&self, prefix: &'static str, key: &str) -> FastStr {\n    ",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "RpcConverter"
                                }
                            },
                            "Results": [
                                {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/convert.rs",
                                    "Line": 28,
                                    "StartOffset": 829,
                                    "EndOffset": 836
                                }
                            ],
                            "FunctionCalls": [
                                {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr::new_u8_slice_unchecked",
                                    "File": "src/convert.rs",
                                    "Line": 45,
                                    "StartOffset": 1502,
                                    "EndOffset": 1524
                                },
                                {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr::from_string",
                                    "File": "src/convert.rs",
                                    "Line": 51,
                                    "StartOffset": 1736,
                                    "EndOffset": 1747
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/convert.rs",
                                    "Line": 45,
                                    "StartOffset": 1493,
                                    "EndOffset": 1500
                                }
                            ],
                            "GlobalVars": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "FASTSTR_INLINE_SIZE",
                                    "File": "src/convert.rs",
                                    "Line": 30,
                                    "StartOffset": 955,
                                    "EndOffset": 974
                                }
                            ]
                        },
                        "RpcConverter.remove_prefix": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::convert",
                            "Name": "RpcConverter.remove_prefix",
                            "File": "src/convert.rs",
                            "Line": 54,
                            "StartOffset": 1764,
                            "EndOffset": 1938,
                            "Content": "impl RpcConverter {\n    #[inline]\n    #[inline]\n    fn remove_prefix(&self, prefix: &'static str, key: &str) -> Option<FastStr> {\n        let key = key.strip_prefix(prefix)?;\n        Some(FastStr::new(key))\n    }\n}",
                            "Signature": "#[inline]\n    fn remove_prefix(&self, prefix: &'static str, key: &str) -> Option<FastStr> {\n    ",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "RpcConverter"
                                }
                            },
                            "Results": [
                                {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/convert.rs",
                                    "Line": 55,
                                    "StartOffset": 1845,
                                    "EndOffset": 1852
                                }
                            ],
                            "FunctionCalls": [
                                {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr::new",
                                    "File": "src/convert.rs",
                                    "Line": 57,
                                    "StartOffset": 1923,
                                    "EndOffset": 1926
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/convert.rs",
                                    "Line": 57,
                                    "StartOffset": 1914,
                                    "EndOffset": 1921
                                }
                            ]
                        }
                    },
                    "Types": {
                        "Converter": {
                            "Exported": true,
                            "TypeKind": "interface",
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::convert",
                            "Name": "Converter",
                            "File": "src/convert.rs",
                            "Line": 10,
                            "StartOffset": 214,
                            "EndOffset": 643,
                            "Content": "pub trait Converter {\n    fn add_persistent_prefix(&self, key: &str) -> FastStr;\n    fn add_transient_prefix(&self, key: &str) -> FastStr;\n    #[allow(dead_code)]\n    fn add_backward_prefix(&self, key: &str) -> FastStr;\n\n    fn remove_persistent_prefix(&self, key: &str) -> Option<FastStr>;\n    fn remove_transient_prefix(&self, key: &str) -> Option<FastStr>;\n    fn remove_backward_prefix(&self, key: &str) -> Option<FastStr>;\n}",
                            "SubStruct": [
                                {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/convert.rs",
                                    "Line": 11,
                                    "StartOffset": 286,
                                    "EndOffset": 293
                                }
                            ]
                        },
                        "HttpConverter": {
                            "Exported": true,
                            "TypeKind": "struct",
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::convert",
                            "Name": "HttpConverter",
                            "File": "src/convert.rs",
                            "Line": 93,
                            "StartOffset": 2806,
                            "EndOffset": 2854,
                            "Content": "#[derive(Clone, Copy)]\npub struct HttpConverter;",
                            "Methods": {
                                "add_backward_prefix": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "Converter<HttpConverter>.add_backward_prefix"
                                },
                                "add_persistent_prefix": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "Converter<HttpConverter>.add_persistent_prefix"
                                },
                                "add_prefix_and_to_http_format": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter.add_prefix_and_to_http_format"
                                },
                                "add_transient_prefix": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "Converter<HttpConverter>.add_transient_prefix"
                                },
                                "remove_backward_prefix": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "Converter<HttpConverter>.remove_backward_prefix"
                                },
                                "remove_persistent_prefix": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "Converter<HttpConverter>.remove_persistent_prefix"
                                },
                                "remove_prefix_and_to_rpc_format": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter.remove_prefix_and_to_rpc_format"
                                },
                                "remove_transient_prefix": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "Converter<HttpConverter>.remove_transient_prefix"
                                },
                                "to_http_format": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter.to_http_format"
                                },
                                "to_http_format_string": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter.to_http_format_string"
                                },
                                "to_rpc_format": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter.to_rpc_format"
                                },
                                "to_rpc_format_string": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter.to_rpc_format_string"
                                }
                            }
                        },
                        "RpcConverter": {
                            "Exported": true,
                            "TypeKind": "struct",
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::convert",
                            "Name": "RpcConverter",
                            "File": "src/convert.rs",
                            "Line": 23,
                            "StartOffset": 685,
                            "EndOffset": 732,
                            "Content": "#[derive(Clone, Copy)]\npub struct RpcConverter;",
                            "Methods": {
                                "add_backward_prefix": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "Converter<RpcConverter>.add_backward_prefix"
                                },
                                "add_persistent_prefix": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "Converter<RpcConverter>.add_persistent_prefix"
                                },
                                "add_prefix": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "RpcConverter.add_prefix"
                                },
                                "add_transient_prefix": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "Converter<RpcConverter>.add_transient_prefix"
                                },
                                "remove_backward_prefix": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "Converter<RpcConverter>.remove_backward_prefix"
                                },
                                "remove_persistent_prefix": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "Converter<RpcConverter>.remove_persistent_prefix"
                                },
                                "remove_prefix": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "RpcConverter.remove_prefix"
                                },
                                "remove_transient_prefix": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "Converter<RpcConverter>.remove_transient_prefix"
                                }
                            }
                        }
                    },
                    "Vars": {
                        "FASTSTR_INLINE_SIZE": {
                            "IsExported": false,
                            "IsConst": true,
                            "IsPointer": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::convert",
                            "Name": "FASTSTR_INLINE_SIZE",
                            "File": "src/convert.rs",
                            "Line": 21,
                            "StartOffset": 645,
                            "EndOffset": 683,
                            "Content": "const FASTSTR_INLINE_SIZE: usize = 24;"
                        }
                    }
                },
                "metainfo::faststr_map": {
                    "IsMain": false,
                    "IsTest": false,
                    "PkgPath": "metainfo::faststr_map",
                    "Functions": {
                        "FastStrMap.capacity": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::faststr_map",
                            "Name": "FastStrMap.capacity",
                            "File": "src/faststr_map.rs",
                            "Line": 84,
                            "StartOffset": 1986,
                            "EndOffset": 2069,
                            "Content": "impl FastStrMap {\n    #[inline]\n    #[inline]\n    pub fn capacity(&self) -> usize {\n        self.inner.capacity()\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "capacity",
                                    "File": "src/faststr_map.rs",
                                    "Line": 86,
                                    "StartOffset": 2053,
                                    "EndOffset": 2061
                                }
                            ]
                        },
                        "FastStrMap.clear": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::faststr_map",
                            "Name": "FastStrMap.clear",
                            "File": "src/faststr_map.rs",
                            "Line": 54,
                            "StartOffset": 1362,
                            "EndOffset": 1435,
                            "Content": "impl FastStrMap {\n    #[inline]\n    #[inline]\n    pub fn clear(&mut self) {\n        self.inner.clear();\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "clear",
                                    "File": "src/faststr_map.rs",
                                    "Line": 56,
                                    "StartOffset": 1421,
                                    "EndOffset": 1426
                                }
                            ]
                        },
                        "FastStrMap.contains": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::faststr_map",
                            "Name": "FastStrMap.contains",
                            "File": "src/faststr_map.rs",
                            "Line": 44,
                            "StartOffset": 1111,
                            "EndOffset": 1227,
                            "Content": "impl FastStrMap {\n    #[inline]\n    #[inline]\n    pub fn contains<T: 'static>(&self) -> bool {\n        self.inner.contains_key(&TypeId::of::<T>())\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "contains_key",
                                    "File": "src/faststr_map.rs",
                                    "Line": 46,
                                    "StartOffset": 1189,
                                    "EndOffset": 1201
                                }
                            ]
                        },
                        "FastStrMap.entry": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::faststr_map",
                            "Name": "FastStrMap.entry",
                            "File": "src/faststr_map.rs",
                            "Line": 69,
                            "StartOffset": 1682,
                            "EndOffset": 1813,
                            "Content": "impl FastStrMap {\n    #[inline]\n    #[inline]\n    pub fn entry<T: 'static>(&mut self) -> Entry<'_, TypeId, FastStr> {\n        self.inner.entry(TypeId::of::<T>())\n    }\n}",
                            "Signature": "#[inline]\n    pub fn entry<T: 'static>(&mut self) -> Entry<'_, TypeId, FastStr> {\n    ",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap"
                                }
                            },
                            "Results": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "Entry",
                                    "File": "src/faststr_map.rs",
                                    "Line": 70,
                                    "StartOffset": 1735,
                                    "EndOffset": 1740
                                },
                                {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/faststr_map.rs",
                                    "Line": 70,
                                    "StartOffset": 1753,
                                    "EndOffset": 1760
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "entry",
                                    "File": "src/faststr_map.rs",
                                    "Line": 71,
                                    "StartOffset": 1783,
                                    "EndOffset": 1788
                                }
                            ]
                        },
                        "FastStrMap.extend": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::faststr_map",
                            "Name": "FastStrMap.extend",
                            "File": "src/faststr_map.rs",
                            "Line": 59,
                            "StartOffset": 1441,
                            "EndOffset": 1545,
                            "Content": "impl FastStrMap {\n    #[inline]\n    #[inline]\n    pub fn extend(&mut self, other: FastStrMap) {\n        self.inner.extend(other.inner)\n    }\n}",
                            "Signature": "#[inline]\n    pub fn extend(&mut self, other: FastStrMap) {\n    ",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap"
                                }
                            },
                            "Params": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap",
                                    "File": "src/faststr_map.rs",
                                    "Line": 60,
                                    "StartOffset": 1487,
                                    "EndOffset": 1497
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "extend",
                                    "File": "src/faststr_map.rs",
                                    "Line": 61,
                                    "StartOffset": 1520,
                                    "EndOffset": 1526
                                }
                            ]
                        },
                        "FastStrMap.get": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::faststr_map",
                            "Name": "FastStrMap.get",
                            "File": "src/faststr_map.rs",
                            "Line": 34,
                            "StartOffset": 855,
                            "EndOffset": 969,
                            "Content": "impl FastStrMap {\n    #[inline]\n    #[inline]\n    pub fn get<T: 'static>(&self) -> Option<&FastStr> {\n        self.inner.get(&TypeId::of::<T>())\n    }\n}",
                            "Signature": "#[inline]\n    pub fn get<T: 'static>(&self) -> Option<&FastStr> {\n    ",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap"
                                }
                            },
                            "Results": [
                                {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/faststr_map.rs",
                                    "Line": 35,
                                    "StartOffset": 910,
                                    "EndOffset": 917
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "get",
                                    "File": "src/faststr_map.rs",
                                    "Line": 36,
                                    "StartOffset": 940,
                                    "EndOffset": 943
                                }
                            ]
                        },
                        "FastStrMap.get_mut": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::faststr_map",
                            "Name": "FastStrMap.get_mut",
                            "File": "src/faststr_map.rs",
                            "Line": 39,
                            "StartOffset": 975,
                            "EndOffset": 1105,
                            "Content": "impl FastStrMap {\n    #[inline]\n    #[inline]\n    pub fn get_mut<T: 'static>(&mut self) -> Option<&mut FastStr> {\n        self.inner.get_mut(&TypeId::of::<T>())\n    }\n}",
                            "Signature": "#[inline]\n    pub fn get_mut<T: 'static>(&mut self) -> Option<&mut FastStr> {\n    ",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap"
                                }
                            },
                            "Results": [
                                {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/faststr_map.rs",
                                    "Line": 40,
                                    "StartOffset": 1042,
                                    "EndOffset": 1049
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "get_mut",
                                    "File": "src/faststr_map.rs",
                                    "Line": 41,
                                    "StartOffset": 1072,
                                    "EndOffset": 1079
                                }
                            ]
                        },
                        "FastStrMap.insert": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::faststr_map",
                            "Name": "FastStrMap.insert",
                            "File": "src/faststr_map.rs",
                            "Line": 29,
                            "StartOffset": 716,
                            "EndOffset": 849,
                            "Content": "impl FastStrMap {\n    #[inline]\n    #[inline]\n    pub fn insert<T: Send + Sync + 'static>(&mut self, t: FastStr) {\n        self.inner.insert(TypeId::of::<T>(), t);\n    }\n}",
                            "Signature": "#[inline]\n    pub fn insert<T: Send + Sync + 'static>(&mut self, t: FastStr) {\n    ",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap"
                                }
                            },
                            "Params": [
                                {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/faststr_map.rs",
                                    "Line": 30,
                                    "StartOffset": 784,
                                    "EndOffset": 791
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "insert",
                                    "File": "src/faststr_map.rs",
                                    "Line": 31,
                                    "StartOffset": 814,
                                    "EndOffset": 820
                                }
                            ]
                        },
                        "FastStrMap.is_empty": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::faststr_map",
                            "Name": "FastStrMap.is_empty",
                            "File": "src/faststr_map.rs",
                            "Line": 74,
                            "StartOffset": 1819,
                            "EndOffset": 1901,
                            "Content": "impl FastStrMap {\n    #[inline]\n    #[inline]\n    pub fn is_empty(&self) -> bool {\n        self.inner.is_empty()\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "is_empty",
                                    "File": "src/faststr_map.rs",
                                    "Line": 76,
                                    "StartOffset": 1885,
                                    "EndOffset": 1893
                                }
                            ]
                        },
                        "FastStrMap.iter": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::faststr_map",
                            "Name": "FastStrMap.iter",
                            "File": "src/faststr_map.rs",
                            "Line": 64,
                            "StartOffset": 1551,
                            "EndOffset": 1676,
                            "Content": "impl FastStrMap {\n    #[inline]\n    #[inline]\n    pub fn iter(&self) -> ::std::collections::hash_map::Iter<'_, TypeId, FastStr> {\n        self.inner.iter()\n    }\n}",
                            "Signature": "#[inline]\n    pub fn iter(&self) -> ::std::collections::hash_map::Iter<'_, TypeId, FastStr> {\n    ",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap"
                                }
                            },
                            "Results": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "Iter",
                                    "File": "src/faststr_map.rs",
                                    "Line": 65,
                                    "StartOffset": 1617,
                                    "EndOffset": 1621
                                },
                                {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/faststr_map.rs",
                                    "Line": 65,
                                    "StartOffset": 1634,
                                    "EndOffset": 1641
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "iter",
                                    "File": "src/faststr_map.rs",
                                    "Line": 66,
                                    "StartOffset": 1664,
                                    "EndOffset": 1668
                                }
                            ]
                        },
                        "FastStrMap.len": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::faststr_map",
                            "Name": "FastStrMap.len",
                            "File": "src/faststr_map.rs",
                            "Line": 79,
                            "StartOffset": 1907,
                            "EndOffset": 1980,
                            "Content": "impl FastStrMap {\n    #[inline]\n    #[inline]\n    pub fn len(&self) -> usize {\n        self.inner.len()\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "len",
                                    "File": "src/faststr_map.rs",
                                    "Line": 81,
                                    "StartOffset": 1969,
                                    "EndOffset": 1972
                                }
                            ]
                        },
                        "FastStrMap.remove": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::faststr_map",
                            "Name": "FastStrMap.remove",
                            "File": "src/faststr_map.rs",
                            "Line": 49,
                            "StartOffset": 1233,
                            "EndOffset": 1356,
                            "Content": "impl FastStrMap {\n    #[inline]\n    #[inline]\n    pub fn remove<T: 'static>(&mut self) -> Option<FastStr> {\n        self.inner.remove(&TypeId::of::<T>())\n    }\n}",
                            "Signature": "#[inline]\n    pub fn remove<T: 'static>(&mut self) -> Option<FastStr> {\n    ",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap"
                                }
                            },
                            "Results": [
                                {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/faststr_map.rs",
                                    "Line": 50,
                                    "StartOffset": 1294,
                                    "EndOffset": 1301
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "remove",
                                    "File": "src/faststr_map.rs",
                                    "Line": 51,
                                    "StartOffset": 1324,
                                    "EndOffset": 1330
                                }
                            ]
                        },
                        "FastStrMap::with_capacity": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::faststr_map",
                            "Name": "FastStrMap::with_capacity",
                            "File": "src/faststr_map.rs",
                            "Line": 22,
                            "StartOffset": 528,
                            "EndOffset": 710,
                            "Content": "impl FastStrMap {\n    #[inline]\n    #[inline]\n    pub fn with_capacity(capacity: usize) -> Self {\n        Self {\n            inner: FxHashMapRand::with_capacity_and_hasher(capacity, Default::default()),\n        }\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap"
                                }
                            },
                            "FunctionCalls": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "with_capacity_and_hasher",
                                    "File": "src/faststr_map.rs",
                                    "Line": 25,
                                    "StartOffset": 639,
                                    "EndOffset": 663
                                },
                                {
                                    "ModPath": "rustc-hash@2.1.1",
                                    "PkgPath": "rustc-hash::random_state",
                                    "Name": "FxRandomState::default",
                                    "File": "src/faststr_map.rs",
                                    "Line": 25,
                                    "StartOffset": 683,
                                    "EndOffset": 690
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "rustc-hash@2.1.1",
                                    "PkgPath": "rustc-hash::random_state",
                                    "Name": "FxHashMapRand",
                                    "File": "src/faststr_map.rs",
                                    "Line": 25,
                                    "StartOffset": 624,
                                    "EndOffset": 637
                                }
                            ]
                        }
                    },
                    "Types": {
                        "FastStrMap": {
                            "Exported": true,
                            "TypeKind": "struct",
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::faststr_map",
                            "Name": "FastStrMap",
                            "File": "src/faststr_map.rs",
                            "Line": 6,
                            "StartOffset": 109,
                            "EndOffset": 386,
                            "Content": "/// This is an optimized version of TypeMap to FastStr that eliminates the need to Box the values.\n///\n/// This map is suitable for T that impls both From<FastStr> and Into<FastStr>.\n#[derive(Debug, Default)]\npub struct FastStrMap {\n    inner: FxHashMapRand<TypeId, FastStr>,\n}",
                            "SubStruct": [
                                {
                                    "ModPath": "rustc-hash@2.1.1",
                                    "PkgPath": "rustc-hash::random_state",
                                    "Name": "FxHashMapRand",
                                    "File": "src/faststr_map.rs",
                                    "Line": 11,
                                    "StartOffset": 353,
                                    "EndOffset": 366
                                },
                                {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/faststr_map.rs",
                                    "Line": 11,
                                    "StartOffset": 375,
                                    "EndOffset": 382
                                }
                            ],
                            "Methods": {
                                "capacity": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap.capacity"
                                },
                                "clear": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap.clear"
                                },
                                "contains": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap.contains"
                                },
                                "entry": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap.entry"
                                },
                                "extend": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap.extend"
                                },
                                "get": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap.get"
                                },
                                "get_mut": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap.get_mut"
                                },
                                "insert": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap.insert"
                                },
                                "is_empty": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap.is_empty"
                                },
                                "iter": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap.iter"
                                },
                                "len": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap.len"
                                },
                                "remove": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap.remove"
                                }
                            }
                        }
                    },
                    "Vars": {}
                },
                "metainfo::forward": {
                    "IsMain": false,
                    "IsTest": false,
                    "PkgPath": "metainfo::forward",
                    "Functions": {},
                    "Types": {
                        "Forward": {
                            "Exported": true,
                            "TypeKind": "interface",
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::forward",
                            "Name": "Forward",
                            "File": "src/forward.rs",
                            "Line": 5,
                            "StartOffset": 45,
                            "EndOffset": 2023,
                            "Content": "pub trait Forward {\n    fn get_persistent<K: AsRef<str>>(&self, key: K) -> Option<FastStr>;\n    fn get_transient<K: AsRef<str>>(&self, key: K) -> Option<FastStr>;\n    fn get_upstream<K: AsRef<str>>(&self, key: K) -> Option<FastStr>;\n\n    fn get_all_persistents(&self) -> Option<&AHashMap<FastStr, FastStr>>;\n    fn get_all_transients(&self) -> Option<&AHashMap<FastStr, FastStr>>;\n    fn get_all_upstreams(&self) -> Option<&AHashMap<FastStr, FastStr>>;\n\n    fn get_all_persistents_and_transients_with_rpc_prefix(\n        &self,\n    ) -> Option<AHashMap<FastStr, FastStr>>;\n    fn get_all_persistents_and_transients_with_http_prefix(\n        &self,\n    ) -> Option<AHashMap<FastStr, FastStr>>;\n\n    fn iter_persistents_and_transients_with_rpc_prefix(\n        &self,\n    ) -> impl Iterator<Item = (FastStr, &FastStr)>;\n    fn iter_persistents_and_transients_with_http_prefix(\n        &self,\n    ) -> impl Iterator<Item = (FastStr, &FastStr)>;\n\n    fn set_persistent<K: Into<FastStr>, V: Into<FastStr>>(&mut self, key: K, value: V);\n    fn set_transient<K: Into<FastStr>, V: Into<FastStr>>(&mut self, key: K, value: V);\n    fn set_upstream<K: Into<FastStr>, V: Into<FastStr>>(&mut self, key: K, value: V);\n\n    fn strip_rpc_prefix_and_set_persistent<K: AsRef<str>, V: Into<FastStr>>(\n        &mut self,\n        key: K,\n        value: V,\n    );\n    fn strip_rpc_prefix_and_set_upstream<K: AsRef<str>, V: Into<FastStr>>(\n        &mut self,\n        key: K,\n        value: V,\n    );\n\n    fn strip_http_prefix_and_set_persistent<K: AsRef<str>, V: Into<FastStr>>(\n        &mut self,\n        key: K,\n        value: V,\n    );\n    fn strip_http_prefix_and_set_upstream<K: AsRef<str>, V: Into<FastStr>>(\n        &mut self,\n        key: K,\n        value: V,\n    );\n\n    fn del_persistent<K: AsRef<str>>(&mut self, key: K) -> Option<FastStr>;\n    fn del_transient<K: AsRef<str>>(&mut self, key: K) -> Option<FastStr>;\n    fn del_upstream<K: AsRef<str>>(&mut self, key: K) -> Option<FastStr>;\n}",
                            "SubStruct": [
                                {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/forward.rs",
                                    "Line": 6,
                                    "StartOffset": 127,
                                    "EndOffset": 134
                                },
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap",
                                    "File": "src/forward.rs",
                                    "Line": 10,
                                    "StartOffset": 324,
                                    "EndOffset": 332
                                }
                            ]
                        }
                    },
                    "Vars": {}
                },
                "metainfo::kv": {
                    "IsMain": false,
                    "IsTest": false,
                    "PkgPath": "metainfo::kv",
                    "Functions": {
                        "Node.clear": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::kv",
                            "Name": "Node.clear",
                            "File": "src/kv.rs",
                            "Line": 121,
                            "StartOffset": 3091,
                            "EndOffset": 3387,
                            "Content": "impl Node {\n    set_impl!(persistent);\n    set_impl!(transient);\n    set_impl!(stale);\n\n    del_impl!(persistent);\n    del_impl!(transient);\n    del_impl!(stale);\n\n    get_impl!(persistent);\n    get_impl!(transient);\n    get_impl!(stale);\n\n    get_all_impl!(persistent);\n    get_all_impl!(transient);\n    get_all_impl!(stale);\n\n    #[inline]\n    #[inline]\n    pub fn clear(&mut self) {\n        if let Some(v) = self.persistent.as_mut() {\n            v.clear();\n        }\n\n        if let Some(v) = self.transient.as_mut() {\n            v.clear();\n        }\n\n        if let Some(v) = self.stale.as_mut() {\n            v.clear();\n        }\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::kv",
                                    "Name": "Node"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "clear",
                                    "File": "src/kv.rs",
                                    "Line": 124,
                                    "StartOffset": 3197,
                                    "EndOffset": 3202
                                }
                            ]
                        },
                        "Node.extend": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::kv",
                            "Name": "Node.extend",
                            "File": "src/kv.rs",
                            "Line": 94,
                            "StartOffset": 2340,
                            "EndOffset": 3085,
                            "Content": "impl Node {\n    set_impl!(persistent);\n    set_impl!(transient);\n    set_impl!(stale);\n\n    del_impl!(persistent);\n    del_impl!(transient);\n    del_impl!(stale);\n\n    get_impl!(persistent);\n    get_impl!(transient);\n    get_impl!(stale);\n\n    get_all_impl!(persistent);\n    get_all_impl!(transient);\n    get_all_impl!(stale);\n\n    #[inline]\n    #[inline]\n    pub fn extend(&mut self, other: Self) {\n        if let Some(v) = other.persistent {\n            if self.persistent.is_none() {\n                self.persistent = Some(v);\n            } else {\n                self.persistent.as_mut().unwrap().extend(v);\n            }\n        }\n\n        if let Some(v) = other.transient {\n            if self.transient.is_none() {\n                self.transient = Some(v);\n            } else {\n                self.transient.as_mut().unwrap().extend(v);\n            }\n        }\n\n        if let Some(v) = other.stale {\n            if self.stale.is_none() {\n                self.stale = Some(v);\n            } else {\n                self.stale.as_mut().unwrap().extend(v);\n            }\n        }\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::kv",
                                    "Name": "Node"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap.extend",
                                    "File": "src/kv.rs",
                                    "Line": 100,
                                    "StartOffset": 2595,
                                    "EndOffset": 2601
                                }
                            ]
                        },
                        "del_impl": {
                            "Exported": true,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::kv",
                            "Name": "del_impl",
                            "File": "src/kv.rs",
                            "Line": 25,
                            "StartOffset": 636,
                            "EndOffset": 1040,
                            "Content": "macro_rules! del_impl {\n    ($name:ident) => {\n        paste! {\n            #[inline]\n            pub fn [<del_ $name>]<K: AsRef<str>>(&mut self, key: K) -> Option<FastStr> {\n                let key = key.as_ref();\n                if let Some(v) = self.$name.as_mut() {\n                    v.remove(key)\n                } else {\n                    None\n                }\n            }\n        }\n    };\n}",
                            "Signature": "macro_rules! del_impl {\n    ($name:ident) ",
                            "Results": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::kv",
                                    "Name": "del_impl",
                                    "File": "src/kv.rs",
                                    "Line": 25,
                                    "StartOffset": 649,
                                    "EndOffset": 657
                                }
                            ]
                        },
                        "get_all_impl": {
                            "Exported": true,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::kv",
                            "Name": "get_all_impl",
                            "File": "src/kv.rs",
                            "Line": 58,
                            "StartOffset": 1482,
                            "EndOffset": 1728,
                            "Content": "macro_rules! get_all_impl {\n    ($name:ident) => {\n        paste! {\n            #[inline]\n            pub fn [<get_all_ $name s>](&self) -> Option<&AHashMap<FastStr, FastStr>> {\n                self.$name.as_ref()\n            }\n        }\n    };\n}",
                            "Signature": "macro_rules! get_all_impl {\n    ($name:ident) ",
                            "Results": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::kv",
                                    "Name": "get_all_impl",
                                    "File": "src/kv.rs",
                                    "Line": 58,
                                    "StartOffset": 1495,
                                    "EndOffset": 1507
                                }
                            ]
                        },
                        "get_impl": {
                            "Exported": true,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::kv",
                            "Name": "get_impl",
                            "File": "src/kv.rs",
                            "Line": 41,
                            "StartOffset": 1042,
                            "EndOffset": 1480,
                            "Content": "macro_rules! get_impl {\n    ($name:ident) => {\n        paste! {\n            #[inline]\n            pub fn [<get_ $name>]<K: AsRef<str>>(&self, key: K) -> Option<FastStr> {\n                let key = key.as_ref();\n                match self.$name.as_ref() {\n                    Some(v) => {\n                        v.get(key).cloned()\n                    }\n                    None => None,\n                }\n            }\n        }\n    };\n}",
                            "Signature": "macro_rules! get_impl {\n    ($name:ident) ",
                            "Results": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::kv",
                                    "Name": "get_impl",
                                    "File": "src/kv.rs",
                                    "Line": 41,
                                    "StartOffset": 1055,
                                    "EndOffset": 1063
                                }
                            ]
                        },
                        "set_impl": {
                            "Exported": true,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::kv",
                            "Name": "set_impl",
                            "File": "src/kv.rs",
                            "Line": 7,
                            "StartOffset": 131,
                            "EndOffset": 634,
                            "Content": "macro_rules! set_impl {\n    ($name:ident) => {\n        paste! {\n            #[inline]\n            pub fn [<set_ $name>]<K: Into<FastStr>, V: Into<FastStr>>(\n                &mut self,\n                key: K,\n                value: V,\n            ) {\n                if self.$name.is_none() {\n                    self.$name = Some(AHashMap::with_capacity(DEFAULT_CAPACITY));\n                }\n                self.$name.as_mut().unwrap().insert(key.into(), value.into());\n            }\n        }\n    };\n}"
                        }
                    },
                    "Types": {
                        "Node": {
                            "Exported": true,
                            "TypeKind": "struct",
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::kv",
                            "Name": "Node",
                            "File": "src/kv.rs",
                            "Line": 69,
                            "StartOffset": 1730,
                            "EndOffset": 2006,
                            "Content": "#[derive(Debug, Default, Clone)]\npub struct Node {\n    persistent: Option<AHashMap<FastStr, FastStr>>,\n    transient: Option<AHashMap<FastStr, FastStr>>,\n    // this is called stale because upstream and downstream all use this.\n    stale: Option<AHashMap<FastStr, FastStr>>,\n}",
                            "SubStruct": [
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap",
                                    "File": "src/kv.rs",
                                    "Line": 71,
                                    "StartOffset": 1804,
                                    "EndOffset": 1812
                                },
                                {
                                    "ModPath": "faststr@0.2.31",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/kv.rs",
                                    "Line": 71,
                                    "StartOffset": 1813,
                                    "EndOffset": 1820
                                }
                            ],
                            "Methods": {
                                "clear": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::kv",
                                    "Name": "Node.clear"
                                },
                                "extend": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::kv",
                                    "Name": "Node.extend"
                                }
                            }
                        }
                    },
                    "Vars": {
                        "DEFAULT_CAPACITY": {
                            "IsExported": false,
                            "IsConst": true,
                            "IsPointer": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::kv",
                            "Name": "DEFAULT_CAPACITY",
                            "File": "src/kv.rs",
                            "Line": 5,
                            "StartOffset": 62,
                            "EndOffset": 97,
                            "Content": "const DEFAULT_CAPACITY: usize = 10;"
                        }
                    }
                },
                "metainfo::type_map": {
                    "IsMain": false,
                    "IsTest": false,
                    "PkgPath": "metainfo::type_map",
                    "Functions": {
                        "Entry.and_modify": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::type_map",
                            "Name": "Entry.and_modify",
                            "File": "src/type_map.rs",
                            "Line": 44,
                            "StartOffset": 1076,
                            "EndOffset": 1371,
                            "Content": "impl<'a, K, V> Entry<'a, K, V> {\n    #[inline]\n    #[inline]\n    pub fn and_modify<F: FnOnce(&mut V)>(self, f: F) -> Self\n    where\n        V: Send + Sync + 'static,\n    {\n        Entry {\n            inner: self.inner.and_modify(|v| {\n                f(v.downcast_mut().unwrap());\n            }),\n            _marker: PhantomData,\n        }\n    }\n}",
                            "Signature": "#[inline]\n    pub fn and_modify<F: FnOn",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "Entry"
                                }
                            },
                            "Results": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "and_modify",
                                    "File": "src/type_map.rs",
                                    "Line": 45,
                                    "StartOffset": 1097,
                                    "EndOffset": 1107
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "and_modify",
                                    "File": "src/type_map.rs",
                                    "Line": 50,
                                    "StartOffset": 1243,
                                    "EndOffset": 1253
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "Entry",
                                    "File": "src/type_map.rs",
                                    "Line": 49,
                                    "StartOffset": 1205,
                                    "EndOffset": 1210
                                }
                            ]
                        },
                        "Entry.or_default": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::type_map",
                            "Name": "Entry.or_default",
                            "File": "src/type_map.rs",
                            "Line": 57,
                            "StartOffset": 1377,
                            "EndOffset": 1573,
                            "Content": "impl<'a, K, V> Entry<'a, K, V> {\n    #[inline]\n    #[allow(clippy::unwrap_or_default)]\n    #[inline]\n    pub fn or_default(self) -> &'a mut V\n    where\n        V: Default + Send + Sync + 'static,\n    {\n        self.or_insert_with(V::default)\n    }\n}",
                            "Signature": "#[allow(clippy::unwrap_or_default)]\n    #[inline]\n    pub fn or_defa",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "Entry"
                                }
                            },
                            "Results": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "or_default",
                                    "File": "src/type_map.rs",
                                    "Line": 59,
                                    "StartOffset": 1438,
                                    "EndOffset": 1448
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "Entry.or_insert_with",
                                    "File": "src/type_map.rs",
                                    "Line": 63,
                                    "StartOffset": 1541,
                                    "EndOffset": 1555
                                }
                            ]
                        },
                        "Entry.or_insert": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::type_map",
                            "Name": "Entry.or_insert",
                            "File": "src/type_map.rs",
                            "Line": 17,
                            "StartOffset": 344,
                            "EndOffset": 560,
                            "Content": "impl<'a, K, V> Entry<'a, K, V> {\n    #[inline]\n    #[inline]\n    pub fn or_insert(self, default: V) -> &'a mut V\n    where\n        V: Send + Sync + 'static,\n    {\n        let v = self.inner.or_insert_with(|| Box::new(default));\n        v.downcast_mut().unwrap()\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "Entry"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "or_insert_with",
                                    "File": "src/type_map.rs",
                                    "Line": 22,
                                    "StartOffset": 483,
                                    "EndOffset": 497
                                }
                            ]
                        },
                        "Entry.or_insert_with": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::type_map",
                            "Name": "Entry.or_insert_with",
                            "File": "src/type_map.rs",
                            "Line": 26,
                            "StartOffset": 566,
                            "EndOffset": 807,
                            "Content": "impl<'a, K, V> Entry<'a, K, V> {\n    #[inline]\n    #[inline]\n    pub fn or_insert_with<F: FnOnce() -> V>(self, default: F) -> &'a mut V\n    where\n        V: Send + Sync + 'static,\n    {\n        let v = self.inner.or_insert_with(|| Box::new(default()));\n        v.downcast_mut().unwrap()\n    }\n}",
                            "Signature": "#[inline]\n    pub fn or_insert_with<F: FnOnc",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "Entry"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "or_insert_with",
                                    "File": "src/type_map.rs",
                                    "Line": 31,
                                    "StartOffset": 728,
                                    "EndOffset": 742
                                }
                            ]
                        },
                        "Entry.or_insert_with_key": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::type_map",
                            "Name": "Entry.or_insert_with_key",
                            "File": "src/type_map.rs",
                            "Line": 35,
                            "StartOffset": 813,
                            "EndOffset": 1070,
                            "Content": "impl<'a, K, V> Entry<'a, K, V> {\n    #[inline]\n    #[inline]\n    pub fn or_insert_with_key<F: FnOnce(&K) -> V>(self, default: F) -> &'a mut V\n    where\n        V: Send + Sync + 'static,\n    {\n        let v = self.inner.or_insert_with_key(|key| Box::new(default(key)));\n        v.downcast_mut().unwrap()\n    }\n}",
                            "Signature": "#[inline]\n    pub fn or_insert_with_key<F: FnOn",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "Entry"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "or_insert_with_key",
                                    "File": "src/type_map.rs",
                                    "Line": 40,
                                    "StartOffset": 981,
                                    "EndOffset": 999
                                }
                            ]
                        },
                        "TypeMap.capacity": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::type_map",
                            "Name": "TypeMap.capacity",
                            "File": "src/type_map.rs",
                            "Line": 151,
                            "StartOffset": 3540,
                            "EndOffset": 3623,
                            "Content": "impl TypeMap {\n    #[inline]\n    #[inline]\n    pub fn capacity(&self) -> usize {\n        self.inner.capacity()\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "capacity",
                                    "File": "src/type_map.rs",
                                    "Line": 153,
                                    "StartOffset": 3607,
                                    "EndOffset": 3615
                                }
                            ]
                        },
                        "TypeMap.clear": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::type_map",
                            "Name": "TypeMap.clear",
                            "File": "src/type_map.rs",
                            "Line": 118,
                            "StartOffset": 2851,
                            "EndOffset": 2924,
                            "Content": "impl TypeMap {\n    #[inline]\n    #[inline]\n    pub fn clear(&mut self) {\n        self.inner.clear();\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "clear",
                                    "File": "src/type_map.rs",
                                    "Line": 120,
                                    "StartOffset": 2910,
                                    "EndOffset": 2915
                                }
                            ]
                        },
                        "TypeMap.contains": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::type_map",
                            "Name": "TypeMap.contains",
                            "File": "src/type_map.rs",
                            "Line": 106,
                            "StartOffset": 2520,
                            "EndOffset": 2636,
                            "Content": "impl TypeMap {\n    #[inline]\n    #[inline]\n    pub fn contains<T: 'static>(&self) -> bool {\n        self.inner.contains_key(&TypeId::of::<T>())\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "contains_key",
                                    "File": "src/type_map.rs",
                                    "Line": 108,
                                    "StartOffset": 2598,
                                    "EndOffset": 2610
                                }
                            ]
                        },
                        "TypeMap.entry": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::type_map",
                            "Name": "TypeMap.entry",
                            "File": "src/type_map.rs",
                            "Line": 133,
                            "StartOffset": 3170,
                            "EndOffset": 3367,
                            "Content": "impl TypeMap {\n    #[inline]\n    #[inline]\n    pub fn entry<T: 'static>(&mut self) -> Entry<'_, TypeId, T> {\n        Entry {\n            inner: self.inner.entry(TypeId::of::<T>()),\n            _marker: PhantomData,\n        }\n    }\n}",
                            "Signature": "#[inline]\n    pub fn entry<T: 'static>(&mut self) -> Entry<'_, Type",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap"
                                }
                            },
                            "Results": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "Entry",
                                    "File": "src/type_map.rs",
                                    "Line": 134,
                                    "StartOffset": 3223,
                                    "EndOffset": 3228
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "entry",
                                    "File": "src/type_map.rs",
                                    "Line": 136,
                                    "StartOffset": 3292,
                                    "EndOffset": 3297
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "Entry",
                                    "File": "src/type_map.rs",
                                    "Line": 135,
                                    "StartOffset": 3254,
                                    "EndOffset": 3259
                                }
                            ]
                        },
                        "TypeMap.extend": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::type_map",
                            "Name": "TypeMap.extend",
                            "File": "src/type_map.rs",
                            "Line": 123,
                            "StartOffset": 2930,
                            "EndOffset": 3031,
                            "Content": "impl TypeMap {\n    #[inline]\n    #[inline]\n    pub fn extend(&mut self, other: TypeMap) {\n        self.inner.extend(other.inner)\n    }\n}",
                            "Signature": "#[inline]\n    pub fn extend(&mut self, other: TypeMap) {\n    ",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap"
                                }
                            },
                            "Params": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap",
                                    "File": "src/type_map.rs",
                                    "Line": 124,
                                    "StartOffset": 2976,
                                    "EndOffset": 2983
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "extend",
                                    "File": "src/type_map.rs",
                                    "Line": 125,
                                    "StartOffset": 3006,
                                    "EndOffset": 3012
                                }
                            ]
                        },
                        "TypeMap.get": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::type_map",
                            "Name": "TypeMap.get",
                            "File": "src/type_map.rs",
                            "Line": 92,
                            "StartOffset": 2146,
                            "EndOffset": 2319,
                            "Content": "impl TypeMap {\n    #[inline]\n    #[inline]\n    pub fn get<T: 'static>(&self) -> Option<&T> {\n        self.inner\n            .get(&TypeId::of::<T>())\n            .and_then(|boxed| boxed.downcast_ref())\n    }\n}",
                            "Signature": "#[inline]\n    pub fn get<T: 'static>(&self) -> Opti",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "get",
                                    "File": "src/type_map.rs",
                                    "Line": 95,
                                    "StartOffset": 2238,
                                    "EndOffset": 2241
                                }
                            ]
                        },
                        "TypeMap.get_mut": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::type_map",
                            "Name": "TypeMap.get_mut",
                            "File": "src/type_map.rs",
                            "Line": 99,
                            "StartOffset": 2325,
                            "EndOffset": 2514,
                            "Content": "impl TypeMap {\n    #[inline]\n    #[inline]\n    pub fn get_mut<T: 'static>(&mut self) -> Option<&mut T> {\n        self.inner\n            .get_mut(&TypeId::of::<T>())\n            .and_then(|boxed| boxed.downcast_mut())\n    }\n}",
                            "Signature": "#[inline]\n    pub fn get_mut<T: 'static>(&mut self) -> Opti",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "get_mut",
                                    "File": "src/type_map.rs",
                                    "Line": 102,
                                    "StartOffset": 2429,
                                    "EndOffset": 2436
                                }
                            ]
                        },
                        "TypeMap.insert": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::type_map",
                            "Name": "TypeMap.insert",
                            "File": "src/type_map.rs",
                            "Line": 87,
                            "StartOffset": 2003,
                            "EndOffset": 2140,
                            "Content": "impl TypeMap {\n    #[inline]\n    #[inline]\n    pub fn insert<T: Send + Sync + 'static>(&mut self, t: T) {\n        self.inner.insert(TypeId::of::<T>(), Box::new(t));\n    }\n}",
                            "Signature": "#[inline]\n    pub fn insert<T: Send + Syn",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "insert",
                                    "File": "src/type_map.rs",
                                    "Line": 89,
                                    "StartOffset": 2095,
                                    "EndOffset": 2101
                                }
                            ]
                        },
                        "TypeMap.is_empty": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::type_map",
                            "Name": "TypeMap.is_empty",
                            "File": "src/type_map.rs",
                            "Line": 141,
                            "StartOffset": 3373,
                            "EndOffset": 3455,
                            "Content": "impl TypeMap {\n    #[inline]\n    #[inline]\n    pub fn is_empty(&self) -> bool {\n        self.inner.is_empty()\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "is_empty",
                                    "File": "src/type_map.rs",
                                    "Line": 143,
                                    "StartOffset": 3439,
                                    "EndOffset": 3447
                                }
                            ]
                        },
                        "TypeMap.iter": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::type_map",
                            "Name": "TypeMap.iter",
                            "File": "src/type_map.rs",
                            "Line": 128,
                            "StartOffset": 3037,
                            "EndOffset": 3164,
                            "Content": "impl TypeMap {\n    #[inline]\n    #[inline]\n    pub fn iter(&self) -> ::std::collections::hash_map::Iter<'_, TypeId, AnyObject> {\n        self.inner.iter()\n    }\n}",
                            "Signature": "#[inline]\n    pub fn iter(&self) -> ::std::collections::hash_map::Iter<'_, TypeId, AnyObject> {\n    ",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap"
                                }
                            },
                            "Results": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "Iter",
                                    "File": "src/type_map.rs",
                                    "Line": 129,
                                    "StartOffset": 3103,
                                    "EndOffset": 3107
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "AnyObject",
                                    "File": "src/type_map.rs",
                                    "Line": 129,
                                    "StartOffset": 3120,
                                    "EndOffset": 3129
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "iter",
                                    "File": "src/type_map.rs",
                                    "Line": 130,
                                    "StartOffset": 3152,
                                    "EndOffset": 3156
                                }
                            ]
                        },
                        "TypeMap.len": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::type_map",
                            "Name": "TypeMap.len",
                            "File": "src/type_map.rs",
                            "Line": 146,
                            "StartOffset": 3461,
                            "EndOffset": 3534,
                            "Content": "impl TypeMap {\n    #[inline]\n    #[inline]\n    pub fn len(&self) -> usize {\n        self.inner.len()\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "len",
                                    "File": "src/type_map.rs",
                                    "Line": 148,
                                    "StartOffset": 3523,
                                    "EndOffset": 3526
                                }
                            ]
                        },
                        "TypeMap.remove": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::type_map",
                            "Name": "TypeMap.remove",
                            "File": "src/type_map.rs",
                            "Line": 111,
                            "StartOffset": 2642,
                            "EndOffset": 2845,
                            "Content": "impl TypeMap {\n    #[inline]\n    #[inline]\n    pub fn remove<T: 'static>(&mut self) -> Option<T> {\n        self.inner\n            .remove(&TypeId::of::<T>())\n            .and_then(|boxed| boxed.downcast().ok().map(|boxed| *boxed))\n    }\n}",
                            "Signature": "#[inline]\n    pub fn remove<T: 'static>(&mut self) -> Opt",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "remove",
                                    "File": "src/type_map.rs",
                                    "Line": 114,
                                    "StartOffset": 2740,
                                    "EndOffset": 2746
                                }
                            ]
                        },
                        "TypeMap::with_capacity": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::type_map",
                            "Name": "TypeMap::with_capacity",
                            "File": "src/type_map.rs",
                            "Line": 80,
                            "StartOffset": 1812,
                            "EndOffset": 1997,
                            "Content": "impl TypeMap {\n    #[inline]\n    #[inline]\n    pub fn with_capacity(capacity: usize) -> Self {\n        TypeMap {\n            inner: FxHashMapRand::with_capacity_and_hasher(capacity, Default::default()),\n        }\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap"
                                }
                            },
                            "FunctionCalls": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "with_capacity_and_hasher",
                                    "File": "src/type_map.rs",
                                    "Line": 83,
                                    "StartOffset": 1926,
                                    "EndOffset": 1950
                                },
                                {
                                    "ModPath": "rustc-hash@2.1.1",
                                    "PkgPath": "rustc-hash::random_state",
                                    "Name": "FxRandomState::default",
                                    "File": "src/type_map.rs",
                                    "Line": 83,
                                    "StartOffset": 1970,
                                    "EndOffset": 1977
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap",
                                    "File": "src/type_map.rs",
                                    "Line": 82,
                                    "StartOffset": 1882,
                                    "EndOffset": 1889
                                },
                                {
                                    "ModPath": "rustc-hash@2.1.1",
                                    "PkgPath": "rustc-hash::random_state",
                                    "Name": "FxHashMapRand",
                                    "File": "src/type_map.rs",
                                    "Line": 83,
                                    "StartOffset": 1911,
                                    "EndOffset": 1924
                                }
                            ]
                        }
                    },
                    "Types": {
                        "AnyObject": {
                            "Exported": false,
                            "TypeKind": "type-parameter",
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::type_map",
                            "Name": "AnyObject",
                            "File": "src/type_map.rs",
                            "Line": 9,
                            "StartOffset": 142,
                            "EndOffset": 197,
                            "Content": "pub(crate) type AnyObject = Box<dyn Any + Send + Sync>;"
                        },
                        "Entry": {
                            "Exported": true,
                            "TypeKind": "struct",
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::type_map",
                            "Name": "Entry",
                            "File": "src/type_map.rs",
                            "Line": 11,
                            "StartOffset": 199,
                            "EndOffset": 305,
                            "Content": "pub struct Entry<'a, K: 'a, V: 'a> {\n    inner: MapEntry<'a, K, AnyObject>,\n    _marker: PhantomData<V>,\n}",
                            "SubStruct": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "Entry",
                                    "File": "src/type_map.rs",
                                    "Line": 12,
                                    "StartOffset": 247,
                                    "EndOffset": 255
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "AnyObject",
                                    "File": "src/type_map.rs",
                                    "Line": 12,
                                    "StartOffset": 263,
                                    "EndOffset": 272
                                }
                            ],
                            "Methods": {
                                "and_modify": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "Entry.and_modify"
                                },
                                "or_default": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "Entry.or_default"
                                },
                                "or_insert": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "Entry.or_insert"
                                },
                                "or_insert_with": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "Entry.or_insert_with"
                                },
                                "or_insert_with_key": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "Entry.or_insert_with_key"
                                }
                            }
                        },
                        "TypeMap": {
                            "Exported": true,
                            "TypeKind": "struct",
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::type_map",
                            "Name": "TypeMap",
                            "File": "src/type_map.rs",
                            "Line": 67,
                            "StartOffset": 1577,
                            "EndOffset": 1670,
                            "Content": "#[derive(Debug, Default)]\npub struct TypeMap {\n    inner: FxHashMapRand<TypeId, AnyObject>,\n}",
                            "SubStruct": [
                                {
                                    "ModPath": "rustc-hash@2.1.1",
                                    "PkgPath": "rustc-hash::random_state",
                                    "Name": "FxHashMapRand",
                                    "File": "src/type_map.rs",
                                    "Line": 69,
                                    "StartOffset": 1635,
                                    "EndOffset": 1648
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "AnyObject",
                                    "File": "src/type_map.rs",
                                    "Line": 69,
                                    "StartOffset": 1657,
                                    "EndOffset": 1666
                                }
                            ],
                            "Methods": {
                                "capacity": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap.capacity"
                                },
                                "clear": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap.clear"
                                },
                                "contains": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap.contains"
                                },
                                "entry": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap.entry"
                                },
                                "extend": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap.extend"
                                },
                                "get": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap.get"
                                },
                                "get_mut": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap.get_mut"
                                },
                                "insert": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap.insert"
                                },
                                "is_empty": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap.is_empty"
                                },
                                "iter": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap.iter"
                                },
                                "len": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap.len"
                                },
                                "remove": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap.remove"
                                }
                            }
                        }
                    },
                    "Vars": {}
                }
            },
            "Dependencies": {},
            "Files": {
                "src/backward.rs": {
                    "Path": "src/backward.rs",
                    "Imports": [
                        {
                            "Path": "use ahash::AHashMap;"
                        },
                        {
                            "Path": "use faststr::FastStr;"
                        }
                    ],
                    "Package": "metainfo::backward"
                },
                "src/convert.rs": {
                    "Path": "src/convert.rs",
                    "Imports": [
                        {
                            "Path": "use faststr::FastStr;"
                        },
                        {
                            "Path": "use crate::{HTTP_PREFIX_BACKWARD, HTTP_PREFIX_PERSISTENT, HTTP_PREFIX_TRANSIENT, RPC_PREFIX_BACKWARD,RPC_PREFIX_PERSISTENT, RPC_PREFIX_TRANSIENT,};"
                        },
                        {
                            "Path": "use crate::convert::{Converter, HttpConverter, RpcConverter};"
                        }
                    ],
                    "Package": "metainfo::convert"
                },
                "src/faststr_map.rs": {
                    "Path": "src/faststr_map.rs",
                    "Imports": [
                        {
                            "Path": "use std::{any::TypeId, collections::hash_map::Entry};"
                        },
                        {
                            "Path": "use faststr::FastStr;"
                        },
                        {
                            "Path": "use rustc_hash::FxHashMapRand;"
                        }
                    ],
                    "Package": "metainfo::faststr_map"
                },
                "src/forward.rs": {
                    "Path": "src/forward.rs",
                    "Imports": [
                        {
                            "Path": "use faststr::FastStr;"
                        },
                        {
                            "Path": "use crate::AHashMap;"
                        }
                    ],
                    "Package": "metainfo::forward"
                },
                "src/kv.rs": {
                    "Path": "src/kv.rs",
                    "Imports": [
                        {
                            "Path": "use ahash::AHashMap;"
                        },
                        {
                            "Path": "use faststr::FastStr;"
                        },
                        {
                            "Path": "use paste::paste;"
                        },
                        {
                            "Path": "use super::*;"
                        }
                    ],
                    "Package": "metainfo::kv"
                },
                "src/lib.rs": {
                    "Path": "src/lib.rs",
                    "Imports": [
                        {
                            "Path": "use std::{fmt, sync::Arc};"
                        },
                        {
                            "Path": "use ahash::AHashMap;"
                        },
                        {
                            "Path": "use convert::{Converter, HttpConverter, RpcConverter};"
                        },
                        {
                            "Path": "use faststr::FastStr;"
                        },
                        {
                            "Path": "use kv::Node;"
                        },
                        {
                            "Path": "use paste::paste;"
                        },
                        {
                            "Path": "use super::*;"
                        }
                    ],
                    "Package": "metainfo"
                },
                "src/type_map.rs": {
                    "Path": "src/type_map.rs",
                    "Imports": [
                        {
                            "Path": "use std::{any::{Any, TypeId},collections::hash_map::Entry as MapEntry,marker::PhantomData,};"
                        },
                        {
                            "Path": "use rustc_hash::FxHashMapRand;"
                        }
                    ],
                    "Package": "metainfo::type_map"
                }
            }
        },
        "rustc-hash@2.1.1": {
            "Language": "rust",
            "Version": "2.1.1",
            "Name": "rustc-hash",
            "Dir": "",
            "Packages": {
                "rustc-hash::random_state": {
                    "IsMain": false,
                    "IsTest": false,
                    "PkgPath": "rustc-hash::random_state",
                    "Functions": {
                        "FxRandomState.build_hasher": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "rustc-hash@2.1.1",
                            "PkgPath": "rustc-hash::random_state",
                            "Name": "FxRandomState.build_hasher",
                            "File": "random_state.rs",
                            "Line": 49,
                            "StartOffset": 1643,
                            "EndOffset": 1728,
                            "Content": "impl core::hash::BuildHasher for FxRandomState {\n    type Hasher = FxHasher;\n\n    fn build_hasher(&self) -> Self::Hasher {\n        FxHasher::with_seed(self.seed)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "rustc-hash@2.1.1",
                                    "PkgPath": "rustc-hash::random_state",
                                    "Name": "FxRandomState"
                                }
                            }
                        },
                        "FxRandomState::default": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "rustc-hash@2.1.1",
                            "PkgPath": "rustc-hash::random_state",
                            "Name": "FxRandomState::default",
                            "File": "random_state.rs",
                            "Line": 55,
                            "StartOffset": 1769,
                            "EndOffset": 1817,
                            "Content": "impl Default for FxRandomState {\n    fn default() -> Self {\n        Self::new()\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "rustc-hash@2.1.1",
                                    "PkgPath": "rustc-hash::random_state",
                                    "Name": "FxRandomState"
                                }
                            }
                        }
                    },
                    "Types": {
                        "FxHashMapRand": {
                            "Exported": false,
                            "TypeKind": "type-parameter",
                            "ModPath": "rustc-hash@2.1.1",
                            "PkgPath": "rustc-hash::random_state",
                            "Name": "FxHashMapRand",
                            "File": "random_state.rs",
                            "Line": 5,
                            "StartOffset": 65,
                            "EndOffset": 208,
                            "Content": "/// Type alias for a hashmap using the `fx` hash algorithm with [`FxRandomState`].\npub type FxHashMapRand<K, V> = HashMap<K, V, FxRandomState>;"
                        },
                        "FxHashSetRand": {
                            "Exported": false,
                            "TypeKind": "type-parameter",
                            "ModPath": "rustc-hash@2.1.1",
                            "PkgPath": "rustc-hash::random_state",
                            "Name": "FxHashSetRand",
                            "File": "random_state.rs",
                            "Line": 8,
                            "StartOffset": 210,
                            "EndOffset": 347,
                            "Content": "/// Type alias for a hashmap using the `fx` hash algorithm with [`FxRandomState`].\npub type FxHashSetRand<V> = HashSet<V, FxRandomState>;"
                        },
                        "FxRandomState": {
                            "Exported": false,
                            "TypeKind": "struct",
                            "ModPath": "rustc-hash@2.1.1",
                            "PkgPath": "rustc-hash::random_state",
                            "Name": "FxRandomState",
                            "File": "random_state.rs",
                            "Line": 11,
                            "StartOffset": 349,
                            "EndOffset": 704,
                            "Content": "/// `FxRandomState` is an alternative state for `HashMap` types.\n///\n/// A particular instance `FxRandomState` will create the same instances of\n/// [`Hasher`], but the hashers created by two different `FxRandomState`\n/// instances are unlikely to produce the same result for the same values.\n#[derive(Clone)]\npub struct FxRandomState {\n    seed: usize,\n}",
                            "Methods": {
                                "build_hasher": {
                                    "ModPath": "rustc-hash@2.1.1",
                                    "PkgPath": "rustc-hash::random_state",
                                    "Name": "FxRandomState.build_hasher"
                                }
                            }
                        }
                    },
                    "Vars": {}
                }
            },
            "Dependencies": {},
            "Files": {
                "random_state.rs": {
                    "Path": "random_state.rs"
                }
            }
        },
        "std": {
            "Language": "rust",
            "Version": "",
            "Name": "std",
            "Dir": "",
            "Packages": {
                "std::collections::hash::map": {
                    "IsMain": false,
                    "IsTest": false,
                    "PkgPath": "std::collections::hash::map",
                    "Functions": {
                        "and_modify": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "std",
                            "PkgPath": "std::collections::hash::map",
                            "Name": "and_modify",
                            "File": "map.rs",
                            "Line": 2900,
                            "StartOffset": 89098,
                            "EndOffset": 89108,
                            "Content": "and_modify"
                        },
                        "capacity": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "std",
                            "PkgPath": "std::collections::hash::map",
                            "Name": "capacity",
                            "File": "map.rs",
                            "Line": 349,
                            "StartOffset": 13112,
                            "EndOffset": 13120,
                            "Content": "capacity"
                        },
                        "clear": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "std",
                            "PkgPath": "std::collections::hash::map",
                            "Name": "clear",
                            "File": "map.rs",
                            "Line": 727,
                            "StartOffset": 24426,
                            "EndOffset": 24431,
                            "Content": "clear"
                        },
                        "contains_key": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "std",
                            "PkgPath": "std::collections::hash::map",
                            "Name": "contains_key",
                            "File": "map.rs",
                            "Line": 1125,
                            "StartOffset": 37104,
                            "EndOffset": 37116,
                            "Content": "contains_key"
                        },
                        "default": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "std",
                            "PkgPath": "std::collections::hash::map",
                            "Name": "default",
                            "File": "map.rs",
                            "Line": 1406,
                            "StartOffset": 46194,
                            "EndOffset": 46201,
                            "Content": "default"
                        },
                        "entry": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "std",
                            "PkgPath": "std::collections::hash::map",
                            "Name": "entry",
                            "File": "map.rs",
                            "Line": 872,
                            "StartOffset": 29118,
                            "EndOffset": 29123,
                            "Content": "entry"
                        },
                        "extend": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "std",
                            "PkgPath": "std::collections::hash::map",
                            "Name": "extend",
                            "File": "map.rs",
                            "Line": 3246,
                            "StartOffset": 98957,
                            "EndOffset": 98963,
                            "Content": "extend"
                        },
                        "get": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "std",
                            "PkgPath": "std::collections::hash::map",
                            "Name": "get",
                            "File": "map.rs",
                            "Line": 894,
                            "StartOffset": 29785,
                            "EndOffset": 29788,
                            "Content": "get"
                        },
                        "get_mut": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "std",
                            "PkgPath": "std::collections::hash::map",
                            "Name": "get_mut",
                            "File": "map.rs",
                            "Line": 1153,
                            "StartOffset": 37852,
                            "EndOffset": 37859,
                            "Content": "get_mut"
                        },
                        "insert": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "std",
                            "PkgPath": "std::collections::hash::map",
                            "Name": "insert",
                            "File": "map.rs",
                            "Line": 1189,
                            "StartOffset": 39046,
                            "EndOffset": 39052,
                            "Content": "insert"
                        },
                        "is_empty": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "std",
                            "PkgPath": "std::collections::hash::map",
                            "Name": "is_empty",
                            "File": "map.rs",
                            "Line": 605,
                            "StartOffset": 20378,
                            "EndOffset": 20386,
                            "Content": "is_empty"
                        },
                        "iter": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "std",
                            "PkgPath": "std::collections::hash::map",
                            "Name": "iter",
                            "File": "map.rs",
                            "Line": 535,
                            "StartOffset": 18547,
                            "EndOffset": 18551,
                            "Content": "iter"
                        },
                        "len": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "std",
                            "PkgPath": "std::collections::hash::map",
                            "Name": "len",
                            "File": "map.rs",
                            "Line": 587,
                            "StartOffset": 19963,
                            "EndOffset": 19966,
                            "Content": "len"
                        },
                        "or_insert_with": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "std",
                            "PkgPath": "std::collections::hash::map",
                            "Name": "or_insert_with",
                            "File": "map.rs",
                            "Line": 2822,
                            "StartOffset": 86586,
                            "EndOffset": 86600,
                            "Content": "or_insert_with"
                        },
                        "or_insert_with_key": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "std",
                            "PkgPath": "std::collections::hash::map",
                            "Name": "or_insert_with_key",
                            "File": "map.rs",
                            "Line": 2849,
                            "StartOffset": 87634,
                            "EndOffset": 87652,
                            "Content": "or_insert_with_key"
                        },
                        "remove": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "std",
                            "PkgPath": "std::collections::hash::map",
                            "Name": "remove",
                            "File": "map.rs",
                            "Line": 1244,
                            "StartOffset": 40858,
                            "EndOffset": 40864,
                            "Content": "remove"
                        },
                        "with_capacity_and_hasher": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "std",
                            "PkgPath": "std::collections::hash::map",
                            "Name": "with_capacity_and_hasher",
                            "File": "map.rs",
                            "Line": 331,
                            "StartOffset": 12430,
                            "EndOffset": 12454,
                            "Content": "with_capacity_and_hasher"
                        }
                    },
                    "Types": {
                        "Entry": {
                            "Exported": false,
                            "TypeKind": "enum",
                            "ModPath": "std",
                            "PkgPath": "std::collections::hash::map",
                            "Name": "Entry",
                            "File": "map.rs",
                            "Line": 2239,
                            "StartOffset": 70549,
                            "EndOffset": 70554,
                            "Content": "Entry"
                        },
                        "Iter": {
                            "Exported": false,
                            "TypeKind": "struct",
                            "ModPath": "std",
                            "PkgPath": "std::collections::hash::map",
                            "Name": "Iter",
                            "File": "map.rs",
                            "Line": 1486,
                            "StartOffset": 48646,
                            "EndOffset": 48650,
                            "Content": "Iter"
                        }
                    },
                    "Vars": {}
                },
                "std::macros": {
                    "IsMain": false,
                    "IsTest": false,
                    "PkgPath": "std::macros",
                    "Functions": {
                        "println": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "std",
                            "PkgPath": "std::macros",
                            "Name": "println",
                            "File": "macros.rs",
                            "Line": 138,
                            "StartOffset": 4320,
                            "EndOffset": 4327,
                            "Content": "println"
                        }
                    },
                    "Types": {},
                    "Vars": {}
                }
            },
            "Dependencies": {},
            "Files": {
                "macros.rs": {
                    "Path": "macros.rs"
                },
                "map.rs": {
                    "Path": "map.rs"
                }
            }
        }
    },
    "Graph": {
        "ahash@0.8.11?ahash::hash_map#AHashMap": {
            "ModPath": "ahash@0.8.11",
            "PkgPath": "ahash::hash_map",
            "Name": "AHashMap",
            "Type": "TYPE",
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_all_backword_transients_with_prefix",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Backward<MetaInfo>.get_all_backward_transients_with_rpc_prefix"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward<MetaInfo>.get_all_transients",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Backward<MetaInfo>.get_all_backward_transients"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Backward<MetaInfo>.get_all_backward_transients_with_http_prefix"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward<MetaInfo>.get_all_upstreams",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_all_persistents_and_transients_with_prefix",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward<MetaInfo>.get_all_persistents_and_transients_with_rpc_prefix",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.extend",
                    "Line": 12
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward<MetaInfo>.get_all_persistents_and_transients_with_http_prefix",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.insert_string",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Backward<MetaInfo>.get_all_backward_downstreams"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward<MetaInfo>.get_all_persistents",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo",
                    "Line": 33
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "Node",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::backward",
                    "Name": "Backward",
                    "Line": 5
                }
            ]
        },
        "ahash@0.8.11?ahash::hash_map#AHashMap.extend": {
            "ModPath": "ahash@0.8.11",
            "PkgPath": "ahash::hash_map",
            "Name": "AHashMap.extend",
            "Type": "FUNC",
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_all_backword_transients_with_prefix",
                    "Line": 16
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_all_persistents_and_transients_with_prefix",
                    "Line": 19
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.extend",
                    "Line": 13
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "Node.extend",
                    "Line": 6
                }
            ]
        },
        "ahash@0.8.11?ahash::hash_map#AHashMap.get": {
            "ModPath": "ahash@0.8.11",
            "PkgPath": "ahash::hash_map",
            "Name": "AHashMap.get",
            "Type": "FUNC",
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_string",
                    "Line": 5
                }
            ]
        },
        "ahash@0.8.11?ahash::hash_map#AHashMap.insert": {
            "ModPath": "ahash@0.8.11",
            "PkgPath": "ahash::hash_map",
            "Name": "AHashMap.insert",
            "Type": "FUNC",
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.insert_string",
                    "Line": 5
                }
            ]
        },
        "ahash@0.8.11?ahash::hash_map#AHashMap.into_iter": {
            "ModPath": "ahash@0.8.11",
            "PkgPath": "ahash::hash_map",
            "Name": "AHashMap.into_iter",
            "Type": "FUNC",
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.iter_all_backword_transients_with_prefix",
                    "Line": 14
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.iter_all_persistents_and_transients_with_prefix",
                    "Line": 13
                }
            ]
        },
        "ahash@0.8.11?ahash::hash_map#AHashMap.remove": {
            "ModPath": "ahash@0.8.11",
            "PkgPath": "ahash::hash_map",
            "Name": "AHashMap.remove",
            "Type": "FUNC",
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.remove_string",
                    "Line": 6
                }
            ]
        },
        "ahash@0.8.11?ahash::hash_map#AHashMap::with_capacity": {
            "ModPath": "ahash@0.8.11",
            "PkgPath": "ahash::hash_map",
            "Name": "AHashMap::with_capacity",
            "Type": "FUNC",
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_all_backword_transients_with_prefix",
                    "Line": 15
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_all_persistents_and_transients_with_prefix",
                    "Line": 17
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.extend",
                    "Line": 12
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.insert_string",
                    "Line": 4
                }
            ]
        },
        "faststr@0.2.31?faststr#FastStr": {
            "ModPath": "faststr@0.2.31",
            "PkgPath": "faststr",
            "Name": "FastStr",
            "Type": "TYPE",
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Backward<MetaInfo>.strip_rpc_prefix_and_set_backward_downstream"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_all_backword_transients_with_prefix",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Backward<MetaInfo>.get_all_backward_transients_with_rpc_prefix"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.iter_all_backword_transients_with_prefix",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward<MetaInfo>.get_all_transients",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Backward<MetaInfo>.get_all_backward_transients"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward<MetaInfo>.iter_persistents_and_transients_with_http_prefix",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Backward<MetaInfo>.get_all_backward_transients_with_http_prefix"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward<MetaInfo>.strip_http_prefix_and_set_upstream",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward<MetaInfo>.strip_rpc_prefix_and_set_upstream",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_faststr",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.iter_all_persistents_and_transients_with_prefix",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward<MetaInfo>.get_all_upstreams",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_all_persistents_and_transients_with_prefix",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward<MetaInfo>.get_all_persistents_and_transients_with_rpc_prefix",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Backward<MetaInfo>.iter_backward_transients_with_http_prefix",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward<MetaInfo>.get_all_persistents_and_transients_with_http_prefix",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.remove_string",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_string",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward<MetaInfo>.strip_http_prefix_and_set_persistent",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Backward<MetaInfo>.iter_backward_transients_with_rpc_prefix",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.insert_string",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.remove_faststr",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward<MetaInfo>.iter_persistents_and_transients_with_rpc_prefix",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.insert_faststr",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward<MetaInfo>.strip_rpc_prefix_and_set_persistent",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Backward<MetaInfo>.strip_http_prefix_and_set_backward_downstream"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Backward<MetaInfo>.get_all_backward_downstreams"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward<MetaInfo>.get_all_persistents",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo",
                    "Line": 33
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.entry",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.iter",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.get",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.remove",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.get_mut",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.insert",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter<HttpConverter>.add_persistent_prefix",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.remove_prefix_and_to_rpc_format",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter<HttpConverter>.add_transient_prefix",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter<HttpConverter>.remove_backward_prefix",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "RpcConverter.remove_prefix",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter<HttpConverter>.remove_persistent_prefix",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter<HttpConverter>.add_backward_prefix",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter<RpcConverter>.add_transient_prefix",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter<RpcConverter>.add_backward_prefix",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter<RpcConverter>.remove_transient_prefix",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.add_prefix_and_to_http_format",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter<HttpConverter>.remove_transient_prefix",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter<RpcConverter>.remove_persistent_prefix",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter<RpcConverter>.remove_backward_prefix",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "RpcConverter.add_prefix",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter<RpcConverter>.add_persistent_prefix",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "Node",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::backward",
                    "Name": "Backward",
                    "Line": 2
                }
            ]
        },
        "faststr@0.2.31?faststr#FastStr::from_string": {
            "ModPath": "faststr@0.2.31",
            "PkgPath": "faststr",
            "Name": "FastStr::from_string",
            "Type": "FUNC",
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "RpcConverter.add_prefix",
                    "Line": 24
                }
            ]
        },
        "faststr@0.2.31?faststr#FastStr::from_vec_u8_unchecked": {
            "ModPath": "faststr@0.2.31",
            "PkgPath": "faststr",
            "Name": "FastStr::from_vec_u8_unchecked",
            "Type": "FUNC",
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.remove_prefix_and_to_rpc_format",
                    "Line": 16
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.add_prefix_and_to_http_format",
                    "Line": 24
                }
            ]
        },
        "faststr@0.2.31?faststr#FastStr::new": {
            "ModPath": "faststr@0.2.31",
            "PkgPath": "faststr",
            "Name": "FastStr::new",
            "Type": "FUNC",
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "RpcConverter.remove_prefix",
                    "Line": 3
                }
            ]
        },
        "faststr@0.2.31?faststr#FastStr::new_u8_slice_unchecked": {
            "ModPath": "faststr@0.2.31",
            "PkgPath": "faststr",
            "Name": "FastStr::new_u8_slice_unchecked",
            "Type": "FUNC",
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.remove_prefix_and_to_rpc_format",
                    "Line": 8
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.add_prefix_and_to_http_format",
                    "Line": 14
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "RpcConverter.add_prefix",
                    "Line": 18
                }
            ]
        },
        "metainfo?metainfo#Backward<MetaInfo>.get_all_backward_downstreams": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "Backward<MetaInfo>.get_all_backward_downstreams",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "ahash@0.8.11",
                    "PkgPath": "ahash::hash_map",
                    "Name": "AHashMap"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.31",
                    "PkgPath": "faststr",
                    "Name": "FastStr"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "get_all_impl",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo"
                }
            ]
        },
        "metainfo?metainfo#Backward<MetaInfo>.get_all_backward_transients": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "Backward<MetaInfo>.get_all_backward_transients",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "ahash@0.8.11",
                    "PkgPath": "ahash::hash_map",
                    "Name": "AHashMap"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.31",
                    "PkgPath": "faststr",
                    "Name": "FastStr"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "get_all_impl",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo"
                }
            ]
        },
        "metainfo?metainfo#Backward<MetaInfo>.get_all_backward_transients_with_http_prefix": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "Backward<MetaInfo>.get_all_backward_transients_with_http_prefix",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "ahash@0.8.11",
                    "PkgPath": "ahash::hash_map",
                    "Name": "AHashMap"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.31",
                    "PkgPath": "faststr",
                    "Name": "FastStr"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_all_backword_transients_with_prefix",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo"
                }
            ]
        },
        "metainfo?metainfo#Backward<MetaInfo>.get_all_backward_transients_with_rpc_prefix": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "Backward<MetaInfo>.get_all_backward_transients_with_rpc_prefix",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "ahash@0.8.11",
                    "PkgPath": "ahash::hash_map",
                    "Name": "AHashMap"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.31",
                    "PkgPath": "faststr",
                    "Name": "FastStr"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_all_backword_transients_with_prefix",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "RpcConverter",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo"
                }
            ]
        },
        "metainfo?metainfo#Backward<MetaInfo>.iter_backward_transients_with_http_prefix": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "Backward<MetaInfo>.iter_backward_transients_with_http_prefix",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.31",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.iter_all_backword_transients_with_prefix",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo"
                }
            ]
        },
        "metainfo?metainfo#Backward<MetaInfo>.iter_backward_transients_with_rpc_prefix": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "Backward<MetaInfo>.iter_backward_transients_with_rpc_prefix",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.31",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.iter_all_backword_transients_with_prefix",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "RpcConverter",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo"
                }
            ]
        },
        "metainfo?metainfo#Backward<MetaInfo>.strip_http_prefix_and_set_backward_downstream": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "Backward<MetaInfo>.strip_http_prefix_and_set_backward_downstream",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "set_impl",
                    "Line": 7
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter<HttpConverter>.remove_backward_prefix",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.31",
                    "PkgPath": "faststr",
                    "Name": "FastStr"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo"
                }
            ]
        },
        "metainfo?metainfo#Backward<MetaInfo>.strip_rpc_prefix_and_set_backward_downstream": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "Backward<MetaInfo>.strip_rpc_prefix_and_set_backward_downstream",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "set_impl",
                    "Line": 7
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter<RpcConverter>.remove_backward_prefix",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.31",
                    "PkgPath": "faststr",
                    "Name": "FastStr"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "RpcConverter",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo"
                }
            ]
        },
        "metainfo?metainfo#DEFAULT_MAP_SIZE": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "DEFAULT_MAP_SIZE",
            "Type": "VAR",
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.insert",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.extend",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.insert_string",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.insert_faststr",
                    "Line": 4
                }
            ]
        },
        "metainfo?metainfo#Forward<MetaInfo>.get_all_persistents": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "Forward<MetaInfo>.get_all_persistents",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "ahash@0.8.11",
                    "PkgPath": "ahash::hash_map",
                    "Name": "AHashMap",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.31",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "get_all_impl",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo"
                }
            ]
        },
        "metainfo?metainfo#Forward<MetaInfo>.get_all_persistents_and_transients_with_http_prefix": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "Forward<MetaInfo>.get_all_persistents_and_transients_with_http_prefix",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "ahash@0.8.11",
                    "PkgPath": "ahash::hash_map",
                    "Name": "AHashMap",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.31",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_all_persistents_and_transients_with_prefix",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo"
                }
            ]
        },
        "metainfo?metainfo#Forward<MetaInfo>.get_all_persistents_and_transients_with_rpc_prefix": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "Forward<MetaInfo>.get_all_persistents_and_transients_with_rpc_prefix",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "ahash@0.8.11",
                    "PkgPath": "ahash::hash_map",
                    "Name": "AHashMap",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.31",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_all_persistents_and_transients_with_prefix",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "RpcConverter",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo"
                }
            ]
        },
        "metainfo?metainfo#Forward<MetaInfo>.get_all_transients": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "Forward<MetaInfo>.get_all_transients",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "ahash@0.8.11",
                    "PkgPath": "ahash::hash_map",
                    "Name": "AHashMap",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.31",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "get_all_impl",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo"
                }
            ]
        },
        "metainfo?metainfo#Forward<MetaInfo>.get_all_upstreams": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "Forward<MetaInfo>.get_all_upstreams",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "ahash@0.8.11",
                    "PkgPath": "ahash::hash_map",
                    "Name": "AHashMap",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.31",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "get_all_impl",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo"
                }
            ]
        },
        "metainfo?metainfo#Forward<MetaInfo>.iter_persistents_and_transients_with_http_prefix": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "Forward<MetaInfo>.iter_persistents_and_transients_with_http_prefix",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.31",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.iter_all_persistents_and_transients_with_prefix",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo"
                }
            ]
        },
        "metainfo?metainfo#Forward<MetaInfo>.iter_persistents_and_transients_with_rpc_prefix": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "Forward<MetaInfo>.iter_persistents_and_transients_with_rpc_prefix",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.31",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.iter_all_persistents_and_transients_with_prefix",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "RpcConverter",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo"
                }
            ]
        },
        "metainfo?metainfo#Forward<MetaInfo>.strip_http_prefix_and_set_persistent": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "Forward<MetaInfo>.strip_http_prefix_and_set_persistent",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "strip_http_prefix_and_set_persistent",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.31",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "set_impl",
                    "Line": 8
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter<HttpConverter>.remove_persistent_prefix",
                    "Line": 7
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter",
                    "Line": 7
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo"
                }
            ]
        },
        "metainfo?metainfo#Forward<MetaInfo>.strip_http_prefix_and_set_upstream": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "Forward<MetaInfo>.strip_http_prefix_and_set_upstream",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "strip_http_prefix_and_set_upstream",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.31",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "set_impl",
                    "Line": 8
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter<HttpConverter>.remove_transient_prefix",
                    "Line": 7
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter",
                    "Line": 7
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo"
                }
            ]
        },
        "metainfo?metainfo#Forward<MetaInfo>.strip_rpc_prefix_and_set_persistent": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "Forward<MetaInfo>.strip_rpc_prefix_and_set_persistent",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "strip_rpc_prefix_and_set_persistent",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.31",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "set_impl",
                    "Line": 8
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter<RpcConverter>.remove_persistent_prefix",
                    "Line": 7
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "RpcConverter",
                    "Line": 7
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo"
                }
            ]
        },
        "metainfo?metainfo#Forward<MetaInfo>.strip_rpc_prefix_and_set_upstream": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "Forward<MetaInfo>.strip_rpc_prefix_and_set_upstream",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "strip_rpc_prefix_and_set_upstream",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.31",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "set_impl",
                    "Line": 8
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter<RpcConverter>.remove_transient_prefix",
                    "Line": 7
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "RpcConverter",
                    "Line": 7
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo"
                }
            ]
        },
        "metainfo?metainfo#HTTP_PREFIX_BACKWARD": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "HTTP_PREFIX_BACKWARD",
            "Type": "VAR",
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter<HttpConverter>.remove_backward_prefix",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter<HttpConverter>.add_backward_prefix",
                    "Line": 2
                }
            ]
        },
        "metainfo?metainfo#HTTP_PREFIX_PERSISTENT": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "HTTP_PREFIX_PERSISTENT",
            "Type": "VAR",
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter<HttpConverter>.add_persistent_prefix",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter<HttpConverter>.remove_persistent_prefix",
                    "Line": 2
                }
            ]
        },
        "metainfo?metainfo#HTTP_PREFIX_TRANSIENT": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "HTTP_PREFIX_TRANSIENT",
            "Type": "VAR",
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter<HttpConverter>.add_transient_prefix",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter<HttpConverter>.remove_transient_prefix",
                    "Line": 2
                }
            ]
        },
        "metainfo?metainfo#MetaInfo": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "MetaInfo",
            "Type": "TYPE",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap",
                    "Line": 32
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "ahash@0.8.11",
                    "PkgPath": "ahash::hash_map",
                    "Name": "AHashMap",
                    "Line": 33
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.31",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 33
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap",
                    "Line": 34
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "Node",
                    "Line": 38
                }
            ],
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.fmt"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Backward<MetaInfo>.strip_rpc_prefix_and_set_backward_downstream"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_all_backword_transients_with_prefix"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Backward<MetaInfo>.get_all_backward_transients_with_rpc_prefix"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.iter_all_backword_transients_with_prefix"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.remove"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward<MetaInfo>.get_all_transients"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.contains_string"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Backward<MetaInfo>.get_all_backward_transients"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward<MetaInfo>.iter_persistents_and_transients_with_http_prefix"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Backward<MetaInfo>.get_all_backward_transients_with_http_prefix"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward<MetaInfo>.strip_http_prefix_and_set_upstream"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.ensure_backward_node"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward<MetaInfo>.strip_rpc_prefix_and_set_upstream"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo::from_node",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_faststr"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.clear"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.contains"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.ensure_forward_node"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.iter_all_persistents_and_transients_with_prefix"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward<MetaInfo>.get_all_upstreams"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.insert"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_all_persistents_and_transients_with_prefix"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.contains_faststr"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward<MetaInfo>.get_all_persistents_and_transients_with_rpc_prefix"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.extend",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Backward<MetaInfo>.iter_backward_transients_with_http_prefix"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward<MetaInfo>.get_all_persistents_and_transients_with_http_prefix"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.derive"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.remove_string"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_string"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward<MetaInfo>.strip_http_prefix_and_set_persistent"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Backward<MetaInfo>.iter_backward_transients_with_rpc_prefix"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.insert_string"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.remove_faststr"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward<MetaInfo>.iter_persistents_and_transients_with_rpc_prefix"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.insert_faststr"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward<MetaInfo>.strip_rpc_prefix_and_set_persistent"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Backward<MetaInfo>.strip_http_prefix_and_set_backward_downstream"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Backward<MetaInfo>.get_all_backward_downstreams"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward<MetaInfo>.get_all_persistents"
                }
            ]
        },
        "metainfo?metainfo#MetaInfo.clear": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "MetaInfo.clear",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.clear",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "clear",
                    "Line": 9
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.clear",
                    "Line": 12
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "Node.clear",
                    "Line": 15
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo"
                }
            ]
        },
        "metainfo?metainfo#MetaInfo.contains": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "MetaInfo.contains",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.contains",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo"
                }
            ]
        },
        "metainfo?metainfo#MetaInfo.contains_faststr": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "MetaInfo.contains_faststr",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.contains",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo"
                }
            ]
        },
        "metainfo?metainfo#MetaInfo.contains_string": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "MetaInfo.contains_string",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "contains_key",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo"
                }
            ]
        },
        "metainfo?metainfo#MetaInfo.derive": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "MetaInfo.derive",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo::from_node",
                    "Line": 23
                }
            ]
        },
        "metainfo?metainfo#MetaInfo.ensure_backward_node": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "MetaInfo.ensure_backward_node",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "Node",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo"
                }
            ]
        },
        "metainfo?metainfo#MetaInfo.ensure_forward_node": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "MetaInfo.ensure_forward_node",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "Node",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo"
                }
            ]
        },
        "metainfo?metainfo#MetaInfo.extend": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "MetaInfo.extend",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap::with_capacity",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "ahash@0.8.11",
                    "PkgPath": "ahash::hash_map",
                    "Name": "AHashMap::with_capacity",
                    "Line": 12
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap::with_capacity",
                    "Line": 18
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.extend",
                    "Line": 7
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "ahash@0.8.11",
                    "PkgPath": "ahash::hash_map",
                    "Name": "AHashMap.extend",
                    "Line": 13
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.extend",
                    "Line": 19
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "Node.extend",
                    "Line": 26
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "ahash@0.8.11",
                    "PkgPath": "ahash::hash_map",
                    "Name": "AHashMap",
                    "Line": 12
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap",
                    "Line": 18
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "DEFAULT_MAP_SIZE",
                    "Line": 6
                }
            ]
        },
        "metainfo?metainfo#MetaInfo.fmt": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "MetaInfo.fmt",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo"
                }
            ]
        },
        "metainfo?metainfo#MetaInfo.get": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "MetaInfo.get",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.get",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo"
                }
            ]
        },
        "metainfo?metainfo#MetaInfo.get_all_backword_transients_with_prefix": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "MetaInfo.get_all_backword_transients_with_prefix",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "get_all_backword_transients_with_prefix",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "ahash@0.8.11",
                    "PkgPath": "ahash::hash_map",
                    "Name": "AHashMap",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.31",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "get_all_impl",
                    "Line": 10
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "ahash@0.8.11",
                    "PkgPath": "ahash::hash_map",
                    "Name": "AHashMap::with_capacity",
                    "Line": 15
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "len",
                    "Line": 11
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "ahash@0.8.11",
                    "PkgPath": "ahash::hash_map",
                    "Name": "AHashMap.extend",
                    "Line": 16
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "iter",
                    "Line": 17
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "add_transient_prefix",
                    "Line": 18
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo"
                }
            ],
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Backward<MetaInfo>.get_all_backward_transients_with_rpc_prefix",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Backward<MetaInfo>.get_all_backward_transients_with_http_prefix",
                    "Line": 1
                }
            ]
        },
        "metainfo?metainfo#MetaInfo.get_all_persistents_and_transients_with_prefix": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "MetaInfo.get_all_persistents_and_transients_with_prefix",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "get_all_persistents_and_transients_with_prefix",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "ahash@0.8.11",
                    "PkgPath": "ahash::hash_map",
                    "Name": "AHashMap",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.31",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "get_all_impl",
                    "Line": 10
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "ahash@0.8.11",
                    "PkgPath": "ahash::hash_map",
                    "Name": "AHashMap::with_capacity",
                    "Line": 17
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "len",
                    "Line": 12
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "ahash@0.8.11",
                    "PkgPath": "ahash::hash_map",
                    "Name": "AHashMap.extend",
                    "Line": 19
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "iter",
                    "Line": 21
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "add_persistent_prefix",
                    "Line": 22
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "add_transient_prefix",
                    "Line": 29
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo"
                }
            ],
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward<MetaInfo>.get_all_persistents_and_transients_with_rpc_prefix",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward<MetaInfo>.get_all_persistents_and_transients_with_http_prefix",
                    "Line": 4
                }
            ]
        },
        "metainfo?metainfo#MetaInfo.get_faststr": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "MetaInfo.get_faststr",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.get",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.31",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo"
                }
            ]
        },
        "metainfo?metainfo#MetaInfo.get_string": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "MetaInfo.get_string",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "ahash@0.8.11",
                    "PkgPath": "ahash::hash_map",
                    "Name": "AHashMap.get",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.31",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo"
                }
            ]
        },
        "metainfo?metainfo#MetaInfo.insert": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "MetaInfo.insert",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap::with_capacity",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.insert",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "DEFAULT_MAP_SIZE",
                    "Line": 4
                }
            ]
        },
        "metainfo?metainfo#MetaInfo.insert_faststr": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "MetaInfo.insert_faststr",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap::with_capacity",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.insert",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.31",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "DEFAULT_MAP_SIZE",
                    "Line": 4
                }
            ]
        },
        "metainfo?metainfo#MetaInfo.insert_string": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "MetaInfo.insert_string",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "ahash@0.8.11",
                    "PkgPath": "ahash::hash_map",
                    "Name": "AHashMap::with_capacity",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "ahash@0.8.11",
                    "PkgPath": "ahash::hash_map",
                    "Name": "AHashMap.insert",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.31",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "ahash@0.8.11",
                    "PkgPath": "ahash::hash_map",
                    "Name": "AHashMap",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "DEFAULT_MAP_SIZE",
                    "Line": 4
                }
            ]
        },
        "metainfo?metainfo#MetaInfo.iter_all_backword_transients_with_prefix": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "MetaInfo.iter_all_backword_transients_with_prefix",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "iter_all_backword_transients_with_prefix",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.31",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "get_all_impl",
                    "Line": 12
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "ahash@0.8.11",
                    "PkgPath": "ahash::hash_map",
                    "Name": "AHashMap.into_iter",
                    "Line": 14
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "add_transient_prefix",
                    "Line": 16
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo"
                }
            ],
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Backward<MetaInfo>.iter_backward_transients_with_http_prefix",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Backward<MetaInfo>.iter_backward_transients_with_rpc_prefix",
                    "Line": 3
                }
            ]
        },
        "metainfo?metainfo#MetaInfo.iter_all_persistents_and_transients_with_prefix": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "MetaInfo.iter_all_persistents_and_transients_with_prefix",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "iter_all_persistents_and_transients_with_prefix",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.31",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "get_all_impl",
                    "Line": 12
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "ahash@0.8.11",
                    "PkgPath": "ahash::hash_map",
                    "Name": "AHashMap.into_iter",
                    "Line": 13
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "add_persistent_prefix",
                    "Line": 14
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "add_transient_prefix",
                    "Line": 18
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo"
                }
            ],
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward<MetaInfo>.iter_persistents_and_transients_with_http_prefix",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward<MetaInfo>.iter_persistents_and_transients_with_rpc_prefix",
                    "Line": 4
                }
            ]
        },
        "metainfo?metainfo#MetaInfo.remove": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "MetaInfo.remove",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.remove",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo"
                }
            ]
        },
        "metainfo?metainfo#MetaInfo.remove_faststr": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "MetaInfo.remove_faststr",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.remove",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.31",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo"
                }
            ]
        },
        "metainfo?metainfo#MetaInfo.remove_string": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "MetaInfo.remove_string",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "ahash@0.8.11",
                    "PkgPath": "ahash::hash_map",
                    "Name": "AHashMap.remove",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.31",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo"
                }
            ]
        },
        "metainfo?metainfo#MetaInfo::from_node": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "MetaInfo::from_node",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "Node",
                    "Line": 3
                }
            ],
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.derive",
                    "Line": 23
                }
            ]
        },
        "metainfo?metainfo#RPC_PREFIX_BACKWARD": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "RPC_PREFIX_BACKWARD",
            "Type": "VAR",
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter<RpcConverter>.add_backward_prefix",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter<RpcConverter>.remove_backward_prefix",
                    "Line": 2
                }
            ]
        },
        "metainfo?metainfo#RPC_PREFIX_PERSISTENT": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "RPC_PREFIX_PERSISTENT",
            "Type": "VAR",
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter<RpcConverter>.remove_persistent_prefix",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter<RpcConverter>.add_persistent_prefix",
                    "Line": 2
                }
            ]
        },
        "metainfo?metainfo#RPC_PREFIX_TRANSIENT": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "RPC_PREFIX_TRANSIENT",
            "Type": "VAR",
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter<RpcConverter>.add_transient_prefix",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter<RpcConverter>.remove_transient_prefix",
                    "Line": 2
                }
            ]
        },
        "metainfo?metainfo#del_impl": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "del_impl",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "del_impl"
                }
            ],
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "del_impl"
                }
            ]
        },
        "metainfo?metainfo#get_all_backword_transients_with_prefix": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "get_all_backword_transients_with_prefix",
            "Type": "UNKNOWN",
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_all_backword_transients_with_prefix",
                    "Line": 1
                }
            ]
        },
        "metainfo?metainfo#get_all_persistents_and_transients_with_prefix": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "get_all_persistents_and_transients_with_prefix",
            "Type": "UNKNOWN",
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_all_persistents_and_transients_with_prefix",
                    "Line": 1
                }
            ]
        },
        "metainfo?metainfo#get_impl": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "get_impl",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "get_impl"
                }
            ],
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "get_impl"
                }
            ]
        },
        "metainfo?metainfo#iter_all_backword_transients_with_prefix": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "iter_all_backword_transients_with_prefix",
            "Type": "UNKNOWN",
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.iter_all_backword_transients_with_prefix",
                    "Line": 1
                }
            ]
        },
        "metainfo?metainfo#iter_all_persistents_and_transients_with_prefix": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "iter_all_persistents_and_transients_with_prefix",
            "Type": "UNKNOWN",
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.iter_all_persistents_and_transients_with_prefix",
                    "Line": 1
                }
            ]
        },
        "metainfo?metainfo#set_impl": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "set_impl",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "set_impl"
                }
            ],
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Backward<MetaInfo>.strip_rpc_prefix_and_set_backward_downstream",
                    "Line": 7
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "set_impl"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward<MetaInfo>.strip_http_prefix_and_set_upstream",
                    "Line": 8
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward<MetaInfo>.strip_rpc_prefix_and_set_upstream",
                    "Line": 8
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward<MetaInfo>.strip_http_prefix_and_set_persistent",
                    "Line": 8
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward<MetaInfo>.strip_rpc_prefix_and_set_persistent",
                    "Line": 8
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Backward<MetaInfo>.strip_http_prefix_and_set_backward_downstream",
                    "Line": 7
                }
            ]
        },
        "metainfo?metainfo#strip_http_prefix_and_set_persistent": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "strip_http_prefix_and_set_persistent",
            "Type": "UNKNOWN",
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward<MetaInfo>.strip_http_prefix_and_set_persistent",
                    "Line": 1
                }
            ]
        },
        "metainfo?metainfo#strip_http_prefix_and_set_upstream": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "strip_http_prefix_and_set_upstream",
            "Type": "UNKNOWN",
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward<MetaInfo>.strip_http_prefix_and_set_upstream",
                    "Line": 1
                }
            ]
        },
        "metainfo?metainfo#strip_rpc_prefix_and_set_persistent": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "strip_rpc_prefix_and_set_persistent",
            "Type": "UNKNOWN",
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward<MetaInfo>.strip_rpc_prefix_and_set_persistent",
                    "Line": 1
                }
            ]
        },
        "metainfo?metainfo#strip_rpc_prefix_and_set_upstream": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "strip_rpc_prefix_and_set_upstream",
            "Type": "UNKNOWN",
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward<MetaInfo>.strip_rpc_prefix_and_set_upstream",
                    "Line": 1
                }
            ]
        },
        "metainfo?metainfo::backward#Backward": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::backward",
            "Name": "Backward",
            "Type": "TYPE",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.31",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "ahash@0.8.11",
                    "PkgPath": "ahash::hash_map",
                    "Name": "AHashMap",
                    "Line": 5
                }
            ]
        },
        "metainfo?metainfo::convert#Converter": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::convert",
            "Name": "Converter",
            "Type": "TYPE",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.31",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 1
                }
            ],
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_all_backword_transients_with_prefix",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.iter_all_backword_transients_with_prefix",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.iter_all_persistents_and_transients_with_prefix",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_all_persistents_and_transients_with_prefix",
                    "Line": 6
                }
            ]
        },
        "metainfo?metainfo::convert#Converter<HttpConverter>.add_backward_prefix": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::convert",
            "Name": "Converter<HttpConverter>.add_backward_prefix",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.31",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.add_prefix_and_to_http_format",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "HTTP_PREFIX_BACKWARD",
                    "Line": 2
                }
            ]
        },
        "metainfo?metainfo::convert#Converter<HttpConverter>.add_persistent_prefix": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::convert",
            "Name": "Converter<HttpConverter>.add_persistent_prefix",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.31",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.add_prefix_and_to_http_format",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "HTTP_PREFIX_PERSISTENT",
                    "Line": 2
                }
            ]
        },
        "metainfo?metainfo::convert#Converter<HttpConverter>.add_transient_prefix": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::convert",
            "Name": "Converter<HttpConverter>.add_transient_prefix",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.31",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.add_prefix_and_to_http_format",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "HTTP_PREFIX_TRANSIENT",
                    "Line": 2
                }
            ]
        },
        "metainfo?metainfo::convert#Converter<HttpConverter>.remove_backward_prefix": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::convert",
            "Name": "Converter<HttpConverter>.remove_backward_prefix",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.31",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.remove_prefix_and_to_rpc_format",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "HTTP_PREFIX_BACKWARD",
                    "Line": 2
                }
            ],
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Backward<MetaInfo>.strip_http_prefix_and_set_backward_downstream",
                    "Line": 6
                }
            ]
        },
        "metainfo?metainfo::convert#Converter<HttpConverter>.remove_persistent_prefix": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::convert",
            "Name": "Converter<HttpConverter>.remove_persistent_prefix",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.31",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.remove_prefix_and_to_rpc_format",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "HTTP_PREFIX_PERSISTENT",
                    "Line": 2
                }
            ],
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward<MetaInfo>.strip_http_prefix_and_set_persistent",
                    "Line": 7
                }
            ]
        },
        "metainfo?metainfo::convert#Converter<HttpConverter>.remove_transient_prefix": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::convert",
            "Name": "Converter<HttpConverter>.remove_transient_prefix",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.31",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.remove_prefix_and_to_rpc_format",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "HTTP_PREFIX_TRANSIENT",
                    "Line": 2
                }
            ],
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward<MetaInfo>.strip_http_prefix_and_set_upstream",
                    "Line": 7
                }
            ]
        },
        "metainfo?metainfo::convert#Converter<RpcConverter>.add_backward_prefix": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::convert",
            "Name": "Converter<RpcConverter>.add_backward_prefix",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.31",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "RpcConverter.add_prefix",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "RpcConverter"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "RPC_PREFIX_BACKWARD",
                    "Line": 2
                }
            ]
        },
        "metainfo?metainfo::convert#Converter<RpcConverter>.add_persistent_prefix": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::convert",
            "Name": "Converter<RpcConverter>.add_persistent_prefix",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.31",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "RpcConverter.add_prefix",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "RpcConverter"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "RPC_PREFIX_PERSISTENT",
                    "Line": 2
                }
            ]
        },
        "metainfo?metainfo::convert#Converter<RpcConverter>.add_transient_prefix": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::convert",
            "Name": "Converter<RpcConverter>.add_transient_prefix",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.31",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "RpcConverter.add_prefix",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "RpcConverter"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "RPC_PREFIX_TRANSIENT",
                    "Line": 2
                }
            ]
        },
        "metainfo?metainfo::convert#Converter<RpcConverter>.remove_backward_prefix": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::convert",
            "Name": "Converter<RpcConverter>.remove_backward_prefix",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.31",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "RpcConverter.remove_prefix",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "RpcConverter"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "RPC_PREFIX_BACKWARD",
                    "Line": 2
                }
            ],
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Backward<MetaInfo>.strip_rpc_prefix_and_set_backward_downstream",
                    "Line": 6
                }
            ]
        },
        "metainfo?metainfo::convert#Converter<RpcConverter>.remove_persistent_prefix": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::convert",
            "Name": "Converter<RpcConverter>.remove_persistent_prefix",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.31",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "RpcConverter.remove_prefix",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "RpcConverter"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "RPC_PREFIX_PERSISTENT",
                    "Line": 2
                }
            ],
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward<MetaInfo>.strip_rpc_prefix_and_set_persistent",
                    "Line": 7
                }
            ]
        },
        "metainfo?metainfo::convert#Converter<RpcConverter>.remove_transient_prefix": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::convert",
            "Name": "Converter<RpcConverter>.remove_transient_prefix",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.31",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "RpcConverter.remove_prefix",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "RpcConverter"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "RPC_PREFIX_TRANSIENT",
                    "Line": 2
                }
            ],
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward<MetaInfo>.strip_rpc_prefix_and_set_upstream",
                    "Line": 7
                }
            ]
        },
        "metainfo?metainfo::convert#FASTSTR_INLINE_SIZE": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::convert",
            "Name": "FASTSTR_INLINE_SIZE",
            "Type": "VAR",
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.remove_prefix_and_to_rpc_format",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.add_prefix_and_to_http_format",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "RpcConverter.add_prefix",
                    "Line": 3
                }
            ]
        },
        "metainfo?metainfo::convert#HttpConverter": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::convert",
            "Name": "HttpConverter",
            "Type": "TYPE",
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward<MetaInfo>.iter_persistents_and_transients_with_http_prefix",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Backward<MetaInfo>.get_all_backward_transients_with_http_prefix",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward<MetaInfo>.strip_http_prefix_and_set_upstream",
                    "Line": 7
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Backward<MetaInfo>.iter_backward_transients_with_http_prefix",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward<MetaInfo>.get_all_persistents_and_transients_with_http_prefix",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward<MetaInfo>.strip_http_prefix_and_set_persistent",
                    "Line": 7
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Backward<MetaInfo>.strip_http_prefix_and_set_backward_downstream",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter<HttpConverter>.add_persistent_prefix"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.remove_prefix_and_to_rpc_format"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter<HttpConverter>.add_transient_prefix"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter<HttpConverter>.remove_backward_prefix"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter<HttpConverter>.remove_persistent_prefix"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.to_rpc_format_string"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter<HttpConverter>.add_backward_prefix"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.add_prefix_and_to_http_format"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter<HttpConverter>.remove_transient_prefix"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.to_http_format"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.to_http_format_string"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.to_rpc_format"
                }
            ]
        },
        "metainfo?metainfo::convert#HttpConverter.add_prefix_and_to_http_format": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::convert",
            "Name": "HttpConverter.add_prefix_and_to_http_format",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.31",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.31",
                    "PkgPath": "faststr",
                    "Name": "FastStr::new_u8_slice_unchecked",
                    "Line": 14
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.31",
                    "PkgPath": "faststr",
                    "Name": "FastStr::from_vec_u8_unchecked",
                    "Line": 24
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.to_http_format",
                    "Line": 11
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "FASTSTR_INLINE_SIZE",
                    "Line": 3
                }
            ],
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter<HttpConverter>.add_persistent_prefix",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter<HttpConverter>.add_transient_prefix",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter<HttpConverter>.add_backward_prefix",
                    "Line": 2
                }
            ]
        },
        "metainfo?metainfo::convert#HttpConverter.remove_prefix_and_to_rpc_format": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::convert",
            "Name": "HttpConverter.remove_prefix_and_to_rpc_format",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.31",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.31",
                    "PkgPath": "faststr",
                    "Name": "FastStr::new_u8_slice_unchecked",
                    "Line": 8
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.31",
                    "PkgPath": "faststr",
                    "Name": "FastStr::from_vec_u8_unchecked",
                    "Line": 16
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.to_rpc_format",
                    "Line": 7
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "FASTSTR_INLINE_SIZE",
                    "Line": 5
                }
            ],
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter<HttpConverter>.remove_backward_prefix",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter<HttpConverter>.remove_persistent_prefix",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter<HttpConverter>.remove_transient_prefix",
                    "Line": 2
                }
            ]
        },
        "metainfo?metainfo::convert#HttpConverter.to_http_format": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::convert",
            "Name": "HttpConverter.to_http_format",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter"
                }
            ],
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.add_prefix_and_to_http_format",
                    "Line": 11
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.to_http_format_string",
                    "Line": 5
                }
            ]
        },
        "metainfo?metainfo::convert#HttpConverter.to_http_format_string": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::convert",
            "Name": "HttpConverter.to_http_format_string",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.to_http_format",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter"
                }
            ]
        },
        "metainfo?metainfo::convert#HttpConverter.to_rpc_format": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::convert",
            "Name": "HttpConverter.to_rpc_format",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter"
                }
            ],
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.remove_prefix_and_to_rpc_format",
                    "Line": 7
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.to_rpc_format_string",
                    "Line": 5
                }
            ]
        },
        "metainfo?metainfo::convert#HttpConverter.to_rpc_format_string": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::convert",
            "Name": "HttpConverter.to_rpc_format_string",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.to_rpc_format",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter"
                }
            ]
        },
        "metainfo?metainfo::convert#RpcConverter": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::convert",
            "Name": "RpcConverter",
            "Type": "TYPE",
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Backward<MetaInfo>.strip_rpc_prefix_and_set_backward_downstream",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Backward<MetaInfo>.get_all_backward_transients_with_rpc_prefix",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward<MetaInfo>.strip_rpc_prefix_and_set_upstream",
                    "Line": 7
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward<MetaInfo>.get_all_persistents_and_transients_with_rpc_prefix",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Backward<MetaInfo>.iter_backward_transients_with_rpc_prefix",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward<MetaInfo>.iter_persistents_and_transients_with_rpc_prefix",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward<MetaInfo>.strip_rpc_prefix_and_set_persistent",
                    "Line": 7
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "RpcConverter.remove_prefix"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter<RpcConverter>.add_transient_prefix"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter<RpcConverter>.add_backward_prefix"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter<RpcConverter>.remove_transient_prefix"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter<RpcConverter>.remove_persistent_prefix"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter<RpcConverter>.remove_backward_prefix"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "RpcConverter.add_prefix"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter<RpcConverter>.add_persistent_prefix"
                }
            ]
        },
        "metainfo?metainfo::convert#RpcConverter.add_prefix": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::convert",
            "Name": "RpcConverter.add_prefix",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.31",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.31",
                    "PkgPath": "faststr",
                    "Name": "FastStr::new_u8_slice_unchecked",
                    "Line": 18
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.31",
                    "PkgPath": "faststr",
                    "Name": "FastStr::from_string",
                    "Line": 24
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "RpcConverter"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "FASTSTR_INLINE_SIZE",
                    "Line": 3
                }
            ],
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter<RpcConverter>.add_transient_prefix",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter<RpcConverter>.add_backward_prefix",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter<RpcConverter>.add_persistent_prefix",
                    "Line": 2
                }
            ]
        },
        "metainfo?metainfo::convert#RpcConverter.remove_prefix": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::convert",
            "Name": "RpcConverter.remove_prefix",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.31",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.31",
                    "PkgPath": "faststr",
                    "Name": "FastStr::new",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "RpcConverter"
                }
            ],
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter<RpcConverter>.remove_transient_prefix",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter<RpcConverter>.remove_persistent_prefix",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter<RpcConverter>.remove_backward_prefix",
                    "Line": 2
                }
            ]
        },
        "metainfo?metainfo::convert#add_persistent_prefix": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::convert",
            "Name": "add_persistent_prefix",
            "Type": "UNKNOWN",
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.iter_all_persistents_and_transients_with_prefix",
                    "Line": 14
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_all_persistents_and_transients_with_prefix",
                    "Line": 22
                }
            ]
        },
        "metainfo?metainfo::convert#add_transient_prefix": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::convert",
            "Name": "add_transient_prefix",
            "Type": "UNKNOWN",
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_all_backword_transients_with_prefix",
                    "Line": 18
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.iter_all_backword_transients_with_prefix",
                    "Line": 16
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.iter_all_persistents_and_transients_with_prefix",
                    "Line": 18
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_all_persistents_and_transients_with_prefix",
                    "Line": 29
                }
            ]
        },
        "metainfo?metainfo::faststr_map#FastStrMap": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::faststr_map",
            "Name": "FastStrMap",
            "Type": "TYPE",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "rustc-hash@2.1.1",
                    "PkgPath": "rustc-hash::random_state",
                    "Name": "FxHashMapRand",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.31",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 5
                }
            ],
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_faststr",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.extend",
                    "Line": 18
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.insert_faststr",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo",
                    "Line": 34
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.entry"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.capacity"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.iter"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.clear"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.get"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.contains"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.is_empty"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.remove"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.extend",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.get_mut"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.insert"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.len"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap::with_capacity"
                }
            ]
        },
        "metainfo?metainfo::faststr_map#FastStrMap.capacity": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::faststr_map",
            "Name": "FastStrMap.capacity",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "capacity",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap"
                }
            ]
        },
        "metainfo?metainfo::faststr_map#FastStrMap.clear": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::faststr_map",
            "Name": "FastStrMap.clear",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "clear",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap"
                }
            ],
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.clear",
                    "Line": 12
                }
            ]
        },
        "metainfo?metainfo::faststr_map#FastStrMap.contains": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::faststr_map",
            "Name": "FastStrMap.contains",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "contains_key",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap"
                }
            ],
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.contains_faststr",
                    "Line": 6
                }
            ]
        },
        "metainfo?metainfo::faststr_map#FastStrMap.entry": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::faststr_map",
            "Name": "FastStrMap.entry",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "Entry",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.31",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "entry",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap"
                }
            ]
        },
        "metainfo?metainfo::faststr_map#FastStrMap.extend": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::faststr_map",
            "Name": "FastStrMap.extend",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "extend",
                    "Line": 2
                }
            ],
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.extend",
                    "Line": 19
                }
            ]
        },
        "metainfo?metainfo::faststr_map#FastStrMap.get": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::faststr_map",
            "Name": "FastStrMap.get",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.31",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "get",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap"
                }
            ],
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_faststr",
                    "Line": 5
                }
            ]
        },
        "metainfo?metainfo::faststr_map#FastStrMap.get_mut": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::faststr_map",
            "Name": "FastStrMap.get_mut",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.31",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "get_mut",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap"
                }
            ]
        },
        "metainfo?metainfo::faststr_map#FastStrMap.insert": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::faststr_map",
            "Name": "FastStrMap.insert",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.31",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "insert",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap"
                }
            ],
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.insert_faststr",
                    "Line": 5
                }
            ]
        },
        "metainfo?metainfo::faststr_map#FastStrMap.is_empty": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::faststr_map",
            "Name": "FastStrMap.is_empty",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "is_empty",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap"
                }
            ]
        },
        "metainfo?metainfo::faststr_map#FastStrMap.iter": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::faststr_map",
            "Name": "FastStrMap.iter",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "Iter",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.31",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "iter",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap"
                }
            ]
        },
        "metainfo?metainfo::faststr_map#FastStrMap.len": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::faststr_map",
            "Name": "FastStrMap.len",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "len",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap"
                }
            ]
        },
        "metainfo?metainfo::faststr_map#FastStrMap.remove": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::faststr_map",
            "Name": "FastStrMap.remove",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.31",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "remove",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap"
                }
            ],
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.remove_faststr",
                    "Line": 6
                }
            ]
        },
        "metainfo?metainfo::faststr_map#FastStrMap::with_capacity": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::faststr_map",
            "Name": "FastStrMap::with_capacity",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "with_capacity_and_hasher",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "rustc-hash@2.1.1",
                    "PkgPath": "rustc-hash::random_state",
                    "Name": "FxRandomState::default",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "rustc-hash@2.1.1",
                    "PkgPath": "rustc-hash::random_state",
                    "Name": "FxHashMapRand",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap"
                }
            ],
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.extend",
                    "Line": 18
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.insert_faststr",
                    "Line": 4
                }
            ]
        },
        "metainfo?metainfo::forward#Forward": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::forward",
            "Name": "Forward",
            "Type": "TYPE",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.31",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "ahash@0.8.11",
                    "PkgPath": "ahash::hash_map",
                    "Name": "AHashMap",
                    "Line": 5
                }
            ]
        },
        "metainfo?metainfo::kv#DEFAULT_CAPACITY": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::kv",
            "Name": "DEFAULT_CAPACITY",
            "Type": "VAR"
        },
        "metainfo?metainfo::kv#Node": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::kv",
            "Name": "Node",
            "Type": "TYPE",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "ahash@0.8.11",
                    "PkgPath": "ahash::hash_map",
                    "Name": "AHashMap",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.31",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 2
                }
            ],
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.ensure_backward_node",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo::from_node",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.ensure_forward_node",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo",
                    "Line": 38
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "Node.clear"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "Node.extend"
                }
            ]
        },
        "metainfo?metainfo::kv#Node.clear": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::kv",
            "Name": "Node.clear",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "clear",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "Node"
                }
            ],
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.clear",
                    "Line": 15
                }
            ]
        },
        "metainfo?metainfo::kv#Node.extend": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::kv",
            "Name": "Node.extend",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "ahash@0.8.11",
                    "PkgPath": "ahash::hash_map",
                    "Name": "AHashMap.extend",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "Node"
                }
            ],
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.extend",
                    "Line": 26
                }
            ]
        },
        "metainfo?metainfo::kv#del_impl": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::kv",
            "Name": "del_impl",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "del_impl"
                }
            ],
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "del_impl"
                }
            ]
        },
        "metainfo?metainfo::kv#get_all_impl": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::kv",
            "Name": "get_all_impl",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "get_all_impl"
                }
            ],
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_all_backword_transients_with_prefix",
                    "Line": 10
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.iter_all_backword_transients_with_prefix",
                    "Line": 12
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward<MetaInfo>.get_all_transients",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Backward<MetaInfo>.get_all_backward_transients",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.iter_all_persistents_and_transients_with_prefix",
                    "Line": 12
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward<MetaInfo>.get_all_upstreams",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_all_persistents_and_transients_with_prefix",
                    "Line": 10
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Backward<MetaInfo>.get_all_backward_downstreams",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward<MetaInfo>.get_all_persistents",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "get_all_impl"
                }
            ]
        },
        "metainfo?metainfo::kv#get_impl": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::kv",
            "Name": "get_impl",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "get_impl"
                }
            ],
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "get_impl"
                }
            ]
        },
        "metainfo?metainfo::kv#set_impl": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::kv",
            "Name": "set_impl",
            "Type": "FUNC"
        },
        "metainfo?metainfo::type_map#AnyObject": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::type_map",
            "Name": "AnyObject",
            "Type": "TYPE",
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.iter",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap",
                    "Line": 2
                }
            ]
        },
        "metainfo?metainfo::type_map#Entry": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::type_map",
            "Name": "Entry",
            "Type": "TYPE",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "Entry",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "AnyObject",
                    "Line": 1
                }
            ],
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry.or_insert_with"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry.and_modify",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.entry",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry.or_insert"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry.or_default"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry.or_insert_with_key"
                }
            ]
        },
        "metainfo?metainfo::type_map#Entry.and_modify": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::type_map",
            "Name": "Entry.and_modify",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "and_modify",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "and_modify",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry",
                    "Line": 5
                }
            ]
        },
        "metainfo?metainfo::type_map#Entry.or_default": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::type_map",
            "Name": "Entry.or_default",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "or_default",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry.or_insert_with",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry"
                }
            ]
        },
        "metainfo?metainfo::type_map#Entry.or_insert": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::type_map",
            "Name": "Entry.or_insert",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "or_insert_with",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry"
                }
            ]
        },
        "metainfo?metainfo::type_map#Entry.or_insert_with": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::type_map",
            "Name": "Entry.or_insert_with",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "or_insert_with",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry"
                }
            ],
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry.or_default",
                    "Line": 6
                }
            ]
        },
        "metainfo?metainfo::type_map#Entry.or_insert_with_key": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::type_map",
            "Name": "Entry.or_insert_with_key",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "or_insert_with_key",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry"
                }
            ]
        },
        "metainfo?metainfo::type_map#TypeMap": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::type_map",
            "Name": "TypeMap",
            "Type": "TYPE",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "rustc-hash@2.1.1",
                    "PkgPath": "rustc-hash::random_state",
                    "Name": "FxHashMapRand",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "AnyObject",
                    "Line": 2
                }
            ],
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.insert",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.extend",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo",
                    "Line": 32
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.remove"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.get"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.capacity"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.entry"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.contains"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap::with_capacity",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.get_mut"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.len"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.insert"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.extend",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.is_empty"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.clear"
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.iter"
                }
            ]
        },
        "metainfo?metainfo::type_map#TypeMap.capacity": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::type_map",
            "Name": "TypeMap.capacity",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "capacity",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap"
                }
            ]
        },
        "metainfo?metainfo::type_map#TypeMap.clear": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::type_map",
            "Name": "TypeMap.clear",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "clear",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap"
                }
            ],
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.clear",
                    "Line": 6
                }
            ]
        },
        "metainfo?metainfo::type_map#TypeMap.contains": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::type_map",
            "Name": "TypeMap.contains",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "contains_key",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap"
                }
            ],
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.contains",
                    "Line": 6
                }
            ]
        },
        "metainfo?metainfo::type_map#TypeMap.entry": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::type_map",
            "Name": "TypeMap.entry",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "entry",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap"
                }
            ]
        },
        "metainfo?metainfo::type_map#TypeMap.extend": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::type_map",
            "Name": "TypeMap.extend",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "extend",
                    "Line": 2
                }
            ],
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.extend",
                    "Line": 7
                }
            ]
        },
        "metainfo?metainfo::type_map#TypeMap.get": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::type_map",
            "Name": "TypeMap.get",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "get",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap"
                }
            ],
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get",
                    "Line": 3
                }
            ]
        },
        "metainfo?metainfo::type_map#TypeMap.get_mut": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::type_map",
            "Name": "TypeMap.get_mut",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "get_mut",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap"
                }
            ]
        },
        "metainfo?metainfo::type_map#TypeMap.insert": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::type_map",
            "Name": "TypeMap.insert",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "insert",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap"
                }
            ],
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.insert",
                    "Line": 5
                }
            ]
        },
        "metainfo?metainfo::type_map#TypeMap.is_empty": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::type_map",
            "Name": "TypeMap.is_empty",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "is_empty",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap"
                }
            ]
        },
        "metainfo?metainfo::type_map#TypeMap.iter": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::type_map",
            "Name": "TypeMap.iter",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "Iter",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "AnyObject",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "iter",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap"
                }
            ]
        },
        "metainfo?metainfo::type_map#TypeMap.len": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::type_map",
            "Name": "TypeMap.len",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "len",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap"
                }
            ]
        },
        "metainfo?metainfo::type_map#TypeMap.remove": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::type_map",
            "Name": "TypeMap.remove",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "remove",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap"
                }
            ],
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.remove",
                    "Line": 4
                }
            ]
        },
        "metainfo?metainfo::type_map#TypeMap::with_capacity": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::type_map",
            "Name": "TypeMap::with_capacity",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "with_capacity_and_hasher",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "rustc-hash@2.1.1",
                    "PkgPath": "rustc-hash::random_state",
                    "Name": "FxRandomState::default",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "rustc-hash@2.1.1",
                    "PkgPath": "rustc-hash::random_state",
                    "Name": "FxHashMapRand",
                    "Line": 3
                }
            ],
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.insert",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.extend",
                    "Line": 6
                }
            ]
        },
        "metainfo?metainfo::type_map#and_modify": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::type_map",
            "Name": "and_modify",
            "Type": "UNKNOWN",
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry.and_modify",
                    "Line": 1
                }
            ]
        },
        "metainfo?metainfo::type_map#or_default": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::type_map",
            "Name": "or_default",
            "Type": "UNKNOWN",
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry.or_default",
                    "Line": 2
                }
            ]
        },
        "rustc-hash@2.1.1?rustc-hash::random_state#FxHashMapRand": {
            "ModPath": "rustc-hash@2.1.1",
            "PkgPath": "rustc-hash::random_state",
            "Name": "FxHashMapRand",
            "Type": "TYPE",
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap::with_capacity",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap::with_capacity",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap",
                    "Line": 2
                }
            ]
        },
        "rustc-hash@2.1.1?rustc-hash::random_state#FxRandomState::default": {
            "ModPath": "rustc-hash@2.1.1",
            "PkgPath": "rustc-hash::random_state",
            "Name": "FxRandomState::default",
            "Type": "FUNC",
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap::with_capacity",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap::with_capacity",
                    "Line": 3
                }
            ]
        },
        "std?std::collections::hash::map#Entry": {
            "ModPath": "std",
            "PkgPath": "std::collections::hash::map",
            "Name": "Entry",
            "Type": "TYPE",
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.entry",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry",
                    "Line": 1
                }
            ]
        },
        "std?std::collections::hash::map#Iter": {
            "ModPath": "std",
            "PkgPath": "std::collections::hash::map",
            "Name": "Iter",
            "Type": "TYPE",
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.iter",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.iter",
                    "Line": 1
                }
            ]
        },
        "std?std::collections::hash::map#and_modify": {
            "ModPath": "std",
            "PkgPath": "std::collections::hash::map",
            "Name": "and_modify",
            "Type": "FUNC",
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry.and_modify",
                    "Line": 6
                }
            ]
        },
        "std?std::collections::hash::map#capacity": {
            "ModPath": "std",
            "PkgPath": "std::collections::hash::map",
            "Name": "capacity",
            "Type": "FUNC",
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.capacity",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.capacity",
                    "Line": 2
                }
            ]
        },
        "std?std::collections::hash::map#clear": {
            "ModPath": "std",
            "PkgPath": "std::collections::hash::map",
            "Name": "clear",
            "Type": "FUNC",
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.clear",
                    "Line": 9
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.clear",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "Node.clear",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.clear",
                    "Line": 2
                }
            ]
        },
        "std?std::collections::hash::map#contains_key": {
            "ModPath": "std",
            "PkgPath": "std::collections::hash::map",
            "Name": "contains_key",
            "Type": "FUNC",
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.contains_string",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.contains",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.contains",
                    "Line": 2
                }
            ]
        },
        "std?std::collections::hash::map#entry": {
            "ModPath": "std",
            "PkgPath": "std::collections::hash::map",
            "Name": "entry",
            "Type": "FUNC",
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.entry",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.entry",
                    "Line": 3
                }
            ]
        },
        "std?std::collections::hash::map#extend": {
            "ModPath": "std",
            "PkgPath": "std::collections::hash::map",
            "Name": "extend",
            "Type": "FUNC",
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.extend",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.extend",
                    "Line": 2
                }
            ]
        },
        "std?std::collections::hash::map#get": {
            "ModPath": "std",
            "PkgPath": "std::collections::hash::map",
            "Name": "get",
            "Type": "FUNC",
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.get",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.get",
                    "Line": 3
                }
            ]
        },
        "std?std::collections::hash::map#get_mut": {
            "ModPath": "std",
            "PkgPath": "std::collections::hash::map",
            "Name": "get_mut",
            "Type": "FUNC",
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.get_mut",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.get_mut",
                    "Line": 3
                }
            ]
        },
        "std?std::collections::hash::map#insert": {
            "ModPath": "std",
            "PkgPath": "std::collections::hash::map",
            "Name": "insert",
            "Type": "FUNC",
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.insert",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.insert",
                    "Line": 2
                }
            ]
        },
        "std?std::collections::hash::map#is_empty": {
            "ModPath": "std",
            "PkgPath": "std::collections::hash::map",
            "Name": "is_empty",
            "Type": "FUNC",
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.is_empty",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.is_empty",
                    "Line": 2
                }
            ]
        },
        "std?std::collections::hash::map#iter": {
            "ModPath": "std",
            "PkgPath": "std::collections::hash::map",
            "Name": "iter",
            "Type": "FUNC",
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_all_backword_transients_with_prefix",
                    "Line": 17
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_all_persistents_and_transients_with_prefix",
                    "Line": 21
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.iter",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.iter",
                    "Line": 2
                }
            ]
        },
        "std?std::collections::hash::map#len": {
            "ModPath": "std",
            "PkgPath": "std::collections::hash::map",
            "Name": "len",
            "Type": "FUNC",
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_all_backword_transients_with_prefix",
                    "Line": 11
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_all_persistents_and_transients_with_prefix",
                    "Line": 12
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.len",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.len",
                    "Line": 2
                }
            ]
        },
        "std?std::collections::hash::map#or_insert_with": {
            "ModPath": "std",
            "PkgPath": "std::collections::hash::map",
            "Name": "or_insert_with",
            "Type": "FUNC",
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry.or_insert_with",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry.or_insert",
                    "Line": 5
                }
            ]
        },
        "std?std::collections::hash::map#or_insert_with_key": {
            "ModPath": "std",
            "PkgPath": "std::collections::hash::map",
            "Name": "or_insert_with_key",
            "Type": "FUNC",
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry.or_insert_with_key",
                    "Line": 5
                }
            ]
        },
        "std?std::collections::hash::map#remove": {
            "ModPath": "std",
            "PkgPath": "std::collections::hash::map",
            "Name": "remove",
            "Type": "FUNC",
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.remove",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.remove",
                    "Line": 3
                }
            ]
        },
        "std?std::collections::hash::map#with_capacity_and_hasher": {
            "ModPath": "std",
            "PkgPath": "std::collections::hash::map",
            "Name": "with_capacity_and_hasher",
            "Type": "FUNC",
            "References": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap::with_capacity",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap::with_capacity",
                    "Line": 3
                }
            ]
        }
    },
    "ASTVersion": "v0.1.2"
}