{
    "id": "/Users/bytedance/golang/work/abcoder/tmp/metainfo",
    "Modules": {
        "": {
            "Language": "rust",
            "Version": "",
            "Name": "",
            "Dir": "",
            "Packages": {
                "alloc::boxed": {
                    "IsMain": false,
                    "IsTest": false,
                    "PkgPath": "alloc::boxed",
                    "Functions": {
                        "new": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "alloc::boxed",
                            "Name": "new",
                            "File": "boxed.rs",
                            "Line": 273,
                            "StartOffset": 10171,
                            "EndOffset": 10174,
                            "Content": "new"
                        }
                    },
                    "Types": {
                        "Box": {
                            "Exported": false,
                            "TypeKind": "struct",
                            "ModPath": "",
                            "PkgPath": "alloc::boxed",
                            "Name": "Box",
                            "File": "boxed.rs",
                            "Line": 231,
                            "StartOffset": 8929,
                            "EndOffset": 8932,
                            "Content": "Box"
                        }
                    },
                    "Vars": {}
                },
                "alloc::boxed::convert": {
                    "IsMain": false,
                    "IsTest": false,
                    "PkgPath": "alloc::boxed::convert",
                    "Functions": {
                        "downcast": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "alloc::boxed::convert",
                            "Name": "downcast",
                            "File": "convert.rs",
                            "Line": 482,
                            "StartOffset": 14426,
                            "EndOffset": 14434,
                            "Content": "downcast"
                        }
                    },
                    "Types": {},
                    "Vars": {}
                },
                "alloc::str": {
                    "IsMain": false,
                    "IsTest": false,
                    "PkgPath": "alloc::str",
                    "Functions": {
                        "to_owned": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "alloc::str",
                            "Name": "to_owned",
                            "File": "str.rs",
                            "Line": 210,
                            "StartOffset": 7690,
                            "EndOffset": 7698,
                            "Content": "to_owned"
                        }
                    },
                    "Types": {},
                    "Vars": {}
                },
                "alloc::string": {
                    "IsMain": false,
                    "IsTest": false,
                    "PkgPath": "alloc::string",
                    "Functions": {
                        "push": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "alloc::string",
                            "Name": "push",
                            "File": "string.rs",
                            "Line": 1419,
                            "StartOffset": 48369,
                            "EndOffset": 48373,
                            "Content": "push"
                        },
                        "push_str": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "alloc::string",
                            "Name": "push_str",
                            "File": "string.rs",
                            "Line": 1126,
                            "StartOffset": 39142,
                            "EndOffset": 39150,
                            "Content": "push_str"
                        },
                        "with_capacity": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "alloc::string",
                            "Name": "with_capacity",
                            "File": "string.rs",
                            "Line": 489,
                            "StartOffset": 15651,
                            "EndOffset": 15664,
                            "Content": "with_capacity"
                        }
                    },
                    "Types": {
                        "String": {
                            "Exported": false,
                            "TypeKind": "struct",
                            "ModPath": "",
                            "PkgPath": "alloc::string",
                            "Name": "String",
                            "File": "string.rs",
                            "Line": 362,
                            "StartOffset": 11508,
                            "EndOffset": 11514,
                            "Content": "String",
                            "Methods": {
                                "eq": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "PartialEq\u003cString\u003e.eq"
                                }
                            }
                        }
                    },
                    "Vars": {}
                },
                "alloc::sync": {
                    "IsMain": false,
                    "IsTest": false,
                    "PkgPath": "alloc::sync",
                    "Functions": {
                        "as_ref": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "alloc::sync",
                            "Name": "as_ref",
                            "File": "sync.rs",
                            "Line": 3917,
                            "StartOffset": 139295,
                            "EndOffset": 139301,
                            "Content": "as_ref"
                        },
                        "clone": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "alloc::sync",
                            "Name": "clone",
                            "File": "sync.rs",
                            "Line": 2163,
                            "StartOffset": 77402,
                            "EndOffset": 77407,
                            "Content": "clone"
                        },
                        "new": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "alloc::sync",
                            "Name": "new",
                            "File": "sync.rs",
                            "Line": 386,
                            "StartOffset": 14609,
                            "EndOffset": 14612,
                            "Content": "new"
                        }
                    },
                    "Types": {
                        "Arc": {
                            "Exported": false,
                            "TypeKind": "struct",
                            "ModPath": "",
                            "PkgPath": "alloc::sync",
                            "Name": "Arc",
                            "File": "sync.rs",
                            "Line": 240,
                            "StartOffset": 8930,
                            "EndOffset": 8933,
                            "Content": "Arc"
                        }
                    },
                    "Vars": {}
                },
                "core::any": {
                    "IsMain": false,
                    "IsTest": false,
                    "PkgPath": "core::any",
                    "Functions": {
                        "downcast_mut": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::any",
                            "Name": "downcast_mut",
                            "File": "any.rs",
                            "Line": 538,
                            "StartOffset": 16683,
                            "EndOffset": 16695,
                            "Content": "downcast_mut"
                        },
                        "downcast_ref": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::any",
                            "Name": "downcast_ref",
                            "File": "any.rs",
                            "Line": 510,
                            "StartOffset": 15957,
                            "EndOffset": 15969,
                            "Content": "downcast_ref"
                        },
                        "of": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::any",
                            "Name": "of",
                            "File": "any.rs",
                            "Line": 742,
                            "StartOffset": 24064,
                            "EndOffset": 24066,
                            "Content": "of"
                        }
                    },
                    "Types": {
                        "Any": {
                            "Exported": false,
                            "TypeKind": "interface",
                            "ModPath": "",
                            "PkgPath": "core::any",
                            "Name": "Any",
                            "File": "any.rs",
                            "Line": 113,
                            "StartOffset": 4391,
                            "EndOffset": 4394,
                            "Content": "Any"
                        },
                        "TypeId": {
                            "Exported": false,
                            "TypeKind": "struct",
                            "ModPath": "",
                            "PkgPath": "core::any",
                            "Name": "TypeId",
                            "File": "any.rs",
                            "Line": 710,
                            "StartOffset": 23176,
                            "EndOffset": 23182,
                            "Content": "TypeId"
                        }
                    },
                    "Vars": {}
                },
                "core::borrow": {
                    "IsMain": false,
                    "IsTest": false,
                    "PkgPath": "core::borrow",
                    "Functions": {},
                    "Types": {
                        "Borrow": {
                            "Exported": false,
                            "TypeKind": "interface",
                            "ModPath": "",
                            "PkgPath": "core::borrow",
                            "Name": "Borrow",
                            "File": "borrow.rs",
                            "Line": 157,
                            "StartOffset": 6609,
                            "EndOffset": 6615,
                            "Content": "Borrow"
                        }
                    },
                    "Vars": {}
                },
                "core::char::methods": {
                    "IsMain": false,
                    "IsTest": false,
                    "PkgPath": "core::char::methods",
                    "Functions": {
                        "to_ascii_lowercase": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::char::methods",
                            "Name": "to_ascii_lowercase",
                            "File": "methods.rs",
                            "Line": 1254,
                            "StartOffset": 41973,
                            "EndOffset": 41991,
                            "Content": "to_ascii_lowercase"
                        },
                        "to_ascii_uppercase": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::char::methods",
                            "Name": "to_ascii_uppercase",
                            "File": "methods.rs",
                            "Line": 1220,
                            "StartOffset": 40770,
                            "EndOffset": 40788,
                            "Content": "to_ascii_uppercase"
                        }
                    },
                    "Types": {},
                    "Vars": {}
                },
                "core::cmp": {
                    "IsMain": false,
                    "IsTest": false,
                    "PkgPath": "core::cmp",
                    "Functions": {},
                    "Types": {
                        "Eq": {
                            "Exported": false,
                            "TypeKind": "interface",
                            "ModPath": "",
                            "PkgPath": "core::cmp",
                            "Name": "Eq",
                            "File": "cmp.rs",
                            "Line": 334,
                            "StartOffset": 12091,
                            "EndOffset": 12093,
                            "Content": "Eq"
                        },
                        "Ord": {
                            "Exported": false,
                            "TypeKind": "interface",
                            "ModPath": "",
                            "PkgPath": "core::cmp",
                            "Name": "Ord",
                            "File": "cmp.rs",
                            "Line": 946,
                            "StartOffset": 31300,
                            "EndOffset": 31303,
                            "Content": "Ord"
                        },
                        "PartialEq": {
                            "Exported": false,
                            "TypeKind": "interface",
                            "ModPath": "",
                            "PkgPath": "core::cmp",
                            "Name": "PartialEq",
                            "File": "cmp.rs",
                            "Line": 248,
                            "StartOffset": 9080,
                            "EndOffset": 9089,
                            "Content": "PartialEq"
                        },
                        "PartialOrd": {
                            "Exported": false,
                            "TypeKind": "interface",
                            "ModPath": "",
                            "PkgPath": "core::cmp",
                            "Name": "PartialOrd",
                            "File": "cmp.rs",
                            "Line": 1329,
                            "StartOffset": 43927,
                            "EndOffset": 43937,
                            "Content": "PartialOrd"
                        }
                    },
                    "Vars": {}
                },
                "core::convert": {
                    "IsMain": false,
                    "IsTest": false,
                    "PkgPath": "core::convert",
                    "Functions": {
                        "as_ref": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::convert",
                            "Name": "as_ref",
                            "File": "mod.rs",
                            "Line": 221,
                            "StartOffset": 8200,
                            "EndOffset": 8206,
                            "Content": "as_ref"
                        }
                    },
                    "Types": {
                        "AsRef": {
                            "Exported": false,
                            "TypeKind": "interface",
                            "ModPath": "",
                            "PkgPath": "core::convert",
                            "Name": "AsRef",
                            "File": "mod.rs",
                            "Line": 218,
                            "StartOffset": 8029,
                            "EndOffset": 8034,
                            "Content": "AsRef"
                        },
                        "From": {
                            "Exported": false,
                            "TypeKind": "interface",
                            "ModPath": "",
                            "PkgPath": "core::convert",
                            "Name": "From",
                            "File": "mod.rs",
                            "Line": 582,
                            "StartOffset": 22549,
                            "EndOffset": 22553,
                            "Content": "From"
                        },
                        "Into": {
                            "Exported": false,
                            "TypeKind": "interface",
                            "ModPath": "",
                            "PkgPath": "core::convert",
                            "Name": "Into",
                            "File": "mod.rs",
                            "Line": 447,
                            "StartOffset": 16452,
                            "EndOffset": 16456,
                            "Content": "Into"
                        }
                    },
                    "Vars": {}
                },
                "core::default": {
                    "IsMain": false,
                    "IsTest": false,
                    "PkgPath": "core::default",
                    "Functions": {
                        "default": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::default",
                            "Name": "default",
                            "File": "default.rs",
                            "Line": 139,
                            "StartOffset": 3341,
                            "EndOffset": 3348,
                            "Content": "default"
                        }
                    },
                    "Types": {
                        "Default": {
                            "Exported": false,
                            "TypeKind": "interface",
                            "ModPath": "",
                            "PkgPath": "core::default",
                            "Name": "Default",
                            "File": "default.rs",
                            "Line": 107,
                            "StartOffset": 2496,
                            "EndOffset": 2503,
                            "Content": "Default"
                        }
                    },
                    "Vars": {}
                },
                "core::fmt": {
                    "IsMain": false,
                    "IsTest": false,
                    "PkgPath": "core::fmt",
                    "Functions": {
                        "debug_struct": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::fmt",
                            "Name": "debug_struct",
                            "File": "mod.rs",
                            "Line": 2228,
                            "StartOffset": 75498,
                            "EndOffset": 75510,
                            "Content": "debug_struct"
                        }
                    },
                    "Types": {
                        "Debug": {
                            "Exported": false,
                            "TypeKind": "interface",
                            "ModPath": "",
                            "PkgPath": "core::fmt",
                            "Name": "Debug",
                            "File": "mod.rs",
                            "Line": 870,
                            "StartOffset": 31512,
                            "EndOffset": 31517,
                            "Content": "Debug"
                        },
                        "Display": {
                            "Exported": false,
                            "TypeKind": "interface",
                            "ModPath": "",
                            "PkgPath": "core::fmt",
                            "Name": "Display",
                            "File": "mod.rs",
                            "Line": 987,
                            "StartOffset": 35722,
                            "EndOffset": 35729,
                            "Content": "Display"
                        },
                        "Formatter": {
                            "Exported": false,
                            "TypeKind": "struct",
                            "ModPath": "",
                            "PkgPath": "core::fmt",
                            "Name": "Formatter",
                            "File": "mod.rs",
                            "Line": 532,
                            "StartOffset": 20036,
                            "EndOffset": 20045,
                            "Content": "Formatter"
                        },
                        "Result": {
                            "Exported": false,
                            "TypeKind": "type-parameter",
                            "ModPath": "",
                            "PkgPath": "core::fmt",
                            "Name": "Result",
                            "File": "mod.rs",
                            "Line": 79,
                            "StartOffset": 2322,
                            "EndOffset": 2328,
                            "Content": "Result"
                        }
                    },
                    "Vars": {}
                },
                "core::fmt::builders": {
                    "IsMain": false,
                    "IsTest": false,
                    "PkgPath": "core::fmt::builders",
                    "Functions": {
                        "finish": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::fmt::builders",
                            "Name": "finish",
                            "File": "builders.rs",
                            "Line": 244,
                            "StartOffset": 7364,
                            "EndOffset": 7370,
                            "Content": "finish"
                        }
                    },
                    "Types": {},
                    "Vars": {}
                },
                "core::hash": {
                    "IsMain": false,
                    "IsTest": false,
                    "PkgPath": "core::hash",
                    "Functions": {},
                    "Types": {
                        "BuildHasher": {
                            "Exported": false,
                            "TypeKind": "interface",
                            "ModPath": "",
                            "PkgPath": "core::hash",
                            "Name": "BuildHasher",
                            "File": "mod.rs",
                            "Line": 637,
                            "StartOffset": 20860,
                            "EndOffset": 20871,
                            "Content": "BuildHasher"
                        },
                        "Hash": {
                            "Exported": false,
                            "TypeKind": "interface",
                            "ModPath": "",
                            "PkgPath": "core::hash",
                            "Name": "Hash",
                            "File": "mod.rs",
                            "Line": 186,
                            "StartOffset": 5394,
                            "EndOffset": 5398,
                            "Content": "Hash"
                        }
                    },
                    "Vars": {}
                },
                "core::iter::traits::collect": {
                    "IsMain": false,
                    "IsTest": false,
                    "PkgPath": "core::iter::traits::collect",
                    "Functions": {},
                    "Types": {
                        "Extend": {
                            "Exported": false,
                            "TypeKind": "interface",
                            "ModPath": "",
                            "PkgPath": "core::iter::traits::collect",
                            "Name": "Extend",
                            "File": "collect.rs",
                            "Line": 397,
                            "StartOffset": 12174,
                            "EndOffset": 12180,
                            "Content": "Extend"
                        },
                        "FromIterator": {
                            "Exported": false,
                            "TypeKind": "interface",
                            "ModPath": "",
                            "PkgPath": "core::iter::traits::collect",
                            "Name": "FromIterator",
                            "File": "collect.rs",
                            "Line": 134,
                            "StartOffset": 4174,
                            "EndOffset": 4186,
                            "Content": "FromIterator"
                        },
                        "IntoIterator": {
                            "Exported": false,
                            "TypeKind": "interface",
                            "ModPath": "",
                            "PkgPath": "core::iter::traits::collect",
                            "Name": "IntoIterator",
                            "File": "collect.rs",
                            "Line": 285,
                            "StartOffset": 8896,
                            "EndOffset": 8908,
                            "Content": "IntoIterator"
                        }
                    },
                    "Vars": {}
                },
                "core::iter::traits::iterator": {
                    "IsMain": false,
                    "IsTest": false,
                    "PkgPath": "core::iter::traits::iterator",
                    "Functions": {
                        "map": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::iter::traits::iterator",
                            "Name": "map",
                            "File": "iterator.rs",
                            "Line": 745,
                            "StartOffset": 25852,
                            "EndOffset": 25855,
                            "Content": "map"
                        }
                    },
                    "Types": {},
                    "Vars": {}
                },
                "core::macros": {
                    "IsMain": false,
                    "IsTest": false,
                    "PkgPath": "core::macros",
                    "Functions": {
                        "alloc_error_handler": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::macros",
                            "Name": "alloc_error_handler",
                            "File": "mod.rs",
                            "Line": 1806,
                            "StartOffset": 63853,
                            "EndOffset": 64246,
                            "Content": "/// Attribute macro applied to a function to register it as a handler for allocation failure.\n    ///\n    /// See also [`std::alloc::handle_alloc_error`](../../../std/alloc/fn.handle_alloc_error.html).\n    #[unstable(feature = \"alloc_error_handler\", issue = \"51540\")]\n    #[allow_internal_unstable(rustc_attrs)]\n    #[rustc_builtin_macro]\n    pub macro alloc_error_handler($item:item) {\n        /* compiler built-in */\n    }"
                        },
                        "assert": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::macros",
                            "Name": "assert",
                            "File": "mod.rs",
                            "Line": 1624,
                            "StartOffset": 57604,
                            "EndOffset": 59588,
                            "Content": "/// Asserts that a boolean expression is `true` at runtime.\n    ///\n    /// This will invoke the [`panic!`] macro if the provided expression cannot be\n    /// evaluated to `true` at runtime.\n    ///\n    /// # Uses\n    ///\n    /// Assertions are always checked in both debug and release builds, and cannot\n    /// be disabled. See [`debug_assert!`] for assertions that are not enabled in\n    /// release builds by default.\n    ///\n    /// Unsafe code may rely on `assert!` to enforce run-time invariants that, if\n    /// violated could lead to unsafety.\n    ///\n    /// Other use-cases of `assert!` include testing and enforcing run-time\n    /// invariants in safe code (whose violation cannot result in unsafety).\n    ///\n    /// # Custom Messages\n    ///\n    /// This macro has a second form, where a custom panic message can\n    /// be provided with or without arguments for formatting. See [`std::fmt`]\n    /// for syntax for this form. Expressions used as format arguments will only\n    /// be evaluated if the assertion fails.\n    ///\n    /// [`std::fmt`]: ../std/fmt/index.html\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// // the panic message for these assertions is the stringified value of the\n    /// // expression given.\n    /// assert!(true);\n    ///\n    /// fn some_computation() -\u003e bool { true } // a very simple function\n    ///\n    /// assert!(some_computation());\n    ///\n    /// // assert with a custom message\n    /// let x = true;\n    /// assert!(x, \"x wasn't true!\");\n    ///\n    /// let a = 3; let b = 27;\n    /// assert!(a + b == 30, \"a = {}, b = {}\", a, b);\n    /// ```\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    #[rustc_builtin_macro]\n    #[macro_export]\n    #[rustc_diagnostic_item = \"assert_macro\"]\n    #[allow_internal_unstable(\n        core_intrinsics,\n        panic_internals,\n        edition_panic,\n        generic_assert_internals\n    )]\n    macro_rules! assert {\n        ($cond:expr $(,)?) =\u003e {{ /* compiler built-in */ }};\n        ($cond:expr, $($arg:tt)+) =\u003e {{ /* compiler built-in */ }};\n    }"
                        },
                        "assert_eq": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::macros",
                            "Name": "assert_eq",
                            "File": "mod.rs",
                            "Line": 15,
                            "StartOffset": -1,
                            "EndOffset": 2630,
                            "Content": "/// Asserts that two expressions are equal to each other (using [`PartialEq`]).\n///\n/// Assertions are always checked in both debug and release builds, and cannot\n/// be disabled. See [`debug_assert_eq!`] for assertions that are disabled in\n/// release builds by default.\n///\n/// [`debug_assert_eq!`]: crate::debug_assert_eq\n///\n/// On panic, this macro will print the values of the expressions with their\n/// debug representations.\n///\n/// Like [`assert!`], this macro has a second form, where a custom\n/// panic message can be provided.\n///\n/// # Examples\n///\n/// ```\n/// let a = 3;\n/// let b = 1 + 2;\n/// assert_eq!(a, b);\n///\n/// assert_eq!(a, b, \"we are testing addition with {} and {}\", a, b);\n/// ```\n#[macro_export]\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\n#[cfg_attr(not(test), rustc_diagnostic_item = \"assert_eq_macro\")]\n#[allow_internal_unstable(panic_internals)]\nmacro_rules! assert_eq {\n    ($left:expr, $right:expr $(,)?) =\u003e {\n        match (\u0026$left, \u0026$right) {\n            (left_val, right_val) =\u003e {\n                if !(*left_val == *right_val) {\n                    let kind = $crate::panicking::AssertKind::Eq;\n                    // The reborrows below are intentional. Without them, the stack slot for the\n                    // borrow is initialized even before the values are compared, leading to a\n                    // noticeable slow down.\n                    $crate::panicking::assert_failed(kind, \u0026*left_val, \u0026*right_val, $crate::option::Option::None);\n                }\n            }\n        }\n    };\n    ($left:expr, $right:expr, $($arg:tt)+) =\u003e {\n        match (\u0026$left, \u0026$right) {\n            (left_val, right_val) =\u003e {\n                if !(*left_val == *right_val) {\n                    let kind = $crate::panicking::AssertKind::Eq;\n                    // The reborrows below are intentional. Without them, the stack slot for the\n                    // borrow is initialized even before the values are compared, leading to a\n                    // noticeable slow down.\n                    $crate::panicking::assert_failed(kind, \u0026*left_val, \u0026*right_val, $crate::option::Option::Some($crate::format_args!($($arg)+)));\n                }\n            }\n        }\n    };\n}"
                        },
                        "assert_matches": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::macros",
                            "Name": "assert_matches",
                            "File": "mod.rs",
                            "Line": 127,
                            "StartOffset": -1,
                            "EndOffset": 7572,
                            "Content": "/// Asserts that an expression matches the provided pattern.\n///\n/// This macro is generally preferable to `assert!(matches!(value, pattern))`, because it can print\n/// the debug representation of the actual value shape that did not meet expectations. In contrast,\n/// using [`assert!`] will only print that expectations were not met, but not why.\n///\n/// The pattern syntax is exactly the same as found in a match arm and the `matches!` macro. The\n/// optional if guard can be used to add additional checks that must be true for the matched value,\n/// otherwise this macro will panic.\n///\n/// Assertions are always checked in both debug and release builds, and cannot\n/// be disabled. See [`debug_assert_matches!`] for assertions that are disabled in\n/// release builds by default.\n///\n/// [`debug_assert_matches!`]: crate::assert_matches::debug_assert_matches\n///\n/// On panic, this macro will print the value of the expression with its debug representation.\n///\n/// Like [`assert!`], this macro has a second form, where a custom panic message can be provided.\n///\n/// # Examples\n///\n/// ```\n/// #![feature(assert_matches)]\n///\n/// use std::assert_matches::assert_matches;\n///\n/// let a = Some(345);\n/// let b = Some(56);\n/// assert_matches!(a, Some(_));\n/// assert_matches!(b, Some(_));\n///\n/// assert_matches!(a, Some(345));\n/// assert_matches!(a, Some(345) | None);\n///\n/// // assert_matches!(a, None); // panics\n/// // assert_matches!(b, Some(345)); // panics\n/// // assert_matches!(b, Some(345) | None); // panics\n///\n/// assert_matches!(a, Some(x) if x \u003e 100);\n/// // assert_matches!(a, Some(x) if x \u003c 100); // panics\n/// ```\n#[unstable(feature = \"assert_matches\", issue = \"82775\")]\n#[allow_internal_unstable(panic_internals)]\n#[rustc_macro_transparency = \"semitransparent\"]\npub macro assert_matches {\n    ($left:expr, $(|)? $( $pattern:pat_param )|+ $( if $guard: expr )? $(,)?) =\u003e {\n        match $left {\n            $( $pattern )|+ $( if $guard )? =\u003e {}\n            ref left_val =\u003e {\n                $crate::panicking::assert_matches_failed(\n                    left_val,\n                    $crate::stringify!($($pattern)|+ $(if $guard)?),\n                    $crate::option::Option::None\n                );\n            }\n        }\n    },\n    ($left:expr, $(|)? $( $pattern:pat_param )|+ $( if $guard: expr )?, $($arg:tt)+) =\u003e {\n        match $left {\n            $( $pattern )|+ $( if $guard )? =\u003e {}\n            ref left_val =\u003e {\n                $crate::panicking::assert_matches_failed(\n                    left_val,\n                    $crate::stringify!($($pattern)|+ $(if $guard)?),\n                    $crate::option::Option::Some($crate::format_args!($($arg)+))\n                );\n            }\n        }\n    },\n}"
                        },
                        "assert_ne": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::macros",
                            "Name": "assert_ne",
                            "File": "mod.rs",
                            "Line": 71,
                            "StartOffset": -1,
                            "EndOffset": 4838,
                            "Content": "/// Asserts that two expressions are not equal to each other (using [`PartialEq`]).\n///\n/// Assertions are always checked in both debug and release builds, and cannot\n/// be disabled. See [`debug_assert_ne!`] for assertions that are disabled in\n/// release builds by default.\n///\n/// [`debug_assert_ne!`]: crate::debug_assert_ne\n///\n/// On panic, this macro will print the values of the expressions with their\n/// debug representations.\n///\n/// Like [`assert!`], this macro has a second form, where a custom\n/// panic message can be provided.\n///\n/// # Examples\n///\n/// ```\n/// let a = 3;\n/// let b = 2;\n/// assert_ne!(a, b);\n///\n/// assert_ne!(a, b, \"we are testing that the values are not equal\");\n/// ```\n#[macro_export]\n#[stable(feature = \"assert_ne\", since = \"1.13.0\")]\n#[cfg_attr(not(test), rustc_diagnostic_item = \"assert_ne_macro\")]\n#[allow_internal_unstable(panic_internals)]\nmacro_rules! assert_ne {\n    ($left:expr, $right:expr $(,)?) =\u003e {\n        match (\u0026$left, \u0026$right) {\n            (left_val, right_val) =\u003e {\n                if *left_val == *right_val {\n                    let kind = $crate::panicking::AssertKind::Ne;\n                    // The reborrows below are intentional. Without them, the stack slot for the\n                    // borrow is initialized even before the values are compared, leading to a\n                    // noticeable slow down.\n                    $crate::panicking::assert_failed(kind, \u0026*left_val, \u0026*right_val, $crate::option::Option::None);\n                }\n            }\n        }\n    };\n    ($left:expr, $right:expr, $($arg:tt)+) =\u003e {\n        match (\u0026($left), \u0026($right)) {\n            (left_val, right_val) =\u003e {\n                if *left_val == *right_val {\n                    let kind = $crate::panicking::AssertKind::Ne;\n                    // The reborrows below are intentional. Without them, the stack slot for the\n                    // borrow is initialized even before the values are compared, leading to a\n                    // noticeable slow down.\n                    $crate::panicking::assert_failed(kind, \u0026*left_val, \u0026*right_val, $crate::option::Option::Some($crate::format_args!($($arg)+)));\n                }\n            }\n        }\n    };\n}"
                        },
                        "autodiff": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::macros",
                            "Name": "autodiff",
                            "File": "mod.rs",
                            "Line": 1607,
                            "StartOffset": 56722,
                            "EndOffset": 57567,
                            "Content": "/// Automatic Differentiation macro which allows generating a new function to compute\n    /// the derivative of a given function. It may only be applied to a function.\n    /// The expected usage syntax is\n    /// `#[autodiff(NAME, MODE, INPUT_ACTIVITIES, OUTPUT_ACTIVITY)]`\n    /// where:\n    /// NAME is a string that represents a valid function name.\n    /// MODE is any of Forward, Reverse, ForwardFirst, ReverseFirst.\n    /// INPUT_ACTIVITIES consists of one valid activity for each input parameter.\n    /// OUTPUT_ACTIVITY must not be set if we implicitly return nothing (or explicitly return\n    /// `-\u003e ()`). Otherwise it must be set to one of the allowed activities.\n    #[unstable(feature = \"autodiff\", issue = \"124509\")]\n    #[allow_internal_unstable(rustc_attrs)]\n    #[rustc_builtin_macro]\n    pub macro autodiff($item:item) {\n        /* compiler built-in */\n    }"
                        },
                        "bench": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::macros",
                            "Name": "bench",
                            "File": "mod.rs",
                            "Line": 1745,
                            "StartOffset": 61644,
                            "EndOffset": 62027,
                            "Content": "/// Attribute macro applied to a function to turn it into a benchmark test.\n    #[unstable(\n        feature = \"test\",\n        issue = \"50297\",\n        soft,\n        reason = \"`bench` is a part of custom test frameworks which are unstable\"\n    )]\n    #[allow_internal_unstable(test, rustc_attrs, coverage_attribute)]\n    #[rustc_builtin_macro]\n    pub macro bench($item:item) {\n        /* compiler built-in */\n    }"
                        },
                        "cfg": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::macros",
                            "Name": "cfg",
                            "File": "mod.rs",
                            "Line": 1506,
                            "StartOffset": 52412,
                            "EndOffset": 53533,
                            "Content": "/// Evaluates boolean combinations of configuration flags at compile-time.\n    ///\n    /// In addition to the `#[cfg]` attribute, this macro is provided to allow\n    /// boolean expression evaluation of configuration flags. This frequently\n    /// leads to less duplicated code.\n    ///\n    /// The syntax given to this macro is the same syntax as the [`cfg`]\n    /// attribute.\n    ///\n    /// `cfg!`, unlike `#[cfg]`, does not remove any code and only evaluates to true or false. For\n    /// example, all blocks in an if/else expression need to be valid when `cfg!` is used for\n    /// the condition, regardless of what `cfg!` is evaluating.\n    ///\n    /// [`cfg`]: ../reference/conditional-compilation.html#the-cfg-attribute\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let my_directory = if cfg!(windows) {\n    ///     \"windows-specific-directory\"\n    /// } else {\n    ///     \"unix-directory\"\n    /// };\n    /// ```\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    #[rustc_builtin_macro]\n    #[macro_export]\n    macro_rules! cfg {\n        ($($cfg:tt)*) =\u003e {\n            /* compiler built-in */\n        };\n    }"
                        },
                        "cfg_accessible": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::macros",
                            "Name": "cfg_accessible",
                            "File": "mod.rs",
                            "Line": 1816,
                            "StartOffset": 64283,
                            "EndOffset": 64599,
                            "Content": "/// Keeps the item it's applied to if the passed path is accessible, and removes it otherwise.\n    #[unstable(\n        feature = \"cfg_accessible\",\n        issue = \"64797\",\n        reason = \"`cfg_accessible` is not fully implemented\"\n    )]\n    #[rustc_builtin_macro]\n    pub macro cfg_accessible($item:item) {\n        /* compiler built-in */\n    }"
                        },
                        "cfg_eval": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::macros",
                            "Name": "cfg_eval",
                            "File": "mod.rs",
                            "Line": 1827,
                            "StartOffset": 64636,
                            "EndOffset": 64940,
                            "Content": "/// Expands all `#[cfg]` and `#[cfg_attr]` attributes in the code fragment it's applied to.\n    #[unstable(\n        feature = \"cfg_eval\",\n        issue = \"82679\",\n        reason = \"`cfg_eval` is a recently implemented feature\"\n    )]\n    #[rustc_builtin_macro]\n    pub macro cfg_eval($($tt:tt)*) {\n        /* compiler built-in */\n    }"
                        },
                        "cfg_match": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::macros",
                            "Name": "cfg_match",
                            "File": "mod.rs",
                            "Line": 288,
                            "StartOffset": -1,
                            "EndOffset": 12092,
                            "Content": "/// A macro for defining `#[cfg]` match-like statements.\n///\n/// It is similar to the `if/elif` C preprocessor macro by allowing definition of a cascade of\n/// `#[cfg]` cases, emitting the implementation which matches first.\n///\n/// This allows you to conveniently provide a long list `#[cfg]`'d blocks of code\n/// without having to rewrite each clause multiple times.\n///\n/// Trailing `_` wildcard match arms are **optional** and they indicate a fallback branch when\n/// all previous declarations do not evaluate to true.\n///\n/// # Example\n///\n/// ```\n/// #![feature(cfg_match)]\n///\n/// cfg_match! {\n///     unix =\u003e {\n///         fn foo() { /* unix specific functionality */ }\n///     }\n///     target_pointer_width = \"32\" =\u003e {\n///         fn foo() { /* non-unix, 32-bit functionality */ }\n///     }\n///     _ =\u003e {\n///         fn foo() { /* fallback implementation */ }\n///     }\n/// }\n/// ```\n///\n/// If desired, it is possible to return expressions through the use of surrounding braces:\n///\n/// ```\n/// #![feature(cfg_match)]\n///\n/// let _some_string = cfg_match! {{\n///     unix =\u003e { \"With great power comes great electricity bills\" }\n///     _ =\u003e { \"Behind every successful diet is an unwatched pizza\" }\n/// }};\n/// ```\n#[cfg(not(bootstrap))]\n#[unstable(feature = \"cfg_match\", issue = \"115585\")]\n#[rustc_diagnostic_item = \"cfg_match\"]\npub macro cfg_match {\n    ({ $($tt:tt)* }) =\u003e {{\n        cfg_match! { $($tt)* }\n    }},\n    (_ =\u003e { $($output:tt)* }) =\u003e {\n        $($output)*\n    },\n    (\n        $cfg:meta =\u003e $output:tt\n        $($( $rest:tt )+)?\n    ) =\u003e {\n        #[cfg($cfg)]\n        cfg_match! { _ =\u003e $output }\n        $(\n            #[cfg(not($cfg))]\n            cfg_match! { $($rest)+ }\n        )?\n    },\n}"
                        },
                        "column": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::macros",
                            "Name": "column",
                            "File": "mod.rs",
                            "Line": 1312,
                            "StartOffset": 45983,
                            "EndOffset": 47407,
                            "Content": "/// Expands to the column number at which it was invoked.\n    ///\n    /// With [`line!`] and [`file!`], these macros provide debugging information for\n    /// developers about the location within the source.\n    ///\n    /// The expanded expression has type `u32` and is 1-based, so the first column\n    /// in each line evaluates to 1, the second to 2, etc. This is consistent\n    /// with error messages by common compilers or popular editors.\n    /// The returned column is *not necessarily* the line of the `column!` invocation itself,\n    /// but rather the first macro invocation leading up to the invocation\n    /// of the `column!` macro.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let current_col = column!();\n    /// println!(\"defined on column: {current_col}\");\n    /// ```\n    ///\n    /// `column!` counts Unicode code points, not bytes or graphemes. As a result, the first two\n    /// invocations return the same value, but the third does not.\n    ///\n    /// ```\n    /// let a = (\"foobar\", column!()).1;\n    /// let b = (\"人之初性本善\", column!()).1;\n    /// let c = (\"f̅o̅o̅b̅a̅r̅\", column!()).1; // Uses combining overline (U+0305)\n    ///\n    /// assert_eq!(a, b);\n    /// assert_ne!(b, c);\n    /// ```\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    #[rustc_builtin_macro]\n    #[macro_export]\n    macro_rules! column {\n        () =\u003e {\n            /* compiler built-in */\n        };\n    }"
                        },
                        "compile_error": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::macros",
                            "Name": "compile_error",
                            "File": "mod.rs",
                            "Line": 994,
                            "StartOffset": 33546,
                            "EndOffset": 35065,
                            "Content": "/// Causes compilation to fail with the given error message when encountered.\n    ///\n    /// This macro should be used when a crate uses a conditional compilation strategy to provide\n    /// better error messages for erroneous conditions. It's the compiler-level form of [`panic!`],\n    /// but emits an error during *compilation* rather than at *runtime*.\n    ///\n    /// # Examples\n    ///\n    /// Two such examples are macros and `#[cfg]` environments.\n    ///\n    /// Emit a better compiler error if a macro is passed invalid values. Without the final branch,\n    /// the compiler would still emit an error, but the error's message would not mention the two\n    /// valid values.\n    ///\n    /// ```compile_fail\n    /// macro_rules! give_me_foo_or_bar {\n    ///     (foo) =\u003e {};\n    ///     (bar) =\u003e {};\n    ///     ($x:ident) =\u003e {\n    ///         compile_error!(\"This macro only accepts `foo` or `bar`\");\n    ///     }\n    /// }\n    ///\n    /// give_me_foo_or_bar!(neither);\n    /// // ^ will fail at compile time with message \"This macro only accepts `foo` or `bar`\"\n    /// ```\n    ///\n    /// Emit a compiler error if one of a number of features isn't available.\n    ///\n    /// ```compile_fail\n    /// #[cfg(not(any(feature = \"foo\", feature = \"bar\")))]\n    /// compile_error!(\"Either feature \\\"foo\\\" or \\\"bar\\\" must be enabled for this crate.\");\n    /// ```\n    #[stable(feature = \"compile_error_macro\", since = \"1.20.0\")]\n    #[rustc_builtin_macro]\n    #[macro_export]\n    macro_rules! compile_error {\n        ($msg:expr $(,)?) =\u003e {{ /* compiler built-in */ }};\n    }"
                        },
                        "concat": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::macros",
                            "Name": "concat",
                            "File": "mod.rs",
                            "Line": 1263,
                            "StartOffset": 44282,
                            "EndOffset": 44934,
                            "Content": "/// Concatenates literals into a static string slice.\n    ///\n    /// This macro takes any number of comma-separated literals, yielding an\n    /// expression of type `\u0026'static str` which represents all of the literals\n    /// concatenated left-to-right.\n    ///\n    /// Integer and floating point literals are [stringified](core::stringify) in order to be\n    /// concatenated.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let s = concat!(\"test\", 10, 'b', true);\n    /// assert_eq!(s, \"test10btrue\");\n    /// ```\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    #[rustc_builtin_macro]\n    #[macro_export]\n    macro_rules! concat {\n        ($($e:expr),* $(,)?) =\u003e {{ /* compiler built-in */ }};\n    }"
                        },
                        "concat_bytes": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::macros",
                            "Name": "concat_bytes",
                            "File": "mod.rs",
                            "Line": 1236,
                            "StartOffset": 43372,
                            "EndOffset": 44211,
                            "Content": "/// Concatenates literals into a byte slice.\n    ///\n    /// This macro takes any number of comma-separated literals, and concatenates them all into\n    /// one, yielding an expression of type `\u0026[u8; _]`, which represents all of the literals\n    /// concatenated left-to-right. The literals passed can be any combination of:\n    ///\n    /// - byte literals (`b'r'`)\n    /// - byte strings (`b\"Rust\"`)\n    /// - arrays of bytes/numbers (`[b'A', 66, b'C']`)\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// #![feature(concat_bytes)]\n    ///\n    /// # fn main() {\n    /// let s: \u0026[u8; 6] = concat_bytes!(b'A', b\"BC\", [68, b'E', 70]);\n    /// assert_eq!(s, b\"ABCDEF\");\n    /// # }\n    /// ```\n    #[unstable(feature = \"concat_bytes\", issue = \"87555\")]\n    #[rustc_builtin_macro]\n    #[macro_export]\n    macro_rules! concat_bytes {\n        ($($e:literal),+ $(,)?) =\u003e {{ /* compiler built-in */ }};\n    }"
                        },
                        "concat_idents": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::macros",
                            "Name": "concat_idents",
                            "File": "mod.rs",
                            "Line": 1201,
                            "StartOffset": 42140,
                            "EndOffset": 43303,
                            "Content": "/// Concatenates identifiers into one identifier.\n    ///\n    /// This macro takes any number of comma-separated identifiers, and\n    /// concatenates them all into one, yielding an expression which is a new\n    /// identifier. Note that hygiene makes it such that this macro cannot\n    /// capture local variables. Also, as a general rule, macros are only\n    /// allowed in item, statement or expression position. That means while\n    /// you may use this macro for referring to existing variables, functions or\n    /// modules etc, you cannot define a new one with it.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// #![feature(concat_idents)]\n    ///\n    /// # fn main() {\n    /// fn foobar() -\u003e u32 { 23 }\n    ///\n    /// let f = concat_idents!(foo, bar);\n    /// println!(\"{}\", f());\n    ///\n    /// // fn concat_idents!(new, fun, name) { } // not usable in this way!\n    /// # }\n    /// ```\n    #[unstable(\n        feature = \"concat_idents\",\n        issue = \"29599\",\n        reason = \"`concat_idents` is not stable enough for use and is subject to change\"\n    )]\n    #[rustc_builtin_macro]\n    #[macro_export]\n    macro_rules! concat_idents {\n        ($($e:ident),+ $(,)?) =\u003e {{ /* compiler built-in */ }};\n    }"
                        },
                        "const_format_args": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::macros",
                            "Name": "const_format_args",
                            "File": "mod.rs",
                            "Line": 1098,
                            "StartOffset": 38026,
                            "EndOffset": 38551,
                            "Content": "/// Same as [`format_args`], but can be used in some const contexts.\n    ///\n    /// This macro is used by the panic macros for the `const_panic` feature.\n    ///\n    /// This macro will be removed once `format_args` is allowed in const contexts.\n    #[unstable(feature = \"const_format_args\", issue = \"none\")]\n    #[allow_internal_unstable(fmt_internals, const_fmt_arguments_new)]\n    #[rustc_builtin_macro]\n    #[macro_export]\n    macro_rules! const_format_args {\n        ($fmt:expr) =\u003e {{ /* compiler built-in */ }};\n        ($fmt:expr, $($args:tt)*) =\u003e {{ /* compiler built-in */ }};\n    }"
                        },
                        "contracts_ensures": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::macros",
                            "Name": "contracts_ensures",
                            "File": "mod.rs",
                            "Line": 1780,
                            "StartOffset": 62845,
                            "EndOffset": 63317,
                            "Content": "/// Attribute macro applied to a function to give it a post-condition.\n    ///\n    /// The attribute carries an argument token-tree which is\n    /// eventually parsed as a unary closure expression that is\n    /// invoked on a reference to the return value.\n    #[cfg(not(bootstrap))]\n    #[unstable(feature = \"contracts\", issue = \"128044\")]\n    #[allow_internal_unstable(contracts_internals)]\n    #[rustc_builtin_macro]\n    pub macro contracts_ensures($item:item) {\n        /* compiler built-in */\n    }"
                        },
                        "contracts_requires": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::macros",
                            "Name": "contracts_requires",
                            "File": "mod.rs",
                            "Line": 1793,
                            "StartOffset": 63354,
                            "EndOffset": 63816,
                            "Content": "/// Attribute macro applied to a function to give it a precondition.\n    ///\n    /// The attribute carries an argument token-tree which is\n    /// eventually parsed as an boolean expression with access to the\n    /// function's formal parameters\n    #[cfg(not(bootstrap))]\n    #[unstable(feature = \"contracts\", issue = \"128044\")]\n    #[allow_internal_unstable(contracts_internals)]\n    #[rustc_builtin_macro]\n    pub macro contracts_requires($item:item) {\n        /* compiler built-in */\n    }"
                        },
                        "debug_assert": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::macros",
                            "Name": "debug_assert",
                            "File": "mod.rs",
                            "Line": 350,
                            "StartOffset": -1,
                            "EndOffset": 14076,
                            "Content": "/// Asserts that a boolean expression is `true` at runtime.\n///\n/// This will invoke the [`panic!`] macro if the provided expression cannot be\n/// evaluated to `true` at runtime.\n///\n/// Like [`assert!`], this macro also has a second version, where a custom panic\n/// message can be provided.\n///\n/// # Uses\n///\n/// Unlike [`assert!`], `debug_assert!` statements are only enabled in non\n/// optimized builds by default. An optimized build will not execute\n/// `debug_assert!` statements unless `-C debug-assertions` is passed to the\n/// compiler. This makes `debug_assert!` useful for checks that are too\n/// expensive to be present in a release build but may be helpful during\n/// development. The result of expanding `debug_assert!` is always type checked.\n///\n/// An unchecked assertion allows a program in an inconsistent state to keep\n/// running, which might have unexpected consequences but does not introduce\n/// unsafety as long as this only happens in safe code. The performance cost\n/// of assertions, however, is not measurable in general. Replacing [`assert!`]\n/// with `debug_assert!` is thus only encouraged after thorough profiling, and\n/// more importantly, only in safe code!\n///\n/// # Examples\n///\n/// ```\n/// // the panic message for these assertions is the stringified value of the\n/// // expression given.\n/// debug_assert!(true);\n///\n/// fn some_expensive_computation() -\u003e bool { true } // a very simple function\n/// debug_assert!(some_expensive_computation());\n///\n/// // assert with a custom message\n/// let x = true;\n/// debug_assert!(x, \"x wasn't true!\");\n///\n/// let a = 3; let b = 27;\n/// debug_assert!(a + b == 30, \"a = {}, b = {}\", a, b);\n/// ```\n#[macro_export]\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\n#[rustc_diagnostic_item = \"debug_assert_macro\"]\n#[allow_internal_unstable(edition_panic)]\nmacro_rules! debug_assert {\n    ($($arg:tt)*) =\u003e {\n        if $crate::cfg!(debug_assertions) {\n            $crate::assert!($($arg)*);\n        }\n    };\n}"
                        },
                        "debug_assert_eq": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::macros",
                            "Name": "debug_assert_eq",
                            "File": "mod.rs",
                            "Line": 403,
                            "StartOffset": -1,
                            "EndOffset": 15103,
                            "Content": "/// Asserts that two expressions are equal to each other.\n///\n/// On panic, this macro will print the values of the expressions with their\n/// debug representations.\n///\n/// Unlike [`assert_eq!`], `debug_assert_eq!` statements are only enabled in non\n/// optimized builds by default. An optimized build will not execute\n/// `debug_assert_eq!` statements unless `-C debug-assertions` is passed to the\n/// compiler. This makes `debug_assert_eq!` useful for checks that are too\n/// expensive to be present in a release build but may be helpful during\n/// development. The result of expanding `debug_assert_eq!` is always type checked.\n///\n/// # Examples\n///\n/// ```\n/// let a = 3;\n/// let b = 1 + 2;\n/// debug_assert_eq!(a, b);\n/// ```\n#[macro_export]\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\n#[cfg_attr(not(test), rustc_diagnostic_item = \"debug_assert_eq_macro\")]\nmacro_rules! debug_assert_eq {\n    ($($arg:tt)*) =\u003e {\n        if $crate::cfg!(debug_assertions) {\n            $crate::assert_eq!($($arg)*);\n        }\n    };\n}"
                        },
                        "debug_assert_matches": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::macros",
                            "Name": "debug_assert_matches",
                            "File": "mod.rs",
                            "Line": 463,
                            "StartOffset": -1,
                            "EndOffset": 18355,
                            "Content": "/// Asserts that an expression matches the provided pattern.\n///\n/// This macro is generally preferable to `debug_assert!(matches!(value, pattern))`, because it can\n/// print the debug representation of the actual value shape that did not meet expectations. In\n/// contrast, using [`debug_assert!`] will only print that expectations were not met, but not why.\n///\n/// The pattern syntax is exactly the same as found in a match arm and the `matches!` macro. The\n/// optional if guard can be used to add additional checks that must be true for the matched value,\n/// otherwise this macro will panic.\n///\n/// On panic, this macro will print the value of the expression with its debug representation.\n///\n/// Like [`assert!`], this macro has a second form, where a custom panic message can be provided.\n///\n/// Unlike [`assert_matches!`], `debug_assert_matches!` statements are only enabled in non optimized\n/// builds by default. An optimized build will not execute `debug_assert_matches!` statements unless\n/// `-C debug-assertions` is passed to the compiler. This makes `debug_assert_matches!` useful for\n/// checks that are too expensive to be present in a release build but may be helpful during\n/// development. The result of expanding `debug_assert_matches!` is always type checked.\n///\n/// # Examples\n///\n/// ```\n/// #![feature(assert_matches)]\n///\n/// use std::assert_matches::debug_assert_matches;\n///\n/// let a = Some(345);\n/// let b = Some(56);\n/// debug_assert_matches!(a, Some(_));\n/// debug_assert_matches!(b, Some(_));\n///\n/// debug_assert_matches!(a, Some(345));\n/// debug_assert_matches!(a, Some(345) | None);\n///\n/// // debug_assert_matches!(a, None); // panics\n/// // debug_assert_matches!(b, Some(345)); // panics\n/// // debug_assert_matches!(b, Some(345) | None); // panics\n///\n/// debug_assert_matches!(a, Some(x) if x \u003e 100);\n/// // debug_assert_matches!(a, Some(x) if x \u003c 100); // panics\n/// ```\n#[unstable(feature = \"assert_matches\", issue = \"82775\")]\n#[allow_internal_unstable(assert_matches)]\n#[rustc_macro_transparency = \"semitransparent\"]\npub macro debug_assert_matches($($arg:tt)*) {\n    if $crate::cfg!(debug_assertions) {\n        $crate::assert_matches::assert_matches!($($arg)*);\n    }\n}"
                        },
                        "debug_assert_ne": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::macros",
                            "Name": "debug_assert_ne",
                            "File": "mod.rs",
                            "Line": 433,
                            "StartOffset": -1,
                            "EndOffset": 16135,
                            "Content": "/// Asserts that two expressions are not equal to each other.\n///\n/// On panic, this macro will print the values of the expressions with their\n/// debug representations.\n///\n/// Unlike [`assert_ne!`], `debug_assert_ne!` statements are only enabled in non\n/// optimized builds by default. An optimized build will not execute\n/// `debug_assert_ne!` statements unless `-C debug-assertions` is passed to the\n/// compiler. This makes `debug_assert_ne!` useful for checks that are too\n/// expensive to be present in a release build but may be helpful during\n/// development. The result of expanding `debug_assert_ne!` is always type checked.\n///\n/// # Examples\n///\n/// ```\n/// let a = 3;\n/// let b = 2;\n/// debug_assert_ne!(a, b);\n/// ```\n#[macro_export]\n#[stable(feature = \"assert_ne\", since = \"1.13.0\")]\n#[cfg_attr(not(test), rustc_diagnostic_item = \"debug_assert_ne_macro\")]\nmacro_rules! debug_assert_ne {\n    ($($arg:tt)*) =\u003e {\n        if $crate::cfg!(debug_assertions) {\n            $crate::assert_ne!($($arg)*);\n        }\n    };\n}"
                        },
                        "deref": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::macros",
                            "Name": "deref",
                            "File": "mod.rs",
                            "Line": 1850,
                            "StartOffset": 65337,
                            "EndOffset": 65608,
                            "Content": "/// Unstable placeholder for deref patterns.\n    #[allow_internal_unstable(builtin_syntax)]\n    #[unstable(\n        feature = \"deref_patterns\",\n        issue = \"87121\",\n        reason = \"placeholder syntax for deref patterns\"\n    )]\n    pub macro deref($pat:pat) {\n        builtin # deref($pat)\n    }"
                        },
                        "derive": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::macros",
                            "Name": "derive",
                            "File": "mod.rs",
                            "Line": 1710,
                            "StartOffset": 60479,
                            "EndOffset": 60772,
                            "Content": "/// Attribute macro used to apply derive macros.\n    ///\n    /// See [the reference] for more info.\n    ///\n    /// [the reference]: ../../../reference/attributes/derive.html\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    #[rustc_builtin_macro]\n    pub macro derive($item:item) {\n        /* compiler built-in */\n    }"
                        },
                        "derive_const": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::macros",
                            "Name": "derive_const",
                            "File": "mod.rs",
                            "Line": 1721,
                            "StartOffset": 60809,
                            "EndOffset": 61167,
                            "Content": "/// Attribute macro used to apply derive macros for implementing traits\n    /// in a const context.\n    ///\n    /// See [the reference] for more info.\n    ///\n    /// [the reference]: ../../../reference/attributes/derive.html\n    #[unstable(feature = \"derive_const\", issue = \"none\")]\n    #[rustc_builtin_macro]\n    pub macro derive_const($item:item) {\n        /* compiler built-in */\n    }"
                        },
                        "env": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::macros",
                            "Name": "env",
                            "File": "mod.rs",
                            "Line": 1127,
                            "StartOffset": 39142,
                            "EndOffset": 40630,
                            "Content": "/// Inspects an environment variable at compile time.\n    ///\n    /// This macro will expand to the value of the named environment variable at\n    /// compile time, yielding an expression of type `\u0026'static str`. Use\n    /// [`std::env::var`] instead if you want to read the value at runtime.\n    ///\n    /// [`std::env::var`]: ../std/env/fn.var.html\n    ///\n    /// If the environment variable is not defined, then a compilation error\n    /// will be emitted. To not emit a compile error, use the [`option_env!`]\n    /// macro instead. A compilation error will also be emitted if the\n    /// environment variable is not a valid Unicode string.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let path: \u0026'static str = env!(\"PATH\");\n    /// println!(\"the $PATH variable at the time of compiling was: {path}\");\n    /// ```\n    ///\n    /// You can customize the error message by passing a string as the second\n    /// parameter:\n    ///\n    /// ```compile_fail\n    /// let doc: \u0026'static str = env!(\"documentation\", \"what's that?!\");\n    /// ```\n    ///\n    /// If the `documentation` environment variable is not defined, you'll get\n    /// the following error:\n    ///\n    /// ```text\n    /// error: what's that?!\n    /// ```\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    #[rustc_builtin_macro]\n    #[macro_export]\n    #[rustc_diagnostic_item = \"env_macro\"] // useful for external lints\n    macro_rules! env {\n        ($name:expr $(,)?) =\u003e {{ /* compiler built-in */ }};\n        ($name:expr, $error_msg:expr $(,)?) =\u003e {{ /* compiler built-in */ }};\n    }"
                        },
                        "file": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::macros",
                            "Name": "file",
                            "File": "mod.rs",
                            "Line": 1351,
                            "StartOffset": 47423,
                            "EndOffset": 48201,
                            "Content": "/// Expands to the file name in which it was invoked.\n    ///\n    /// With [`line!`] and [`column!`], these macros provide debugging information for\n    /// developers about the location within the source.\n    ///\n    /// The expanded expression has type `\u0026'static str`, and the returned file\n    /// is not the invocation of the `file!` macro itself, but rather the\n    /// first macro invocation leading up to the invocation of the `file!`\n    /// macro.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let this_file = file!();\n    /// println!(\"defined in file: {this_file}\");\n    /// ```\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    #[rustc_builtin_macro]\n    #[macro_export]\n    macro_rules! file {\n        () =\u003e {\n            /* compiler built-in */\n        };\n    }"
                        },
                        "format_args": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::macros",
                            "Name": "format_args",
                            "File": "mod.rs",
                            "Line": 1034,
                            "StartOffset": 35130,
                            "EndOffset": 37953,
                            "Content": "/// Constructs parameters for the other string-formatting macros.\n    ///\n    /// This macro functions by taking a formatting string literal containing\n    /// `{}` for each additional argument passed. `format_args!` prepares the\n    /// additional parameters to ensure the output can be interpreted as a string\n    /// and canonicalizes the arguments into a single type. Any value that implements\n    /// the [`Display`] trait can be passed to `format_args!`, as can any\n    /// [`Debug`] implementation be passed to a `{:?}` within the formatting string.\n    ///\n    /// This macro produces a value of type [`fmt::Arguments`]. This value can be\n    /// passed to the macros within [`std::fmt`] for performing useful redirection.\n    /// All other formatting macros ([`format!`], [`write!`], [`println!`], etc) are\n    /// proxied through this one. `format_args!`, unlike its derived macros, avoids\n    /// heap allocations.\n    ///\n    /// You can use the [`fmt::Arguments`] value that `format_args!` returns\n    /// in `Debug` and `Display` contexts as seen below. The example also shows\n    /// that `Debug` and `Display` format to the same thing: the interpolated\n    /// format string in `format_args!`.\n    ///\n    /// ```rust\n    /// let debug = format!(\"{:?}\", format_args!(\"{} foo {:?}\", 1, 2));\n    /// let display = format!(\"{}\", format_args!(\"{} foo {:?}\", 1, 2));\n    /// assert_eq!(\"1 foo 2\", display);\n    /// assert_eq!(display, debug);\n    /// ```\n    ///\n    /// See [the formatting documentation in `std::fmt`](../std/fmt/index.html)\n    /// for details of the macro argument syntax, and further information.\n    ///\n    /// [`Display`]: crate::fmt::Display\n    /// [`Debug`]: crate::fmt::Debug\n    /// [`fmt::Arguments`]: crate::fmt::Arguments\n    /// [`std::fmt`]: ../std/fmt/index.html\n    /// [`format!`]: ../std/macro.format.html\n    /// [`println!`]: ../std/macro.println.html\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::fmt;\n    ///\n    /// let s = fmt::format(format_args!(\"hello {}\", \"world\"));\n    /// assert_eq!(s, format!(\"hello {}\", \"world\"));\n    /// ```\n    ///\n    /// # Lifetime limitation\n    ///\n    /// Except when no formatting arguments are used,\n    /// the produced `fmt::Arguments` value borrows temporary values,\n    /// which means it can only be used within the same expression\n    /// and cannot be stored for later use.\n    /// This is a known limitation, see [#92698](https://github.com/rust-lang/rust/issues/92698).\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    #[cfg_attr(not(test), rustc_diagnostic_item = \"format_args_macro\")]\n    #[allow_internal_unsafe]\n    #[allow_internal_unstable(fmt_internals)]\n    #[rustc_builtin_macro]\n    #[macro_export]\n    macro_rules! format_args {\n        ($fmt:expr) =\u003e {{ /* compiler built-in */ }};\n        ($fmt:expr, $($args:tt)*) =\u003e {{ /* compiler built-in */ }};\n    }"
                        },
                        "format_args_nl": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::macros",
                            "Name": "format_args_nl",
                            "File": "mod.rs",
                            "Line": 1112,
                            "StartOffset": 38624,
                            "EndOffset": 39069,
                            "Content": "/// Same as [`format_args`], but adds a newline in the end.\n    #[unstable(\n        feature = \"format_args_nl\",\n        issue = \"none\",\n        reason = \"`format_args_nl` is only for internal \\\n                  language use and is subject to change\"\n    )]\n    #[allow_internal_unstable(fmt_internals)]\n    #[rustc_builtin_macro]\n    #[macro_export]\n    macro_rules! format_args_nl {\n        ($fmt:expr) =\u003e {{ /* compiler built-in */ }};\n        ($fmt:expr, $($args:tt)*) =\u003e {{ /* compiler built-in */ }};\n    }"
                        },
                        "global_allocator": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::macros",
                            "Name": "global_allocator",
                            "File": "mod.rs",
                            "Line": 1770,
                            "StartOffset": 62449,
                            "EndOffset": 62808,
                            "Content": "/// Attribute macro applied to a static to register it as a global allocator.\n    ///\n    /// See also [`std::alloc::GlobalAlloc`](../../../std/alloc/trait.GlobalAlloc.html).\n    #[stable(feature = \"global_allocator\", since = \"1.28.0\")]\n    #[allow_internal_unstable(rustc_attrs)]\n    #[rustc_builtin_macro]\n    pub macro global_allocator($item:item) {\n        /* compiler built-in */\n    }"
                        },
                        "include": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::macros",
                            "Name": "include",
                            "File": "mod.rs",
                            "Line": 1539,
                            "StartOffset": 53549,
                            "EndOffset": 56656,
                            "Content": "/// Parses a file as an expression or an item according to the context.\n    ///\n    /// **Warning**: For multi-file Rust projects, the `include!` macro is probably not what you\n    /// are looking for. Usually, multi-file Rust projects use\n    /// [modules](https://doc.rust-lang.org/reference/items/modules.html). Multi-file projects and\n    /// modules are explained in the Rust-by-Example book\n    /// [here](https://doc.rust-lang.org/rust-by-example/mod/split.html) and the module system is\n    /// explained in the Rust Book\n    /// [here](https://doc.rust-lang.org/book/ch07-02-defining-modules-to-control-scope-and-privacy.html).\n    ///\n    /// The included file is placed in the surrounding code\n    /// [unhygienically](https://doc.rust-lang.org/reference/macros-by-example.html#hygiene). If\n    /// the included file is parsed as an expression and variables or functions share names across\n    /// both files, it could result in variables or functions being different from what the\n    /// included file expected.\n    ///\n    /// The included file is located relative to the current file (similarly to how modules are\n    /// found). The provided path is interpreted in a platform-specific way at compile time. So,\n    /// for instance, an invocation with a Windows path containing backslashes `\\` would not\n    /// compile correctly on Unix.\n    ///\n    /// # Uses\n    ///\n    /// The `include!` macro is primarily used for two purposes. It is used to include\n    /// documentation that is written in a separate file and it is used to include [build artifacts\n    /// usually as a result from the `build.rs`\n    /// script](https://doc.rust-lang.org/cargo/reference/build-scripts.html#outputs-of-the-build-script).\n    ///\n    /// When using the `include` macro to include stretches of documentation, remember that the\n    /// included file still needs to be a valid Rust syntax. It is also possible to\n    /// use the [`include_str`] macro as `#![doc = include_str!(\"...\")]` (at the module level) or\n    /// `#[doc = include_str!(\"...\")]` (at the item level) to include documentation from a plain\n    /// text or markdown file.\n    ///\n    /// # Examples\n    ///\n    /// Assume there are two files in the same directory with the following contents:\n    ///\n    /// File 'monkeys.in':\n    ///\n    /// ```ignore (only-for-syntax-highlight)\n    /// ['🙈', '🙊', '🙉']\n    ///     .iter()\n    ///     .cycle()\n    ///     .take(6)\n    ///     .collect::\u003cString\u003e()\n    /// ```\n    ///\n    /// File 'main.rs':\n    ///\n    /// ```ignore (cannot-doctest-external-file-dependency)\n    /// fn main() {\n    ///     let my_string = include!(\"monkeys.in\");\n    ///     assert_eq!(\"🙈🙊🙉🙈🙊🙉\", my_string);\n    ///     println!(\"{my_string}\");\n    /// }\n    /// ```\n    ///\n    /// Compiling 'main.rs' and running the resulting binary will print\n    /// \"🙈🙊🙉🙈🙊🙉\".\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    #[rustc_builtin_macro]\n    #[macro_export]\n    #[rustc_diagnostic_item = \"include_macro\"] // useful for external lints\n    macro_rules! include {\n        ($file:expr $(,)?) =\u003e {{ /* compiler built-in */ }};\n    }"
                        },
                        "include_bytes": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::macros",
                            "Name": "include_bytes",
                            "File": "mod.rs",
                            "Line": 1440,
                            "StartOffset": 50320,
                            "EndOffset": 51633,
                            "Content": "/// Includes a file as a reference to a byte array.\n    ///\n    /// The file is located relative to the current file (similarly to how\n    /// modules are found). The provided path is interpreted in a platform-specific\n    /// way at compile time. So, for instance, an invocation with a Windows path\n    /// containing backslashes `\\` would not compile correctly on Unix.\n    ///\n    /// This macro will yield an expression of type `\u0026'static [u8; N]` which is\n    /// the contents of the file.\n    ///\n    /// # Examples\n    ///\n    /// Assume there are two files in the same directory with the following\n    /// contents:\n    ///\n    /// File 'spanish.in':\n    ///\n    /// ```text\n    /// adiós\n    /// ```\n    ///\n    /// File 'main.rs':\n    ///\n    /// ```ignore (cannot-doctest-external-file-dependency)\n    /// fn main() {\n    ///     let bytes = include_bytes!(\"spanish.in\");\n    ///     assert_eq!(bytes, b\"adi\\xc3\\xb3s\\n\");\n    ///     print!(\"{}\", String::from_utf8_lossy(bytes));\n    /// }\n    /// ```\n    ///\n    /// Compiling 'main.rs' and running the resulting binary will print \"adiós\".\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    #[rustc_builtin_macro]\n    #[macro_export]\n    #[cfg_attr(not(test), rustc_diagnostic_item = \"include_bytes_macro\")]\n    macro_rules! include_bytes {\n        ($file:expr $(,)?) =\u003e {{ /* compiler built-in */ }};\n    }"
                        },
                        "include_str": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::macros",
                            "Name": "include_str",
                            "File": "mod.rs",
                            "Line": 1400,
                            "StartOffset": 48987,
                            "EndOffset": 50254,
                            "Content": "/// Includes a UTF-8 encoded file as a string.\n    ///\n    /// The file is located relative to the current file (similarly to how\n    /// modules are found). The provided path is interpreted in a platform-specific\n    /// way at compile time. So, for instance, an invocation with a Windows path\n    /// containing backslashes `\\` would not compile correctly on Unix.\n    ///\n    /// This macro will yield an expression of type `\u0026'static str` which is the\n    /// contents of the file.\n    ///\n    /// # Examples\n    ///\n    /// Assume there are two files in the same directory with the following\n    /// contents:\n    ///\n    /// File 'spanish.in':\n    ///\n    /// ```text\n    /// adiós\n    /// ```\n    ///\n    /// File 'main.rs':\n    ///\n    /// ```ignore (cannot-doctest-external-file-dependency)\n    /// fn main() {\n    ///     let my_str = include_str!(\"spanish.in\");\n    ///     assert_eq!(my_str, \"adiós\\n\");\n    ///     print!(\"{my_str}\");\n    /// }\n    /// ```\n    ///\n    /// Compiling 'main.rs' and running the resulting binary will print \"adiós\".\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    #[rustc_builtin_macro]\n    #[macro_export]\n    #[cfg_attr(not(test), rustc_diagnostic_item = \"include_str_macro\")]\n    macro_rules! include_str {\n        ($file:expr $(,)?) =\u003e {{ /* compiler built-in */ }};\n    }"
                        },
                        "line": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::macros",
                            "Name": "line",
                            "File": "mod.rs",
                            "Line": 1285,
                            "StartOffset": 45002,
                            "EndOffset": 45967,
                            "Content": "/// Expands to the line number on which it was invoked.\n    ///\n    /// With [`column!`] and [`file!`], these macros provide debugging information for\n    /// developers about the location within the source.\n    ///\n    /// The expanded expression has type `u32` and is 1-based, so the first line\n    /// in each file evaluates to 1, the second to 2, etc. This is consistent\n    /// with error messages by common compilers or popular editors.\n    /// The returned line is *not necessarily* the line of the `line!` invocation itself,\n    /// but rather the first macro invocation leading up to the invocation\n    /// of the `line!` macro.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let current_line = line!();\n    /// println!(\"defined on line: {current_line}\");\n    /// ```\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    #[rustc_builtin_macro]\n    #[macro_export]\n    macro_rules! line {\n        () =\u003e {\n            /* compiler built-in */\n        };\n    }"
                        },
                        "log_syntax": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::macros",
                            "Name": "log_syntax",
                            "File": "mod.rs",
                            "Line": 1683,
                            "StartOffset": 59661,
                            "EndOffset": 60025,
                            "Content": "/// Prints passed tokens into the standard output.\n    #[unstable(\n        feature = \"log_syntax\",\n        issue = \"29598\",\n        reason = \"`log_syntax!` is not stable enough for use and is subject to change\"\n    )]\n    #[rustc_builtin_macro]\n    #[macro_export]\n    macro_rules! log_syntax {\n        ($($arg:tt)*) =\u003e {\n            /* compiler built-in */\n        };\n    }"
                        },
                        "matches": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::macros",
                            "Name": "matches",
                            "File": "mod.rs",
                            "Line": 514,
                            "StartOffset": -1,
                            "EndOffset": 19362,
                            "Content": "/// Returns whether the given expression matches the provided pattern.\n///\n/// The pattern syntax is exactly the same as found in a match arm. The optional if guard can be\n/// used to add additional checks that must be true for the matched value, otherwise this macro will\n/// return `false`.\n///\n/// When testing that a value matches a pattern, it's generally preferable to use\n/// [`assert_matches!`] as it will print the debug representation of the value if the assertion\n/// fails.\n///\n/// # Examples\n///\n/// ```\n/// let foo = 'f';\n/// assert!(matches!(foo, 'A'..='Z' | 'a'..='z'));\n///\n/// let bar = Some(4);\n/// assert!(matches!(bar, Some(x) if x \u003e 2));\n/// ```\n#[macro_export]\n#[stable(feature = \"matches_macro\", since = \"1.42.0\")]\n#[cfg_attr(not(test), rustc_diagnostic_item = \"matches_macro\")]\nmacro_rules! matches {\n    ($expression:expr, $pattern:pat $(if $guard:expr)? $(,)?) =\u003e {\n        match $expression {\n            $pattern $(if $guard)? =\u003e true,\n            _ =\u003e false\n        }\n    };\n}"
                        },
                        "module_path": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::macros",
                            "Name": "module_path",
                            "File": "mod.rs",
                            "Line": 1480,
                            "StartOffset": 51699,
                            "EndOffset": 52396,
                            "Content": "/// Expands to a string that represents the current module path.\n    ///\n    /// The current module path can be thought of as the hierarchy of modules\n    /// leading back up to the crate root. The first component of the path\n    /// returned is the name of the crate currently being compiled.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// mod test {\n    ///     pub fn foo() {\n    ///         assert!(module_path!().ends_with(\"test\"));\n    ///     }\n    /// }\n    ///\n    /// test::foo();\n    /// ```\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    #[rustc_builtin_macro]\n    #[macro_export]\n    macro_rules! module_path {\n        () =\u003e {\n            /* compiler built-in */\n        };\n    }"
                        },
                        "option_env": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::macros",
                            "Name": "option_env",
                            "File": "mod.rs",
                            "Line": 1169,
                            "StartOffset": 40713,
                            "EndOffset": 42074,
                            "Content": "/// Optionally inspects an environment variable at compile time.\n    ///\n    /// If the named environment variable is present at compile time, this will\n    /// expand into an expression of type `Option\u003c\u0026'static str\u003e` whose value is\n    /// `Some` of the value of the environment variable (a compilation error\n    /// will be emitted if the environment variable is not a valid Unicode\n    /// string). If the environment variable is not present, then this will\n    /// expand to `None`. See [`Option\u003cT\u003e`][Option] for more information on this\n    /// type.  Use [`std::env::var`] instead if you want to read the value at\n    /// runtime.\n    ///\n    /// [`std::env::var`]: ../std/env/fn.var.html\n    ///\n    /// A compile time error is only emitted when using this macro if the\n    /// environment variable exists and is not a valid Unicode string. To also\n    /// emit a compile error if the environment variable is not present, use the\n    /// [`env!`] macro instead.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let key: Option\u003c\u0026'static str\u003e = option_env!(\"SECRET_KEY\");\n    /// println!(\"the secret key might be: {key:?}\");\n    /// ```\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    #[rustc_builtin_macro]\n    #[macro_export]\n    #[rustc_diagnostic_item = \"option_env_macro\"] // useful for external lints\n    macro_rules! option_env {\n        ($name:expr $(,)?) =\u003e {{ /* compiler built-in */ }};\n    }"
                        },
                        "panic": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::macros",
                            "Name": "panic",
                            "File": "mod.rs",
                            "Line": 1,
                            "StartOffset": -1,
                            "EndOffset": 425,
                            "Content": "#[doc = include_str!(\"panic.md\")]\n#[macro_export]\n#[rustc_builtin_macro(core_panic)]\n#[allow_internal_unstable(edition_panic)]\n#[stable(feature = \"core\", since = \"1.6.0\")]\n#[rustc_diagnostic_item = \"core_panic_macro\"]\nmacro_rules! panic {\n    // Expands to either `$crate::panic::panic_2015` or `$crate::panic::panic_2021`\n    // depending on the edition of the caller.\n    ($($arg:tt)*) =\u003e {\n        /* compiler built-in */\n    };\n}"
                        },
                        "r#try": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::macros",
                            "Name": "r#try",
                            "File": "mod.rs",
                            "Line": 545,
                            "StartOffset": -1,
                            "EndOffset": 22019,
                            "Content": "/// Unwraps a result or propagates its error.\n///\n/// The [`?` operator][propagating-errors] was added to replace `try!`\n/// and should be used instead. Furthermore, `try` is a reserved word\n/// in Rust 2018, so if you must use it, you will need to use the\n/// [raw-identifier syntax][ris]: `r#try`.\n///\n/// [propagating-errors]: https://doc.rust-lang.org/book/ch09-02-recoverable-errors-with-result.html#a-shortcut-for-propagating-errors-the--operator\n/// [ris]: https://doc.rust-lang.org/nightly/rust-by-example/compatibility/raw_identifiers.html\n///\n/// `try!` matches the given [`Result`]. In case of the `Ok` variant, the\n/// expression has the value of the wrapped value.\n///\n/// In case of the `Err` variant, it retrieves the inner error. `try!` then\n/// performs conversion using `From`. This provides automatic conversion\n/// between specialized errors and more general ones. The resulting\n/// error is then immediately returned.\n///\n/// Because of the early return, `try!` can only be used in functions that\n/// return [`Result`].\n///\n/// # Examples\n///\n/// ```\n/// use std::io;\n/// use std::fs::File;\n/// use std::io::prelude::*;\n///\n/// enum MyError {\n///     FileWriteError\n/// }\n///\n/// impl From\u003cio::Error\u003e for MyError {\n///     fn from(e: io::Error) -\u003e MyError {\n///         MyError::FileWriteError\n///     }\n/// }\n///\n/// // The preferred method of quick returning Errors\n/// fn write_to_file_question() -\u003e Result\u003c(), MyError\u003e {\n///     let mut file = File::create(\"my_best_friends.txt\")?;\n///     file.write_all(b\"This is a list of my best friends.\")?;\n///     Ok(())\n/// }\n///\n/// // The previous method of quick returning Errors\n/// fn write_to_file_using_try() -\u003e Result\u003c(), MyError\u003e {\n///     let mut file = r#try!(File::create(\"my_best_friends.txt\"));\n///     r#try!(file.write_all(b\"This is a list of my best friends.\"));\n///     Ok(())\n/// }\n///\n/// // This is equivalent to:\n/// fn write_to_file_using_match() -\u003e Result\u003c(), MyError\u003e {\n///     let mut file = r#try!(File::create(\"my_best_friends.txt\"));\n///     match file.write_all(b\"This is a list of my best friends.\") {\n///         Ok(v) =\u003e v,\n///         Err(e) =\u003e return Err(From::from(e)),\n///     }\n///     Ok(())\n/// }\n/// ```\n#[macro_export]\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\n#[deprecated(since = \"1.39.0\", note = \"use the `?` operator instead\")]\n#[doc(alias = \"?\")]\nmacro_rules! r#try {\n    ($expr:expr $(,)?) =\u003e {\n        match $expr {\n            $crate::result::Result::Ok(val) =\u003e val,\n            $crate::result::Result::Err(err) =\u003e {\n                return $crate::result::Result::Err($crate::convert::From::from(err));\n            }\n        }\n    };\n}"
                        },
                        "stringify": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::macros",
                            "Name": "stringify",
                            "File": "mod.rs",
                            "Line": 1376,
                            "StartOffset": 48217,
                            "EndOffset": 48971,
                            "Content": "/// Stringifies its arguments.\n    ///\n    /// This macro will yield an expression of type `\u0026'static str` which is the\n    /// stringification of all the tokens passed to the macro. No restrictions\n    /// are placed on the syntax of the macro invocation itself.\n    ///\n    /// Note that the expanded results of the input tokens may change in the\n    /// future. You should be careful if you rely on the output.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let one_plus_one = stringify!(1 + 1);\n    /// assert_eq!(one_plus_one, \"1 + 1\");\n    /// ```\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    #[rustc_builtin_macro]\n    #[macro_export]\n    macro_rules! stringify {\n        ($($t:tt)*) =\u003e {\n            /* compiler built-in */\n        };\n    }"
                        },
                        "test": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::macros",
                            "Name": "test",
                            "File": "mod.rs",
                            "Line": 1733,
                            "StartOffset": 61204,
                            "EndOffset": 61607,
                            "Content": "/// Attribute macro applied to a function to turn it into a unit test.\n    ///\n    /// See [the reference] for more info.\n    ///\n    /// [the reference]: ../../../reference/attributes/testing.html#the-test-attribute\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    #[allow_internal_unstable(test, rustc_attrs, coverage_attribute)]\n    #[rustc_builtin_macro]\n    pub macro test($item:item) {\n        /* compiler built-in */\n    }"
                        },
                        "test_case": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::macros",
                            "Name": "test_case",
                            "File": "mod.rs",
                            "Line": 1758,
                            "StartOffset": 62064,
                            "EndOffset": 62412,
                            "Content": "/// An implementation detail of the `#[test]` and `#[bench]` macros.\n    #[unstable(\n        feature = \"custom_test_frameworks\",\n        issue = \"50297\",\n        reason = \"custom test frameworks are an unstable feature\"\n    )]\n    #[allow_internal_unstable(test, rustc_attrs)]\n    #[rustc_builtin_macro]\n    pub macro test_case($item:item) {\n        /* compiler built-in */\n    }"
                        },
                        "todo": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::macros",
                            "Name": "todo",
                            "File": "mod.rs",
                            "Line": 907,
                            "StartOffset": -1,
                            "EndOffset": 33236,
                            "Content": "/// Indicates unfinished code.\n///\n/// This can be useful if you are prototyping and just\n/// want a placeholder to let your code pass type analysis.\n///\n/// The difference between [`unimplemented!`] and `todo!` is that while `todo!` conveys\n/// an intent of implementing the functionality later and the message is \"not yet\n/// implemented\", `unimplemented!` makes no such claims. Its message is \"not implemented\".\n///\n/// Also, some IDEs will mark `todo!`s.\n///\n/// # Panics\n///\n/// This will always [`panic!`] because `todo!` is just a shorthand for `panic!` with a\n/// fixed, specific message.\n///\n/// Like `panic!`, this macro has a second form for displaying custom values.\n///\n/// # Examples\n///\n/// Here's an example of some in-progress code. We have a trait `Foo`:\n///\n/// ```\n/// trait Foo {\n///     fn bar(\u0026self) -\u003e u8;\n///     fn baz(\u0026self);\n///     fn qux(\u0026self) -\u003e Result\u003cu64, ()\u003e;\n/// }\n/// ```\n///\n/// We want to implement `Foo` on one of our types, but we also want to work on\n/// just `bar()` first. In order for our code to compile, we need to implement\n/// `baz()` and `qux()`, so we can use `todo!`:\n///\n/// ```\n/// # trait Foo {\n/// #     fn bar(\u0026self) -\u003e u8;\n/// #     fn baz(\u0026self);\n/// #     fn qux(\u0026self) -\u003e Result\u003cu64, ()\u003e;\n/// # }\n/// struct MyStruct;\n///\n/// impl Foo for MyStruct {\n///     fn bar(\u0026self) -\u003e u8 {\n///         1 + 1\n///     }\n///\n///     fn baz(\u0026self) {\n///         // Let's not worry about implementing baz() for now\n///         todo!();\n///     }\n///\n///     fn qux(\u0026self) -\u003e Result\u003cu64, ()\u003e {\n///         // We can add a message to todo! to display our omission.\n///         // This will display:\n///         // \"thread 'main' panicked at 'not yet implemented: MyStruct is not yet quxable'\".\n///         todo!(\"MyStruct is not yet quxable\");\n///     }\n/// }\n///\n/// fn main() {\n///     let s = MyStruct;\n///     s.bar();\n///\n///     // We aren't even using baz() or qux(), so this is fine.\n/// }\n/// ```\n#[macro_export]\n#[stable(feature = \"todo_macro\", since = \"1.40.0\")]\n#[cfg_attr(not(test), rustc_diagnostic_item = \"todo_macro\")]\n#[allow_internal_unstable(panic_internals)]\nmacro_rules! todo {\n    () =\u003e {\n        $crate::panicking::panic(\"not yet implemented\")\n    };\n    ($($arg:tt)+) =\u003e {\n        $crate::panic!(\"not yet implemented: {}\", $crate::format_args!($($arg)+))\n    };\n}"
                        },
                        "trace_macros": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::macros",
                            "Name": "trace_macros",
                            "File": "mod.rs",
                            "Line": 1697,
                            "StartOffset": 60041,
                            "EndOffset": 60424,
                            "Content": "/// Enables or disables tracing functionality used for debugging other macros.\n    #[unstable(\n        feature = \"trace_macros\",\n        issue = \"29598\",\n        reason = \"`trace_macros` is not stable enough for use and is subject to change\"\n    )]\n    #[rustc_builtin_macro]\n    #[macro_export]\n    macro_rules! trace_macros {\n        (true) =\u003e {{ /* compiler built-in */ }};\n        (false) =\u003e {{ /* compiler built-in */ }};\n    }"
                        },
                        "type_ascribe": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::macros",
                            "Name": "type_ascribe",
                            "File": "mod.rs",
                            "Line": 1838,
                            "StartOffset": 64977,
                            "EndOffset": 65289,
                            "Content": "/// Unstable placeholder for type ascription.\n    #[allow_internal_unstable(builtin_syntax)]\n    #[unstable(\n        feature = \"type_ascription\",\n        issue = \"23416\",\n        reason = \"placeholder syntax for type ascription\"\n    )]\n    #[rustfmt::skip]\n    pub macro type_ascribe($expr:expr, $ty:ty) {\n        builtin # type_ascribe($expr, $ty)\n    }"
                        },
                        "unimplemented": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::macros",
                            "Name": "unimplemented",
                            "File": "mod.rs",
                            "Line": 820,
                            "StartOffset": -1,
                            "EndOffset": 30903,
                            "Content": "/// Indicates unimplemented code by panicking with a message of \"not implemented\".\n///\n/// This allows your code to type-check, which is useful if you are prototyping or\n/// implementing a trait that requires multiple methods which you don't plan to use all of.\n///\n/// The difference between `unimplemented!` and [`todo!`] is that while `todo!`\n/// conveys an intent of implementing the functionality later and the message is \"not yet\n/// implemented\", `unimplemented!` makes no such claims. Its message is \"not implemented\".\n///\n/// Also, some IDEs will mark `todo!`s.\n///\n/// # Panics\n///\n/// This will always [`panic!`] because `unimplemented!` is just a shorthand for `panic!` with a\n/// fixed, specific message.\n///\n/// Like `panic!`, this macro has a second form for displaying custom values.\n///\n/// [`todo!`]: crate::todo\n///\n/// # Examples\n///\n/// Say we have a trait `Foo`:\n///\n/// ```\n/// trait Foo {\n///     fn bar(\u0026self) -\u003e u8;\n///     fn baz(\u0026self);\n///     fn qux(\u0026self) -\u003e Result\u003cu64, ()\u003e;\n/// }\n/// ```\n///\n/// We want to implement `Foo` for 'MyStruct', but for some reason it only makes sense\n/// to implement the `bar()` function. `baz()` and `qux()` will still need to be defined\n/// in our implementation of `Foo`, but we can use `unimplemented!` in their definitions\n/// to allow our code to compile.\n///\n/// We still want to have our program stop running if the unimplemented methods are\n/// reached.\n///\n/// ```\n/// # trait Foo {\n/// #     fn bar(\u0026self) -\u003e u8;\n/// #     fn baz(\u0026self);\n/// #     fn qux(\u0026self) -\u003e Result\u003cu64, ()\u003e;\n/// # }\n/// struct MyStruct;\n///\n/// impl Foo for MyStruct {\n///     fn bar(\u0026self) -\u003e u8 {\n///         1 + 1\n///     }\n///\n///     fn baz(\u0026self) {\n///         // It makes no sense to `baz` a `MyStruct`, so we have no logic here\n///         // at all.\n///         // This will display \"thread 'main' panicked at 'not implemented'\".\n///         unimplemented!();\n///     }\n///\n///     fn qux(\u0026self) -\u003e Result\u003cu64, ()\u003e {\n///         // We have some logic here,\n///         // We can add a message to unimplemented! to display our omission.\n///         // This will display:\n///         // \"thread 'main' panicked at 'not implemented: MyStruct isn't quxable'\".\n///         unimplemented!(\"MyStruct isn't quxable\");\n///     }\n/// }\n///\n/// fn main() {\n///     let s = MyStruct;\n///     s.bar();\n/// }\n/// ```\n#[macro_export]\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\n#[cfg_attr(not(test), rustc_diagnostic_item = \"unimplemented_macro\")]\n#[allow_internal_unstable(panic_internals)]\nmacro_rules! unimplemented {\n    () =\u003e {\n        $crate::panicking::panic(\"not implemented\")\n    };\n    ($($arg:tt)+) =\u003e {\n        $crate::panic!(\"not implemented: {}\", $crate::format_args!($($arg)+))\n    };\n}"
                        },
                        "unreachable": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::macros",
                            "Name": "unreachable",
                            "File": "mod.rs",
                            "Line": 755,
                            "StartOffset": -1,
                            "EndOffset": 28157,
                            "Content": "/// Indicates unreachable code.\n///\n/// This is useful any time that the compiler can't determine that some code is unreachable. For\n/// example:\n///\n/// * Match arms with guard conditions.\n/// * Loops that dynamically terminate.\n/// * Iterators that dynamically terminate.\n///\n/// If the determination that the code is unreachable proves incorrect, the\n/// program immediately terminates with a [`panic!`].\n///\n/// The unsafe counterpart of this macro is the [`unreachable_unchecked`] function, which\n/// will cause undefined behavior if the code is reached.\n///\n/// [`unreachable_unchecked`]: crate::hint::unreachable_unchecked\n///\n/// # Panics\n///\n/// This will always [`panic!`] because `unreachable!` is just a shorthand for `panic!` with a\n/// fixed, specific message.\n///\n/// Like `panic!`, this macro has a second form for displaying custom values.\n///\n/// # Examples\n///\n/// Match arms:\n///\n/// ```\n/// # #[allow(dead_code)]\n/// fn foo(x: Option\u003ci32\u003e) {\n///     match x {\n///         Some(n) if n \u003e= 0 =\u003e println!(\"Some(Non-negative)\"),\n///         Some(n) if n \u003c  0 =\u003e println!(\"Some(Negative)\"),\n///         Some(_)           =\u003e unreachable!(), // compile error if commented out\n///         None              =\u003e println!(\"None\")\n///     }\n/// }\n/// ```\n///\n/// Iterators:\n///\n/// ```\n/// # #[allow(dead_code)]\n/// fn divide_by_three(x: u32) -\u003e u32 { // one of the poorest implementations of x/3\n///     for i in 0.. {\n///         if 3*i \u003c i { panic!(\"u32 overflow\"); }\n///         if x \u003c 3*i { return i-1; }\n///     }\n///     unreachable!(\"The loop should always return\");\n/// }\n/// ```\n#[macro_export]\n#[rustc_builtin_macro(unreachable)]\n#[allow_internal_unstable(edition_panic)]\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\n#[cfg_attr(not(test), rustc_diagnostic_item = \"unreachable_macro\")]\nmacro_rules! unreachable {\n    // Expands to either `$crate::panic::unreachable_2015` or `$crate::panic::unreachable_2021`\n    // depending on the edition of the caller.\n    ($($arg:tt)*) =\u003e {\n        /* compiler built-in */\n    };\n}"
                        },
                        "write": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::macros",
                            "Name": "write",
                            "File": "mod.rs",
                            "Line": 622,
                            "StartOffset": -1,
                            "EndOffset": 25037,
                            "Content": "/// Writes formatted data into a buffer.\n///\n/// This macro accepts a 'writer', a format string, and a list of arguments. Arguments will be\n/// formatted according to the specified format string and the result will be passed to the writer.\n/// The writer may be any value with a `write_fmt` method; generally this comes from an\n/// implementation of either the [`fmt::Write`] or the [`io::Write`] trait. The macro\n/// returns whatever the `write_fmt` method returns; commonly a [`fmt::Result`], or an\n/// [`io::Result`].\n///\n/// See [`std::fmt`] for more information on the format string syntax.\n///\n/// [`std::fmt`]: ../std/fmt/index.html\n/// [`fmt::Write`]: crate::fmt::Write\n/// [`io::Write`]: ../std/io/trait.Write.html\n/// [`fmt::Result`]: crate::fmt::Result\n/// [`io::Result`]: ../std/io/type.Result.html\n///\n/// # Examples\n///\n/// ```\n/// use std::io::Write;\n///\n/// fn main() -\u003e std::io::Result\u003c()\u003e {\n///     let mut w = Vec::new();\n///     write!(\u0026mut w, \"test\")?;\n///     write!(\u0026mut w, \"formatted {}\", \"arguments\")?;\n///\n///     assert_eq!(w, b\"testformatted arguments\");\n///     Ok(())\n/// }\n/// ```\n///\n/// A module can import both `std::fmt::Write` and `std::io::Write` and call `write!` on objects\n/// implementing either, as objects do not typically implement both. However, the module must\n/// avoid conflict between the trait names, such as by importing them as `_` or otherwise renaming\n/// them:\n///\n/// ```\n/// use std::fmt::Write as _;\n/// use std::io::Write as _;\n///\n/// fn main() -\u003e Result\u003c(), Box\u003cdyn std::error::Error\u003e\u003e {\n///     let mut s = String::new();\n///     let mut v = Vec::new();\n///\n///     write!(\u0026mut s, \"{} {}\", \"abc\", 123)?; // uses fmt::Write::write_fmt\n///     write!(\u0026mut v, \"s = {:?}\", s)?; // uses io::Write::write_fmt\n///     assert_eq!(v, b\"s = \\\"abc 123\\\"\");\n///     Ok(())\n/// }\n/// ```\n///\n/// If you also need the trait names themselves, such as to implement one or both on your types,\n/// import the containing module and then name them with a prefix:\n///\n/// ```\n/// # #![allow(unused_imports)]\n/// use std::fmt::{self, Write as _};\n/// use std::io::{self, Write as _};\n///\n/// struct Example;\n///\n/// impl fmt::Write for Example {\n///     fn write_str(\u0026mut self, _s: \u0026str) -\u003e core::fmt::Result {\n///          unimplemented!();\n///     }\n/// }\n/// ```\n///\n/// Note: This macro can be used in `no_std` setups as well.\n/// In a `no_std` setup you are responsible for the implementation details of the components.\n///\n/// ```no_run\n/// use core::fmt::Write;\n///\n/// struct Example;\n///\n/// impl Write for Example {\n///     fn write_str(\u0026mut self, _s: \u0026str) -\u003e core::fmt::Result {\n///          unimplemented!();\n///     }\n/// }\n///\n/// let mut m = Example{};\n/// write!(\u0026mut m, \"Hello World\").expect(\"Not written\");\n/// ```\n#[macro_export]\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\n#[cfg_attr(not(test), rustc_diagnostic_item = \"write_macro\")]\nmacro_rules! write {\n    ($dst:expr, $($arg:tt)*) =\u003e {\n        $dst.write_fmt($crate::format_args!($($arg)*))\n    };\n}"
                        },
                        "writeln": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::macros",
                            "Name": "writeln",
                            "File": "mod.rs",
                            "Line": 717,
                            "StartOffset": -1,
                            "EndOffset": 26116,
                            "Content": "/// Writes formatted data into a buffer, with a newline appended.\n///\n/// On all platforms, the newline is the LINE FEED character (`\\n`/`U+000A`) alone\n/// (no additional CARRIAGE RETURN (`\\r`/`U+000D`).\n///\n/// For more information, see [`write!`]. For information on the format string syntax, see\n/// [`std::fmt`].\n///\n/// [`std::fmt`]: ../std/fmt/index.html\n///\n/// # Examples\n///\n/// ```\n/// use std::io::{Write, Result};\n///\n/// fn main() -\u003e Result\u003c()\u003e {\n///     let mut w = Vec::new();\n///     writeln!(\u0026mut w)?;\n///     writeln!(\u0026mut w, \"test\")?;\n///     writeln!(\u0026mut w, \"formatted {}\", \"arguments\")?;\n///\n///     assert_eq!(\u0026w[..], \"\\ntest\\nformatted arguments\\n\".as_bytes());\n///     Ok(())\n/// }\n/// ```\n#[macro_export]\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\n#[cfg_attr(not(test), rustc_diagnostic_item = \"writeln_macro\")]\n#[allow_internal_unstable(format_args_nl)]\nmacro_rules! writeln {\n    ($dst:expr $(,)?) =\u003e {\n        $crate::write!($dst, \"\\n\")\n    };\n    ($dst:expr, $($arg:tt)*) =\u003e {\n        $dst.write_fmt($crate::format_args_nl!($($arg)*))\n    };\n}"
                        }
                    },
                    "Types": {},
                    "Vars": {}
                },
                "core::marker": {
                    "IsMain": false,
                    "IsTest": false,
                    "PkgPath": "core::marker",
                    "Functions": {},
                    "Types": {
                        "PhantomData": {
                            "Exported": false,
                            "TypeKind": "struct",
                            "ModPath": "",
                            "PkgPath": "core::marker",
                            "Name": "PhantomData",
                            "File": "marker.rs",
                            "Line": 774,
                            "StartOffset": 29456,
                            "EndOffset": 29467,
                            "Content": "PhantomData"
                        },
                        "Send": {
                            "Exported": false,
                            "TypeKind": "interface",
                            "ModPath": "",
                            "PkgPath": "core::marker",
                            "Name": "Send",
                            "File": "marker.rs",
                            "Line": 90,
                            "StartOffset": 3419,
                            "EndOffset": 3423,
                            "Content": "Send"
                        },
                        "Sized": {
                            "Exported": false,
                            "TypeKind": "interface",
                            "ModPath": "",
                            "PkgPath": "core::marker",
                            "Name": "Sized",
                            "File": "marker.rs",
                            "Line": 154,
                            "StartOffset": 5622,
                            "EndOffset": 5627,
                            "Content": "Sized"
                        },
                        "Sync": {
                            "Exported": false,
                            "TypeKind": "interface",
                            "ModPath": "",
                            "PkgPath": "core::marker",
                            "Name": "Sync",
                            "File": "marker.rs",
                            "Line": 619,
                            "StartOffset": 24192,
                            "EndOffset": 24196,
                            "Content": "Sync"
                        }
                    },
                    "Vars": {}
                },
                "core::ops::deref": {
                    "IsMain": false,
                    "IsTest": false,
                    "PkgPath": "core::ops::deref",
                    "Functions": {},
                    "Types": {
                        "Deref": {
                            "Exported": false,
                            "TypeKind": "interface",
                            "ModPath": "",
                            "PkgPath": "core::ops::deref",
                            "Name": "Deref",
                            "File": "deref.rs",
                            "Line": 138,
                            "StartOffset": 6095,
                            "EndOffset": 6100,
                            "Content": "Deref"
                        },
                        "DerefMut": {
                            "Exported": false,
                            "TypeKind": "interface",
                            "ModPath": "",
                            "PkgPath": "core::ops::deref",
                            "Name": "DerefMut",
                            "File": "deref.rs",
                            "Line": 268,
                            "StartOffset": 10829,
                            "EndOffset": 10837,
                            "Content": "DerefMut"
                        }
                    },
                    "Vars": {}
                },
                "core::ops::function": {
                    "IsMain": false,
                    "IsTest": false,
                    "PkgPath": "core::ops::function",
                    "Functions": {},
                    "Types": {
                        "FnOnce": {
                            "Exported": false,
                            "TypeKind": "interface",
                            "ModPath": "",
                            "PkgPath": "core::ops::function",
                            "Name": "FnOnce",
                            "File": "function.rs",
                            "Line": 242,
                            "StartOffset": 8736,
                            "EndOffset": 8742,
                            "Content": "FnOnce"
                        }
                    },
                    "Vars": {}
                },
                "core::option": {
                    "IsMain": false,
                    "IsTest": false,
                    "PkgPath": "core::option",
                    "Functions": {
                        "and_then": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::option",
                            "Name": "and_then",
                            "File": "option.rs",
                            "Line": 1447,
                            "StartOffset": 51530,
                            "EndOffset": 51538,
                            "Content": "and_then"
                        },
                        "as_deref": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::option",
                            "Name": "as_deref",
                            "File": "option.rs",
                            "Line": 1303,
                            "StartOffset": 47102,
                            "EndOffset": 47110,
                            "Content": "as_deref"
                        },
                        "as_mut": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::option",
                            "Name": "as_mut",
                            "File": "option.rs",
                            "Line": 728,
                            "StartOffset": 27598,
                            "EndOffset": 27604,
                            "Content": "as_mut"
                        },
                        "as_ref": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::option",
                            "Name": "as_ref",
                            "File": "option.rs",
                            "Line": 706,
                            "StartOffset": 27062,
                            "EndOffset": 27068,
                            "Content": "as_ref"
                        },
                        "clone": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::option",
                            "Name": "clone",
                            "File": "option.rs",
                            "Line": 2037,
                            "StartOffset": 68519,
                            "EndOffset": 68524,
                            "Content": "clone"
                        },
                        "get_or_insert_with": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::option",
                            "Name": "get_or_insert_with",
                            "File": "option.rs",
                            "Line": 1691,
                            "StartOffset": 58361,
                            "EndOffset": 58379,
                            "Content": "get_or_insert_with"
                        },
                        "is_none": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::option",
                            "Name": "is_none",
                            "File": "option.rs",
                            "Line": 651,
                            "StartOffset": 24970,
                            "EndOffset": 24977,
                            "Content": "is_none"
                        },
                        "is_some": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::option",
                            "Name": "is_some",
                            "File": "option.rs",
                            "Line": 607,
                            "StartOffset": 23633,
                            "EndOffset": 23640,
                            "Content": "is_some"
                        },
                        "map": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::option",
                            "Name": "map",
                            "File": "option.rs",
                            "Line": 1114,
                            "StartOffset": 41603,
                            "EndOffset": 41606,
                            "Content": "map"
                        },
                        "or_else": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::option",
                            "Name": "or_else",
                            "File": "option.rs",
                            "Line": 1546,
                            "StartOffset": 54361,
                            "EndOffset": 54368,
                            "Content": "or_else"
                        },
                        "take": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::option",
                            "Name": "take",
                            "File": "option.rs",
                            "Line": 1726,
                            "StartOffset": 59394,
                            "EndOffset": 59398,
                            "Content": "take"
                        },
                        "unwrap": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::option",
                            "Name": "unwrap",
                            "File": "option.rs",
                            "Line": 975,
                            "StartOffset": 37239,
                            "EndOffset": 37245,
                            "Content": "unwrap"
                        },
                        "unwrap_or": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::option",
                            "Name": "unwrap_or",
                            "File": "option.rs",
                            "Line": 998,
                            "StartOffset": 37964,
                            "EndOffset": 37973,
                            "Content": "unwrap_or"
                        }
                    },
                    "Types": {
                        "Option": {
                            "Exported": false,
                            "TypeKind": "enum",
                            "ModPath": "",
                            "PkgPath": "core::option",
                            "Name": "Option",
                            "File": "option.rs",
                            "Line": 572,
                            "StartOffset": 22411,
                            "EndOffset": 22417,
                            "Content": "Option"
                        }
                    },
                    "Vars": {}
                },
                "core::panic::unwind_safe": {
                    "IsMain": false,
                    "IsTest": false,
                    "PkgPath": "core::panic::unwind_safe",
                    "Functions": {},
                    "Types": {
                        "UnwindSafe": {
                            "Exported": false,
                            "TypeKind": "interface",
                            "ModPath": "",
                            "PkgPath": "core::panic::unwind_safe",
                            "Name": "UnwindSafe",
                            "File": "unwind_safe.rs",
                            "Line": 90,
                            "StartOffset": 4463,
                            "EndOffset": 4473,
                            "Content": "UnwindSafe"
                        }
                    },
                    "Vars": {}
                },
                "core::result": {
                    "IsMain": false,
                    "IsTest": false,
                    "PkgPath": "core::result",
                    "Functions": {
                        "ok": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::result",
                            "Name": "ok",
                            "File": "result.rs",
                            "Line": 658,
                            "StartOffset": 23836,
                            "EndOffset": 23838,
                            "Content": "ok"
                        }
                    },
                    "Types": {},
                    "Vars": {}
                },
                "core::str": {
                    "IsMain": false,
                    "IsTest": false,
                    "PkgPath": "core::str",
                    "Functions": {
                        "chars": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::str",
                            "Name": "chars",
                            "File": "mod.rs",
                            "Line": 1040,
                            "StartOffset": 36210,
                            "EndOffset": 36215,
                            "Content": "chars"
                        },
                        "len": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::str",
                            "Name": "len",
                            "File": "mod.rs",
                            "Line": 140,
                            "StartOffset": 4729,
                            "EndOffset": 4732,
                            "Content": "len"
                        },
                        "strip_prefix": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::str",
                            "Name": "strip_prefix",
                            "File": "mod.rs",
                            "Line": 2397,
                            "StartOffset": 83755,
                            "EndOffset": 83767,
                            "Content": "strip_prefix"
                        }
                    },
                    "Types": {},
                    "Vars": {}
                },
                "core::str::traits": {
                    "IsMain": false,
                    "IsTest": false,
                    "PkgPath": "core::str::traits",
                    "Functions": {},
                    "Types": {
                        "FromStr": {
                            "Exported": false,
                            "TypeKind": "interface",
                            "ModPath": "",
                            "PkgPath": "core::str::traits",
                            "Name": "FromStr",
                            "File": "traits.rs",
                            "Line": 798,
                            "StartOffset": 29053,
                            "EndOffset": 29060,
                            "Content": "FromStr"
                        }
                    },
                    "Vars": {}
                }
            },
            "Dependencies": {},
            "Files": {
                "any.rs": {
                    "Path": "any.rs"
                },
                "borrow.rs": {
                    "Path": "borrow.rs"
                },
                "boxed.rs": {
                    "Path": "boxed.rs"
                },
                "builders.rs": {
                    "Path": "builders.rs"
                },
                "cmp.rs": {
                    "Path": "cmp.rs"
                },
                "collect.rs": {
                    "Path": "collect.rs"
                },
                "convert.rs": {
                    "Path": "convert.rs"
                },
                "default.rs": {
                    "Path": "default.rs"
                },
                "deref.rs": {
                    "Path": "deref.rs"
                },
                "function.rs": {
                    "Path": "function.rs"
                },
                "iterator.rs": {
                    "Path": "iterator.rs"
                },
                "marker.rs": {
                    "Path": "marker.rs"
                },
                "methods.rs": {
                    "Path": "methods.rs"
                },
                "mod.rs": {
                    "Path": "mod.rs"
                },
                "option.rs": {
                    "Path": "option.rs"
                },
                "result.rs": {
                    "Path": "result.rs"
                },
                "str.rs": {
                    "Path": "str.rs"
                },
                "string.rs": {
                    "Path": "string.rs"
                },
                "sync.rs": {
                    "Path": "sync.rs"
                },
                "traits.rs": {
                    "Path": "traits.rs"
                },
                "unwind_safe.rs": {
                    "Path": "unwind_safe.rs"
                }
            }
        },
        "ahash@0.8.11": {
            "Language": "rust",
            "Version": "0.8.11",
            "Name": "ahash",
            "Dir": "",
            "Packages": {
                "ahash::hash_map": {
                    "IsMain": false,
                    "IsTest": false,
                    "PkgPath": "ahash::hash_map",
                    "Functions": {
                        "AHashMap.expecting": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "ahash@0.8.11",
                            "PkgPath": "ahash::hash_map",
                            "Name": "AHashMap.expecting",
                            "File": "hash_map.rs",
                            "Line": 452,
                            "StartOffset": 12430,
                            "EndOffset": 12513,
                            "Content": "#[cfg(feature = \"serde\")]\nimpl\u003c'de, K, V\u003e Deserialize\u003c'de\u003e for AHashMap\u003cK, V\u003e\nwhere\n    K: Deserialize\u003c'de\u003e + Eq + Hash,\n    V: Deserialize\u003c'de\u003e,\n{\n    fn expecting(\u0026self, formatter: \u0026mut fmt::Formatter) -\u003e fmt::Result {\n                formatter.write_str(\"a map\")\n            }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap"
                                }
                            }
                        },
                        "AHashMap.get": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "ahash@0.8.11",
                            "PkgPath": "ahash::hash_map",
                            "Name": "AHashMap.get",
                            "File": "hash_map.rs",
                            "Line": 85,
                            "StartOffset": 2418,
                            "EndOffset": 3042,
                            "Content": "impl\u003cK, V, S\u003e AHashMap\u003cK, V, S\u003e\nwhere\n    K: Hash + Eq,\n    S: BuildHasher,\n{\n    /// Returns a reference to the value corresponding to the key.\n    ///\n    /// The key may be any borrowed form of the map's key type, but\n    /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for\n    /// the key type.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::collections::HashMap;\n    ///\n    /// let mut map = HashMap::new();\n    /// map.insert(1, \"a\");\n    /// assert_eq!(map.get(\u00261), Some(\u0026\"a\"));\n    /// assert_eq!(map.get(\u00262), None);\n    /// ```\n    #[inline]\n    /// Returns a reference to the value corresponding to the key.\n    ///\n    /// The key may be any borrowed form of the map's key type, but\n    /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for\n    /// the key type.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::collections::HashMap;\n    ///\n    /// let mut map = HashMap::new();\n    /// map.insert(1, \"a\");\n    /// assert_eq!(map.get(\u00261), Some(\u0026\"a\"));\n    /// assert_eq!(map.get(\u00262), None);\n    /// ```\n    #[inline]\n    pub fn get\u003cQ: ?Sized\u003e(\u0026self, k: \u0026Q) -\u003e Option\u003c\u0026V\u003e\n    where\n        K: Borrow\u003cQ\u003e,\n        Q: Hash + Eq,\n    {\n        self.0.get(k)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap"
                                }
                            }
                        },
                        "AHashMap.get_key_value": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "ahash@0.8.11",
                            "PkgPath": "ahash::hash_map",
                            "Name": "AHashMap.get_key_value",
                            "File": "hash_map.rs",
                            "Line": 110,
                            "StartOffset": 3069,
                            "EndOffset": 3746,
                            "Content": "impl\u003cK, V, S\u003e AHashMap\u003cK, V, S\u003e\nwhere\n    K: Hash + Eq,\n    S: BuildHasher,\n{\n    /// Returns a reference to the value corresponding to the key.\n    ///\n    /// The key may be any borrowed form of the map's key type, but\n    /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for\n    /// the key type.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::collections::HashMap;\n    ///\n    /// let mut map = HashMap::new();\n    /// map.insert(1, \"a\");\n    /// assert_eq!(map.get(\u00261), Some(\u0026\"a\"));\n    /// assert_eq!(map.get(\u00262), None);\n    /// ```\n    #[inline]\n    /// Returns the key-value pair corresponding to the supplied key.\n    ///\n    /// The supplied key may be any borrowed form of the map's key type, but\n    /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for\n    /// the key type.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::collections::HashMap;\n    ///\n    /// let mut map = HashMap::new();\n    /// map.insert(1, \"a\");\n    /// assert_eq!(map.get_key_value(\u00261), Some((\u00261, \u0026\"a\")));\n    /// assert_eq!(map.get_key_value(\u00262), None);\n    /// ```\n    #[inline]\n    pub fn get_key_value\u003cQ: ?Sized\u003e(\u0026self, k: \u0026Q) -\u003e Option\u003c(\u0026K, \u0026V)\u003e\n    where\n        K: Borrow\u003cQ\u003e,\n        Q: Hash + Eq,\n    {\n        self.0.get_key_value(k)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap"
                                }
                            }
                        },
                        "AHashMap.get_mut": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "ahash@0.8.11",
                            "PkgPath": "ahash::hash_map",
                            "Name": "AHashMap.get_mut",
                            "File": "hash_map.rs",
                            "Line": 135,
                            "StartOffset": 3783,
                            "EndOffset": 4451,
                            "Content": "impl\u003cK, V, S\u003e AHashMap\u003cK, V, S\u003e\nwhere\n    K: Hash + Eq,\n    S: BuildHasher,\n{\n    /// Returns a reference to the value corresponding to the key.\n    ///\n    /// The key may be any borrowed form of the map's key type, but\n    /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for\n    /// the key type.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::collections::HashMap;\n    ///\n    /// let mut map = HashMap::new();\n    /// map.insert(1, \"a\");\n    /// assert_eq!(map.get(\u00261), Some(\u0026\"a\"));\n    /// assert_eq!(map.get(\u00262), None);\n    /// ```\n    #[inline]\n    /// Returns a mutable reference to the value corresponding to the key.\n    ///\n    /// The key may be any borrowed form of the map's key type, but\n    /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for\n    /// the key type.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::collections::HashMap;\n    ///\n    /// let mut map = HashMap::new();\n    /// map.insert(1, \"a\");\n    /// if let Some(x) = map.get_mut(\u00261) {\n    ///     *x = \"b\";\n    /// }\n    /// assert_eq!(map[\u00261], \"b\");\n    /// ```\n    #[inline]\n    pub fn get_mut\u003cQ: ?Sized\u003e(\u0026mut self, k: \u0026Q) -\u003e Option\u003c\u0026mut V\u003e\n    where\n        K: Borrow\u003cQ\u003e,\n        Q: Hash + Eq,\n    {\n        self.0.get_mut(k)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap"
                                }
                            }
                        },
                        "AHashMap.insert": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "ahash@0.8.11",
                            "PkgPath": "ahash::hash_map",
                            "Name": "AHashMap.insert",
                            "File": "hash_map.rs",
                            "Line": 162,
                            "StartOffset": 4482,
                            "EndOffset": 5314,
                            "Content": "impl\u003cK, V, S\u003e AHashMap\u003cK, V, S\u003e\nwhere\n    K: Hash + Eq,\n    S: BuildHasher,\n{\n    /// Returns a reference to the value corresponding to the key.\n    ///\n    /// The key may be any borrowed form of the map's key type, but\n    /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for\n    /// the key type.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::collections::HashMap;\n    ///\n    /// let mut map = HashMap::new();\n    /// map.insert(1, \"a\");\n    /// assert_eq!(map.get(\u00261), Some(\u0026\"a\"));\n    /// assert_eq!(map.get(\u00262), None);\n    /// ```\n    #[inline]\n    /// Inserts a key-value pair into the map.\n    ///\n    /// If the map did not have this key present, [`None`] is returned.\n    ///\n    /// If the map did have this key present, the value is updated, and the old\n    /// value is returned. The key is not updated, though; this matters for\n    /// types that can be `==` without being identical. See the [module-level\n    /// documentation] for more.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::collections::HashMap;\n    ///\n    /// let mut map = HashMap::new();\n    /// assert_eq!(map.insert(37, \"a\"), None);\n    /// assert_eq!(map.is_empty(), false);\n    ///\n    /// map.insert(37, \"b\");\n    /// assert_eq!(map.insert(37, \"c\"), Some(\"b\"));\n    /// assert_eq!(map[\u002637], \"c\");\n    /// ```\n    #[inline]\n    pub fn insert(\u0026mut self, k: K, v: V) -\u003e Option\u003cV\u003e {\n        self.0.insert(k, v)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap"
                                }
                            }
                        },
                        "AHashMap.into_keys": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "ahash@0.8.11",
                            "PkgPath": "ahash::hash_map",
                            "Name": "AHashMap.into_keys",
                            "File": "hash_map.rs",
                            "Line": 189,
                            "StartOffset": 5347,
                            "EndOffset": 6277,
                            "Content": "impl\u003cK, V, S\u003e AHashMap\u003cK, V, S\u003e\nwhere\n    K: Hash + Eq,\n    S: BuildHasher,\n{\n    /// Returns a reference to the value corresponding to the key.\n    ///\n    /// The key may be any borrowed form of the map's key type, but\n    /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for\n    /// the key type.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::collections::HashMap;\n    ///\n    /// let mut map = HashMap::new();\n    /// map.insert(1, \"a\");\n    /// assert_eq!(map.get(\u00261), Some(\u0026\"a\"));\n    /// assert_eq!(map.get(\u00262), None);\n    /// ```\n    #[inline]\n    /// Creates a consuming iterator visiting all the keys in arbitrary order.\n    /// The map cannot be used after calling this.\n    /// The iterator element type is `K`.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::collections::HashMap;\n    ///\n    /// let map = HashMap::from([\n    ///     (\"a\", 1),\n    ///     (\"b\", 2),\n    ///     (\"c\", 3),\n    /// ]);\n    ///\n    /// let mut vec: Vec\u003c\u0026str\u003e = map.into_keys().collect();\n    /// // The `IntoKeys` iterator produces keys in arbitrary order, so the\n    /// // keys must be sorted to test them against a sorted array.\n    /// vec.sort_unstable();\n    /// assert_eq!(vec, [\"a\", \"b\", \"c\"]);\n    /// ```\n    ///\n    /// # Performance\n    ///\n    /// In the current implementation, iterating over keys takes O(capacity) time\n    /// instead of O(len) because it internally visits empty buckets too.\n    #[inline]\n    pub fn into_keys(self) -\u003e IntoKeys\u003cK, V\u003e {\n        self.0.into_keys()\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap"
                                }
                            }
                        },
                        "AHashMap.into_values": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "ahash@0.8.11",
                            "PkgPath": "ahash::hash_map",
                            "Name": "AHashMap.into_values",
                            "File": "hash_map.rs",
                            "Line": 220,
                            "StartOffset": 6309,
                            "EndOffset": 7248,
                            "Content": "impl\u003cK, V, S\u003e AHashMap\u003cK, V, S\u003e\nwhere\n    K: Hash + Eq,\n    S: BuildHasher,\n{\n    /// Returns a reference to the value corresponding to the key.\n    ///\n    /// The key may be any borrowed form of the map's key type, but\n    /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for\n    /// the key type.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::collections::HashMap;\n    ///\n    /// let mut map = HashMap::new();\n    /// map.insert(1, \"a\");\n    /// assert_eq!(map.get(\u00261), Some(\u0026\"a\"));\n    /// assert_eq!(map.get(\u00262), None);\n    /// ```\n    #[inline]\n    /// Creates a consuming iterator visiting all the values in arbitrary order.\n    /// The map cannot be used after calling this.\n    /// The iterator element type is `V`.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::collections::HashMap;\n    ///\n    /// let map = HashMap::from([\n    ///     (\"a\", 1),\n    ///     (\"b\", 2),\n    ///     (\"c\", 3),\n    /// ]);\n    ///\n    /// let mut vec: Vec\u003ci32\u003e = map.into_values().collect();\n    /// // The `IntoValues` iterator produces values in arbitrary order, so\n    /// // the values must be sorted to test them against a sorted array.\n    /// vec.sort_unstable();\n    /// assert_eq!(vec, [1, 2, 3]);\n    /// ```\n    ///\n    /// # Performance\n    ///\n    /// In the current implementation, iterating over values takes O(capacity) time\n    /// instead of O(len) because it internally visits empty buckets too.\n    #[inline]\n    pub fn into_values(self) -\u003e IntoValues\u003cK, V\u003e {\n        self.0.into_values()\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap"
                                }
                            }
                        },
                        "AHashMap.remove": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "ahash@0.8.11",
                            "PkgPath": "ahash::hash_map",
                            "Name": "AHashMap.remove",
                            "File": "hash_map.rs",
                            "Line": 251,
                            "StartOffset": 7282,
                            "EndOffset": 7962,
                            "Content": "impl\u003cK, V, S\u003e AHashMap\u003cK, V, S\u003e\nwhere\n    K: Hash + Eq,\n    S: BuildHasher,\n{\n    /// Returns a reference to the value corresponding to the key.\n    ///\n    /// The key may be any borrowed form of the map's key type, but\n    /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for\n    /// the key type.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::collections::HashMap;\n    ///\n    /// let mut map = HashMap::new();\n    /// map.insert(1, \"a\");\n    /// assert_eq!(map.get(\u00261), Some(\u0026\"a\"));\n    /// assert_eq!(map.get(\u00262), None);\n    /// ```\n    #[inline]\n    /// Removes a key from the map, returning the value at the key if the key\n    /// was previously in the map.\n    ///\n    /// The key may be any borrowed form of the map's key type, but\n    /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for\n    /// the key type.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::collections::HashMap;\n    ///\n    /// let mut map = HashMap::new();\n    /// map.insert(1, \"a\");\n    /// assert_eq!(map.remove(\u00261), Some(\"a\"));\n    /// assert_eq!(map.remove(\u00261), None);\n    /// ```\n    #[inline]\n    pub fn remove\u003cQ: ?Sized\u003e(\u0026mut self, k: \u0026Q) -\u003e Option\u003cV\u003e\n    where\n        K: Borrow\u003cQ\u003e,\n        Q: Hash + Eq,\n    {\n        self.0.remove(k)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap"
                                }
                            }
                        },
                        "AHashMap.serialize": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "ahash@0.8.11",
                            "PkgPath": "ahash::hash_map",
                            "Name": "AHashMap.serialize",
                            "File": "hash_map.rs",
                            "Line": 424,
                            "StartOffset": 11499,
                            "EndOffset": 11585,
                            "Content": "#[cfg(feature = \"serde\")]\nimpl\u003cK, V\u003e Serialize for AHashMap\u003cK, V\u003e\nwhere\n    K: Serialize + Eq + Hash,\n    V: Serialize,\n{\n    fn serialize\u003cS: Serializer\u003e(\u0026self, serializer: S) -\u003e Result\u003cS::Ok, S::Error\u003e {\n        self.deref().serialize(serializer)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap"
                                }
                            }
                        },
                        "AHashMap.visit_map": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "ahash@0.8.11",
                            "PkgPath": "ahash::hash_map",
                            "Name": "AHashMap.visit_map",
                            "File": "hash_map.rs",
                            "Line": 456,
                            "StartOffset": 12571,
                            "EndOffset": 12957,
                            "Content": "#[cfg(feature = \"serde\")]\nimpl\u003c'de, K, V\u003e Deserialize\u003c'de\u003e for AHashMap\u003cK, V\u003e\nwhere\n    K: Deserialize\u003c'de\u003e + Eq + Hash,\n    V: Deserialize\u003c'de\u003e,\n{\n    fn visit_map\u003cA\u003e(self, mut map: A) -\u003e Result\u003cSelf::Value, A::Error\u003e\n            where\n                A: MapAccess\u003c'de\u003e,\n            {\n                self.0.clear();\n                self.0.reserve(map.size_hint().unwrap_or(0).min(4096));\n\n                while let Some((key, value)) = map.next_entry()? {\n                    self.0.insert(key, value);\n                }\n\n                Ok(())\n            }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap"
                                }
                            }
                        },
                        "AHashMap::deserialize": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "ahash@0.8.11",
                            "PkgPath": "ahash::hash_map",
                            "Name": "AHashMap::deserialize",
                            "File": "hash_map.rs",
                            "Line": 435,
                            "StartOffset": 11782,
                            "EndOffset": 11930,
                            "Content": "#[cfg(feature = \"serde\")]\nimpl\u003c'de, K, V\u003e Deserialize\u003c'de\u003e for AHashMap\u003cK, V\u003e\nwhere\n    K: Deserialize\u003c'de\u003e + Eq + Hash,\n    V: Deserialize\u003c'de\u003e,\n{\n    fn deserialize\u003cD: Deserializer\u003c'de\u003e\u003e(deserializer: D) -\u003e Result\u003cSelf, D::Error\u003e {\n        let hash_map = HashMap::deserialize(deserializer);\n        hash_map.map(|hash_map| Self(hash_map))\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap"
                                }
                            }
                        },
                        "AHashMap::deserialize_in_place": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "ahash@0.8.11",
                            "PkgPath": "ahash::hash_map",
                            "Name": "AHashMap::deserialize_in_place",
                            "File": "hash_map.rs",
                            "Line": 440,
                            "StartOffset": 11983,
                            "EndOffset": 12997,
                            "Content": "#[cfg(feature = \"serde\")]\nimpl\u003c'de, K, V\u003e Deserialize\u003c'de\u003e for AHashMap\u003cK, V\u003e\nwhere\n    K: Deserialize\u003c'de\u003e + Eq + Hash,\n    V: Deserialize\u003c'de\u003e,\n{\n    fn deserialize_in_place\u003cD: Deserializer\u003c'de\u003e\u003e(deserializer: D, place: \u0026mut Self) -\u003e Result\u003c(), D::Error\u003e {\n        use serde::de::{MapAccess, Visitor};\n\n        struct MapInPlaceVisitor\u003c'a, K: 'a, V: 'a\u003e(\u0026'a mut AHashMap\u003cK, V\u003e);\n\n        impl\u003c'a, 'de, K, V\u003e Visitor\u003c'de\u003e for MapInPlaceVisitor\u003c'a, K, V\u003e\n        where\n            K: Deserialize\u003c'de\u003e + Eq + Hash,\n            V: Deserialize\u003c'de\u003e,\n        {\n            type Value = ();\n\n            fn expecting(\u0026self, formatter: \u0026mut fmt::Formatter) -\u003e fmt::Result {\n                formatter.write_str(\"a map\")\n            }\n\n            fn visit_map\u003cA\u003e(self, mut map: A) -\u003e Result\u003cSelf::Value, A::Error\u003e\n            where\n                A: MapAccess\u003c'de\u003e,\n            {\n                self.0.clear();\n                self.0.reserve(map.size_hint().unwrap_or(0).min(4096));\n\n                while let Some((key, value)) = map.next_entry()? {\n                    self.0.insert(key, value);\n                }\n\n                Ok(())\n            }\n        }\n\n        deserializer.deserialize_map(MapInPlaceVisitor(place))\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap"
                                }
                            }
                        },
                        "AHashMap::new": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "ahash@0.8.11",
                            "PkgPath": "ahash::hash_map",
                            "Name": "AHashMap::new",
                            "File": "hash_map.rs",
                            "Line": 54,
                            "StartOffset": 1391,
                            "EndOffset": 1637,
                            "Content": "impl\u003cK, V\u003e AHashMap\u003cK, V, RandomState\u003e {\n    /// This crates a hashmap using [RandomState::new] which obtains its keys from [RandomSource].\n    /// See the documentation in [RandomSource] for notes about key strength.\n    /// This crates a hashmap using [RandomState::new] which obtains its keys from [RandomSource].\n    /// See the documentation in [RandomSource] for notes about key strength.\n    pub fn new() -\u003e Self {\n        AHashMap(HashMap::with_hasher(RandomState::new()))\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap"
                                }
                            }
                        },
                        "AHashMap::with_capacity": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "ahash@0.8.11",
                            "PkgPath": "ahash::hash_map",
                            "Name": "AHashMap::with_capacity",
                            "File": "hash_map.rs",
                            "Line": 60,
                            "StartOffset": 1701,
                            "EndOffset": 1917,
                            "Content": "impl\u003cK, V\u003e AHashMap\u003cK, V, RandomState\u003e {\n    /// This crates a hashmap using [RandomState::new] which obtains its keys from [RandomSource].\n    /// See the documentation in [RandomSource] for notes about key strength.\n    /// This crates a hashmap with the specified capacity using [RandomState::new].\n    /// See the documentation in [RandomSource] for notes about key strength.\n    pub fn with_capacity(capacity: usize) -\u003e Self {\n        AHashMap(HashMap::with_capacity_and_hasher(capacity, RandomState::new()))\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap"
                                }
                            }
                        },
                        "AHashMap::with_capacity_and_hasher": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "ahash@0.8.11",
                            "PkgPath": "ahash::hash_map",
                            "Name": "AHashMap::with_capacity_and_hasher",
                            "File": "hash_map.rs",
                            "Line": 75,
                            "StartOffset": 2176,
                            "EndOffset": 2258,
                            "Content": "impl\u003cK, V, S\u003e AHashMap\u003cK, V, S\u003e\nwhere\n    S: BuildHasher,\n{\n    pub fn with_capacity_and_hasher(capacity: usize, hash_builder: S) -\u003e Self {\n        AHashMap(HashMap::with_capacity_and_hasher(capacity, hash_builder))\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap"
                                }
                            }
                        },
                        "AHashMap::with_hasher": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "ahash@0.8.11",
                            "PkgPath": "ahash::hash_map",
                            "Name": "AHashMap::with_hasher",
                            "File": "hash_map.rs",
                            "Line": 71,
                            "StartOffset": 2065,
                            "EndOffset": 2118,
                            "Content": "impl\u003cK, V, S\u003e AHashMap\u003cK, V, S\u003e\nwhere\n    S: BuildHasher,\n{\n    pub fn with_hasher(hash_builder: S) -\u003e Self {\n        AHashMap(HashMap::with_hasher(hash_builder))\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap"
                                }
                            }
                        },
                        "Debug\u003cAHashMap\u003e.fmt": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "ahash@0.8.11",
                            "PkgPath": "ahash::hash_map",
                            "Name": "Debug\u003cAHashMap\u003e.fmt",
                            "File": "hash_map.rs",
                            "Line": 342,
                            "StartOffset": 9167,
                            "EndOffset": 9231,
                            "Content": "impl\u003cK, V, S\u003e Debug for AHashMap\u003cK, V, S\u003e\nwhere\n    K: Debug,\n    V: Debug,\n    S: BuildHasher,\n{\n    fn fmt(\u0026self, fmt: \u0026mut fmt::Formatter) -\u003e fmt::Result {\n        self.0.fmt(fmt)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap"
                                }
                            }
                        },
                        "Default\u003cAHashMap\u003e::default": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "ahash@0.8.11",
                            "PkgPath": "ahash::hash_map",
                            "Name": "Default\u003cAHashMap\u003e::default",
                            "File": "hash_map.rs",
                            "Line": 412,
                            "StartOffset": 11216,
                            "EndOffset": 11334,
                            "Content": "/// NOTE: For safety this trait impl is only available available if either of the flags `runtime-rng` (on by default) or\n/// `compile-time-rng` are enabled. This is to prevent weakly keyed maps from being accidentally created. Instead one of\n/// constructors for [RandomState] must be used.\n#[cfg(any(feature = \"compile-time-rng\", feature = \"runtime-rng\", feature = \"no-rng\"))]\nimpl\u003cK, V\u003e Default for AHashMap\u003cK, V, RandomState\u003e {\n    #[inline]\n    #[inline]\n    fn default() -\u003e AHashMap\u003cK, V, RandomState\u003e {\n        AHashMap(HashMap::default())\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap"
                                }
                            }
                        },
                        "Deref\u003cAHashMap\u003e.deref": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "ahash@0.8.11",
                            "PkgPath": "ahash::hash_map",
                            "Name": "Deref\u003cAHashMap\u003e.deref",
                            "File": "hash_map.rs",
                            "Line": 280,
                            "StartOffset": 8039,
                            "EndOffset": 8115,
                            "Content": "impl\u003cK, V, S\u003e Deref for AHashMap\u003cK, V, S\u003e {\n    type Target = HashMap\u003cK, V, S\u003e;\n    fn deref(\u0026self) -\u003e \u0026Self::Target {\n        \u0026self.0\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap"
                                }
                            }
                        },
                        "DerefMut\u003cAHashMap\u003e.deref_mut": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "ahash@0.8.11",
                            "PkgPath": "ahash::hash_map",
                            "Name": "DerefMut\u003cAHashMap\u003e.deref_mut",
                            "File": "hash_map.rs",
                            "Line": 286,
                            "StartOffset": 8139,
                            "EndOffset": 8238,
                            "Content": "impl\u003cK, V, S\u003e DerefMut for AHashMap\u003cK, V, S\u003e {\n    fn deref_mut(\u0026mut self) -\u003e \u0026mut Self::Target {\n        \u0026mut self.0\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap"
                                }
                            }
                        },
                        "Extend\u003cAHashMap\u003e.extend": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "ahash@0.8.11",
                            "PkgPath": "ahash::hash_map",
                            "Name": "Extend\u003cAHashMap\u003e.extend",
                            "File": "hash_map.rs",
                            "Line": 401,
                            "StartOffset": 10709,
                            "EndOffset": 10802,
                            "Content": "impl\u003c'a, K, V, S\u003e Extend\u003c(\u0026'a K, \u0026'a V)\u003e for AHashMap\u003cK, V, S\u003e\nwhere\n    K: Eq + Hash + Copy + 'a,\n    V: Copy + 'a,\n    S: BuildHasher,\n{\n    #[inline]\n    #[inline]\n    fn extend\u003cT: IntoIterator\u003cItem = (\u0026'a K, \u0026'a V)\u003e\u003e(\u0026mut self, iter: T) {\n        self.0.extend(iter)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap"
                                }
                            }
                        },
                        "From\u003cAHashMap\u003e::from": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "ahash@0.8.11",
                            "PkgPath": "ahash::hash_map",
                            "Name": "From\u003cAHashMap\u003e::from",
                            "File": "hash_map.rs",
                            "Line": 33,
                            "StartOffset": 925,
                            "EndOffset": 1201,
                            "Content": "impl\u003cK, V, const N: usize\u003e From\u003c[(K, V); N]\u003e for AHashMap\u003cK, V\u003e\nwhere\n    K: Eq + Hash,\n{\n    /// # Examples\n    ///\n    /// ```\n    /// use ahash::AHashMap;\n    ///\n    /// let map1 = AHashMap::from([(1, 2), (3, 4)]);\n    /// let map2: AHashMap\u003c_, _\u003e = [(1, 2), (3, 4)].into();\n    /// assert_eq!(map1, map2);\n    /// ```\n    /// # Examples\n    ///\n    /// ```\n    /// use ahash::AHashMap;\n    ///\n    /// let map1 = AHashMap::from([(1, 2), (3, 4)]);\n    /// let map2: AHashMap\u003c_, _\u003e = [(1, 2), (3, 4)].into();\n    /// assert_eq!(map1, map2);\n    /// ```\n    fn from(arr: [(K, V); N]) -\u003e Self {\n        Self::from_iter(arr)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap"
                                }
                            }
                        },
                        "FromIterator\u003cAHashMap\u003e::from_iter": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "ahash@0.8.11",
                            "PkgPath": "ahash::hash_map",
                            "Name": "FromIterator\u003cAHashMap\u003e::from_iter",
                            "File": "hash_map.rs",
                            "Line": 351,
                            "StartOffset": 9351,
                            "EndOffset": 9677,
                            "Content": "impl\u003cK, V\u003e FromIterator\u003c(K, V)\u003e for AHashMap\u003cK, V, RandomState\u003e\nwhere\n    K: Eq + Hash,\n{\n    /// This crates a hashmap from the provided iterator using [RandomState::new].\n    /// See the documentation in [RandomSource] for notes about key strength.\n    /// This crates a hashmap from the provided iterator using [RandomState::new].\n    /// See the documentation in [RandomSource] for notes about key strength.\n    fn from_iter\u003cT: IntoIterator\u003cItem = (K, V)\u003e\u003e(iter: T) -\u003e Self {\n        let mut inner = HashMap::with_hasher(RandomState::new());\n        inner.extend(iter);\n        AHashMap(inner)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap"
                                }
                            }
                        },
                        "Into\u003cAHashMap\u003e.into": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "ahash@0.8.11",
                            "PkgPath": "ahash::hash_map",
                            "Name": "Into\u003cAHashMap\u003e.into",
                            "File": "hash_map.rs",
                            "Line": 48,
                            "StartOffset": 1238,
                            "EndOffset": 1368,
                            "Content": "impl\u003cK, V\u003e Into\u003cHashMap\u003cK, V, crate::RandomState\u003e\u003e for AHashMap\u003cK, V\u003e {\n    fn into(self) -\u003e HashMap\u003cK, V, crate::RandomState\u003e {\n        self.0\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap"
                                }
                            }
                        },
                        "IntoIterator\u003cAHashMap\u003e.into_iter": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "ahash@0.8.11",
                            "PkgPath": "ahash::hash_map",
                            "Name": "IntoIterator\u003cAHashMap\u003e.into_iter",
                            "File": "hash_map.rs",
                            "Line": 371,
                            "StartOffset": 10022,
                            "EndOffset": 10115,
                            "Content": "impl\u003c'a, K, V, S\u003e IntoIterator for \u0026'a mut AHashMap\u003cK, V, S\u003e {\n    type Item = (\u0026'a K, \u0026'a mut V);\n    type IntoIter = hash_map::IterMut\u003c'a, K, V\u003e;\n    fn into_iter(self) -\u003e Self::IntoIter {\n        (\u0026mut self.0).iter_mut()\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap"
                                }
                            }
                        },
                        "PartialEq\u003cAHashMap\u003e.eq": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "ahash@0.8.11",
                            "PkgPath": "ahash::hash_map",
                            "Name": "PartialEq\u003cAHashMap\u003e.eq",
                            "File": "hash_map.rs",
                            "Line": 304,
                            "StartOffset": 8470,
                            "EndOffset": 8527,
                            "Content": "impl\u003cK, V, S\u003e PartialEq for AHashMap\u003cK, V, S\u003e\nwhere\n    K: Eq + Hash,\n    V: PartialEq,\n    S: BuildHasher,\n{\n    fn eq(\u0026self, other: \u0026AHashMap\u003cK, V, S\u003e) -\u003e bool {\n        self.0.eq(\u0026other.0)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap"
                                }
                            }
                        },
                        "Sized\u003cAHashMap\u003e.index": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "ahash@0.8.11",
                            "PkgPath": "ahash::hash_map",
                            "Name": "Sized\u003cAHashMap\u003e.index",
                            "File": "hash_map.rs",
                            "Line": 325,
                            "StartOffset": 8816,
                            "EndOffset": 9037,
                            "Content": "impl\u003cK, Q: ?Sized, V, S\u003e Index\u003c\u0026Q\u003e for AHashMap\u003cK, V, S\u003e\nwhere\n    K: Eq + Hash + Borrow\u003cQ\u003e,\n    Q: Eq + Hash,\n    S: BuildHasher,\n{\n    type Output = V;\n\n    /// Returns a reference to the value corresponding to the supplied key.\n    ///\n    /// # Panics\n    ///\n    /// Panics if the key is not present in the `HashMap`.\n    #[inline]\n    /// Returns a reference to the value corresponding to the supplied key.\n    ///\n    /// # Panics\n    ///\n    /// Panics if the key is not present in the `HashMap`.\n    #[inline]\n    fn index(\u0026self, key: \u0026Q) -\u003e \u0026V {\n        self.0.index(key)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap"
                                }
                            }
                        },
                        "test_borrow": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "ahash@0.8.11",
                            "PkgPath": "ahash::hash_map",
                            "Name": "test_borrow",
                            "File": "hash_map.rs",
                            "Line": 478,
                            "StartOffset": 13092,
                            "EndOffset": 13269,
                            "Content": "#[test]\n    fn test_borrow() {\n        let mut map: AHashMap\u003cString, String\u003e = AHashMap::new();\n        map.insert(\"foo\".to_string(), \"Bar\".to_string());\n        map.insert(\"Bar\".to_string(), map.get(\"foo\").unwrap().to_owned());\n    }"
                        },
                        "test_serde": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "ahash@0.8.11",
                            "PkgPath": "ahash::hash_map",
                            "Name": "test_serde",
                            "File": "hash_map.rs",
                            "Line": 485,
                            "StartOffset": 13349,
                            "EndOffset": 14032,
                            "Content": "#[cfg(feature = \"serde\")]\n    #[test]\n    fn test_serde() {\n        let mut map = AHashMap::new();\n        map.insert(\"for\".to_string(), 0);\n        map.insert(\"bar\".to_string(), 1);\n        let mut serialization = serde_json::to_string(\u0026map).unwrap();\n        let mut deserialization: AHashMap\u003cString, u64\u003e = serde_json::from_str(\u0026serialization).unwrap();\n        assert_eq!(deserialization, map);\n\n        map.insert(\"baz\".to_string(), 2);\n        serialization = serde_json::to_string(\u0026map).unwrap();\n        let mut deserializer = serde_json::Deserializer::from_str(\u0026serialization);\n        AHashMap::deserialize_in_place(\u0026mut deserializer, \u0026mut deserialization).unwrap();\n        assert_eq!(deserialization, map);\n    }"
                        }
                    },
                    "Types": {
                        "AHashMap": {
                            "Exported": false,
                            "TypeKind": "struct",
                            "ModPath": "ahash@0.8.11",
                            "PkgPath": "ahash::hash_map",
                            "Name": "AHashMap",
                            "File": "hash_map.rs",
                            "Line": 18,
                            "StartOffset": -1,
                            "EndOffset": 647,
                            "Content": "/// A [`HashMap`](std::collections::HashMap) using [`RandomState`](crate::RandomState) to hash the items.\n/// (Requires the `std` feature to be enabled.)\n#[derive(Clone)]\npub struct AHashMap\u003cK, V, S = crate::RandomState\u003e(HashMap\u003cK, V, S\u003e);",
                            "Methods": {
                                "deref": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "Deref\u003cAHashMap\u003e.deref"
                                },
                                "deref_mut": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "DerefMut\u003cAHashMap\u003e.deref_mut"
                                },
                                "eq": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "PartialEq\u003cAHashMap\u003e.eq"
                                },
                                "expecting": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap.expecting"
                                },
                                "extend": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "Extend\u003cAHashMap\u003e.extend"
                                },
                                "fmt": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "Debug\u003cAHashMap\u003e.fmt"
                                },
                                "get": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap.get"
                                },
                                "get_key_value": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "get_key_value"
                                },
                                "get_mut": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap.get_mut"
                                },
                                "index": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "Sized\u003cAHashMap\u003e.index"
                                },
                                "insert": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap.insert"
                                },
                                "into": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "Into\u003cAHashMap\u003e.into"
                                },
                                "into_iter": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "IntoIterator\u003cAHashMap\u003e.into_iter"
                                },
                                "into_keys": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap.into_keys"
                                },
                                "into_values": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap.into_values"
                                },
                                "remove": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap.remove"
                                },
                                "serialize": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap.serialize"
                                },
                                "visit_map": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap.visit_map"
                                }
                            }
                        },
                        "IntoIter": {
                            "Exported": false,
                            "TypeKind": "type-parameter",
                            "ModPath": "ahash@0.8.11",
                            "PkgPath": "ahash::hash_map",
                            "Name": "IntoIter",
                            "File": "hash_map.rs",
                            "Line": 378,
                            "StartOffset": 10207,
                            "EndOffset": 10248,
                            "Content": "type IntoIter = hash_map::IntoIter\u003cK, V\u003e;"
                        },
                        "Item": {
                            "Exported": false,
                            "TypeKind": "type-parameter",
                            "ModPath": "ahash@0.8.11",
                            "PkgPath": "ahash::hash_map",
                            "Name": "Item",
                            "File": "hash_map.rs",
                            "Line": 361,
                            "StartOffset": 9709,
                            "EndOffset": 9736,
                            "Content": "type Item = (\u0026'a K, \u0026'a V);"
                        },
                        "MapInPlaceVisitor": {
                            "Exported": false,
                            "TypeKind": "struct",
                            "ModPath": "ahash@0.8.11",
                            "PkgPath": "ahash::hash_map",
                            "Name": "MapInPlaceVisitor",
                            "File": "hash_map.rs",
                            "Line": 443,
                            "StartOffset": 12144,
                            "EndOffset": 12211,
                            "Content": "struct MapInPlaceVisitor\u003c'a, K: 'a, V: 'a\u003e(\u0026'a mut AHashMap\u003cK, V\u003e);"
                        },
                        "Output": {
                            "Exported": false,
                            "TypeKind": "type-parameter",
                            "ModPath": "ahash@0.8.11",
                            "PkgPath": "ahash::hash_map",
                            "Name": "Output",
                            "File": "hash_map.rs",
                            "Line": 323,
                            "StartOffset": 8793,
                            "EndOffset": 8809,
                            "Content": "type Output = V;"
                        },
                        "Target": {
                            "Exported": false,
                            "TypeKind": "type-parameter",
                            "ModPath": "ahash@0.8.11",
                            "PkgPath": "ahash::hash_map",
                            "Name": "Target",
                            "File": "hash_map.rs",
                            "Line": 279,
                            "StartOffset": 7995,
                            "EndOffset": 8026,
                            "Content": "type Target = HashMap\u003cK, V, S\u003e;"
                        },
                        "Value": {
                            "Exported": false,
                            "TypeKind": "type-parameter",
                            "ModPath": "ahash@0.8.11",
                            "PkgPath": "ahash::hash_map",
                            "Name": "Value",
                            "File": "hash_map.rs",
                            "Line": 450,
                            "StartOffset": 12391,
                            "EndOffset": 12407,
                            "Content": "type Value = ();"
                        }
                    },
                    "Vars": {
                        "hash_map": {
                            "IsExported": false,
                            "IsConst": false,
                            "IsPointer": false,
                            "ModPath": "ahash@0.8.11",
                            "PkgPath": "ahash::hash_map",
                            "Name": "hash_map",
                            "File": "hash_map.rs",
                            "Line": 436,
                            "StartOffset": 11788,
                            "EndOffset": 11838,
                            "Content": "let hash_map = HashMap::deserialize(deserializer);"
                        },
                        "mut deserialization": {
                            "IsExported": false,
                            "IsConst": false,
                            "IsPointer": false,
                            "ModPath": "ahash@0.8.11",
                            "PkgPath": "ahash::hash_map",
                            "Name": "mut deserialization",
                            "File": "hash_map.rs",
                            "Line": 492,
                            "StartOffset": 13541,
                            "EndOffset": 13636,
                            "Content": "let mut deserialization: AHashMap\u003cString, u64\u003e = serde_json::from_str(\u0026serialization).unwrap();"
                        },
                        "mut deserializer": {
                            "IsExported": false,
                            "IsConst": false,
                            "IsPointer": false,
                            "ModPath": "ahash@0.8.11",
                            "PkgPath": "ahash::hash_map",
                            "Name": "mut deserializer",
                            "File": "hash_map.rs",
                            "Line": 497,
                            "StartOffset": 13800,
                            "EndOffset": 13874,
                            "Content": "let mut deserializer = serde_json::Deserializer::from_str(\u0026serialization);"
                        },
                        "mut inner": {
                            "IsExported": false,
                            "IsConst": false,
                            "IsPointer": false,
                            "ModPath": "ahash@0.8.11",
                            "PkgPath": "ahash::hash_map",
                            "Name": "mut inner",
                            "File": "hash_map.rs",
                            "Line": 354,
                            "StartOffset": 9518,
                            "EndOffset": 9575,
                            "Content": "let mut inner = HashMap::with_hasher(RandomState::new());"
                        },
                        "mut map": {
                            "IsExported": false,
                            "IsConst": false,
                            "IsPointer": false,
                            "ModPath": "ahash@0.8.11",
                            "PkgPath": "ahash::hash_map",
                            "Name": "mut map",
                            "File": "hash_map.rs",
                            "Line": 480,
                            "StartOffset": 13126,
                            "EndOffset": 13182,
                            "Content": "let mut map: AHashMap\u003cString, String\u003e = AHashMap::new();"
                        },
                        "mut serialization": {
                            "IsExported": false,
                            "IsConst": false,
                            "IsPointer": false,
                            "ModPath": "ahash@0.8.11",
                            "PkgPath": "ahash::hash_map",
                            "Name": "mut serialization",
                            "File": "hash_map.rs",
                            "Line": 491,
                            "StartOffset": 13499,
                            "EndOffset": 13560,
                            "Content": "let mut serialization = serde_json::to_string(\u0026map).unwrap();"
                        }
                    }
                }
            },
            "Dependencies": {},
            "Files": {
                "hash_map.rs": {
                    "Path": "hash_map.rs"
                }
            }
        },
        "bytes@1.6.0": {
            "Language": "rust",
            "Version": "1.6.0",
            "Name": "bytes",
            "Dir": "",
            "Packages": {
                "bytes::bytes": {
                    "IsMain": false,
                    "IsTest": false,
                    "PkgPath": "bytes::bytes",
                    "Functions": {
                        "_split_off_must_use": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "_split_off_must_use",
                            "File": "bytes.rs",
                            "Line": 1310,
                            "StartOffset": -1,
                            "EndOffset": 36589,
                            "Content": "/// ```compile_fail\n/// use bytes::Bytes;\n/// #[deny(unused_must_use)]\n/// {\n///     let mut b1 = Bytes::from(\"hello world\");\n///     b1.split_off(6);\n/// }\n/// ```\nfn _split_off_must_use() {}"
                        },
                        "_split_to_must_use": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "_split_to_must_use",
                            "File": "bytes.rs",
                            "Line": 1300,
                            "StartOffset": -1,
                            "EndOffset": 36395,
                            "Content": "/// ```compile_fail\n/// use bytes::Bytes;\n/// #[deny(unused_must_use)]\n/// {\n///     let mut b1 = Bytes::from(\"hello world\");\n///     b1.split_to(6);\n/// }\n/// ```\nfn _split_to_must_use() {}"
                        },
                        "advance": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "advance",
                            "File": "bytes.rs",
                            "Line": 569,
                            "StartOffset": 16315,
                            "EndOffset": 16583,
                            "Content": "#[inline]\n    fn advance(\u0026mut self, cnt: usize) {\n        assert!(\n            cnt \u003c= self.len(),\n            \"cannot advance past `remaining`: {:?} \u003c= {:?}\",\n            cnt,\n            self.len(),\n        );\n\n        unsafe {\n            self.inc_start(cnt);\n        }\n    }"
                        },
                        "as_ref": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "as_ref",
                            "File": "bytes.rs",
                            "Line": 604,
                            "StartOffset": 16991,
                            "EndOffset": 17067,
                            "Content": "#[inline]\n    fn as_ref(\u0026self) -\u003e \u0026[u8] {\n        self.as_slice()\n    }"
                        },
                        "as_slice": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "as_slice",
                            "File": "bytes.rs",
                            "Line": 526,
                            "StartOffset": 15363,
                            "EndOffset": 15413,
                            "Content": "#[inline]\n    fn as_slice(\u0026self) -\u003e \u0026[u8] {\n        unsafe { slice::from_raw_parts(self.ptr, self.len) }\n    }"
                        },
                        "borrow": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "borrow",
                            "File": "bytes.rs",
                            "Line": 620,
                            "StartOffset": 17251,
                            "EndOffset": 17314,
                            "Content": "fn borrow(\u0026self) -\u003e \u0026[u8] {\n        self.as_slice()\n    }"
                        },
                        "bytes_cloning_vec": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "bytes_cloning_vec",
                            "File": "bytes.rs",
                            "Line": 1327,
                            "StartOffset": 36700,
                            "EndOffset": 37416,
                            "Content": "#[test]\n    fn bytes_cloning_vec() {\n        loom::model(|| {\n            let a = Bytes::from(b\"abcdefgh\".to_vec());\n            let addr = a.as_ptr() as usize;\n\n            // test the Bytes::clone is Sync by putting it in an Arc\n            let a1 = Arc::new(a);\n            let a2 = a1.clone();\n\n            let t1 = thread::spawn(move || {\n                let b: Bytes = (*a1).clone();\n                assert_eq!(b.as_ptr() as usize, addr);\n            });\n\n            let t2 = thread::spawn(move || {\n                let b: Bytes = (*a2).clone();\n                assert_eq!(b.as_ptr() as usize, addr);\n            });\n\n            t1.join().unwrap();\n            t2.join().unwrap();\n        });\n    }"
                        },
                        "chunk": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "chunk",
                            "File": "bytes.rs",
                            "Line": 564,
                            "StartOffset": 16239,
                            "EndOffset": 16286,
                            "Content": "#[inline]\n    fn chunk(\u0026self) -\u003e \u0026[u8] {\n        self.as_slice()\n    }"
                        },
                        "clear": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "clear",
                            "File": "bytes.rs",
                            "Line": 493,
                            "StartOffset": 14741,
                            "EndOffset": 15036,
                            "Content": "/// Clears the buffer, removing all data.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use bytes::Bytes;\n    ///\n    /// let mut buf = Bytes::from(\u0026b\"hello world\"[..]);\n    /// buf.clear();\n    /// assert!(buf.is_empty());\n    /// ```\n    #[inline]\n    pub fn clear(\u0026mut self) {\n        self.truncate(0);\n    }"
                        },
                        "clone": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "clone",
                            "File": "bytes.rs",
                            "Line": 552,
                            "StartOffset": 15996,
                            "EndOffset": 16065,
                            "Content": "#[inline]\n    fn clone(\u0026self) -\u003e Bytes {\n        unsafe { (self.vtable.clone)(\u0026self.data, self.ptr, self.len) }\n    }"
                        },
                        "cmp": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "cmp",
                            "File": "bytes.rs",
                            "Line": 664,
                            "StartOffset": 18153,
                            "EndOffset": 18227,
                            "Content": "fn cmp(\u0026self, other: \u0026Bytes) -\u003e cmp::Ordering {\n        self.as_slice().cmp(other.as_slice())\n    }"
                        },
                        "copy_from_slice": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "copy_from_slice",
                            "File": "bytes.rs",
                            "Line": 235,
                            "StartOffset": 7536,
                            "EndOffset": 7648,
                            "Content": "/// Creates `Bytes` instance from slice, by copying it.\n    pub fn copy_from_slice(data: \u0026[u8]) -\u003e Self {\n        data.to_vec().into()\n    }"
                        },
                        "copy_to_bytes": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "copy_to_bytes",
                            "File": "bytes.rs",
                            "Line": 583,
                            "StartOffset": 16598,
                            "EndOffset": 16847,
                            "Content": "fn copy_to_bytes(\u0026mut self, len: usize) -\u003e Self {\n        if len == self.remaining() {\n            core::mem::replace(self, Bytes::new())\n        } else {\n            let ret = self.slice(..len);\n            self.advance(len);\n            ret\n        }\n    }"
                        },
                        "default": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "default",
                            "File": "bytes.rs",
                            "Line": 812,
                            "StartOffset": 21508,
                            "EndOffset": 21576,
                            "Content": "#[inline]\n    fn default() -\u003e Bytes {\n        Bytes::new()\n    }"
                        },
                        "deref": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "deref",
                            "File": "bytes.rs",
                            "Line": 597,
                            "StartOffset": 16912,
                            "EndOffset": 16959,
                            "Content": "#[inline]\n    fn deref(\u0026self) -\u003e \u0026[u8] {\n        self.as_slice()\n    }"
                        },
                        "drop": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "drop",
                            "File": "bytes.rs",
                            "Line": 1080,
                            "StartOffset": 28768,
                            "EndOffset": 28817,
                            "Content": "fn drop(\u0026mut self) {\n        unsafe { dealloc(self.buf, Layout::from_size_align(self.cap, 1).unwrap()) }\n    }"
                        },
                        "eq": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "eq",
                            "File": "bytes.rs",
                            "Line": 744,
                            "StartOffset": 19994,
                            "EndOffset": 20073,
                            "Content": "fn eq(\u0026self, other: \u0026String) -\u003e bool {\n        *self == other[..]\n    }"
                        },
                        "fmt": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "fmt",
                            "File": "bytes.rs",
                            "Line": 911,
                            "StartOffset": 23997,
                            "EndOffset": 24233,
                            "Content": "fn fmt(\u0026self, f: \u0026mut fmt::Formatter\u003c'_\u003e) -\u003e fmt::Result {\n        f.debug_struct(\"Vtable\")\n            .field(\"clone\", \u0026(self.clone as *const ()))\n            .field(\"drop\", \u0026(self.drop as *const ()))\n            .finish()\n    }"
                        },
                        "free_boxed_slice": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "free_boxed_slice",
                            "File": "bytes.rs",
                            "Line": 1065,
                            "StartOffset": -1,
                            "EndOffset": 28514,
                            "Content": "unsafe fn free_boxed_slice(buf: *mut u8, offset: *const u8, len: usize) {\n    let cap = (offset as usize - buf as usize) + len;\n    dealloc(buf, Layout::from_size_align(cap, 1).unwrap())\n}"
                        },
                        "from": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "from",
                            "File": "bytes.rs",
                            "Line": 865,
                            "StartOffset": 22773,
                            "EndOffset": 23636,
                            "Content": "fn from(slice: Box\u003c[u8]\u003e) -\u003e Bytes {\n        // Box\u003c[u8]\u003e doesn't contain a heap allocation for empty slices,\n        // so the pointer isn't aligned enough for the KIND_VEC stashing to\n        // work.\n        if slice.is_empty() {\n            return Bytes::new();\n        }\n\n        let len = slice.len();\n        let ptr = Box::into_raw(slice) as *mut u8;\n\n        if ptr as usize \u0026 0x1 == 0 {\n            let data = ptr_map(ptr, |addr| addr | KIND_VEC);\n            Bytes {\n                ptr,\n                len,\n                data: AtomicPtr::new(data.cast()),\n                vtable: \u0026PROMOTABLE_EVEN_VTABLE,\n            }\n        } else {\n            Bytes {\n                ptr,\n                len,\n                data: AtomicPtr::new(ptr.cast()),\n                vtable: \u0026PROMOTABLE_ODD_VTABLE,\n            }\n        }\n    }"
                        },
                        "from_iter": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "from_iter",
                            "File": "bytes.rs",
                            "Line": 644,
                            "StartOffset": 17707,
                            "EndOffset": 17811,
                            "Content": "fn from_iter\u003cT: IntoIterator\u003cItem = u8\u003e\u003e(into_iter: T) -\u003e Self {\n        Vec::from_iter(into_iter).into()\n    }"
                        },
                        "from_static": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "from_static",
                            "File": "bytes.rs",
                            "Line": 149,
                            "StartOffset": 5265,
                            "EndOffset": 5890,
                            "Content": "/// Creates a new `Bytes` from a static slice.\n    ///\n    /// The returned `Bytes` will point directly to the static slice. There is\n    /// no allocating or copying.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use bytes::Bytes;\n    ///\n    /// let b = Bytes::from_static(b\"hello\");\n    /// assert_eq!(\u0026b[..], b\"hello\");\n    /// ```\n    #[inline]\n    #[cfg(not(all(loom, test)))]\n    pub const fn from_static(bytes: \u0026'static [u8]) -\u003e Self {\n        Bytes {\n            ptr: bytes.as_ptr(),\n            len: bytes.len(),\n            data: AtomicPtr::new(ptr::null_mut()),\n            vtable: \u0026STATIC_VTABLE,\n        }\n    }"
                        },
                        "hash": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "hash",
                            "File": "bytes.rs",
                            "Line": 611,
                            "StartOffset": 17099,
                            "EndOffset": 17206,
                            "Content": "fn hash\u003cH\u003e(\u0026self, state: \u0026mut H)\n    where\n        H: hash::Hasher,\n    {\n        self.as_slice().hash(state);\n    }"
                        },
                        "inc_start": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "inc_start",
                            "File": "bytes.rs",
                            "Line": 531,
                            "StartOffset": 15479,
                            "EndOffset": 15709,
                            "Content": "#[inline]\n    unsafe fn inc_start(\u0026mut self, by: usize) {\n        // should already be asserted, but debug assert for tests\n        debug_assert!(self.len \u003e= by, \"internal: inc_start out of bounds\");\n        self.len -= by;\n        self.ptr = self.ptr.add(by);\n    }"
                        },
                        "into_iter": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "into_iter",
                            "File": "bytes.rs",
                            "Line": 629,
                            "StartOffset": 17433,
                            "EndOffset": 17478,
                            "Content": "fn into_iter(self) -\u003e Self::IntoIter {\n        IntoIter::new(self)\n    }"
                        },
                        "is_empty": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "is_empty",
                            "File": "bytes.rs",
                            "Line": 198,
                            "StartOffset": 6480,
                            "EndOffset": 6748,
                            "Content": "/// Returns true if the `Bytes` has a length of 0.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use bytes::Bytes;\n    ///\n    /// let b = Bytes::new();\n    /// assert!(b.is_empty());\n    /// ```\n    #[inline]\n    pub const fn is_empty(\u0026self) -\u003e bool {\n        self.len == 0\n    }"
                        },
                        "is_unique": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "is_unique",
                            "File": "bytes.rs",
                            "Line": 213,
                            "StartOffset": 6775,
                            "EndOffset": 7476,
                            "Content": "/// Returns true if this is the only reference to the data.\n    ///\n    /// Always returns false if the data is backed by a static slice.\n    ///\n    /// The result of this method may be invalidated immediately if another\n    /// thread clones this value while this is being called. Ensure you have\n    /// unique access to this value (`\u0026mut Bytes`) first if you need to be\n    /// certain the result is valid (i.e. for safety reasons)\n    /// # Examples\n    ///\n    /// ```\n    /// use bytes::Bytes;\n    ///\n    /// let a = Bytes::from(vec![1, 2, 3]);\n    /// assert!(a.is_unique());\n    /// let b = a.clone();\n    /// assert!(!a.is_unique());\n    /// ```\n    pub fn is_unique(\u0026self) -\u003e bool {\n        unsafe { (self.vtable.is_unique)(\u0026self.data) }\n    }"
                        },
                        "len": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "len",
                            "File": "bytes.rs",
                            "Line": 183,
                            "StartOffset": 6171,
                            "EndOffset": 6458,
                            "Content": "/// Returns the number of bytes contained in this `Bytes`.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use bytes::Bytes;\n    ///\n    /// let b = Bytes::from(\u0026b\"hello\"[..]);\n    /// assert_eq!(b.len(), 5);\n    /// ```\n    #[inline]\n    pub const fn len(\u0026self) -\u003e usize {\n        self.len\n    }"
                        },
                        "new": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "new",
                            "File": "bytes.rs",
                            "Line": 122,
                            "StartOffset": 4585,
                            "EndOffset": 5096,
                            "Content": "/// Creates a new empty `Bytes`.\n    ///\n    /// This will not allocate and the returned `Bytes` handle will be empty.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use bytes::Bytes;\n    ///\n    /// let b = Bytes::new();\n    /// assert_eq!(\u0026b[..], b\"\");\n    /// ```\n    #[inline]\n    #[cfg(not(all(loom, test)))]\n    pub const fn new() -\u003e Self {\n        // Make it a named const to work around\n        // \"unsizing casts are not allowed in const fn\"\n        const EMPTY: \u0026[u8] = \u0026[];\n        Bytes::from_static(EMPTY)\n    }"
                        },
                        "partial_cmp": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "partial_cmp",
                            "File": "bytes.rs",
                            "Line": 804,
                            "StartOffset": 21380,
                            "EndOffset": 21451,
                            "Content": "fn partial_cmp(\u0026self, other: \u0026\u0026'a T) -\u003e Option\u003ccmp::Ordering\u003e {\n        self.partial_cmp(\u0026**other)\n    }"
                        },
                        "promotable_even_clone": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "promotable_even_clone",
                            "File": "bytes.rs",
                            "Line": 962,
                            "StartOffset": -1,
                            "EndOffset": 25798,
                            "Content": "unsafe fn promotable_even_clone(data: \u0026AtomicPtr\u003c()\u003e, ptr: *const u8, len: usize) -\u003e Bytes {\n    let shared = data.load(Ordering::Acquire);\n    let kind = shared as usize \u0026 KIND_MASK;\n\n    if kind == KIND_ARC {\n        shallow_clone_arc(shared.cast(), ptr, len)\n    } else {\n        debug_assert_eq!(kind, KIND_VEC);\n        let buf = ptr_map(shared.cast(), |addr| addr \u0026 !KIND_MASK);\n        shallow_clone_vec(data, shared, buf, ptr, len)\n    }\n}"
                        },
                        "promotable_even_drop": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "promotable_even_drop",
                            "File": "bytes.rs",
                            "Line": 1007,
                            "StartOffset": -1,
                            "EndOffset": 27101,
                            "Content": "unsafe fn promotable_even_drop(data: \u0026mut AtomicPtr\u003c()\u003e, ptr: *const u8, len: usize) {\n    data.with_mut(|shared| {\n        let shared = *shared;\n        let kind = shared as usize \u0026 KIND_MASK;\n\n        if kind == KIND_ARC {\n            release_shared(shared.cast());\n        } else {\n            debug_assert_eq!(kind, KIND_VEC);\n            let buf = ptr_map(shared.cast(), |addr| addr \u0026 !KIND_MASK);\n            free_boxed_slice(buf, ptr, len);\n        }\n    });\n}"
                        },
                        "promotable_even_to_vec": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "promotable_even_to_vec",
                            "File": "bytes.rs",
                            "Line": 1001,
                            "StartOffset": -1,
                            "EndOffset": 26633,
                            "Content": "unsafe fn promotable_even_to_vec(data: \u0026AtomicPtr\u003c()\u003e, ptr: *const u8, len: usize) -\u003e Vec\u003cu8\u003e {\n    promotable_to_vec(data, ptr, len, |shared| {\n        ptr_map(shared.cast(), |addr| addr \u0026 !KIND_MASK)\n    })\n}"
                        },
                        "promotable_is_unique": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "promotable_is_unique",
                            "File": "bytes.rs",
                            "Line": 1053,
                            "StartOffset": -1,
                            "EndOffset": 28377,
                            "Content": "unsafe fn promotable_is_unique(data: \u0026AtomicPtr\u003c()\u003e) -\u003e bool {\n    let shared = data.load(Ordering::Acquire);\n    let kind = shared as usize \u0026 KIND_MASK;\n\n    if kind == KIND_ARC {\n        let ref_cnt = (*shared.cast::\u003cShared\u003e()).ref_cnt.load(Ordering::Relaxed);\n        ref_cnt == 1\n    } else {\n        true\n    }\n}"
                        },
                        "promotable_odd_clone": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "promotable_odd_clone",
                            "File": "bytes.rs",
                            "Line": 1022,
                            "StartOffset": -1,
                            "EndOffset": 27491,
                            "Content": "unsafe fn promotable_odd_clone(data: \u0026AtomicPtr\u003c()\u003e, ptr: *const u8, len: usize) -\u003e Bytes {\n    let shared = data.load(Ordering::Acquire);\n    let kind = shared as usize \u0026 KIND_MASK;\n\n    if kind == KIND_ARC {\n        shallow_clone_arc(shared as _, ptr, len)\n    } else {\n        debug_assert_eq!(kind, KIND_VEC);\n        shallow_clone_vec(data, shared, shared.cast(), ptr, len)\n    }\n}"
                        },
                        "promotable_odd_drop": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "promotable_odd_drop",
                            "File": "bytes.rs",
                            "Line": 1038,
                            "StartOffset": -1,
                            "EndOffset": 28056,
                            "Content": "unsafe fn promotable_odd_drop(data: \u0026mut AtomicPtr\u003c()\u003e, ptr: *const u8, len: usize) {\n    data.with_mut(|shared| {\n        let shared = *shared;\n        let kind = shared as usize \u0026 KIND_MASK;\n\n        if kind == KIND_ARC {\n            release_shared(shared.cast());\n        } else {\n            debug_assert_eq!(kind, KIND_VEC);\n\n            free_boxed_slice(shared.cast(), ptr, len);\n        }\n    });\n}"
                        },
                        "promotable_odd_to_vec": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "promotable_odd_to_vec",
                            "File": "bytes.rs",
                            "Line": 1034,
                            "StartOffset": -1,
                            "EndOffset": 27595,
                            "Content": "unsafe fn promotable_odd_to_vec(data: \u0026AtomicPtr\u003c()\u003e, ptr: *const u8, len: usize) -\u003e Vec\u003cu8\u003e {\n    promotable_to_vec(data, ptr, len, |shared| shared.cast())\n}"
                        },
                        "promotable_to_vec": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "promotable_to_vec",
                            "File": "bytes.rs",
                            "Line": 975,
                            "StartOffset": -1,
                            "EndOffset": 26422,
                            "Content": "unsafe fn promotable_to_vec(\n    data: \u0026AtomicPtr\u003c()\u003e,\n    ptr: *const u8,\n    len: usize,\n    f: fn(*mut ()) -\u003e *mut u8,\n) -\u003e Vec\u003cu8\u003e {\n    let shared = data.load(Ordering::Acquire);\n    let kind = shared as usize \u0026 KIND_MASK;\n\n    if kind == KIND_ARC {\n        shared_to_vec_impl(shared.cast(), ptr, len)\n    } else {\n        // If Bytes holds a Vec, then the offset must be 0.\n        debug_assert_eq!(kind, KIND_VEC);\n\n        let buf = f(shared);\n\n        let cap = (ptr as usize - buf as usize) + len;\n\n        // Copy back buffer\n        ptr::copy(ptr, buf, len);\n\n        Vec::from_raw_parts(buf, len, cap)\n    }\n}"
                        },
                        "ptr_map": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "ptr_map",
                            "File": "bytes.rs",
                            "Line": 1288,
                            "StartOffset": -1,
                            "EndOffset": 36169,
                            "Content": "#[cfg(not(miri))]\nfn ptr_map\u003cF\u003e(ptr: *mut u8, f: F) -\u003e *mut u8\nwhere\n    F: FnOnce(usize) -\u003e usize,\n{\n    let old_addr = ptr as usize;\n    let new_addr = f(old_addr);\n    new_addr as *mut u8\n}"
                        },
                        "release_shared": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "release_shared",
                            "File": "bytes.rs",
                            "Line": 1239,
                            "StartOffset": -1,
                            "EndOffset": 35405,
                            "Content": "unsafe fn release_shared(ptr: *mut Shared) {\n    // `Shared` storage... follow the drop steps from Arc.\n    if (*ptr).ref_cnt.fetch_sub(1, Ordering::Release) != 1 {\n        return;\n    }\n\n    // This fence is needed to prevent reordering of use of the data and\n    // deletion of the data.  Because it is marked `Release`, the decreasing\n    // of the reference count synchronizes with this `Acquire` fence. This\n    // means that use of the data happens before decreasing the reference\n    // count, which happens before this fence, which happens before the\n    // deletion of the data.\n    //\n    // As explained in the [Boost documentation][1],\n    //\n    // \u003e It is important to enforce any possible access to the object in one\n    // \u003e thread (through an existing reference) to *happen before* deleting\n    // \u003e the object in a different thread. This is achieved by a \"release\"\n    // \u003e operation after dropping a reference (any access to the object\n    // \u003e through this reference must obviously happened before), and an\n    // \u003e \"acquire\" operation before deleting the object.\n    //\n    // [1]: (www.boost.org/doc/libs/1_55_0/doc/html/atomic/usage_examples.html)\n    //\n    // Thread sanitizer does not support atomic fences. Use an atomic load\n    // instead.\n    (*ptr).ref_cnt.load(Ordering::Acquire);\n\n    // Drop the data\n    drop(Box::from_raw(ptr));\n}"
                        },
                        "remaining": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "remaining",
                            "File": "bytes.rs",
                            "Line": 559,
                            "StartOffset": 16144,
                            "EndOffset": 16215,
                            "Content": "#[inline]\n    fn remaining(\u0026self) -\u003e usize {\n        self.len()\n    }"
                        },
                        "shallow_clone_arc": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "shallow_clone_arc",
                            "File": "bytes.rs",
                            "Line": 1152,
                            "StartOffset": -1,
                            "EndOffset": 31409,
                            "Content": "unsafe fn shallow_clone_arc(shared: *mut Shared, ptr: *const u8, len: usize) -\u003e Bytes {\n    let old_size = (*shared).ref_cnt.fetch_add(1, Ordering::Relaxed);\n\n    if old_size \u003e usize::MAX \u003e\u003e 1 {\n        crate::abort();\n    }\n\n    Bytes {\n        ptr,\n        len,\n        data: AtomicPtr::new(shared as _),\n        vtable: \u0026SHARED_VTABLE,\n    }\n}"
                        },
                        "shallow_clone_vec": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "shallow_clone_vec",
                            "File": "bytes.rs",
                            "Line": 1167,
                            "StartOffset": -1,
                            "EndOffset": 34061,
                            "Content": "#[cold]\nunsafe fn shallow_clone_vec(\n    atom: \u0026AtomicPtr\u003c()\u003e,\n    ptr: *const (),\n    buf: *mut u8,\n    offset: *const u8,\n    len: usize,\n) -\u003e Bytes {\n    // If  the buffer is still tracked in a `Vec\u003cu8\u003e`. It is time to\n    // promote the vec to an `Arc`. This could potentially be called\n    // concurrently, so some care must be taken.\n\n    // First, allocate a new `Shared` instance containing the\n    // `Vec` fields. It's important to note that `ptr`, `len`,\n    // and `cap` cannot be mutated without having `\u0026mut self`.\n    // This means that these fields will not be concurrently\n    // updated and since the buffer hasn't been promoted to an\n    // `Arc`, those three fields still are the components of the\n    // vector.\n    let shared = Box::new(Shared {\n        buf,\n        cap: (offset as usize - buf as usize) + len,\n        // Initialize refcount to 2. One for this reference, and one\n        // for the new clone that will be returned from\n        // `shallow_clone`.\n        ref_cnt: AtomicUsize::new(2),\n    });\n\n    let shared = Box::into_raw(shared);\n\n    // The pointer should be aligned, so this assert should\n    // always succeed.\n    debug_assert!(\n        0 == (shared as usize \u0026 KIND_MASK),\n        \"internal: Box\u003cShared\u003e should have an aligned pointer\",\n    );\n\n    // Try compare \u0026 swapping the pointer into the `arc` field.\n    // `Release` is used synchronize with other threads that\n    // will load the `arc` field.\n    //\n    // If the `compare_exchange` fails, then the thread lost the\n    // race to promote the buffer to shared. The `Acquire`\n    // ordering will synchronize with the `compare_exchange`\n    // that happened in the other thread and the `Shared`\n    // pointed to by `actual` will be visible.\n    match atom.compare_exchange(ptr as _, shared as _, Ordering::AcqRel, Ordering::Acquire) {\n        Ok(actual) =\u003e {\n            debug_assert!(actual as usize == ptr as usize);\n            // The upgrade was successful, the new handle can be\n            // returned.\n            Bytes {\n                ptr: offset,\n                len,\n                data: AtomicPtr::new(shared as _),\n                vtable: \u0026SHARED_VTABLE,\n            }\n        }\n        Err(actual) =\u003e {\n            // The upgrade failed, a concurrent clone happened. Release\n            // the allocation that was made in this thread, it will not\n            // be needed.\n            let shared = Box::from_raw(shared);\n            mem::forget(*shared);\n\n            // Buffer already promoted to shared storage, so increment ref\n            // count.\n            shallow_clone_arc(actual as _, offset, len)\n        }\n    }\n}"
                        },
                        "shared_clone": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "shared_clone",
                            "File": "bytes.rs",
                            "Line": 1102,
                            "StartOffset": -1,
                            "EndOffset": 29640,
                            "Content": "unsafe fn shared_clone(data: \u0026AtomicPtr\u003c()\u003e, ptr: *const u8, len: usize) -\u003e Bytes {\n    let shared = data.load(Ordering::Relaxed);\n    shallow_clone_arc(shared as _, ptr, len)\n}"
                        },
                        "shared_drop": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "shared_drop",
                            "File": "bytes.rs",
                            "Line": 1146,
                            "StartOffset": -1,
                            "EndOffset": 31059,
                            "Content": "unsafe fn shared_drop(data: \u0026mut AtomicPtr\u003c()\u003e, _ptr: *const u8, _len: usize) {\n    data.with_mut(|shared| {\n        release_shared(shared.cast());\n    });\n}"
                        },
                        "shared_is_unique": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "shared_is_unique",
                            "File": "bytes.rs",
                            "Line": 1140,
                            "StartOffset": -1,
                            "EndOffset": 30891,
                            "Content": "pub(crate) unsafe fn shared_is_unique(data: \u0026AtomicPtr\u003c()\u003e) -\u003e bool {\n    let shared = data.load(Ordering::Acquire);\n    let ref_cnt = (*shared.cast::\u003cShared\u003e()).ref_cnt.load(Ordering::Relaxed);\n    ref_cnt == 1\n}"
                        },
                        "shared_to_vec": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "shared_to_vec",
                            "File": "bytes.rs",
                            "Line": 1136,
                            "StartOffset": -1,
                            "EndOffset": 30623,
                            "Content": "unsafe fn shared_to_vec(data: \u0026AtomicPtr\u003c()\u003e, ptr: *const u8, len: usize) -\u003e Vec\u003cu8\u003e {\n    shared_to_vec_impl(data.load(Ordering::Relaxed).cast(), ptr, len)\n}"
                        },
                        "shared_to_vec_impl": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "shared_to_vec_impl",
                            "File": "bytes.rs",
                            "Line": 1107,
                            "StartOffset": -1,
                            "EndOffset": 30527,
                            "Content": "unsafe fn shared_to_vec_impl(shared: *mut Shared, ptr: *const u8, len: usize) -\u003e Vec\u003cu8\u003e {\n    // Check that the ref_cnt is 1 (unique).\n    //\n    // If it is unique, then it is set to 0 with AcqRel fence for the same\n    // reason in release_shared.\n    //\n    // Otherwise, we take the other branch and call release_shared.\n    if (*shared)\n        .ref_cnt\n        .compare_exchange(1, 0, Ordering::AcqRel, Ordering::Relaxed)\n        .is_ok()\n    {\n        let buf = (*shared).buf;\n        let cap = (*shared).cap;\n\n        // Deallocate Shared\n        drop(Box::from_raw(shared as *mut mem::ManuallyDrop\u003cShared\u003e));\n\n        // Copy back buffer\n        ptr::copy(ptr, buf, len);\n\n        Vec::from_raw_parts(buf, len, cap)\n    } else {\n        let v = slice::from_raw_parts(ptr, len).to_vec();\n        release_shared(shared);\n        v\n    }\n}"
                        },
                        "slice": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "slice",
                            "File": "bytes.rs",
                            "Line": 240,
                            "StartOffset": 7682,
                            "EndOffset": 9305,
                            "Content": "/// Returns a slice of self for the provided range.\n    ///\n    /// This will increment the reference count for the underlying memory and\n    /// return a new `Bytes` handle set to the slice.\n    ///\n    /// This operation is `O(1)`.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use bytes::Bytes;\n    ///\n    /// let a = Bytes::from(\u0026b\"hello world\"[..]);\n    /// let b = a.slice(2..5);\n    ///\n    /// assert_eq!(\u0026b[..], b\"llo\");\n    /// ```\n    ///\n    /// # Panics\n    ///\n    /// Requires that `begin \u003c= end` and `end \u003c= self.len()`, otherwise slicing\n    /// will panic.\n    pub fn slice(\u0026self, range: impl RangeBounds\u003cusize\u003e) -\u003e Self {\n        use core::ops::Bound;\n\n        let len = self.len();\n\n        let begin = match range.start_bound() {\n            Bound::Included(\u0026n) =\u003e n,\n            Bound::Excluded(\u0026n) =\u003e n.checked_add(1).expect(\"out of range\"),\n            Bound::Unbounded =\u003e 0,\n        };\n\n        let end = match range.end_bound() {\n            Bound::Included(\u0026n) =\u003e n.checked_add(1).expect(\"out of range\"),\n            Bound::Excluded(\u0026n) =\u003e n,\n            Bound::Unbounded =\u003e len,\n        };\n\n        assert!(\n            begin \u003c= end,\n            \"range start must not be greater than end: {:?} \u003c= {:?}\",\n            begin,\n            end,\n        );\n        assert!(\n            end \u003c= len,\n            \"range end out of bounds: {:?} \u003c= {:?}\",\n            end,\n            len,\n        );\n\n        if end == begin {\n            return Bytes::new();\n        }\n\n        let mut ret = self.clone();\n\n        ret.len = end - begin;\n        ret.ptr = unsafe { ret.ptr.add(begin) };\n\n        ret\n    }"
                        },
                        "slice_ref": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "slice_ref",
                            "File": "bytes.rs",
                            "Line": 304,
                            "StartOffset": 9322,
                            "EndOffset": 11166,
                            "Content": "/// Returns a slice of self that is equivalent to the given `subset`.\n    ///\n    /// When processing a `Bytes` buffer with other tools, one often gets a\n    /// `\u0026[u8]` which is in fact a slice of the `Bytes`, i.e. a subset of it.\n    /// This function turns that `\u0026[u8]` into another `Bytes`, as if one had\n    /// called `self.slice()` with the offsets that correspond to `subset`.\n    ///\n    /// This operation is `O(1)`.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use bytes::Bytes;\n    ///\n    /// let bytes = Bytes::from(\u0026b\"012345678\"[..]);\n    /// let as_slice = bytes.as_ref();\n    /// let subset = \u0026as_slice[2..6];\n    /// let subslice = bytes.slice_ref(\u0026subset);\n    /// assert_eq!(\u0026subslice[..], b\"2345\");\n    /// ```\n    ///\n    /// # Panics\n    ///\n    /// Requires that the given `sub` slice is in fact contained within the\n    /// `Bytes` buffer; otherwise this function will panic.\n    pub fn slice_ref(\u0026self, subset: \u0026[u8]) -\u003e Self {\n        // Empty slice and empty Bytes may have their pointers reset\n        // so explicitly allow empty slice to be a subslice of any slice.\n        if subset.is_empty() {\n            return Bytes::new();\n        }\n\n        let bytes_p = self.as_ptr() as usize;\n        let bytes_len = self.len();\n\n        let sub_p = subset.as_ptr() as usize;\n        let sub_len = subset.len();\n\n        assert!(\n            sub_p \u003e= bytes_p,\n            \"subset pointer ({:p}) is smaller than self pointer ({:p})\",\n            subset.as_ptr(),\n            self.as_ptr(),\n        );\n        assert!(\n            sub_p + sub_len \u003c= bytes_p + bytes_len,\n            \"subset is out of bounds: self = ({:p}, {}), subset = ({:p}, {})\",\n            self.as_ptr(),\n            bytes_len,\n            subset.as_ptr(),\n            sub_len,\n        );\n\n        let sub_offset = sub_p - bytes_p;\n\n        self.slice(sub_offset..(sub_offset + sub_len))\n    }"
                        },
                        "split_off": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "split_off",
                            "File": "bytes.rs",
                            "Line": 362,
                            "StartOffset": 11226,
                            "EndOffset": 12394,
                            "Content": "/// Splits the bytes into two at the given index.\n    ///\n    /// Afterwards `self` contains elements `[0, at)`, and the returned `Bytes`\n    /// contains elements `[at, len)`.\n    ///\n    /// This is an `O(1)` operation that just increases the reference count and\n    /// sets a few indices.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use bytes::Bytes;\n    ///\n    /// let mut a = Bytes::from(\u0026b\"hello world\"[..]);\n    /// let b = a.split_off(5);\n    ///\n    /// assert_eq!(\u0026a[..], b\"hello\");\n    /// assert_eq!(\u0026b[..], b\" world\");\n    /// ```\n    ///\n    /// # Panics\n    ///\n    /// Panics if `at \u003e len`.\n    #[must_use = \"consider Bytes::truncate if you don't need the other half\"]\n    pub fn split_off(\u0026mut self, at: usize) -\u003e Self {\n        assert!(\n            at \u003c= self.len(),\n            \"split_off out of bounds: {:?} \u003c= {:?}\",\n            at,\n            self.len(),\n        );\n\n        if at == self.len() {\n            return Bytes::new();\n        }\n\n        if at == 0 {\n            return mem::replace(self, Bytes::new());\n        }\n\n        let mut ret = self.clone();\n\n        self.len = at;\n\n        unsafe { ret.inc_start(at) };\n\n        ret\n    }"
                        },
                        "split_to": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "split_to",
                            "File": "bytes.rs",
                            "Line": 411,
                            "StartOffset": 12411,
                            "EndOffset": 13574,
                            "Content": "/// Splits the bytes into two at the given index.\n    ///\n    /// Afterwards `self` contains elements `[at, len)`, and the returned\n    /// `Bytes` contains elements `[0, at)`.\n    ///\n    /// This is an `O(1)` operation that just increases the reference count and\n    /// sets a few indices.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use bytes::Bytes;\n    ///\n    /// let mut a = Bytes::from(\u0026b\"hello world\"[..]);\n    /// let b = a.split_to(5);\n    ///\n    /// assert_eq!(\u0026a[..], b\" world\");\n    /// assert_eq!(\u0026b[..], b\"hello\");\n    /// ```\n    ///\n    /// # Panics\n    ///\n    /// Panics if `at \u003e len`.\n    #[must_use = \"consider Bytes::advance if you don't need the other half\"]\n    pub fn split_to(\u0026mut self, at: usize) -\u003e Self {\n        assert!(\n            at \u003c= self.len(),\n            \"split_to out of bounds: {:?} \u003c= {:?}\",\n            at,\n            self.len(),\n        );\n\n        if at == self.len() {\n            return mem::replace(self, Bytes::new());\n        }\n\n        if at == 0 {\n            return Bytes::new();\n        }\n\n        let mut ret = self.clone();\n\n        unsafe { self.inc_start(at) };\n\n        ret.len = at;\n        ret\n    }"
                        },
                        "static_clone": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "static_clone",
                            "File": "bytes.rs",
                            "Line": 928,
                            "StartOffset": -1,
                            "EndOffset": 24575,
                            "Content": "unsafe fn static_clone(_: \u0026AtomicPtr\u003c()\u003e, ptr: *const u8, len: usize) -\u003e Bytes {\n    let slice = slice::from_raw_parts(ptr, len);\n    Bytes::from_static(slice)\n}"
                        },
                        "static_drop": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "static_drop",
                            "File": "bytes.rs",
                            "Line": 942,
                            "StartOffset": -1,
                            "EndOffset": 24896,
                            "Content": "unsafe fn static_drop(_: \u0026mut AtomicPtr\u003c()\u003e, _: *const u8, _: usize) {\n    // nothing to drop for \u0026'static [u8]\n}"
                        },
                        "static_is_unique": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "static_is_unique",
                            "File": "bytes.rs",
                            "Line": 938,
                            "StartOffset": -1,
                            "EndOffset": 24812,
                            "Content": "fn static_is_unique(_: \u0026AtomicPtr\u003c()\u003e) -\u003e bool {\n    false\n}"
                        },
                        "static_to_vec": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "static_to_vec",
                            "File": "bytes.rs",
                            "Line": 933,
                            "StartOffset": -1,
                            "EndOffset": 24741,
                            "Content": "unsafe fn static_to_vec(_: \u0026AtomicPtr\u003c()\u003e, ptr: *const u8, len: usize) -\u003e Vec\u003cu8\u003e {\n    let slice = slice::from_raw_parts(ptr, len);\n    slice.to_vec()\n}"
                        },
                        "truncate": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "truncate",
                            "File": "bytes.rs",
                            "Line": 459,
                            "StartOffset": 13591,
                            "EndOffset": 14726,
                            "Content": "/// Shortens the buffer, keeping the first `len` bytes and dropping the\n    /// rest.\n    ///\n    /// If `len` is greater than the buffer's current length, this has no\n    /// effect.\n    ///\n    /// The [split_off](`Self::split_off()`) method can emulate `truncate`, but this causes the\n    /// excess bytes to be returned instead of dropped.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use bytes::Bytes;\n    ///\n    /// let mut buf = Bytes::from(\u0026b\"hello world\"[..]);\n    /// buf.truncate(5);\n    /// assert_eq!(buf, b\"hello\"[..]);\n    /// ```\n    #[inline]\n    pub fn truncate(\u0026mut self, len: usize) {\n        if len \u003c self.len {\n            // The Vec \"promotable\" vtables do not store the capacity,\n            // so we cannot truncate while using this repr. We *have* to\n            // promote using `split_off` so the capacity can be stored.\n            if self.vtable as *const Vtable == \u0026PROMOTABLE_EVEN_VTABLE\n                || self.vtable as *const Vtable == \u0026PROMOTABLE_ODD_VTABLE\n            {\n                drop(self.split_off(len));\n            } else {\n                self.len = len;\n            }\n        }\n    }"
                        },
                        "with_vtable": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "with_vtable",
                            "File": "bytes.rs",
                            "Line": 509,
                            "StartOffset": 15067,
                            "EndOffset": 15332,
                            "Content": "#[inline]\n    pub(crate) unsafe fn with_vtable(\n        ptr: *const u8,\n        len: usize,\n        data: AtomicPtr\u003c()\u003e,\n        vtable: \u0026'static Vtable,\n    ) -\u003e Bytes {\n        Bytes {\n            ptr,\n            len,\n            data,\n            vtable,\n        }\n    }"
                        }
                    },
                    "Types": {
                        "Bytes": {
                            "Exported": false,
                            "TypeKind": "struct",
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "Bytes",
                            "File": "bytes.rs",
                            "Line": 19,
                            "StartOffset": -1,
                            "EndOffset": 4125,
                            "Content": "/// A cheaply cloneable and sliceable chunk of contiguous memory.\n///\n/// `Bytes` is an efficient container for storing and operating on contiguous\n/// slices of memory. It is intended for use primarily in networking code, but\n/// could have applications elsewhere as well.\n///\n/// `Bytes` values facilitate zero-copy network programming by allowing multiple\n/// `Bytes` objects to point to the same underlying memory.\n///\n/// `Bytes` does not have a single implementation. It is an interface, whose\n/// exact behavior is implemented through dynamic dispatch in several underlying\n/// implementations of `Bytes`.\n///\n/// All `Bytes` implementations must fulfill the following requirements:\n/// - They are cheaply cloneable and thereby shareable between an unlimited amount\n///   of components, for example by modifying a reference count.\n/// - Instances can be sliced to refer to a subset of the original buffer.\n///\n/// ```\n/// use bytes::Bytes;\n///\n/// let mut mem = Bytes::from(\"Hello world\");\n/// let a = mem.slice(0..5);\n///\n/// assert_eq!(a, \"Hello\");\n///\n/// let b = mem.split_to(6);\n///\n/// assert_eq!(mem, \"world\");\n/// assert_eq!(b, \"Hello \");\n/// ```\n///\n/// # Memory layout\n///\n/// The `Bytes` struct itself is fairly small, limited to 4 `usize` fields used\n/// to track information about which segment of the underlying memory the\n/// `Bytes` handle has access to.\n///\n/// `Bytes` keeps both a pointer to the shared state containing the full memory\n/// slice and a pointer to the start of the region visible by the handle.\n/// `Bytes` also tracks the length of its view into the memory.\n///\n/// # Sharing\n///\n/// `Bytes` contains a vtable, which allows implementations of `Bytes` to define\n/// how sharing/cloning is implemented in detail.\n/// When `Bytes::clone()` is called, `Bytes` will call the vtable function for\n/// cloning the backing storage in order to share it behind multiple `Bytes`\n/// instances.\n///\n/// For `Bytes` implementations which refer to constant memory (e.g. created\n/// via `Bytes::from_static()`) the cloning implementation will be a no-op.\n///\n/// For `Bytes` implementations which point to a reference counted shared storage\n/// (e.g. an `Arc\u003c[u8]\u003e`), sharing will be implemented by increasing the\n/// reference count.\n///\n/// Due to this mechanism, multiple `Bytes` instances may point to the same\n/// shared memory region.\n/// Each `Bytes` instance can point to different sections within that\n/// memory region, and `Bytes` instances may or may not have overlapping views\n/// into the memory.\n///\n/// The following diagram visualizes a scenario where 2 `Bytes` instances make\n/// use of an `Arc`-based backing storage, and provide access to different views:\n///\n/// ```text\n///\n///    Arc ptrs                   ┌─────────┐\n///    ________________________ / │ Bytes 2 │\n///   /                           └─────────┘\n///  /          ┌───────────┐     |         |\n/// |_________/ │  Bytes 1  │     |         |\n/// |           └───────────┘     |         |\n/// |           |           | ___/ data     | tail\n/// |      data |      tail |/              |\n/// v           v           v               v\n/// ┌─────┬─────┬───────────┬───────────────┬─────┐\n/// │ Arc │     │           │               │     │\n/// └─────┴─────┴───────────┴───────────────┴─────┘\n/// ```\npub struct Bytes {\n    ptr: *const u8,\n    len: usize,\n    // inlined \"trait object\"\n    data: AtomicPtr\u003c()\u003e,\n    vtable: \u0026'static Vtable,\n}"
                        },
                        "IntoIter": {
                            "Exported": false,
                            "TypeKind": "type-parameter",
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "IntoIter",
                            "File": "bytes.rs",
                            "Line": 636,
                            "StartOffset": 17552,
                            "EndOffset": 17594,
                            "Content": "type IntoIter = core::slice::Iter\u003c'a, u8\u003e;"
                        },
                        "Item": {
                            "Exported": false,
                            "TypeKind": "type-parameter",
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "Item",
                            "File": "bytes.rs",
                            "Line": 626,
                            "StartOffset": 17346,
                            "EndOffset": 17361,
                            "Content": "type Item = u8;"
                        },
                        "Shared": {
                            "Exported": false,
                            "TypeKind": "struct",
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "Shared",
                            "File": "bytes.rs",
                            "Line": 1072,
                            "StartOffset": -1,
                            "EndOffset": 28736,
                            "Content": "struct Shared {\n    // Holds arguments to dealloc upon Drop, but otherwise doesn't use them\n    buf: *mut u8,\n    cap: usize,\n    ref_cnt: AtomicUsize,\n}"
                        },
                        "Target": {
                            "Exported": false,
                            "TypeKind": "type-parameter",
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "Target",
                            "File": "bytes.rs",
                            "Line": 595,
                            "StartOffset": 16865,
                            "EndOffset": 16884,
                            "Content": "type Target = [u8];"
                        },
                        "Vtable": {
                            "Exported": false,
                            "TypeKind": "struct",
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "Vtable",
                            "File": "bytes.rs",
                            "Line": 108,
                            "StartOffset": -1,
                            "EndOffset": 4516,
                            "Content": "pub(crate) struct Vtable {\n    /// fn(data, ptr, len)\n    pub clone: unsafe fn(\u0026AtomicPtr\u003c()\u003e, *const u8, usize) -\u003e Bytes,\n    /// fn(data, ptr, len)\n    ///\n    /// takes `Bytes` to value\n    pub to_vec: unsafe fn(\u0026AtomicPtr\u003c()\u003e, *const u8, usize) -\u003e Vec\u003cu8\u003e,\n    /// fn(data)\n    pub is_unique: unsafe fn(\u0026AtomicPtr\u003c()\u003e) -\u003e bool,\n    /// fn(data, ptr, len)\n    pub drop: unsafe fn(\u0026mut AtomicPtr\u003c()\u003e, *const u8, usize),\n}"
                        }
                    },
                    "Vars": {
                        "EMPTY": {
                            "IsExported": false,
                            "IsConst": true,
                            "IsPointer": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "EMPTY",
                            "File": "bytes.rs",
                            "Line": 137,
                            "StartOffset": 4928,
                            "EndOffset": 5034,
                            "Content": "// Make it a named const to work around\n        // \"unsizing casts are not allowed in const fn\"\n        const EMPTY: \u0026[u8] = \u0026[];"
                        },
                        "KIND_ARC": {
                            "IsExported": false,
                            "IsConst": true,
                            "IsPointer": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "KIND_ARC",
                            "File": "bytes.rs",
                            "Line": 1098,
                            "StartOffset": -1,
                            "EndOffset": 29446,
                            "Content": "const KIND_ARC: usize = 0b0;"
                        },
                        "KIND_MASK": {
                            "IsExported": false,
                            "IsConst": true,
                            "IsPointer": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "KIND_MASK",
                            "File": "bytes.rs",
                            "Line": 1100,
                            "StartOffset": -1,
                            "EndOffset": 29477,
                            "Content": "const KIND_MASK: usize = 0b1;"
                        },
                        "KIND_VEC": {
                            "IsExported": false,
                            "IsConst": true,
                            "IsPointer": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "KIND_VEC",
                            "File": "bytes.rs",
                            "Line": 1099,
                            "StartOffset": -1,
                            "EndOffset": 29447,
                            "Content": "const KIND_VEC: usize = 0b1;"
                        },
                        "PROMOTABLE_EVEN_VTABLE": {
                            "IsExported": false,
                            "IsConst": true,
                            "IsPointer": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "PROMOTABLE_EVEN_VTABLE",
                            "File": "bytes.rs",
                            "Line": 948,
                            "StartOffset": -1,
                            "EndOffset": 25135,
                            "Content": "static PROMOTABLE_EVEN_VTABLE: Vtable = Vtable {\n    clone: promotable_even_clone,\n    to_vec: promotable_even_to_vec,\n    is_unique: promotable_is_unique,\n    drop: promotable_even_drop,\n};"
                        },
                        "PROMOTABLE_ODD_VTABLE": {
                            "IsExported": false,
                            "IsConst": true,
                            "IsPointer": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "PROMOTABLE_ODD_VTABLE",
                            "File": "bytes.rs",
                            "Line": 955,
                            "StartOffset": -1,
                            "EndOffset": 25324,
                            "Content": "static PROMOTABLE_ODD_VTABLE: Vtable = Vtable {\n    clone: promotable_odd_clone,\n    to_vec: promotable_odd_to_vec,\n    is_unique: promotable_is_unique,\n    drop: promotable_odd_drop,\n};"
                        },
                        "SHARED_VTABLE": {
                            "IsExported": false,
                            "IsConst": true,
                            "IsPointer": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "SHARED_VTABLE",
                            "File": "bytes.rs",
                            "Line": 1091,
                            "StartOffset": -1,
                            "EndOffset": 29394,
                            "Content": "static SHARED_VTABLE: Vtable = Vtable {\n    clone: shared_clone,\n    to_vec: shared_to_vec,\n    is_unique: shared_is_unique,\n    drop: shared_drop,\n};"
                        },
                        "STATIC_VTABLE": {
                            "IsExported": false,
                            "IsConst": true,
                            "IsPointer": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "STATIC_VTABLE",
                            "File": "bytes.rs",
                            "Line": 921,
                            "StartOffset": -1,
                            "EndOffset": 24419,
                            "Content": "const STATIC_VTABLE: Vtable = Vtable {\n    clone: static_clone,\n    to_vec: static_to_vec,\n    is_unique: static_is_unique,\n    drop: static_drop,\n};"
                        },
                        "a": {
                            "IsExported": false,
                            "IsConst": false,
                            "IsPointer": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "a",
                            "File": "bytes.rs",
                            "Line": 1330,
                            "StartOffset": 36771,
                            "EndOffset": 36813,
                            "Content": "let a = Bytes::from(b\"abcdefgh\".to_vec());"
                        },
                        "a1": {
                            "IsExported": false,
                            "IsConst": false,
                            "IsPointer": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "a1",
                            "File": "bytes.rs",
                            "Line": 1334,
                            "StartOffset": 36896,
                            "EndOffset": 36917,
                            "Content": "let a1 = Arc::new(a);"
                        },
                        "a2": {
                            "IsExported": false,
                            "IsConst": false,
                            "IsPointer": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "a2",
                            "File": "bytes.rs",
                            "Line": 1335,
                            "StartOffset": 36965,
                            "EndOffset": 36985,
                            "Content": "let a2 = a1.clone();"
                        },
                        "addr": {
                            "IsExported": false,
                            "IsConst": false,
                            "IsPointer": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "addr",
                            "File": "bytes.rs",
                            "Line": 1331,
                            "StartOffset": 36796,
                            "EndOffset": 36827,
                            "Content": "let addr = a.as_ptr() as usize;"
                        },
                        "b": {
                            "IsExported": false,
                            "IsConst": false,
                            "IsPointer": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "b",
                            "File": "bytes.rs",
                            "Line": 1338,
                            "StartOffset": 37037,
                            "EndOffset": 37066,
                            "Content": "let b: Bytes = (*a1).clone();"
                        },
                        "begin": {
                            "IsExported": false,
                            "IsConst": false,
                            "IsPointer": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "begin",
                            "File": "bytes.rs",
                            "Line": 267,
                            "StartOffset": 8403,
                            "EndOffset": 8568,
                            "Content": "let begin = match range.start_bound() {\n            Bound::Included(\u0026n) =\u003e n,\n            Bound::Excluded(\u0026n) =\u003e n.checked_add(1).expect(\"out of range\"),\n            Bound::Unbounded =\u003e 0,\n        };"
                        },
                        "buf": {
                            "IsExported": false,
                            "IsConst": false,
                            "IsPointer": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "buf",
                            "File": "bytes.rs",
                            "Line": 970,
                            "StartOffset": 25640,
                            "EndOffset": 25699,
                            "Content": "let buf = ptr_map(shared.cast(), |addr| addr \u0026 !KIND_MASK);"
                        },
                        "bytes": {
                            "IsExported": false,
                            "IsConst": false,
                            "IsPointer": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "bytes",
                            "File": "bytes.rs",
                            "Line": 903,
                            "StartOffset": 23798,
                            "EndOffset": 23840,
                            "Content": "let bytes = mem::ManuallyDrop::new(bytes);"
                        },
                        "bytes_len": {
                            "IsExported": false,
                            "IsConst": false,
                            "IsPointer": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "bytes_len",
                            "File": "bytes.rs",
                            "Line": 337,
                            "StartOffset": 10513,
                            "EndOffset": 10540,
                            "Content": "let bytes_len = self.len();"
                        },
                        "bytes_p": {
                            "IsExported": false,
                            "IsConst": false,
                            "IsPointer": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "bytes_p",
                            "File": "bytes.rs",
                            "Line": 336,
                            "StartOffset": 10512,
                            "EndOffset": 10549,
                            "Content": "let bytes_p = self.as_ptr() as usize;"
                        },
                        "cap": {
                            "IsExported": false,
                            "IsConst": false,
                            "IsPointer": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "cap",
                            "File": "bytes.rs",
                            "Line": 992,
                            "StartOffset": 26266,
                            "EndOffset": 26312,
                            "Content": "let cap = (ptr as usize - buf as usize) + len;"
                        },
                        "data": {
                            "IsExported": false,
                            "IsConst": false,
                            "IsPointer": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "data",
                            "File": "bytes.rs",
                            "Line": 877,
                            "StartOffset": 23178,
                            "EndOffset": 23226,
                            "Content": "let data = ptr_map(ptr, |addr| addr | KIND_VEC);"
                        },
                        "diff": {
                            "IsExported": false,
                            "IsConst": false,
                            "IsPointer": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "diff",
                            "File": "bytes.rs",
                            "Line": 1284,
                            "StartOffset": 35895,
                            "EndOffset": 35938,
                            "Content": "let diff = new_addr.wrapping_sub(old_addr);"
                        },
                        "end": {
                            "IsExported": false,
                            "IsConst": false,
                            "IsPointer": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "end",
                            "File": "bytes.rs",
                            "Line": 273,
                            "StartOffset": 8612,
                            "EndOffset": 8773,
                            "Content": "let end = match range.end_bound() {\n            Bound::Included(\u0026n) =\u003e n.checked_add(1).expect(\"out of range\"),\n            Bound::Excluded(\u0026n) =\u003e n,\n            Bound::Unbounded =\u003e len,\n        };"
                        },
                        "kind": {
                            "IsExported": false,
                            "IsConst": false,
                            "IsPointer": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "kind",
                            "File": "bytes.rs",
                            "Line": 1055,
                            "StartOffset": 28133,
                            "EndOffset": 28172,
                            "Content": "let kind = shared as usize \u0026 KIND_MASK;"
                        },
                        "len": {
                            "IsExported": false,
                            "IsConst": false,
                            "IsPointer": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "len",
                            "File": "bytes.rs",
                            "Line": 873,
                            "StartOffset": 23090,
                            "EndOffset": 23112,
                            "Content": "let len = slice.len();"
                        },
                        "mut ret": {
                            "IsExported": false,
                            "IsConst": false,
                            "IsPointer": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "mut ret",
                            "File": "bytes.rs",
                            "Line": 402,
                            "StartOffset": 12296,
                            "EndOffset": 12323,
                            "Content": "let mut ret = self.clone();"
                        },
                        "new_addr": {
                            "IsExported": false,
                            "IsConst": false,
                            "IsPointer": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "new_addr",
                            "File": "bytes.rs",
                            "Line": 1294,
                            "StartOffset": 36107,
                            "EndOffset": 36134,
                            "Content": "let new_addr = f(old_addr);"
                        },
                        "old_addr": {
                            "IsExported": false,
                            "IsConst": false,
                            "IsPointer": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "old_addr",
                            "File": "bytes.rs",
                            "Line": 1293,
                            "StartOffset": 36105,
                            "EndOffset": 36133,
                            "Content": "let old_addr = ptr as usize;"
                        },
                        "old_size": {
                            "IsExported": false,
                            "IsConst": false,
                            "IsPointer": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "old_size",
                            "File": "bytes.rs",
                            "Line": 1153,
                            "StartOffset": 31073,
                            "EndOffset": 31138,
                            "Content": "let old_size = (*shared).ref_cnt.fetch_add(1, Ordering::Relaxed);"
                        },
                        "ptr": {
                            "IsExported": false,
                            "IsConst": false,
                            "IsPointer": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "ptr",
                            "File": "bytes.rs",
                            "Line": 874,
                            "StartOffset": 23091,
                            "EndOffset": 23133,
                            "Content": "let ptr = Box::into_raw(slice) as *mut u8;"
                        },
                        "ref_cnt": {
                            "IsExported": false,
                            "IsConst": false,
                            "IsPointer": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "ref_cnt",
                            "File": "bytes.rs",
                            "Line": 1058,
                            "StartOffset": 28229,
                            "EndOffset": 28302,
                            "Content": "let ref_cnt = (*shared.cast::\u003cShared\u003e()).ref_cnt.load(Ordering::Relaxed);"
                        },
                        "ret": {
                            "IsExported": false,
                            "IsConst": false,
                            "IsPointer": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "ret",
                            "File": "bytes.rs",
                            "Line": 587,
                            "StartOffset": 16749,
                            "EndOffset": 16777,
                            "Content": "let ret = self.slice(..len);"
                        },
                        "shared": {
                            "IsExported": false,
                            "IsConst": false,
                            "IsPointer": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "shared",
                            "File": "bytes.rs",
                            "Line": 1195,
                            "StartOffset": 32454,
                            "EndOffset": 32489,
                            "Content": "let shared = Box::into_raw(shared);"
                        },
                        "slice": {
                            "IsExported": false,
                            "IsConst": false,
                            "IsPointer": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "slice",
                            "File": "bytes.rs",
                            "Line": 934,
                            "StartOffset": 24611,
                            "EndOffset": 24655,
                            "Content": "let slice = slice::from_raw_parts(ptr, len);"
                        },
                        "sub_len": {
                            "IsExported": false,
                            "IsConst": false,
                            "IsPointer": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "sub_len",
                            "File": "bytes.rs",
                            "Line": 340,
                            "StartOffset": 10596,
                            "EndOffset": 10623,
                            "Content": "let sub_len = subset.len();"
                        },
                        "sub_offset": {
                            "IsExported": false,
                            "IsConst": false,
                            "IsPointer": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "sub_offset",
                            "File": "bytes.rs",
                            "Line": 357,
                            "StartOffset": 11125,
                            "EndOffset": 11158,
                            "Content": "let sub_offset = sub_p - bytes_p;"
                        },
                        "sub_p": {
                            "IsExported": false,
                            "IsConst": false,
                            "IsPointer": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "sub_p",
                            "File": "bytes.rs",
                            "Line": 339,
                            "StartOffset": 10595,
                            "EndOffset": 10632,
                            "Content": "let sub_p = subset.as_ptr() as usize;"
                        },
                        "t1": {
                            "IsExported": false,
                            "IsConst": false,
                            "IsPointer": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "t1",
                            "File": "bytes.rs",
                            "Line": 1337,
                            "StartOffset": 37032,
                            "EndOffset": 37127,
                            "Content": "let t1 = thread::spawn(move || {\n                let b: Bytes = (*a1).clone();\n                assert_eq!(b.as_ptr() as usize, addr);\n            });"
                        },
                        "t2": {
                            "IsExported": false,
                            "IsConst": false,
                            "IsPointer": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "t2",
                            "File": "bytes.rs",
                            "Line": 1342,
                            "StartOffset": 37195,
                            "EndOffset": 37290,
                            "Content": "let t2 = thread::spawn(move || {\n                let b: Bytes = (*a2).clone();\n                assert_eq!(b.as_ptr() as usize, addr);\n            });"
                        },
                        "v": {
                            "IsExported": false,
                            "IsConst": false,
                            "IsPointer": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "v",
                            "File": "bytes.rs",
                            "Line": 1130,
                            "StartOffset": 30421,
                            "EndOffset": 30470,
                            "Content": "let v = slice::from_raw_parts(ptr, len).to_vec();"
                        }
                    }
                }
            },
            "Dependencies": {},
            "Files": {
                "bytes.rs": {
                    "Path": "bytes.rs"
                }
            }
        },
        "faststr@0.2.19": {
            "Language": "rust",
            "Version": "0.2.19",
            "Name": "faststr",
            "Dir": "",
            "Packages": {
                "faststr": {
                    "IsMain": false,
                    "IsTest": false,
                    "PkgPath": "faststr",
                    "Functions": {
                        "AsRef\u003cFastStr\u003e.as_ref": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "AsRef\u003cFastStr\u003e.as_ref",
                            "File": "lib.rs",
                            "Line": 294,
                            "StartOffset": 9030,
                            "EndOffset": 9114,
                            "Content": "impl AsRef\u003cstr\u003e for FastStr {\n    #[inline(always)]\n    #[inline(always)]\n    fn as_ref(\u0026self) -\u003e \u0026str {\n        self.as_str()\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr"
                                }
                            }
                        },
                        "AsRef\u003cRepr\u003e.as_ref": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "AsRef\u003cRepr\u003e.as_ref",
                            "File": "lib.rs",
                            "Line": 758,
                            "StartOffset": 21241,
                            "EndOffset": 21645,
                            "Content": "impl AsRef\u003c[u8]\u003e for Repr {\n    #[inline]\n    #[inline]\n    fn as_ref(\u0026self) -\u003e \u0026[u8] {\n        match self {\n            Self::Empty =\u003e \u0026[],\n            Self::Bytes(bytes) =\u003e bytes.as_ref(),\n            Self::ArcStr(arc_str) =\u003e arc_str.as_bytes(),\n            Self::ArcString(arc_string) =\u003e arc_string.as_bytes(),\n            Self::StaticStr(s) =\u003e s.as_bytes(),\n            Self::Inline { len, buf } =\u003e \u0026buf[..*len],\n        }\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "Repr"
                                }
                            }
                        },
                        "Borrow\u003cFastStr\u003e.borrow": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "Borrow\u003cFastStr\u003e.borrow",
                            "File": "lib.rs",
                            "Line": 477,
                            "StartOffset": 13041,
                            "EndOffset": 13118,
                            "Content": "impl Borrow\u003cstr\u003e for FastStr {\n    #[inline]\n    #[inline]\n    fn borrow(\u0026self) -\u003e \u0026str {\n        self.as_str()\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr"
                                }
                            }
                        },
                        "Debug\u003cFastStr\u003e.fmt": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "Debug\u003cFastStr\u003e.fmt",
                            "File": "lib.rs",
                            "Line": 411,
                            "StartOffset": 11173,
                            "EndOffset": 11277,
                            "Content": "impl fmt::Debug for FastStr {\n    #[inline]\n    #[inline]\n    fn fmt(\u0026self, f: \u0026mut fmt::Formatter) -\u003e fmt::Result {\n        fmt::Debug::fmt(self.as_str(), f)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr"
                                }
                            }
                        },
                        "Default\u003cFastStr\u003e::default": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "Default\u003cFastStr\u003e::default",
                            "File": "lib.rs",
                            "Line": 280,
                            "StartOffset": 8821,
                            "EndOffset": 8890,
                            "Content": "impl Default for FastStr {\n    #[inline]\n    #[inline]\n    fn default() -\u003e Self {\n        Self::empty()\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr"
                                }
                            }
                        },
                        "Deref\u003cFastStr\u003e.deref": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "Deref\u003cFastStr\u003e.deref",
                            "File": "lib.rs",
                            "Line": 303,
                            "StartOffset": 9192,
                            "EndOffset": 9238,
                            "Content": "impl Deref for FastStr {\n    type Target = str;\n\n    #[inline]\n    #[inline]\n    fn deref(\u0026self) -\u003e \u0026str {\n        self.as_str()\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr"
                                }
                            }
                        },
                        "Display\u003cFastStr\u003e.fmt": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "Display\u003cFastStr\u003e.fmt",
                            "File": "lib.rs",
                            "Line": 418,
                            "StartOffset": 11327,
                            "EndOffset": 11433,
                            "Content": "impl fmt::Display for FastStr {\n    #[inline]\n    #[inline]\n    fn fmt(\u0026self, f: \u0026mut fmt::Formatter) -\u003e fmt::Result {\n        fmt::Display::fmt(self.as_str(), f)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr"
                                }
                            }
                        },
                        "FastStr.as_str": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "FastStr.as_str",
                            "File": "lib.rs",
                            "Line": 191,
                            "StartOffset": 5894,
                            "EndOffset": 6015,
                            "Content": "impl FastStr {\n    /// Return the `FastStr` as a string slice.\n    #[inline(always)]\n    /// Return the `FastStr` as a string slice.\n    #[inline(always)]\n    pub fn as_str(\u0026self) -\u003e \u0026str {\n        self.0.as_str()\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr"
                                }
                            }
                        },
                        "FastStr.deep_clone_bytes": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "FastStr.deep_clone_bytes",
                            "File": "lib.rs",
                            "Line": 242,
                            "StartOffset": 7413,
                            "EndOffset": 7838,
                            "Content": "impl FastStr {\n    /// Return the `FastStr` as a string slice.\n    #[inline(always)]\n    /// If the inner repr of FastStr is a Bytes, then it will be deep cloned and returned as a new FastStr.\n    /// Otherwise, it will return a new FastStr with the same repr which has no cost.\n    ///\n    /// This is used to free the original memory of the Bytes.\n    ///\n    /// This is not stable and may be removed or renamed in the future.\n    #[inline]\n    #[doc(hidden)]\n    pub fn deep_clone_bytes(\u0026self) -\u003e Self {\n        Self(self.0.deep_clone_bytes())\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr"
                                }
                            }
                        },
                        "FastStr.index": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "FastStr.index",
                            "File": "lib.rs",
                            "Line": 221,
                            "StartOffset": 6678,
                            "EndOffset": 6993,
                            "Content": "impl FastStr {\n    /// Return the `FastStr` as a string slice.\n    #[inline(always)]\n    /// Return a new `FastStr` starting at index `start` and ending at index `end`. `[start..end)`\n    ///\n    /// # Safety\n    ///\n    /// The caller must guarantee that the string between `start` and `end` is valid utf-8.\n    #[inline(always)]\n    pub unsafe fn index(\u0026self, start: usize, end: usize) -\u003e Self {\n        Self(self.0.slice_ref(\u0026self.as_bytes()[start..end]))\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr"
                                }
                            }
                        },
                        "FastStr.into_bytes": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "FastStr.into_bytes",
                            "File": "lib.rs",
                            "Line": 197,
                            "StartOffset": 6044,
                            "EndOffset": 6174,
                            "Content": "impl FastStr {\n    /// Return the `FastStr` as a string slice.\n    #[inline(always)]\n    /// Consumes and converts the `FastStr` into a `Bytes` object.\n    #[inline(always)]\n    pub fn into_bytes(self) -\u003e Bytes {\n        self.0.into_bytes()\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr"
                                }
                            }
                        },
                        "FastStr.into_string": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "FastStr.into_string",
                            "File": "lib.rs",
                            "Line": 231,
                            "StartOffset": 7059,
                            "EndOffset": 7379,
                            "Content": "impl FastStr {\n    /// Return the `FastStr` as a string slice.\n    #[inline(always)]\n    /// Consumes and converts the `FastStr` into a `String` at best effort.\n    #[deprecated(\n        since = \"0.2.13\",\n        note = \"This method does not really express the `into` semantic. Use `to_string` instead.\"\n    )]\n    #[inline(always)]\n    pub fn into_string(self) -\u003e String {\n        #[allow(deprecated)]\n        self.0.into_string()\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr"
                                }
                            }
                        },
                        "FastStr.is_empty": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "FastStr.is_empty",
                            "File": "lib.rs",
                            "Line": 209,
                            "StartOffset": 6327,
                            "EndOffset": 6437,
                            "Content": "impl FastStr {\n    /// Return the `FastStr` as a string slice.\n    #[inline(always)]\n    /// Return `true` if the `FastStr` is empty.\n    #[inline(always)]\n    pub fn is_empty(\u0026self) -\u003e bool {\n        self.0.is_empty()\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr"
                                }
                            }
                        },
                        "FastStr.len": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "FastStr.len",
                            "File": "lib.rs",
                            "Line": 203,
                            "StartOffset": 6207,
                            "EndOffset": 6301,
                            "Content": "impl FastStr {\n    /// Return the `FastStr` as a string slice.\n    #[inline(always)]\n    /// Return the `FastStr` length.\n    #[inline(always)]\n    pub fn len(\u0026self) -\u003e usize {\n        self.0.len()\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr"
                                }
                            }
                        },
                        "FastStr.slice_ref": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "FastStr.slice_ref",
                            "File": "lib.rs",
                            "Line": 215,
                            "StartOffset": 6468,
                            "EndOffset": 6623,
                            "Content": "impl FastStr {\n    /// Return the `FastStr` as a string slice.\n    #[inline(always)]\n    /// Return a new `FastStr` that represents a subset of the current string.\n    #[inline(always)]\n    pub fn slice_ref(\u0026self, subset: \u0026str) -\u003e Self {\n        Self(self.0.slice_ref(subset.as_bytes()))\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr"
                                }
                            }
                        },
                        "FastStr::empty": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "FastStr::empty",
                            "File": "lib.rs",
                            "Line": 72,
                            "StartOffset": 2099,
                            "EndOffset": 2185,
                            "Content": "impl FastStr {\n    /// Create a new `FastStr` from any type `T` that can be converted to a string slice\n    /// (e.g., `String`, `\u0026str`, `Arc\u003cString\u003e`, `Arc\u003cstr\u003e`).\n    ///\n    /// For small strings (up to 24 bytes), this avoids heap allocation, and copies on stack.\n    #[inline]\n    /// Create an empty `FastStr`.\n    #[inline]\n    pub const fn empty() -\u003e Self {\n        Self(Repr::empty())\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr"
                                }
                            }
                        },
                        "FastStr::from_arc_str": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "FastStr::from_arc_str",
                            "File": "lib.rs",
                            "Line": 78,
                            "StartOffset": 2218,
                            "EndOffset": 2332,
                            "Content": "impl FastStr {\n    /// Create a new `FastStr` from any type `T` that can be converted to a string slice\n    /// (e.g., `String`, `\u0026str`, `Arc\u003cString\u003e`, `Arc\u003cstr\u003e`).\n    ///\n    /// For small strings (up to 24 bytes), this avoids heap allocation, and copies on stack.\n    #[inline]\n    /// Create a new `FastStr` from an `Arc\u003cstr\u003e`.\n    #[inline]\n    pub fn from_arc_str(s: Arc\u003cstr\u003e) -\u003e Self {\n        Self(Repr::from_arc_str(s))\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr"
                                }
                            }
                        },
                        "FastStr::from_arc_string": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "FastStr::from_arc_string",
                            "File": "lib.rs",
                            "Line": 90,
                            "StartOffset": 2521,
                            "EndOffset": 2644,
                            "Content": "impl FastStr {\n    /// Create a new `FastStr` from any type `T` that can be converted to a string slice\n    /// (e.g., `String`, `\u0026str`, `Arc\u003cString\u003e`, `Arc\u003cstr\u003e`).\n    ///\n    /// For small strings (up to 24 bytes), this avoids heap allocation, and copies on stack.\n    #[inline]\n    /// Create a new `FastStr` from an `Arc\u003cString\u003e`.\n    #[inline]\n    pub fn from_arc_string(s: Arc\u003cString\u003e) -\u003e Self {\n        Self(Repr::from_arc_string(s))\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr"
                                }
                            }
                        },
                        "FastStr::from_bytes": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "FastStr::from_bytes",
                            "File": "lib.rs",
                            "Line": 96,
                            "StartOffset": 2688,
                            "EndOffset": 2981,
                            "Content": "impl FastStr {\n    /// Create a new `FastStr` from any type `T` that can be converted to a string slice\n    /// (e.g., `String`, `\u0026str`, `Arc\u003cString\u003e`, `Arc\u003cstr\u003e`).\n    ///\n    /// For small strings (up to 24 bytes), this avoids heap allocation, and copies on stack.\n    #[inline]\n    /// Create a new `FastStr` from a `BytesMut` object, returning a\n    /// `Result\u003cFastStr, Utf8Error\u003e` if the bytes are not valid UTF-8.\n    #[inline]\n    pub fn from_bytes(b: Bytes) -\u003e Result\u003cSelf, Utf8Error\u003e {\n        from_utf8(\u0026b)?;\n        // Safety: we have checked b is utf-8 valid\n        Ok(unsafe { Self::from_bytes_unchecked(b) })\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr"
                                }
                            }
                        },
                        "FastStr::from_bytes_mut": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "FastStr::from_bytes_mut",
                            "File": "lib.rs",
                            "Line": 116,
                            "StartOffset": 3392,
                            "EndOffset": 3692,
                            "Content": "impl FastStr {\n    /// Create a new `FastStr` from any type `T` that can be converted to a string slice\n    /// (e.g., `String`, `\u0026str`, `Arc\u003cString\u003e`, `Arc\u003cstr\u003e`).\n    ///\n    /// For small strings (up to 24 bytes), this avoids heap allocation, and copies on stack.\n    #[inline]\n    /// Create a new `FastStr` from a `BytesMut` object, returning a\n    /// `Result\u003cFastStr, Utf8Error\u003e` if the bytes are not valid UTF-8.\n    #[inline]\n    pub fn from_bytes_mut(b: BytesMut) -\u003e Result\u003cSelf, Utf8Error\u003e {\n        from_utf8(\u0026b)?;\n        // Safety: we have checked b is utf-8 valid\n        Ok(unsafe { Self::from_bytes_mut_unchecked(b) })\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr"
                                }
                            }
                        },
                        "FastStr::from_bytes_mut_unchecked": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "FastStr::from_bytes_mut_unchecked",
                            "File": "lib.rs",
                            "Line": 125,
                            "StartOffset": 3754,
                            "EndOffset": 4096,
                            "Content": "impl FastStr {\n    /// Create a new `FastStr` from any type `T` that can be converted to a string slice\n    /// (e.g., `String`, `\u0026str`, `Arc\u003cString\u003e`, `Arc\u003cstr\u003e`).\n    ///\n    /// For small strings (up to 24 bytes), this avoids heap allocation, and copies on stack.\n    #[inline]\n    /// Create a new `FastStr` from a `BytesMut` object. This is an unsafe method\n    /// because the caller must ensure that the bytes passed to it are valid UTF-8.\n    ///\n    /// # Safety\n    ///\n    /// `b` must be valid UTF-8.\n    #[inline]\n    pub unsafe fn from_bytes_mut_unchecked(b: BytesMut) -\u003e Self {\n        let v = b.freeze();\n        Self::from_bytes_unchecked(v)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr"
                                }
                            }
                        },
                        "FastStr::from_bytes_unchecked": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "FastStr::from_bytes_unchecked",
                            "File": "lib.rs",
                            "Line": 105,
                            "StartOffset": 3039,
                            "EndOffset": 3343,
                            "Content": "impl FastStr {\n    /// Create a new `FastStr` from any type `T` that can be converted to a string slice\n    /// (e.g., `String`, `\u0026str`, `Arc\u003cString\u003e`, `Arc\u003cstr\u003e`).\n    ///\n    /// For small strings (up to 24 bytes), this avoids heap allocation, and copies on stack.\n    #[inline]\n    /// Create a new `FastStr` from a `Bytes` object. This is an unsafe method\n    /// because the caller must ensure that the bytes passed to it are valid UTF-8.\n    ///\n    /// # Safety\n    ///\n    /// `b` must be valid UTF-8.\n    #[inline]\n    pub unsafe fn from_bytes_unchecked(b: Bytes) -\u003e Self {\n        Self(Repr::from_bytes_unchecked(b))\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr"
                                }
                            }
                        },
                        "FastStr::from_char_iter": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "FastStr::from_char_iter",
                            "File": "lib.rs",
                            "Line": 254,
                            "StartOffset": 7883,
                            "EndOffset": 8773,
                            "Content": "impl FastStr {\n    /// Return the `FastStr` as a string slice.\n    #[inline(always)]\n    fn from_char_iter\u003cI: iter::Iterator\u003cItem = char\u003e\u003e(mut iter: I) -\u003e Self {\n        let (min_size, _) = iter.size_hint();\n        if min_size \u003e INLINE_CAP {\n            let s: String = iter.collect();\n            return Self(Repr::Bytes(Bytes::from(s)));\n        }\n        let mut len = 0;\n        let mut buf = [0u8; INLINE_CAP];\n        while let Some(ch) = iter.next() {\n            let size = ch.len_utf8();\n            if size + len \u003e INLINE_CAP {\n                let (min_remaining, _) = iter.size_hint();\n                let mut s = String::with_capacity(size + len + min_remaining);\n                s.push_str(unsafe { core::str::from_utf8_unchecked(\u0026buf[..len]) });\n                s.push(ch);\n                s.extend(iter);\n                return Self(Repr::Bytes(Bytes::from(s)));\n            }\n            ch.encode_utf8(\u0026mut buf[len..]);\n            len += size;\n        }\n        Self(Repr::Inline { len, buf })\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr"
                                }
                            }
                        },
                        "FastStr::from_static_str": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "FastStr::from_static_str",
                            "File": "lib.rs",
                            "Line": 137,
                            "StartOffset": 4139,
                            "EndOffset": 4274,
                            "Content": "impl FastStr {\n    /// Create a new `FastStr` from any type `T` that can be converted to a string slice\n    /// (e.g., `String`, `\u0026str`, `Arc\u003cString\u003e`, `Arc\u003cstr\u003e`).\n    ///\n    /// For small strings (up to 24 bytes), this avoids heap allocation, and copies on stack.\n    #[inline]\n    /// Create a new `FastStr` from a static string slice.\n    #[inline]\n    pub const fn from_static_str(s: \u0026'static str) -\u003e Self {\n        Self(Repr::StaticStr(s))\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr"
                                }
                            }
                        },
                        "FastStr::from_string": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "FastStr::from_string",
                            "File": "lib.rs",
                            "Line": 84,
                            "StartOffset": 2373,
                            "EndOffset": 2481,
                            "Content": "impl FastStr {\n    /// Create a new `FastStr` from any type `T` that can be converted to a string slice\n    /// (e.g., `String`, `\u0026str`, `Arc\u003cString\u003e`, `Arc\u003cstr\u003e`).\n    ///\n    /// For small strings (up to 24 bytes), this avoids heap allocation, and copies on stack.\n    #[inline]\n    /// Create a new `FastStr` from a `String`.\n    #[inline]\n    pub fn from_string(s: String) -\u003e Self {\n        Self(Repr::from_string(s))\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr"
                                }
                            }
                        },
                        "FastStr::from_u8_slice": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "FastStr::from_u8_slice",
                            "File": "lib.rs",
                            "Line": 163,
                            "StartOffset": 5011,
                            "EndOffset": 5361,
                            "Content": "impl FastStr {\n    /// Create a new `FastStr` from any type `T` that can be converted to a string slice\n    /// (e.g., `String`, `\u0026str`, `Arc\u003cString\u003e`, `Arc\u003cstr\u003e`).\n    ///\n    /// For small strings (up to 24 bytes), this avoids heap allocation, and copies on stack.\n    #[inline]\n    /// Create a new `FastStr` from a byte slice `v`, returning a\n    /// `Result\u003cFastStr, Utf8Error\u003e` if the bytes are not valid UTF-8.\n    #[deprecated(\n        since = \"0.2.13\",\n        note = \"This method is not really zero-cost. Use `new_u8_slice` instead.\"\n    )]\n    #[inline]\n    pub fn from_u8_slice(v: \u0026[u8]) -\u003e Result\u003cSelf, Utf8Error\u003e {\n        Self::new_u8_slice(v)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr"
                                }
                            }
                        },
                        "FastStr::from_u8_slice_unchecked": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "FastStr::from_u8_slice_unchecked",
                            "File": "lib.rs",
                            "Line": 174,
                            "StartOffset": 5396,
                            "EndOffset": 5846,
                            "Content": "impl FastStr {\n    /// Create a new `FastStr` from any type `T` that can be converted to a string slice\n    /// (e.g., `String`, `\u0026str`, `Arc\u003cString\u003e`, `Arc\u003cstr\u003e`).\n    ///\n    /// For small strings (up to 24 bytes), this avoids heap allocation, and copies on stack.\n    #[inline]\n    /// Create a new `FastStr` from a byte slice `v`. This is an unsafe method because\n    /// the caller must ensure that the bytes passed to it are valid UTF-8.\n    ///\n    /// # Safety\n    ///\n    /// `v` must be valid UTF-8.\n    #[deprecated(\n        since = \"0.2.13\",\n        note = \"This method is not really zero-cost. Use `new_u8_slice_unchecked` instead.\"\n    )]\n    #[inline]\n    pub unsafe fn from_u8_slice_unchecked(v: \u0026[u8]) -\u003e Self {\n        Self::new_u8_slice_unchecked(v)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr"
                                }
                            }
                        },
                        "FastStr::from_vec_u8": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "FastStr::from_vec_u8",
                            "File": "lib.rs",
                            "Line": 143,
                            "StartOffset": 4312,
                            "EndOffset": 4600,
                            "Content": "impl FastStr {\n    /// Create a new `FastStr` from any type `T` that can be converted to a string slice\n    /// (e.g., `String`, `\u0026str`, `Arc\u003cString\u003e`, `Arc\u003cstr\u003e`).\n    ///\n    /// For small strings (up to 24 bytes), this avoids heap allocation, and copies on stack.\n    #[inline]\n    /// Create a new `FastStr` from a `Vec\u003cu8\u003e`, returning a\n    /// `Result\u003cFastStr, Utf8Error\u003e` if the bytes are not valid UTF-8.\n    #[inline]\n    pub fn from_vec_u8(v: Vec\u003cu8\u003e) -\u003e Result\u003cSelf, Utf8Error\u003e {\n        from_utf8(\u0026v)?;\n        // Safety: we have checked b is utf-8 valid\n        Ok(unsafe { Self::from_vec_u8_unchecked(v) })\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr"
                                }
                            }
                        },
                        "FastStr::from_vec_u8_unchecked": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "FastStr::from_vec_u8_unchecked",
                            "File": "lib.rs",
                            "Line": 152,
                            "StartOffset": 4659,
                            "EndOffset": 4961,
                            "Content": "impl FastStr {\n    /// Create a new `FastStr` from any type `T` that can be converted to a string slice\n    /// (e.g., `String`, `\u0026str`, `Arc\u003cString\u003e`, `Arc\u003cstr\u003e`).\n    ///\n    /// For small strings (up to 24 bytes), this avoids heap allocation, and copies on stack.\n    #[inline]\n    /// Create a new `FastStr` from a `Vec\u003cu8\u003e`. This is an unsafe method because\n    /// the caller must ensure that the bytes passed to it are valid UTF-8.\n    ///\n    /// # Safety\n    ///\n    /// `v` must be valid UTF-8.\n    #[inline]\n    pub unsafe fn from_vec_u8_unchecked(v: Vec\u003cu8\u003e) -\u003e Self {\n        Self::from_bytes_unchecked(v.into())\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr"
                                }
                            }
                        },
                        "FastStr::new": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "FastStr::new",
                            "File": "lib.rs",
                            "Line": 25,
                            "StartOffset": 557,
                            "EndOffset": 913,
                            "Content": "impl FastStr {\n    /// Create a new `FastStr` from any type `T` that can be converted to a string slice\n    /// (e.g., `String`, `\u0026str`, `Arc\u003cString\u003e`, `Arc\u003cstr\u003e`).\n    ///\n    /// For small strings (up to 24 bytes), this avoids heap allocation, and copies on stack.\n    #[inline]\n    /// Create a new `FastStr` from any type `T` that can be converted to a string slice\n    /// (e.g., `String`, `\u0026str`, `Arc\u003cString\u003e`, `Arc\u003cstr\u003e`).\n    ///\n    /// For small strings (up to 24 bytes), this avoids heap allocation, and copies on stack.\n    #[inline]\n    pub fn new\u003cT\u003e(text: T) -\u003e Self\n    where\n        T: AsRef\u003cstr\u003e,\n    {\n        Self(Repr::new(text))\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr"
                                }
                            }
                        },
                        "FastStr::new_inline": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "FastStr::new_inline",
                            "File": "lib.rs",
                            "Line": 37,
                            "StartOffset": 948,
                            "EndOffset": 1390,
                            "Content": "impl FastStr {\n    /// Create a new `FastStr` from any type `T` that can be converted to a string slice\n    /// (e.g., `String`, `\u0026str`, `Arc\u003cString\u003e`, `Arc\u003cstr\u003e`).\n    ///\n    /// For small strings (up to 24 bytes), this avoids heap allocation, and copies on stack.\n    #[inline]\n    /// Create a new inline `FastStr` (up to 24 bytes long) from a string slice `s`.\n    ///\n    /// This constructor panics if the length of `s` is greater than 24.\n    ///\n    /// Note: the inline length is not guaranteed.\n    #[inline]\n    #[doc(hidden)]\n    #[deprecated(\n        since = \"0.2.13\",\n        note = \"The inline threshold is not stable. Please use `FastStr::new()` instead.\"\n    )]\n    pub fn new_inline(s: \u0026str) -\u003e Self {\n        Self(Repr::new_inline(s))\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr"
                                }
                            }
                        },
                        "FastStr::new_u8_slice": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "FastStr::new_u8_slice",
                            "File": "lib.rs",
                            "Line": 52,
                            "StartOffset": 1429,
                            "EndOffset": 1676,
                            "Content": "impl FastStr {\n    /// Create a new `FastStr` from any type `T` that can be converted to a string slice\n    /// (e.g., `String`, `\u0026str`, `Arc\u003cString\u003e`, `Arc\u003cstr\u003e`).\n    ///\n    /// For small strings (up to 24 bytes), this avoids heap allocation, and copies on stack.\n    #[inline]\n    /// Create a new `FastStr` from a byte slice `v`, returning a\n    /// `Result\u003cFastStr, Utf8Error\u003e` if the bytes are not valid UTF-8.\n    #[inline]\n    pub fn new_u8_slice(v: \u0026[u8]) -\u003e Result\u003cSelf, Utf8Error\u003e {\n        let s = from_utf8(v)?;\n        Ok(Self::new(s))\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr"
                                }
                            }
                        },
                        "FastStr::new_u8_slice_unchecked": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "FastStr::new_u8_slice_unchecked",
                            "File": "lib.rs",
                            "Line": 60,
                            "StartOffset": 1706,
                            "EndOffset": 2073,
                            "Content": "impl FastStr {\n    /// Create a new `FastStr` from any type `T` that can be converted to a string slice\n    /// (e.g., `String`, `\u0026str`, `Arc\u003cString\u003e`, `Arc\u003cstr\u003e`).\n    ///\n    /// For small strings (up to 24 bytes), this avoids heap allocation, and copies on stack.\n    #[inline]\n    /// Create a new `FastStr` from a byte slice `v`. This is an unsafe method because\n    /// the caller must ensure that the bytes passed to it are valid UTF-8.\n    ///\n    /// # Safety\n    ///\n    /// `v` must be valid UTF-8.\n    #[inline]\n    pub unsafe fn new_u8_slice_unchecked(v: \u0026[u8]) -\u003e Self {\n        let s = unsafe { std::str::from_utf8_unchecked(v) };\n        Self::new(s)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr"
                                }
                            }
                        },
                        "From\u003cBytes\u003e::from": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "From\u003cBytes\u003e::from",
                            "File": "lib.rs",
                            "Line": 318,
                            "StartOffset": 9414,
                            "EndOffset": 9496,
                            "Content": "impl From\u003cFastStr\u003e for Bytes {\n    #[inline]\n    #[inline]\n    fn from(val: FastStr) -\u003e Self {\n        val.into_bytes()\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "bytes@1.6.0",
                                    "PkgPath": "bytes::bytes",
                                    "Name": "Bytes"
                                }
                            }
                        },
                        "From\u003cFastStr\u003e::from": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "From\u003cFastStr\u003e::from",
                            "File": "lib.rs",
                            "Line": 518,
                            "StartOffset": 13787,
                            "EndOffset": 13879,
                            "Content": "impl From\u003cArc\u003cString\u003e\u003e for FastStr {\n    #[inline]\n    #[inline]\n    fn from(val: Arc\u003cString\u003e) -\u003e Self {\n        Self::from_arc_string(val)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr"
                                }
                            }
                        },
                        "From\u003cString\u003e::from": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "From\u003cString\u003e::from",
                            "File": "lib.rs",
                            "Line": 310,
                            "StartOffset": 9268,
                            "EndOffset": 9380,
                            "Content": "impl From\u003cFastStr\u003e for String {\n    #[inline]\n    #[inline]\n    fn from(val: FastStr) -\u003e Self {\n        #[allow(deprecated)]\n        val.into_string()\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "",
                                    "PkgPath": "alloc::string",
                                    "Name": "String"
                                }
                            }
                        },
                        "FromIterator\u003cFastStr\u003e::from_iter": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "FromIterator\u003cFastStr\u003e::from_iter",
                            "File": "lib.rs",
                            "Line": 470,
                            "StartOffset": 12843,
                            "EndOffset": 12987,
                            "Content": "impl\u003c'a\u003e iter::FromIterator\u003c\u0026'a str\u003e for FastStr {\n    #[inline]\n    #[inline]\n    fn from_iter\u003cI: iter::IntoIterator\u003cItem = \u0026'a str\u003e\u003e(iter: I) -\u003e FastStr {\n        build_from_str_iter(iter.into_iter())\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr"
                                }
                            }
                        },
                        "FromStr\u003cFastStr\u003e::from_str": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "FromStr\u003cFastStr\u003e::from_str",
                            "File": "lib.rs",
                            "Line": 486,
                            "StartOffset": 13202,
                            "EndOffset": 13275,
                            "Content": "impl FromStr for FastStr {\n    type Err = Infallible;\n\n    #[inline]\n    #[inline]\n    fn from_str(s: \u0026str) -\u003e Result\u003cFastStr, Self::Err\u003e {\n        Ok(FastStr::new(s))\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr"
                                }
                            }
                        },
                        "Hash\u003cFastStr\u003e.hash": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "Hash\u003cFastStr\u003e.hash",
                            "File": "lib.rs",
                            "Line": 404,
                            "StartOffset": 11031,
                            "EndOffset": 11130,
                            "Content": "impl hash::Hash for FastStr {\n    #[inline]\n    #[inline]\n    fn hash\u003cH: hash::Hasher\u003e(\u0026self, hasher: \u0026mut H) {\n        self.as_str().hash(hasher)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr"
                                }
                            }
                        },
                        "Ord\u003cFastStr\u003e.cmp": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "Ord\u003cFastStr\u003e.cmp",
                            "File": "lib.rs",
                            "Line": 390,
                            "StartOffset": 10746,
                            "EndOffset": 10833,
                            "Content": "impl Ord for FastStr {\n    #[inline]\n    #[inline]\n    fn cmp(\u0026self, other: \u0026FastStr) -\u003e Ordering {\n        self.as_str().cmp(other.as_str())\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr"
                                }
                            }
                        },
                        "PartialEq\u003cFastStr\u003e.eq": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "PartialEq\u003cFastStr\u003e.eq",
                            "File": "lib.rs",
                            "Line": 325,
                            "StartOffset": 9529,
                            "EndOffset": 9626,
                            "Content": "impl PartialEq\u003cFastStr\u003e for FastStr {\n    #[inline]\n    #[inline]\n    fn eq(\u0026self, other: \u0026FastStr) -\u003e bool {\n        self.as_str() == other.as_str()\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr"
                                }
                            }
                        },
                        "PartialEq\u003cString\u003e.eq": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "PartialEq\u003cString\u003e.eq",
                            "File": "lib.rs",
                            "Line": 369,
                            "StartOffset": 10347,
                            "EndOffset": 10443,
                            "Content": "impl PartialEq\u003cFastStr\u003e for String {\n    #[inline]\n    #[inline]\n    fn eq(\u0026self, other: \u0026FastStr) -\u003e bool {\n        other == self\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "",
                                    "PkgPath": "alloc::string",
                                    "Name": "String"
                                }
                            }
                        },
                        "PartialEq\u003ceq\u003e.eq": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "PartialEq\u003ceq\u003e.eq",
                            "File": "lib.rs",
                            "Line": 341,
                            "StartOffset": 9826,
                            "EndOffset": 9919,
                            "Content": "impl PartialEq\u003cFastStr\u003e for str {\n    #[inline]\n    #[inline]\n    fn eq(\u0026self, other: \u0026FastStr) -\u003e bool {\n        other == self\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "eq"
                                }
                            }
                        },
                        "PartialOrd\u003cFastStr\u003e.partial_cmp": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "PartialOrd\u003cFastStr\u003e.partial_cmp",
                            "File": "lib.rs",
                            "Line": 397,
                            "StartOffset": 10883,
                            "EndOffset": 10993,
                            "Content": "impl PartialOrd for FastStr {\n    #[inline]\n    #[inline]\n    fn partial_cmp(\u0026self, other: \u0026FastStr) -\u003e Option\u003cOrdering\u003e {\n        Some(self.cmp(other))\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr"
                                }
                            }
                        },
                        "Repr.as_str": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "Repr.as_str",
                            "File": "lib.rs",
                            "Line": 646,
                            "StartOffset": 17119,
                            "EndOffset": 17619,
                            "Content": "impl Repr {\n    #[inline]\n    #[inline]\n    fn as_str(\u0026self) -\u003e \u0026str {\n        match self {\n            Self::Empty =\u003e \"\",\n            // Safety: this is guaranteed by the user when creating the `FastStr`.\n            Self::Bytes(bytes) =\u003e unsafe { std::str::from_utf8_unchecked(bytes) },\n            Self::ArcStr(arc_str) =\u003e arc_str,\n            Self::ArcString(arc_string) =\u003e arc_string,\n            Self::StaticStr(s) =\u003e s,\n            Self::Inline { len, buf } =\u003e unsafe { std::str::from_utf8_unchecked(\u0026buf[..*len]) },\n        }\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "Repr"
                                }
                            }
                        },
                        "Repr.deep_clone_bytes": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "Repr.deep_clone_bytes",
                            "File": "lib.rs",
                            "Line": 690,
                            "StartOffset": 18792,
                            "EndOffset": 19422,
                            "Content": "impl Repr {\n    #[inline]\n    #[inline]\n    fn deep_clone_bytes(\u0026self) -\u003e Self {\n        match self {\n            Self::Empty =\u003e Self::Empty,\n            // Safety: this is guaranteed by the user when creating the `FastStr`.\n            Self::Bytes(bytes) =\u003e unsafe { Self::new(std::str::from_utf8_unchecked(bytes)) },\n            Self::ArcStr(arc_str) =\u003e Self::ArcStr(Arc::clone(arc_str)),\n            Self::ArcString(arc_string) =\u003e Self::ArcString(Arc::clone(arc_string)),\n            Self::StaticStr(s) =\u003e Self::StaticStr(s),\n            Self::Inline { len, buf } =\u003e Self::Inline {\n                len: *len,\n                buf: *buf,\n            },\n        }\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "Repr"
                                }
                            }
                        },
                        "Repr.into_bytes": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "Repr.into_bytes",
                            "File": "lib.rs",
                            "Line": 676,
                            "StartOffset": 18248,
                            "EndOffset": 18777,
                            "Content": "impl Repr {\n    #[inline]\n    #[inline]\n    fn into_bytes(self) -\u003e Bytes {\n        match self {\n            Self::Empty =\u003e Bytes::new(),\n            Self::Bytes(bytes) =\u003e bytes,\n            Self::ArcStr(arc_str) =\u003e Bytes::from(arc_str.as_bytes().to_vec()),\n            Self::ArcString(arc_string) =\u003e {\n                Bytes::from(Arc::try_unwrap(arc_string).unwrap_or_else(|arc| (*arc).clone()))\n            }\n            Self::StaticStr(s) =\u003e Bytes::from_static(s.as_bytes()),\n            Self::Inline { len, buf } =\u003e Bytes::from(buf[..len].to_vec()),\n        }\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "Repr"
                                }
                            }
                        },
                        "Repr.into_string": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "Repr.into_string",
                            "File": "lib.rs",
                            "Line": 659,
                            "StartOffset": 17634,
                            "EndOffset": 18233,
                            "Content": "impl Repr {\n    #[inline]\n    #[inline]\n    #[deprecated]\n    fn into_string(self) -\u003e String {\n        match self {\n            Self::Empty =\u003e String::new(),\n            Self::Bytes(bytes) =\u003e unsafe { String::from_utf8_unchecked(bytes.into()) },\n            Self::ArcStr(arc_str) =\u003e arc_str.to_string(),\n            Self::ArcString(arc_string) =\u003e {\n                Arc::try_unwrap(arc_string).unwrap_or_else(|arc| (*arc).clone())\n            }\n            Self::StaticStr(s) =\u003e s.to_string(),\n            Self::Inline { len, buf } =\u003e unsafe {\n                String::from_utf8_unchecked(buf[..len].to_vec())\n            },\n        }\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "Repr"
                                }
                            }
                        },
                        "Repr.is_empty": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "Repr.is_empty",
                            "File": "lib.rs",
                            "Line": 634,
                            "StartOffset": 16727,
                            "EndOffset": 17104,
                            "Content": "impl Repr {\n    #[inline]\n    #[inline]\n    fn is_empty(\u0026self) -\u003e bool {\n        match self {\n            Self::Empty =\u003e true,\n            Self::Bytes(bytes) =\u003e bytes.is_empty(),\n            Self::ArcStr(arc_str) =\u003e arc_str.is_empty(),\n            Self::ArcString(arc_string) =\u003e arc_string.is_empty(),\n            Self::StaticStr(s) =\u003e s.is_empty(),\n            Self::Inline { len, .. } =\u003e *len == 0,\n        }\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "Repr"
                                }
                            }
                        },
                        "Repr.len": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "Repr.len",
                            "File": "lib.rs",
                            "Line": 622,
                            "StartOffset": 16367,
                            "EndOffset": 16712,
                            "Content": "impl Repr {\n    #[inline]\n    #[inline]\n    fn len(\u0026self) -\u003e usize {\n        match self {\n            Self::Empty =\u003e 0,\n            Self::Bytes(bytes) =\u003e bytes.len(),\n            Self::ArcStr(arc_str) =\u003e arc_str.len(),\n            Self::ArcString(arc_string) =\u003e arc_string.len(),\n            Self::StaticStr(s) =\u003e s.len(),\n            Self::Inline { len, .. } =\u003e *len,\n        }\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "Repr"
                                }
                            }
                        },
                        "Repr.slice_ref": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "Repr.slice_ref",
                            "File": "lib.rs",
                            "Line": 706,
                            "StartOffset": 19437,
                            "EndOffset": 21223,
                            "Content": "impl Repr {\n    #[inline]\n    #[inline]\n    fn slice_ref(\u0026self, subset: \u0026[u8]) -\u003e Self {\n        if subset.is_empty() {\n            return Self::Empty;\n        }\n        let bytes_p = self.as_ref().as_ptr() as usize;\n        let bytes_len = self.len();\n\n        let sub_p = subset.as_ptr() as usize;\n        let sub_len = subset.len();\n\n        assert!(\n            sub_p \u003e= bytes_p,\n            \"subset pointer ({:p}) is smaller than self pointer ({:p})\",\n            subset.as_ptr(),\n            self.as_ref().as_ptr(),\n        );\n        assert!(\n            sub_p + sub_len \u003c= bytes_p + bytes_len,\n            \"subset is out of bounds: self = ({:p}, {}), subset = ({:p}, {})\",\n            self.as_ref().as_ptr(),\n            bytes_len,\n            subset.as_ptr(),\n            sub_len,\n        );\n\n        let sub_offset = sub_p - bytes_p;\n        match self {\n            Repr::Empty =\u003e panic!(\"invalid slice ref, self is empty but subset is not\"),\n            Repr::Bytes(b) =\u003e Self::Bytes(b.slice_ref(subset)),\n            Repr::ArcStr(s) =\u003e Self::Bytes(Bytes::copy_from_slice(\n                s[sub_offset..sub_offset + sub_len].as_bytes(),\n            )),\n            Repr::ArcString(s) =\u003e Self::Bytes(Bytes::copy_from_slice(\n                s[sub_offset..sub_offset + sub_len].as_bytes(),\n            )),\n            Repr::StaticStr(s) =\u003e Self::StaticStr(unsafe {\n                std::str::from_utf8_unchecked(\u0026s.as_bytes()[sub_offset..sub_offset + sub_len])\n            }),\n            Repr::Inline { len: _, buf } =\u003e Self::Inline {\n                len: sub_len,\n                buf: {\n                    let mut new_buf = [0; INLINE_CAP];\n                    new_buf[..sub_len].copy_from_slice(\u0026buf[sub_offset..sub_offset + sub_len]);\n                    new_buf\n                },\n            },\n        }\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "Repr"
                                }
                            }
                        },
                        "Repr::empty": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "Repr::empty",
                            "File": "lib.rs",
                            "Line": 591,
                            "StartOffset": 15601,
                            "EndOffset": 15648,
                            "Content": "impl Repr {\n    #[inline]\n    #[inline]\n    const fn empty() -\u003e Self {\n        Self::Empty\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "Repr"
                                }
                            }
                        },
                        "Repr::from_arc_str": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "Repr::from_arc_str",
                            "File": "lib.rs",
                            "Line": 596,
                            "StartOffset": 15673,
                            "EndOffset": 15732,
                            "Content": "impl Repr {\n    #[inline]\n    #[inline]\n    fn from_arc_str(s: Arc\u003cstr\u003e) -\u003e Self {\n        Self::ArcStr(s)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "Repr"
                                }
                            }
                        },
                        "Repr::from_arc_string": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "Repr::from_arc_string",
                            "File": "lib.rs",
                            "Line": 608,
                            "StartOffset": 15982,
                            "EndOffset": 16167,
                            "Content": "impl Repr {\n    #[inline]\n    #[inline]\n    fn from_arc_string(s: Arc\u003cString\u003e) -\u003e Self {\n        match Arc::try_unwrap(s) {\n            Ok(s) =\u003e Self::from_string(s),\n            Err(s) =\u003e Self::ArcString(s),\n        }\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "Repr"
                                }
                            }
                        },
                        "Repr::from_bytes_unchecked": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "Repr::from_bytes_unchecked",
                            "File": "lib.rs",
                            "Line": 616,
                            "StartOffset": 16182,
                            "EndOffset": 16335,
                            "Content": "impl Repr {\n    #[inline]\n    /// Safety: the caller must guarantee that the bytes `v` are valid UTF-8.\n    #[inline]\n    unsafe fn from_bytes_unchecked(bytes: Bytes) -\u003e Self {\n        Self::Bytes(bytes)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "Repr"
                                }
                            }
                        },
                        "Repr::from_string": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "Repr::from_string",
                            "File": "lib.rs",
                            "Line": 601,
                            "StartOffset": 15761,
                            "EndOffset": 15921,
                            "Content": "impl Repr {\n    #[inline]\n    #[inline]\n    fn from_string(s: String) -\u003e Self {\n        let v = s.into_bytes();\n        // Safety: s is a `String`, thus we can assume it's valid utf-8\n        unsafe { Self::from_bytes_unchecked(v.into()) }\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "Repr"
                                }
                            }
                        },
                        "Repr::new": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "Repr::new",
                            "File": "lib.rs",
                            "Line": 554,
                            "StartOffset": 14531,
                            "EndOffset": 14979,
                            "Content": "impl Repr {\n    #[inline]\n    #[inline]\n    fn new\u003cT\u003e(text: T) -\u003e Self\n    where\n        T: AsRef\u003cstr\u003e,\n    {\n        let text = text.as_ref();\n        if text.is_empty() {\n            return Self::Empty;\n        }\n        {\n            let len = text.len();\n            if len \u003c= INLINE_CAP {\n                // Safety: we have checked the length of text \u003c= `INLINE_CAP`.\n                return unsafe { Self::new_inline_impl(text) };\n            }\n        }\n\n        Self::Bytes(Bytes::copy_from_slice(text.as_bytes()))\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "Repr"
                                }
                            }
                        },
                        "Repr::new_inline": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "Repr::new_inline",
                            "File": "lib.rs",
                            "Line": 574,
                            "StartOffset": 15045,
                            "EndOffset": 15258,
                            "Content": "impl Repr {\n    #[inline]\n    fn new_inline(s: \u0026str) -\u003e Self {\n        if s.len() \u003e INLINE_CAP {\n            panic!(\"[FastStr] string is too long to inline\");\n        }\n        // Safety: we have checked the length of s \u003c= `INLINE_CAP`.\n        unsafe { Self::new_inline_impl(s) }\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "Repr"
                                }
                            }
                        },
                        "Repr::new_inline_impl": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "Repr::new_inline_impl",
                            "File": "lib.rs",
                            "Line": 582,
                            "StartOffset": 15307,
                            "EndOffset": 15553,
                            "Content": "impl Repr {\n    #[inline]\n    /// # Safety\n    ///\n    /// The length of `s` must be \u003c= `INLINE_CAP`.\n    unsafe fn new_inline_impl(s: \u0026str) -\u003e Self {\n        let mut buf = [0u8; INLINE_CAP];\n        std::ptr::copy_nonoverlapping(s.as_ptr(), buf.as_mut_ptr(), s.len());\n        Self::Inline { len: s.len(), buf }\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "Repr"
                                }
                            }
                        },
                        "build_from_str_iter": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "build_from_str_iter",
                            "File": "lib.rs",
                            "Line": 432,
                            "StartOffset": -1,
                            "EndOffset": 12383,
                            "Content": "fn build_from_str_iter\u003cT\u003e(mut iter: impl Iterator\u003cItem = T\u003e) -\u003e FastStr\nwhere\n    T: AsRef\u003cstr\u003e,\n    String: iter::Extend\u003cT\u003e,\n{\n    let mut len = 0;\n    let mut buf = [0u8; INLINE_CAP];\n    while let Some(slice) = iter.next() {\n        let slice = slice.as_ref();\n        let size = slice.len();\n        if size + len \u003e INLINE_CAP {\n            let mut s = String::with_capacity(size + len);\n            s.push_str(unsafe { core::str::from_utf8_unchecked(\u0026buf[..len]) });\n            s.push_str(slice);\n            s.extend(iter);\n            return FastStr(Repr::Bytes(Bytes::from(s)));\n        }\n        buf[len..][..size].copy_from_slice(slice.as_bytes());\n        len += size;\n    }\n    FastStr(Repr::Inline { len, buf })\n}"
                        }
                    },
                    "Types": {
                        "Err": {
                            "Exported": false,
                            "TypeKind": "type-parameter",
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "Err",
                            "File": "lib.rs",
                            "Line": 484,
                            "StartOffset": 13148,
                            "EndOffset": 13170,
                            "Content": "type Err = Infallible;"
                        },
                        "FastStr": {
                            "Exported": false,
                            "TypeKind": "struct",
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "FastStr",
                            "File": "lib.rs",
                            "Line": 15,
                            "StartOffset": -1,
                            "EndOffset": 387,
                            "Content": "/// `FastStr` is a string type that try to avoid the cost of clone.\n#[derive(Clone)]\npub struct FastStr(Repr);",
                            "Methods": {
                                "as_ref": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "AsRef\u003cFastStr\u003e.as_ref"
                                },
                                "as_str": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr.as_str"
                                },
                                "borrow": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "Borrow\u003cFastStr\u003e.borrow"
                                },
                                "cmp": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "Ord\u003cFastStr\u003e.cmp"
                                },
                                "deep_clone_bytes": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr.deep_clone_bytes"
                                },
                                "deref": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "Deref\u003cFastStr\u003e.deref"
                                },
                                "eq": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "PartialEq\u003cFastStr\u003e.eq"
                                },
                                "fmt": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "Debug\u003cFastStr\u003e.fmt"
                                },
                                "hash": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "Hash\u003cFastStr\u003e.hash"
                                },
                                "index": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr.index"
                                },
                                "into_bytes": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr.into_bytes"
                                },
                                "into_string": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr.into_string"
                                },
                                "is_empty": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr.is_empty"
                                },
                                "len": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr.len"
                                },
                                "partial_cmp": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "PartialOrd\u003cFastStr\u003e.partial_cmp"
                                },
                                "slice_ref": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr.slice_ref"
                                }
                            }
                        },
                        "Repr": {
                            "Exported": false,
                            "TypeKind": "enum",
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "Repr",
                            "File": "lib.rs",
                            "Line": 543,
                            "StartOffset": -1,
                            "EndOffset": 14475,
                            "Content": "#[derive(Clone)]\nenum Repr {\n    Empty,\n    Bytes(Bytes),\n    ArcStr(Arc\u003cstr\u003e),\n    ArcString(Arc\u003cString\u003e),\n    StaticStr(\u0026'static str),\n    Inline { len: usize, buf: [u8; INLINE_CAP] },\n}",
                            "Methods": {
                                "as_ref": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "AsRef\u003cRepr\u003e.as_ref"
                                },
                                "as_str": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "Repr.as_str"
                                },
                                "deep_clone_bytes": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "Repr.deep_clone_bytes"
                                },
                                "into_bytes": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "into_bytes"
                                },
                                "into_string": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "Repr.into_string"
                                },
                                "is_empty": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "Repr.is_empty"
                                },
                                "len": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "Repr.len"
                                },
                                "slice_ref": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "Repr.slice_ref"
                                }
                            }
                        },
                        "Target": {
                            "Exported": false,
                            "TypeKind": "type-parameter",
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "Target",
                            "File": "lib.rs",
                            "Line": 301,
                            "StartOffset": 9144,
                            "EndOffset": 9162,
                            "Content": "type Target = str;"
                        }
                    },
                    "Vars": {
                        "(min_remaining, _)": {
                            "IsExported": false,
                            "IsConst": false,
                            "IsPointer": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "(min_remaining, _)",
                            "File": "lib.rs",
                            "Line": 265,
                            "StartOffset": 8309,
                            "EndOffset": 8351,
                            "Content": "let (min_remaining, _) = iter.size_hint();"
                        },
                        "(min_size, _)": {
                            "IsExported": false,
                            "IsConst": false,
                            "IsPointer": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "(min_size, _)",
                            "File": "lib.rs",
                            "Line": 255,
                            "StartOffset": 7888,
                            "EndOffset": 7925,
                            "Content": "let (min_size, _) = iter.size_hint();"
                        },
                        "INLINE_CAP": {
                            "IsExported": false,
                            "IsConst": true,
                            "IsPointer": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "INLINE_CAP",
                            "File": "lib.rs",
                            "Line": 541,
                            "StartOffset": -1,
                            "EndOffset": 14334,
                            "Content": "const INLINE_CAP: usize = 24;"
                        },
                        "bytes_len": {
                            "IsExported": false,
                            "IsConst": false,
                            "IsPointer": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "bytes_len",
                            "File": "lib.rs",
                            "Line": 712,
                            "StartOffset": 19578,
                            "EndOffset": 19605,
                            "Content": "let bytes_len = self.len();"
                        },
                        "bytes_p": {
                            "IsExported": false,
                            "IsConst": false,
                            "IsPointer": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "bytes_p",
                            "File": "lib.rs",
                            "Line": 711,
                            "StartOffset": 19568,
                            "EndOffset": 19614,
                            "Content": "let bytes_p = self.as_ref().as_ptr() as usize;"
                        },
                        "iter": {
                            "IsExported": false,
                            "IsConst": false,
                            "IsPointer": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "iter",
                            "File": "lib.rs",
                            "Line": 427,
                            "StartOffset": 11547,
                            "EndOffset": 11575,
                            "Content": "let iter = iter.into_iter();"
                        },
                        "len": {
                            "IsExported": false,
                            "IsConst": false,
                            "IsPointer": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "len",
                            "File": "lib.rs",
                            "Line": 564,
                            "StartOffset": 14740,
                            "EndOffset": 14761,
                            "Content": "let len = text.len();"
                        },
                        "mut buf": {
                            "IsExported": false,
                            "IsConst": false,
                            "IsPointer": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "mut buf",
                            "File": "lib.rs",
                            "Line": 586,
                            "StartOffset": 15388,
                            "EndOffset": 15420,
                            "Content": "let mut buf = [0u8; INLINE_CAP];"
                        },
                        "mut len": {
                            "IsExported": false,
                            "IsConst": false,
                            "IsPointer": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "mut len",
                            "File": "lib.rs",
                            "Line": 260,
                            "StartOffset": 8144,
                            "EndOffset": 8160,
                            "Content": "let mut len = 0;"
                        },
                        "mut new_buf": {
                            "IsExported": false,
                            "IsConst": false,
                            "IsPointer": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "mut new_buf",
                            "File": "lib.rs",
                            "Line": 748,
                            "StartOffset": 21002,
                            "EndOffset": 21036,
                            "Content": "let mut new_buf = [0; INLINE_CAP];"
                        },
                        "mut s": {
                            "IsExported": false,
                            "IsConst": false,
                            "IsPointer": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "mut s",
                            "File": "lib.rs",
                            "Line": 443,
                            "StartOffset": 12003,
                            "EndOffset": 12049,
                            "Content": "let mut s = String::with_capacity(size + len);"
                        },
                        "s": {
                            "IsExported": false,
                            "IsConst": false,
                            "IsPointer": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "s",
                            "File": "lib.rs",
                            "Line": 68,
                            "StartOffset": 1954,
                            "EndOffset": 2006,
                            "Content": "let s = unsafe { std::str::from_utf8_unchecked(v) };"
                        },
                        "size": {
                            "IsExported": false,
                            "IsConst": false,
                            "IsPointer": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "size",
                            "File": "lib.rs",
                            "Line": 441,
                            "StartOffset": 11931,
                            "EndOffset": 11954,
                            "Content": "let size = slice.len();"
                        },
                        "slice": {
                            "IsExported": false,
                            "IsConst": false,
                            "IsPointer": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "slice",
                            "File": "lib.rs",
                            "Line": 440,
                            "StartOffset": 11889,
                            "EndOffset": 11916,
                            "Content": "let slice = slice.as_ref();"
                        },
                        "sub_len": {
                            "IsExported": false,
                            "IsConst": false,
                            "IsPointer": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "sub_len",
                            "File": "lib.rs",
                            "Line": 715,
                            "StartOffset": 19670,
                            "EndOffset": 19697,
                            "Content": "let sub_len = subset.len();"
                        },
                        "sub_offset": {
                            "IsExported": false,
                            "IsConst": false,
                            "IsPointer": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "sub_offset",
                            "File": "lib.rs",
                            "Line": 732,
                            "StartOffset": 20217,
                            "EndOffset": 20250,
                            "Content": "let sub_offset = sub_p - bytes_p;"
                        },
                        "sub_p": {
                            "IsExported": false,
                            "IsConst": false,
                            "IsPointer": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "sub_p",
                            "File": "lib.rs",
                            "Line": 714,
                            "StartOffset": 19669,
                            "EndOffset": 19706,
                            "Content": "let sub_p = subset.as_ptr() as usize;"
                        },
                        "text": {
                            "IsExported": false,
                            "IsConst": false,
                            "IsPointer": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "text",
                            "File": "lib.rs",
                            "Line": 559,
                            "StartOffset": 14625,
                            "EndOffset": 14650,
                            "Content": "let text = text.as_ref();"
                        },
                        "v": {
                            "IsExported": false,
                            "IsConst": false,
                            "IsPointer": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "v",
                            "File": "lib.rs",
                            "Line": 603,
                            "StartOffset": 15780,
                            "EndOffset": 15803,
                            "Content": "let v = s.into_bytes();"
                        }
                    }
                }
            },
            "Dependencies": {},
            "Files": {
                "lib.rs": {
                    "Path": "lib.rs"
                }
            }
        },
        "metainfo": {
            "Language": "rust",
            "Version": "",
            "Name": "metainfo",
            "Dir": "src",
            "Packages": {
                "metainfo": {
                    "IsMain": false,
                    "IsTest": false,
                    "PkgPath": "metainfo",
                    "Functions": {
                        "Backward\u003cMetaInfo\u003e.get_all_backward_downstreams": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "Backward\u003cMetaInfo\u003e.get_all_backward_downstreams",
                            "File": "src/lib.rs",
                            "Line": 515,
                            "StartOffset": 15665,
                            "EndOffset": 15870,
                            "Content": "impl backward::Backward for MetaInfo {\n    get_impl!(backward_transient, backward, transient);\n    get_impl!(backward_downstream, backward, stale);\n\n    set_impl!(backward_transient, backward, transient);\n    set_impl!(backward_downstream, backward, stale);\n\n    del_impl!(backward_transient, backward, transient);\n    del_impl!(backward_downstream, backward, stale);\n\n    fn get_all_backward_downstreams(\u0026self) -\u003e Option\u003c\u0026AHashMap\u003cFastStr, FastStr\u003e\u003e {\n        match self.backward_node.as_ref() {\n            Some(node) =\u003e node.get_all_stales(),\n            None =\u003e None,\n        }\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "FunctionCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::kv",
                                    "Name": "get_all_impl",
                                    "File": "src/lib.rs",
                                    "Line": 517,
                                    "StartOffset": 15777,
                                    "EndOffset": 15791
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "as_ref",
                                    "File": "src/lib.rs",
                                    "Line": 516,
                                    "StartOffset": 15695,
                                    "EndOffset": 15701
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/lib.rs",
                                    "Line": 515,
                                    "StartOffset": 15707,
                                    "EndOffset": 15713
                                },
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap",
                                    "File": "src/lib.rs",
                                    "Line": 515,
                                    "StartOffset": 15715,
                                    "EndOffset": 15723
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/lib.rs",
                                    "Line": 515,
                                    "StartOffset": 15724,
                                    "EndOffset": 15731
                                }
                            ]
                        },
                        "Backward\u003cMetaInfo\u003e.get_all_backward_transients": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "Backward\u003cMetaInfo\u003e.get_all_backward_transients",
                            "File": "src/lib.rs",
                            "Line": 508,
                            "StartOffset": 15442,
                            "EndOffset": 15650,
                            "Content": "impl backward::Backward for MetaInfo {\n    get_impl!(backward_transient, backward, transient);\n    get_impl!(backward_downstream, backward, stale);\n\n    set_impl!(backward_transient, backward, transient);\n    set_impl!(backward_downstream, backward, stale);\n\n    del_impl!(backward_transient, backward, transient);\n    del_impl!(backward_downstream, backward, stale);\n\n    fn get_all_backward_transients(\u0026self) -\u003e Option\u003c\u0026AHashMap\u003cFastStr, FastStr\u003e\u003e {\n        match self.backward_node.as_ref() {\n            Some(node) =\u003e node.get_all_transients(),\n            None =\u003e None,\n        }\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "Results": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/lib.rs",
                                    "Line": 508,
                                    "StartOffset": 15483,
                                    "EndOffset": 15489
                                },
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap",
                                    "File": "src/lib.rs",
                                    "Line": 508,
                                    "StartOffset": 15491,
                                    "EndOffset": 15499
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/lib.rs",
                                    "Line": 508,
                                    "StartOffset": 15500,
                                    "EndOffset": 15507
                                }
                            ],
                            "FunctionCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::kv",
                                    "Name": "get_all_impl",
                                    "File": "src/lib.rs",
                                    "Line": 510,
                                    "StartOffset": 15553,
                                    "EndOffset": 15571
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "as_ref",
                                    "File": "src/lib.rs",
                                    "Line": 509,
                                    "StartOffset": 15472,
                                    "EndOffset": 15478
                                }
                            ]
                        },
                        "Backward\u003cMetaInfo\u003e.get_all_backward_transients_with_http_prefix": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "Backward\u003cMetaInfo\u003e.get_all_backward_transients_with_http_prefix",
                            "File": "src/lib.rs",
                            "Line": 526,
                            "StartOffset": 16057,
                            "EndOffset": 16158,
                            "Content": "impl backward::Backward for MetaInfo {\n    get_impl!(backward_transient, backward, transient);\n    get_impl!(backward_downstream, backward, stale);\n\n    set_impl!(backward_transient, backward, transient);\n    set_impl!(backward_downstream, backward, stale);\n\n    del_impl!(backward_transient, backward, transient);\n    del_impl!(backward_downstream, backward, stale);\n\n    fn get_all_backward_transients_with_http_prefix(\u0026self) -\u003e Option\u003cAHashMap\u003cFastStr, FastStr\u003e\u003e {\n        self.get_all_backword_transients_with_prefix(HttpConverter)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "Results": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/lib.rs",
                                    "Line": 526,
                                    "StartOffset": 16115,
                                    "EndOffset": 16121
                                },
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap",
                                    "File": "src/lib.rs",
                                    "Line": 526,
                                    "StartOffset": 16122,
                                    "EndOffset": 16130
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/lib.rs",
                                    "Line": 526,
                                    "StartOffset": 16131,
                                    "EndOffset": 16138
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo.get_all_backword_transients_with_prefix",
                                    "File": "src/lib.rs",
                                    "Line": 527,
                                    "StartOffset": 16067,
                                    "EndOffset": 16106
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter",
                                    "File": "src/lib.rs",
                                    "Line": 527,
                                    "StartOffset": 16107,
                                    "EndOffset": 16120
                                }
                            ]
                        },
                        "Backward\u003cMetaInfo\u003e.get_all_backward_transients_with_rpc_prefix": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "Backward\u003cMetaInfo\u003e.get_all_backward_transients_with_rpc_prefix",
                            "File": "src/lib.rs",
                            "Line": 522,
                            "StartOffset": 15885,
                            "EndOffset": 15985,
                            "Content": "impl backward::Backward for MetaInfo {\n    get_impl!(backward_transient, backward, transient);\n    get_impl!(backward_downstream, backward, stale);\n\n    set_impl!(backward_transient, backward, transient);\n    set_impl!(backward_downstream, backward, stale);\n\n    del_impl!(backward_transient, backward, transient);\n    del_impl!(backward_downstream, backward, stale);\n\n    fn get_all_backward_transients_with_rpc_prefix(\u0026self) -\u003e Option\u003cAHashMap\u003cFastStr, FastStr\u003e\u003e {\n        self.get_all_backword_transients_with_prefix(RpcConverter)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "Results": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/lib.rs",
                                    "Line": 522,
                                    "StartOffset": 15942,
                                    "EndOffset": 15948
                                },
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap",
                                    "File": "src/lib.rs",
                                    "Line": 522,
                                    "StartOffset": 15949,
                                    "EndOffset": 15957
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/lib.rs",
                                    "Line": 522,
                                    "StartOffset": 15958,
                                    "EndOffset": 15965
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo.get_all_backword_transients_with_prefix",
                                    "File": "src/lib.rs",
                                    "Line": 523,
                                    "StartOffset": 15895,
                                    "EndOffset": 15934
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "RpcConverter",
                                    "File": "src/lib.rs",
                                    "Line": 523,
                                    "StartOffset": 15935,
                                    "EndOffset": 15947
                                }
                            ]
                        },
                        "Backward\u003cMetaInfo\u003e.strip_http_prefix_and_set_backward_downstream": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "Backward\u003cMetaInfo\u003e.strip_http_prefix_and_set_backward_downstream",
                            "File": "src/lib.rs",
                            "Line": 541,
                            "StartOffset": 16551,
                            "EndOffset": 16858,
                            "Content": "impl backward::Backward for MetaInfo {\n    get_impl!(backward_transient, backward, transient);\n    get_impl!(backward_downstream, backward, stale);\n\n    set_impl!(backward_transient, backward, transient);\n    set_impl!(backward_downstream, backward, stale);\n\n    del_impl!(backward_transient, backward, transient);\n    del_impl!(backward_downstream, backward, stale);\n\n    fn strip_http_prefix_and_set_backward_downstream\u003cK: AsRef\u003cstr\u003e, V: Into\u003cFastStr\u003e\u003e(\n        \u0026mut self,\n        key: K,\n        value: V,\n    ) {\n        let key = key.as_ref();\n        if let Some(key) = HttpConverter.remove_backward_prefix(key) {\n            self.set_backward_downstream(key, value);\n        }\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "FunctionCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "set_impl",
                                    "File": "src/lib.rs",
                                    "Line": 548,
                                    "StartOffset": 16745,
                                    "EndOffset": 16768
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "as_ref",
                                    "File": "src/lib.rs",
                                    "Line": 546,
                                    "StartOffset": 16710,
                                    "EndOffset": 16716
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "Converter\u003cHttpConverter\u003e.remove_backward_prefix",
                                    "File": "src/lib.rs",
                                    "Line": 547,
                                    "StartOffset": 16737,
                                    "EndOffset": 16759
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "AsRef",
                                    "File": "src/lib.rs",
                                    "Line": 541,
                                    "StartOffset": 16603,
                                    "EndOffset": 16608
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "Into",
                                    "File": "src/lib.rs",
                                    "Line": 541,
                                    "StartOffset": 16618,
                                    "EndOffset": 16622
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/lib.rs",
                                    "Line": 541,
                                    "StartOffset": 16623,
                                    "EndOffset": 16630
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter",
                                    "File": "src/lib.rs",
                                    "Line": 547,
                                    "StartOffset": 16723,
                                    "EndOffset": 16736
                                }
                            ]
                        },
                        "Backward\u003cMetaInfo\u003e.strip_rpc_prefix_and_set_backward_downstream": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "Backward\u003cMetaInfo\u003e.strip_rpc_prefix_and_set_backward_downstream",
                            "File": "src/lib.rs",
                            "Line": 530,
                            "StartOffset": 16231,
                            "EndOffset": 16536,
                            "Content": "impl backward::Backward for MetaInfo {\n    get_impl!(backward_transient, backward, transient);\n    get_impl!(backward_downstream, backward, stale);\n\n    set_impl!(backward_transient, backward, transient);\n    set_impl!(backward_downstream, backward, stale);\n\n    del_impl!(backward_transient, backward, transient);\n    del_impl!(backward_downstream, backward, stale);\n\n    fn strip_rpc_prefix_and_set_backward_downstream\u003cK: AsRef\u003cstr\u003e, V: Into\u003cFastStr\u003e\u003e(\n        \u0026mut self,\n        key: K,\n        value: V,\n    ) {\n        let key = key.as_ref();\n        if let Some(key) = RpcConverter.remove_backward_prefix(key) {\n            self.set_backward_downstream(key, value);\n        }\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "FunctionCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "set_impl",
                                    "File": "src/lib.rs",
                                    "Line": 537,
                                    "StartOffset": 16424,
                                    "EndOffset": 16447
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "as_ref",
                                    "File": "src/lib.rs",
                                    "Line": 535,
                                    "StartOffset": 16389,
                                    "EndOffset": 16395
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "Converter\u003cRpcConverter\u003e.remove_backward_prefix",
                                    "File": "src/lib.rs",
                                    "Line": 536,
                                    "StartOffset": 16415,
                                    "EndOffset": 16437
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "AsRef",
                                    "File": "src/lib.rs",
                                    "Line": 530,
                                    "StartOffset": 16282,
                                    "EndOffset": 16287
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "Into",
                                    "File": "src/lib.rs",
                                    "Line": 530,
                                    "StartOffset": 16297,
                                    "EndOffset": 16301
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/lib.rs",
                                    "Line": 530,
                                    "StartOffset": 16302,
                                    "EndOffset": 16309
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "RpcConverter",
                                    "File": "src/lib.rs",
                                    "Line": 536,
                                    "StartOffset": 16402,
                                    "EndOffset": 16414
                                }
                            ]
                        },
                        "Debug\u003cMetaInfo\u003e.fmt": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "Debug\u003cMetaInfo\u003e.fmt",
                            "File": "src/lib.rs",
                            "Line": 623,
                            "StartOffset": 19077,
                            "EndOffset": 19172,
                            "Content": "impl fmt::Debug for MetaInfo {\n    fn fmt(\u0026self, f: \u0026mut fmt::Formatter\u003c'_\u003e) -\u003e fmt::Result {\n        f.debug_struct(\"MetaInfo\").finish()\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::fmt",
                                    "Name": "debug_struct",
                                    "File": "src/lib.rs",
                                    "Line": 624,
                                    "StartOffset": 19114,
                                    "EndOffset": 19126
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::fmt::builders",
                                    "Name": "finish",
                                    "File": "src/lib.rs",
                                    "Line": 624,
                                    "StartOffset": 19139,
                                    "EndOffset": 19145
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::fmt",
                                    "Name": "Formatter",
                                    "File": "src/lib.rs",
                                    "Line": 623,
                                    "StartOffset": 19104,
                                    "EndOffset": 19113
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::fmt",
                                    "Name": "Result",
                                    "File": "src/lib.rs",
                                    "Line": 623,
                                    "StartOffset": 19127,
                                    "EndOffset": 19133
                                }
                            ]
                        },
                        "Forward\u003cMetaInfo\u003e.get_all_persistents": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "Forward\u003cMetaInfo\u003e.get_all_persistents",
                            "File": "src/lib.rs",
                            "Line": 420,
                            "StartOffset": 12845,
                            "EndOffset": 13045,
                            "Content": "impl forward::Forward for MetaInfo {\n    get_impl!(persistent, forward, persistent);\n    get_impl!(transient, forward, transient);\n    get_impl!(upstream, forward, stale);\n\n    set_impl!(persistent, forward, persistent);\n    set_impl!(transient, forward, transient);\n    set_impl!(upstream, forward, stale);\n\n    del_impl!(persistent, forward, persistent);\n    del_impl!(transient, forward, transient);\n    del_impl!(upstream, forward, stale);\n\n    fn get_all_persistents(\u0026self) -\u003e Option\u003c\u0026AHashMap\u003cFastStr, FastStr\u003e\u003e {\n        match self.forward_node.as_ref() {\n            Some(node) =\u003e node.get_all_persistents(),\n            None =\u003e None,\n        }\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "Results": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/lib.rs",
                                    "Line": 420,
                                    "StartOffset": 12878,
                                    "EndOffset": 12884
                                },
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap",
                                    "File": "src/lib.rs",
                                    "Line": 420,
                                    "StartOffset": 12886,
                                    "EndOffset": 12894
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/lib.rs",
                                    "Line": 420,
                                    "StartOffset": 12895,
                                    "EndOffset": 12902
                                }
                            ],
                            "FunctionCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::kv",
                                    "Name": "get_all_impl",
                                    "File": "src/lib.rs",
                                    "Line": 422,
                                    "StartOffset": 12948,
                                    "EndOffset": 12967
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "as_ref",
                                    "File": "src/lib.rs",
                                    "Line": 421,
                                    "StartOffset": 12874,
                                    "EndOffset": 12880
                                }
                            ]
                        },
                        "Forward\u003cMetaInfo\u003e.get_all_persistents_and_transients_with_http_prefix": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "Forward\u003cMetaInfo\u003e.get_all_persistents_and_transients_with_http_prefix",
                            "File": "src/lib.rs",
                            "Line": 433,
                            "StartOffset": 13249,
                            "EndOffset": 13372,
                            "Content": "impl forward::Forward for MetaInfo {\n    get_impl!(persistent, forward, persistent);\n    get_impl!(transient, forward, transient);\n    get_impl!(upstream, forward, stale);\n\n    set_impl!(persistent, forward, persistent);\n    set_impl!(transient, forward, transient);\n    set_impl!(upstream, forward, stale);\n\n    del_impl!(persistent, forward, persistent);\n    del_impl!(transient, forward, transient);\n    del_impl!(upstream, forward, stale);\n\n    fn get_all_persistents_and_transients_with_http_prefix(\n        \u0026self,\n    ) -\u003e Option\u003cAHashMap\u003cFastStr, FastStr\u003e\u003e {\n        self.get_all_persistents_and_transients(HttpConverter)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo.get_all_persistents_and_transients",
                                    "File": "src/lib.rs",
                                    "Line": 436,
                                    "StartOffset": 13334,
                                    "EndOffset": 13368
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/lib.rs",
                                    "Line": 435,
                                    "StartOffset": 13315,
                                    "EndOffset": 13321
                                },
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap",
                                    "File": "src/lib.rs",
                                    "Line": 435,
                                    "StartOffset": 13322,
                                    "EndOffset": 13330
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/lib.rs",
                                    "Line": 435,
                                    "StartOffset": 13331,
                                    "EndOffset": 13338
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter",
                                    "File": "src/lib.rs",
                                    "Line": 436,
                                    "StartOffset": 13369,
                                    "EndOffset": 13382
                                }
                            ]
                        },
                        "Forward\u003cMetaInfo\u003e.get_all_persistents_and_transients_with_rpc_prefix": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "Forward\u003cMetaInfo\u003e.get_all_persistents_and_transients_with_rpc_prefix",
                            "File": "src/lib.rs",
                            "Line": 427,
                            "StartOffset": 13060,
                            "EndOffset": 13182,
                            "Content": "impl forward::Forward for MetaInfo {\n    get_impl!(persistent, forward, persistent);\n    get_impl!(transient, forward, transient);\n    get_impl!(upstream, forward, stale);\n\n    set_impl!(persistent, forward, persistent);\n    set_impl!(transient, forward, transient);\n    set_impl!(upstream, forward, stale);\n\n    del_impl!(persistent, forward, persistent);\n    del_impl!(transient, forward, transient);\n    del_impl!(upstream, forward, stale);\n\n    fn get_all_persistents_and_transients_with_rpc_prefix(\n        \u0026self,\n    ) -\u003e Option\u003cAHashMap\u003cFastStr, FastStr\u003e\u003e {\n        self.get_all_persistents_and_transients(RpcConverter)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo.get_all_persistents_and_transients",
                                    "File": "src/lib.rs",
                                    "Line": 430,
                                    "StartOffset": 13144,
                                    "EndOffset": 13178
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/lib.rs",
                                    "Line": 429,
                                    "StartOffset": 13125,
                                    "EndOffset": 13131
                                },
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap",
                                    "File": "src/lib.rs",
                                    "Line": 429,
                                    "StartOffset": 13132,
                                    "EndOffset": 13140
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/lib.rs",
                                    "Line": 429,
                                    "StartOffset": 13141,
                                    "EndOffset": 13148
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "RpcConverter",
                                    "File": "src/lib.rs",
                                    "Line": 430,
                                    "StartOffset": 13179,
                                    "EndOffset": 13191
                                }
                            ]
                        },
                        "Forward\u003cMetaInfo\u003e.get_all_transients": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "Forward\u003cMetaInfo\u003e.get_all_transients",
                            "File": "src/lib.rs",
                            "Line": 439,
                            "StartOffset": 13440,
                            "EndOffset": 13638,
                            "Content": "impl forward::Forward for MetaInfo {\n    get_impl!(persistent, forward, persistent);\n    get_impl!(transient, forward, transient);\n    get_impl!(upstream, forward, stale);\n\n    set_impl!(persistent, forward, persistent);\n    set_impl!(transient, forward, transient);\n    set_impl!(upstream, forward, stale);\n\n    del_impl!(persistent, forward, persistent);\n    del_impl!(transient, forward, transient);\n    del_impl!(upstream, forward, stale);\n\n    fn get_all_transients(\u0026self) -\u003e Option\u003c\u0026AHashMap\u003cFastStr, FastStr\u003e\u003e {\n        match self.forward_node.as_ref() {\n            Some(node) =\u003e node.get_all_transients(),\n            None =\u003e None,\n        }\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "Results": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/lib.rs",
                                    "Line": 439,
                                    "StartOffset": 13472,
                                    "EndOffset": 13478
                                },
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap",
                                    "File": "src/lib.rs",
                                    "Line": 439,
                                    "StartOffset": 13480,
                                    "EndOffset": 13488
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/lib.rs",
                                    "Line": 439,
                                    "StartOffset": 13489,
                                    "EndOffset": 13496
                                }
                            ],
                            "FunctionCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::kv",
                                    "Name": "get_all_impl",
                                    "File": "src/lib.rs",
                                    "Line": 441,
                                    "StartOffset": 13542,
                                    "EndOffset": 13560
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "as_ref",
                                    "File": "src/lib.rs",
                                    "Line": 440,
                                    "StartOffset": 13469,
                                    "EndOffset": 13475
                                }
                            ]
                        },
                        "Forward\u003cMetaInfo\u003e.get_all_upstreams": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "Forward\u003cMetaInfo\u003e.get_all_upstreams",
                            "File": "src/lib.rs",
                            "Line": 446,
                            "StartOffset": 13653,
                            "EndOffset": 13846,
                            "Content": "impl forward::Forward for MetaInfo {\n    get_impl!(persistent, forward, persistent);\n    get_impl!(transient, forward, transient);\n    get_impl!(upstream, forward, stale);\n\n    set_impl!(persistent, forward, persistent);\n    set_impl!(transient, forward, transient);\n    set_impl!(upstream, forward, stale);\n\n    del_impl!(persistent, forward, persistent);\n    del_impl!(transient, forward, transient);\n    del_impl!(upstream, forward, stale);\n\n    fn get_all_upstreams(\u0026self) -\u003e Option\u003c\u0026AHashMap\u003cFastStr, FastStr\u003e\u003e {\n        match self.forward_node.as_ref() {\n            Some(node) =\u003e node.get_all_stales(),\n            None =\u003e None,\n        }\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "FunctionCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::kv",
                                    "Name": "get_all_impl",
                                    "File": "src/lib.rs",
                                    "Line": 448,
                                    "StartOffset": 13754,
                                    "EndOffset": 13768
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "as_ref",
                                    "File": "src/lib.rs",
                                    "Line": 447,
                                    "StartOffset": 13682,
                                    "EndOffset": 13688
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/lib.rs",
                                    "Line": 446,
                                    "StartOffset": 13684,
                                    "EndOffset": 13690
                                },
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap",
                                    "File": "src/lib.rs",
                                    "Line": 446,
                                    "StartOffset": 13692,
                                    "EndOffset": 13700
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/lib.rs",
                                    "Line": 446,
                                    "StartOffset": 13701,
                                    "EndOffset": 13708
                                }
                            ]
                        },
                        "Forward\u003cMetaInfo\u003e.strip_http_prefix_and_set_persistent": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "Forward\u003cMetaInfo\u003e.strip_http_prefix_and_set_persistent",
                            "File": "src/lib.rs",
                            "Line": 475,
                            "StartOffset": 14464,
                            "EndOffset": 14755,
                            "Content": "impl forward::Forward for MetaInfo {\n    get_impl!(persistent, forward, persistent);\n    get_impl!(transient, forward, transient);\n    get_impl!(upstream, forward, stale);\n\n    set_impl!(persistent, forward, persistent);\n    set_impl!(transient, forward, transient);\n    set_impl!(upstream, forward, stale);\n\n    del_impl!(persistent, forward, persistent);\n    del_impl!(transient, forward, transient);\n    del_impl!(upstream, forward, stale);\n\n    fn strip_http_prefix_and_set_persistent\u003cK: AsRef\u003cstr\u003e, V: Into\u003cFastStr\u003e\u003e(\n        \u0026mut self,\n        key: K,\n        value: V,\n    ) {\n        let key = key.as_ref();\n        if let Some(key) = HttpConverter.remove_persistent_prefix(key) {\n            self.set_persistent(key, value);\n        }\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "FunctionCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "set_impl",
                                    "File": "src/lib.rs",
                                    "Line": 482,
                                    "StartOffset": 14649,
                                    "EndOffset": 14663
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "as_ref",
                                    "File": "src/lib.rs",
                                    "Line": 480,
                                    "StartOffset": 14614,
                                    "EndOffset": 14620
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "Converter\u003cHttpConverter\u003e.remove_persistent_prefix",
                                    "File": "src/lib.rs",
                                    "Line": 481,
                                    "StartOffset": 14641,
                                    "EndOffset": 14665
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "AsRef",
                                    "File": "src/lib.rs",
                                    "Line": 475,
                                    "StartOffset": 14507,
                                    "EndOffset": 14512
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "Into",
                                    "File": "src/lib.rs",
                                    "Line": 475,
                                    "StartOffset": 14522,
                                    "EndOffset": 14526
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/lib.rs",
                                    "Line": 475,
                                    "StartOffset": 14527,
                                    "EndOffset": 14534
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter",
                                    "File": "src/lib.rs",
                                    "Line": 481,
                                    "StartOffset": 14627,
                                    "EndOffset": 14640
                                }
                            ]
                        },
                        "Forward\u003cMetaInfo\u003e.strip_http_prefix_and_set_upstream": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "Forward\u003cMetaInfo\u003e.strip_http_prefix_and_set_upstream",
                            "File": "src/lib.rs",
                            "Line": 486,
                            "StartOffset": 14770,
                            "EndOffset": 15056,
                            "Content": "impl forward::Forward for MetaInfo {\n    get_impl!(persistent, forward, persistent);\n    get_impl!(transient, forward, transient);\n    get_impl!(upstream, forward, stale);\n\n    set_impl!(persistent, forward, persistent);\n    set_impl!(transient, forward, transient);\n    set_impl!(upstream, forward, stale);\n\n    del_impl!(persistent, forward, persistent);\n    del_impl!(transient, forward, transient);\n    del_impl!(upstream, forward, stale);\n\n    fn strip_http_prefix_and_set_upstream\u003cK: AsRef\u003cstr\u003e, V: Into\u003cFastStr\u003e\u003e(\n        \u0026mut self,\n        key: K,\n        value: V,\n    ) {\n        let key = key.as_ref();\n        if let Some(key) = HttpConverter.remove_transient_prefix(key) {\n            self.set_upstream(key, value);\n        }\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "FunctionCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "set_impl",
                                    "File": "src/lib.rs",
                                    "Line": 493,
                                    "StartOffset": 14953,
                                    "EndOffset": 14965
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "as_ref",
                                    "File": "src/lib.rs",
                                    "Line": 491,
                                    "StartOffset": 14918,
                                    "EndOffset": 14924
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "Converter\u003cHttpConverter\u003e.remove_transient_prefix",
                                    "File": "src/lib.rs",
                                    "Line": 492,
                                    "StartOffset": 14945,
                                    "EndOffset": 14968
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "AsRef",
                                    "File": "src/lib.rs",
                                    "Line": 486,
                                    "StartOffset": 14811,
                                    "EndOffset": 14816
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "Into",
                                    "File": "src/lib.rs",
                                    "Line": 486,
                                    "StartOffset": 14826,
                                    "EndOffset": 14830
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/lib.rs",
                                    "Line": 486,
                                    "StartOffset": 14831,
                                    "EndOffset": 14838
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter",
                                    "File": "src/lib.rs",
                                    "Line": 492,
                                    "StartOffset": 14931,
                                    "EndOffset": 14944
                                }
                            ]
                        },
                        "Forward\u003cMetaInfo\u003e.strip_rpc_prefix_and_set_persistent": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "Forward\u003cMetaInfo\u003e.strip_rpc_prefix_and_set_persistent",
                            "File": "src/lib.rs",
                            "Line": 453,
                            "StartOffset": 13861,
                            "EndOffset": 14150,
                            "Content": "impl forward::Forward for MetaInfo {\n    get_impl!(persistent, forward, persistent);\n    get_impl!(transient, forward, transient);\n    get_impl!(upstream, forward, stale);\n\n    set_impl!(persistent, forward, persistent);\n    set_impl!(transient, forward, transient);\n    set_impl!(upstream, forward, stale);\n\n    del_impl!(persistent, forward, persistent);\n    del_impl!(transient, forward, transient);\n    del_impl!(upstream, forward, stale);\n\n    fn strip_rpc_prefix_and_set_persistent\u003cK: AsRef\u003cstr\u003e, V: Into\u003cFastStr\u003e\u003e(\n        \u0026mut self,\n        key: K,\n        value: V,\n    ) {\n        let key = key.as_ref();\n        if let Some(key) = RpcConverter.remove_persistent_prefix(key) {\n            self.set_persistent(key, value);\n        }\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "FunctionCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "set_impl",
                                    "File": "src/lib.rs",
                                    "Line": 460,
                                    "StartOffset": 14045,
                                    "EndOffset": 14059
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "as_ref",
                                    "File": "src/lib.rs",
                                    "Line": 458,
                                    "StartOffset": 14010,
                                    "EndOffset": 14016
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "Converter\u003cRpcConverter\u003e.remove_persistent_prefix",
                                    "File": "src/lib.rs",
                                    "Line": 459,
                                    "StartOffset": 14036,
                                    "EndOffset": 14060
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "AsRef",
                                    "File": "src/lib.rs",
                                    "Line": 453,
                                    "StartOffset": 13903,
                                    "EndOffset": 13908
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "Into",
                                    "File": "src/lib.rs",
                                    "Line": 453,
                                    "StartOffset": 13918,
                                    "EndOffset": 13922
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/lib.rs",
                                    "Line": 453,
                                    "StartOffset": 13923,
                                    "EndOffset": 13930
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "RpcConverter",
                                    "File": "src/lib.rs",
                                    "Line": 459,
                                    "StartOffset": 14023,
                                    "EndOffset": 14035
                                }
                            ]
                        },
                        "Forward\u003cMetaInfo\u003e.strip_rpc_prefix_and_set_upstream": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "Forward\u003cMetaInfo\u003e.strip_rpc_prefix_and_set_upstream",
                            "File": "src/lib.rs",
                            "Line": 464,
                            "StartOffset": 14165,
                            "EndOffset": 14449,
                            "Content": "impl forward::Forward for MetaInfo {\n    get_impl!(persistent, forward, persistent);\n    get_impl!(transient, forward, transient);\n    get_impl!(upstream, forward, stale);\n\n    set_impl!(persistent, forward, persistent);\n    set_impl!(transient, forward, transient);\n    set_impl!(upstream, forward, stale);\n\n    del_impl!(persistent, forward, persistent);\n    del_impl!(transient, forward, transient);\n    del_impl!(upstream, forward, stale);\n\n    fn strip_rpc_prefix_and_set_upstream\u003cK: AsRef\u003cstr\u003e, V: Into\u003cFastStr\u003e\u003e(\n        \u0026mut self,\n        key: K,\n        value: V,\n    ) {\n        let key = key.as_ref();\n        if let Some(key) = RpcConverter.remove_transient_prefix(key) {\n            self.set_upstream(key, value);\n        }\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "FunctionCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "set_impl",
                                    "File": "src/lib.rs",
                                    "Line": 471,
                                    "StartOffset": 14347,
                                    "EndOffset": 14359
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "as_ref",
                                    "File": "src/lib.rs",
                                    "Line": 469,
                                    "StartOffset": 14312,
                                    "EndOffset": 14318
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "Converter\u003cRpcConverter\u003e.remove_transient_prefix",
                                    "File": "src/lib.rs",
                                    "Line": 470,
                                    "StartOffset": 14338,
                                    "EndOffset": 14361
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "AsRef",
                                    "File": "src/lib.rs",
                                    "Line": 464,
                                    "StartOffset": 14205,
                                    "EndOffset": 14210
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "Into",
                                    "File": "src/lib.rs",
                                    "Line": 464,
                                    "StartOffset": 14220,
                                    "EndOffset": 14224
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/lib.rs",
                                    "Line": 464,
                                    "StartOffset": 14225,
                                    "EndOffset": 14232
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "RpcConverter",
                                    "File": "src/lib.rs",
                                    "Line": 470,
                                    "StartOffset": 14325,
                                    "EndOffset": 14337
                                }
                            ]
                        },
                        "MetaInfo.clear": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "MetaInfo.clear",
                            "File": "src/lib.rs",
                            "Line": 288,
                            "StartOffset": 8873,
                            "EndOffset": 9527,
                            "Content": "impl MetaInfo {\n    /// Creates an empty `MetaInfo`.\n    #[inline]\n    /// Clear the `MetaInfo` of all inserted MetaInfo.\n    /// This will not clear the parent.\n    #[inline]\n    pub fn clear(\u0026mut self) {\n        self.parent = None;\n        if let Some(tmap) = self.tmap.as_mut() {\n            tmap.clear()\n        }\n        if let Some(smap) = self.smap.as_mut() {\n            smap.clear()\n        }\n        if let Some(faststr_tmap) = self.faststr_tmap.as_mut() {\n            faststr_tmap.clear()\n        }\n        if let Some(forward_node) = self.forward_node.as_mut() {\n            forward_node.clear()\n        }\n        if let Some(backward_node) = self.backward_node.as_mut() {\n            backward_node.clear()\n        }\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "as_mut",
                                    "File": "src/lib.rs",
                                    "Line": 293,
                                    "StartOffset": 9047,
                                    "EndOffset": 9053
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap.clear",
                                    "File": "src/lib.rs",
                                    "Line": 294,
                                    "StartOffset": 9054,
                                    "EndOffset": 9059
                                },
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "clear",
                                    "File": "src/lib.rs",
                                    "Line": 297,
                                    "StartOffset": 9138,
                                    "EndOffset": 9143
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap.clear",
                                    "File": "src/lib.rs",
                                    "Line": 300,
                                    "StartOffset": 9230,
                                    "EndOffset": 9235
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::kv",
                                    "Name": "Node.clear",
                                    "File": "src/lib.rs",
                                    "Line": 303,
                                    "StartOffset": 9338,
                                    "EndOffset": 9343
                                }
                            ]
                        },
                        "MetaInfo.contains": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "MetaInfo.contains",
                            "File": "src/lib.rs",
                            "Line": 176,
                            "StartOffset": 5361,
                            "EndOffset": 5747,
                            "Content": "impl MetaInfo {\n    /// Creates an empty `MetaInfo`.\n    #[inline]\n    /// Check if `MetaInfo` contains entry\n    #[inline]\n    pub fn contains\u003cT: 'static\u003e(\u0026self) -\u003e bool {\n        if self\n            .tmap\n            .as_ref()\n            .map(|tmap| tmap.contains::\u003cT\u003e())\n            .unwrap_or(false)\n        {\n            return true;\n        }\n        self.parent\n            .as_ref()\n            .map(|parent| parent.as_ref().contains::\u003cT\u003e())\n            .unwrap_or(false)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "as_ref",
                                    "File": "src/lib.rs",
                                    "Line": 181,
                                    "StartOffset": 5493,
                                    "EndOffset": 5499
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "map",
                                    "File": "src/lib.rs",
                                    "Line": 182,
                                    "StartOffset": 5511,
                                    "EndOffset": 5514
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap.contains",
                                    "File": "src/lib.rs",
                                    "Line": 182,
                                    "StartOffset": 5527,
                                    "EndOffset": 5535
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "unwrap_or",
                                    "File": "src/lib.rs",
                                    "Line": 183,
                                    "StartOffset": 5533,
                                    "EndOffset": 5542
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "alloc::sync",
                                    "Name": "as_ref",
                                    "File": "src/lib.rs",
                                    "Line": 189,
                                    "StartOffset": 5694,
                                    "EndOffset": 5700
                                }
                            ]
                        },
                        "MetaInfo.contains_faststr": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "MetaInfo.contains_faststr",
                            "File": "src/lib.rs",
                            "Line": 193,
                            "StartOffset": 5782,
                            "EndOffset": 6228,
                            "Content": "impl MetaInfo {\n    /// Creates an empty `MetaInfo`.\n    #[inline]\n    /// Check if `MetaInfo` contains the given Faststr newtype\n    #[inline]\n    pub fn contains_faststr\u003cT: 'static\u003e(\u0026self) -\u003e bool {\n        if self\n            .faststr_tmap\n            .as_ref()\n            .map(|faststr_tmap| faststr_tmap.contains::\u003cT\u003e())\n            .unwrap_or(false)\n        {\n            return true;\n        }\n        self.parent\n            .as_ref()\n            .map(|parent| parent.as_ref().contains_faststr::\u003cT\u003e())\n            .unwrap_or(false)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "as_ref",
                                    "File": "src/lib.rs",
                                    "Line": 198,
                                    "StartOffset": 5942,
                                    "EndOffset": 5948
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "map",
                                    "File": "src/lib.rs",
                                    "Line": 199,
                                    "StartOffset": 5968,
                                    "EndOffset": 5971
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap.contains",
                                    "File": "src/lib.rs",
                                    "Line": 199,
                                    "StartOffset": 6000,
                                    "EndOffset": 6008
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "unwrap_or",
                                    "File": "src/lib.rs",
                                    "Line": 200,
                                    "StartOffset": 5990,
                                    "EndOffset": 5999
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "alloc::sync",
                                    "Name": "as_ref",
                                    "File": "src/lib.rs",
                                    "Line": 206,
                                    "StartOffset": 6167,
                                    "EndOffset": 6173
                                }
                            ]
                        },
                        "MetaInfo.contains_string": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "MetaInfo.contains_string",
                            "File": "src/lib.rs",
                            "Line": 210,
                            "StartOffset": 6263,
                            "EndOffset": 6698,
                            "Content": "impl MetaInfo {\n    /// Creates an empty `MetaInfo`.\n    #[inline]\n    /// Check if `MetaInfo` contains the given string k-v\n    #[inline]\n    pub fn contains_string\u003cK: AsRef\u003cstr\u003e\u003e(\u0026self, key: K) -\u003e bool {\n        if self\n            .smap\n            .as_ref()\n            .map(|smap| smap.contains_key(key.as_ref()))\n            .unwrap_or(false)\n        {\n            return true;\n        }\n        self.parent\n            .as_ref()\n            .map(|parent| parent.as_ref().contains_string(key))\n            .unwrap_or(false)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "as_ref",
                                    "File": "src/lib.rs",
                                    "Line": 215,
                                    "StartOffset": 6428,
                                    "EndOffset": 6434
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "map",
                                    "File": "src/lib.rs",
                                    "Line": 216,
                                    "StartOffset": 6446,
                                    "EndOffset": 6449
                                },
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "contains_key",
                                    "File": "src/lib.rs",
                                    "Line": 216,
                                    "StartOffset": 6462,
                                    "EndOffset": 6474
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "as_ref",
                                    "File": "src/lib.rs",
                                    "Line": 216,
                                    "StartOffset": 6479,
                                    "EndOffset": 6485
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "unwrap_or",
                                    "File": "src/lib.rs",
                                    "Line": 217,
                                    "StartOffset": 6468,
                                    "EndOffset": 6477
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "alloc::sync",
                                    "Name": "as_ref",
                                    "File": "src/lib.rs",
                                    "Line": 223,
                                    "StartOffset": 6640,
                                    "EndOffset": 6646
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "AsRef",
                                    "File": "src/lib.rs",
                                    "Line": 212,
                                    "StartOffset": 6348,
                                    "EndOffset": 6353
                                }
                            ]
                        },
                        "MetaInfo.derive": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "MetaInfo.derive",
                            "File": "src/lib.rs",
                            "Line": 106,
                            "StartOffset": 2974,
                            "EndOffset": 4123,
                            "Content": "impl MetaInfo {\n    /// Creates an empty `MetaInfo`.\n    #[inline]\n    /// Derives the current [`MetaInfo`], returns two new equivalent `Metainfo`s.\n    ///\n    /// When the info is not found in the current scope, `MetaInfo` will try to get from parent.\n    ///\n    /// This is the recommended way.\n    #[inline]\n    pub fn derive(mut self) -\u003e (MetaInfo, MetaInfo) {\n        if self.tmap.is_none() \u0026\u0026 self.smap.is_none() \u0026\u0026 self.faststr_tmap.is_none() {\n            // we can use the same parent as self to make the tree small\n            let new = MetaInfo {\n                parent: self.parent.clone(),\n                tmap: None,\n                smap: None,\n                faststr_tmap: None,\n                forward_node: self.forward_node.clone(),\n                backward_node: self.backward_node.clone(),\n            };\n            (self, new)\n        } else {\n            let forward_node = self.forward_node.take();\n            let backward_node = self.backward_node.take();\n            let mi = Arc::new(self);\n            (\n                MetaInfo::from_node(mi.clone(), forward_node.clone(), backward_node.clone()),\n                MetaInfo::from_node(mi, forward_node, backward_node),\n            )\n        }\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "FunctionCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "alloc::sync",
                                    "Name": "new",
                                    "File": "src/lib.rs",
                                    "Line": 127,
                                    "StartOffset": 3856,
                                    "EndOffset": 3859
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo::from_node",
                                    "File": "src/lib.rs",
                                    "Line": 129,
                                    "StartOffset": 3952,
                                    "EndOffset": 3961
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "is_none",
                                    "File": "src/lib.rs",
                                    "Line": 113,
                                    "StartOffset": 3238,
                                    "EndOffset": 3245
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "clone",
                                    "File": "src/lib.rs",
                                    "Line": 116,
                                    "StartOffset": 3467,
                                    "EndOffset": 3472
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "take",
                                    "File": "src/lib.rs",
                                    "Line": 125,
                                    "StartOffset": 3805,
                                    "EndOffset": 3809
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "alloc::sync",
                                    "Name": "clone",
                                    "File": "src/lib.rs",
                                    "Line": 129,
                                    "StartOffset": 3965,
                                    "EndOffset": 3970
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo",
                                    "File": "src/lib.rs",
                                    "Line": 106,
                                    "StartOffset": 2998,
                                    "EndOffset": 3010
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "alloc::sync",
                                    "Name": "Arc",
                                    "File": "src/lib.rs",
                                    "Line": 127,
                                    "StartOffset": 3851,
                                    "EndOffset": 3854
                                }
                            ]
                        },
                        "MetaInfo.ensure_backward_node": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "MetaInfo.ensure_backward_node",
                            "File": "src/lib.rs",
                            "Line": 355,
                            "StartOffset": 10981,
                            "EndOffset": 11121,
                            "Content": "impl MetaInfo {\n    /// Creates an empty `MetaInfo`.\n    #[inline]\n    fn ensure_backward_node(\u0026mut self) {\n        if self.backward_node.is_none() {\n            self.backward_node = Some(Node::default())\n        }\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "is_none",
                                    "File": "src/lib.rs",
                                    "Line": 356,
                                    "StartOffset": 11008,
                                    "EndOffset": 11015
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::kv",
                                    "Name": "Node",
                                    "File": "src/lib.rs",
                                    "Line": 357,
                                    "StartOffset": 11057,
                                    "EndOffset": 11061
                                }
                            ]
                        },
                        "MetaInfo.ensure_forward_node": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "MetaInfo.ensure_forward_node",
                            "File": "src/lib.rs",
                            "Line": 349,
                            "StartOffset": 10829,
                            "EndOffset": 10966,
                            "Content": "impl MetaInfo {\n    /// Creates an empty `MetaInfo`.\n    #[inline]\n    fn ensure_forward_node(\u0026mut self) {\n        if self.forward_node.is_none() {\n            self.forward_node = Some(Node::default())\n        }\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "is_none",
                                    "File": "src/lib.rs",
                                    "Line": 350,
                                    "StartOffset": 10855,
                                    "EndOffset": 10862
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::kv",
                                    "Name": "Node",
                                    "File": "src/lib.rs",
                                    "Line": 351,
                                    "StartOffset": 10903,
                                    "EndOffset": 10907
                                }
                            ]
                        },
                        "MetaInfo.extend": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "MetaInfo.extend",
                            "File": "src/lib.rs",
                            "Line": 310,
                            "StartOffset": 9542,
                            "EndOffset": 10814,
                            "Content": "impl MetaInfo {\n    /// Creates an empty `MetaInfo`.\n    #[inline]\n    /// Extends self with the items from another `MetaInfo`.\n    /// Only extend the items in the current scope.\n    #[inline]\n    pub fn extend(\u0026mut self, other: MetaInfo) {\n        if let Some(tmap) = other.tmap {\n            self.tmap\n                .get_or_insert_with(|| TypeMap::with_capacity(DEFAULT_MAP_SIZE))\n                .extend(tmap);\n        }\n\n        if let Some(smap) = other.smap {\n            self.smap\n                .get_or_insert_with(|| AHashMap::with_capacity(DEFAULT_MAP_SIZE))\n                .extend(smap);\n        }\n\n        if let Some(faststr_tmap) = other.faststr_tmap {\n            self.faststr_tmap\n                .get_or_insert_with(|| FastStrMap::with_capacity(DEFAULT_MAP_SIZE))\n                .extend(faststr_tmap);\n        }\n\n        if let Some(node) = other.forward_node {\n            if self.forward_node.is_none() {\n                self.forward_node = Some(node);\n            } else {\n                self.forward_node.as_mut().unwrap().extend(node);\n            }\n        }\n\n        if let Some(node) = other.backward_node {\n            if self.backward_node.is_none() {\n                self.backward_node = Some(node);\n            } else {\n                self.backward_node.as_mut().unwrap().extend(node);\n            }\n        }\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "FunctionCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap::with_capacity",
                                    "File": "src/lib.rs",
                                    "Line": 316,
                                    "StartOffset": 9803,
                                    "EndOffset": 9816
                                },
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap::with_capacity",
                                    "File": "src/lib.rs",
                                    "Line": 322,
                                    "StartOffset": 9990,
                                    "EndOffset": 10003
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap::with_capacity",
                                    "File": "src/lib.rs",
                                    "Line": 328,
                                    "StartOffset": 10195,
                                    "EndOffset": 10208
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "get_or_insert_with",
                                    "File": "src/lib.rs",
                                    "Line": 316,
                                    "StartOffset": 9772,
                                    "EndOffset": 9790
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap.extend",
                                    "File": "src/lib.rs",
                                    "Line": 317,
                                    "StartOffset": 9794,
                                    "EndOffset": 9800
                                },
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "Extend\u003cAHashMap\u003e.extend",
                                    "File": "src/lib.rs",
                                    "Line": 323,
                                    "StartOffset": 9980,
                                    "EndOffset": 9986
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap.extend",
                                    "File": "src/lib.rs",
                                    "Line": 329,
                                    "StartOffset": 10191,
                                    "EndOffset": 10197
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "is_none",
                                    "File": "src/lib.rs",
                                    "Line": 333,
                                    "StartOffset": 10341,
                                    "EndOffset": 10348
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "as_mut",
                                    "File": "src/lib.rs",
                                    "Line": 336,
                                    "StartOffset": 10484,
                                    "EndOffset": 10490
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "unwrap",
                                    "File": "src/lib.rs",
                                    "Line": 336,
                                    "StartOffset": 10493,
                                    "EndOffset": 10499
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::kv",
                                    "Name": "Node.extend",
                                    "File": "src/lib.rs",
                                    "Line": 336,
                                    "StartOffset": 10502,
                                    "EndOffset": 10508
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo",
                                    "File": "src/lib.rs",
                                    "Line": 313,
                                    "StartOffset": 9688,
                                    "EndOffset": 9696
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap",
                                    "File": "src/lib.rs",
                                    "Line": 316,
                                    "StartOffset": 9794,
                                    "EndOffset": 9801
                                },
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap",
                                    "File": "src/lib.rs",
                                    "Line": 322,
                                    "StartOffset": 9980,
                                    "EndOffset": 9988
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap",
                                    "File": "src/lib.rs",
                                    "Line": 328,
                                    "StartOffset": 10183,
                                    "EndOffset": 10193
                                }
                            ],
                            "GlobalVars": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "DEFAULT_MAP_SIZE",
                                    "File": "src/lib.rs",
                                    "Line": 316,
                                    "StartOffset": 9817,
                                    "EndOffset": 9833
                                }
                            ]
                        },
                        "MetaInfo.get": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "MetaInfo.get",
                            "File": "src/lib.rs",
                            "Line": 227,
                            "StartOffset": 6733,
                            "EndOffset": 7054,
                            "Content": "impl MetaInfo {\n    /// Creates an empty `MetaInfo`.\n    #[inline]\n    /// Get a reference to a type previously inserted on this `MetaInfo`.\n    #[inline]\n    pub fn get\u003cT: 'static\u003e(\u0026self) -\u003e Option\u003c\u0026T\u003e {\n        self.tmap.as_ref().and_then(|tmap| tmap.get()).or_else(|| {\n            self.parent\n                .as_ref()\n                .and_then(|parent| parent.as_ref().get::\u003cT\u003e())\n        })\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "as_ref",
                                    "File": "src/lib.rs",
                                    "Line": 230,
                                    "StartOffset": 6836,
                                    "EndOffset": 6842
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "and_then",
                                    "File": "src/lib.rs",
                                    "Line": 230,
                                    "StartOffset": 6845,
                                    "EndOffset": 6853
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap.get",
                                    "File": "src/lib.rs",
                                    "Line": 230,
                                    "StartOffset": 6866,
                                    "EndOffset": 6869
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "or_else",
                                    "File": "src/lib.rs",
                                    "Line": 230,
                                    "StartOffset": 6873,
                                    "EndOffset": 6880
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "alloc::sync",
                                    "Name": "as_ref",
                                    "File": "src/lib.rs",
                                    "Line": 233,
                                    "StartOffset": 7002,
                                    "EndOffset": 7008
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/lib.rs",
                                    "Line": 229,
                                    "StartOffset": 6841,
                                    "EndOffset": 6847
                                }
                            ]
                        },
                        "MetaInfo.get_all_backword_transients_with_prefix": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "MetaInfo.get_all_backword_transients_with_prefix",
                            "File": "src/lib.rs",
                            "Line": 592,
                            "StartOffset": 18215,
                            "EndOffset": 19059,
                            "Content": "impl MetaInfo {\n    #[inline]\n    #[inline]\n    fn get_all_backword_transients_with_prefix\u003cC\u003e(\n        \u0026self,\n        converter: C,\n    ) -\u003e Option\u003cAHashMap\u003cFastStr, FastStr\u003e\u003e\n    where\n        C: Converter,\n    {\n        match self.backward_node.as_ref() {\n            Some(node) =\u003e {\n                if let Some(t) = node.get_all_transients() {\n                    let new_cap = t.len();\n                    if new_cap == 0 {\n                        return None;\n                    }\n                    let mut map = AHashMap::with_capacity(new_cap);\n                    map.extend(\n                        t.iter()\n                            .map(|(k, v)| (converter.add_transient_prefix(k), v.clone())),\n                    );\n                    Some(map)\n                } else {\n                    None\n                }\n            }\n            None =\u003e None,\n        }\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "FunctionCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::kv",
                                    "Name": "get_all_impl",
                                    "File": "src/lib.rs",
                                    "Line": 602,
                                    "StartOffset": 18478,
                                    "EndOffset": 18496
                                },
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap::with_capacity",
                                    "File": "src/lib.rs",
                                    "Line": 607,
                                    "StartOffset": 18691,
                                    "EndOffset": 18704
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "as_ref",
                                    "File": "src/lib.rs",
                                    "Line": 600,
                                    "StartOffset": 18423,
                                    "EndOffset": 18429
                                },
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "len",
                                    "File": "src/lib.rs",
                                    "Line": 603,
                                    "StartOffset": 18504,
                                    "EndOffset": 18507
                                },
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "Extend\u003cAHashMap\u003e.extend",
                                    "File": "src/lib.rs",
                                    "Line": 608,
                                    "StartOffset": 18693,
                                    "EndOffset": 18699
                                },
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "iter",
                                    "File": "src/lib.rs",
                                    "Line": 609,
                                    "StartOffset": 18763,
                                    "EndOffset": 18767
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::iter::traits::iterator",
                                    "Name": "map",
                                    "File": "src/lib.rs",
                                    "Line": 610,
                                    "StartOffset": 18798,
                                    "EndOffset": 18801
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/lib.rs",
                                    "Line": 596,
                                    "StartOffset": 18301,
                                    "EndOffset": 18307
                                },
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap",
                                    "File": "src/lib.rs",
                                    "Line": 596,
                                    "StartOffset": 18308,
                                    "EndOffset": 18316
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/lib.rs",
                                    "Line": 596,
                                    "StartOffset": 18317,
                                    "EndOffset": 18324
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "Converter",
                                    "File": "src/lib.rs",
                                    "Line": 598,
                                    "StartOffset": 18369,
                                    "EndOffset": 18378
                                }
                            ]
                        },
                        "MetaInfo.get_all_persistents_and_transients": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "MetaInfo.get_all_persistents_and_transients",
                            "File": "src/lib.rs",
                            "Line": 554,
                            "StartOffset": 16876,
                            "EndOffset": 18200,
                            "Content": "impl MetaInfo {\n    #[inline]\n    #[inline]\n    fn get_all_persistents_and_transients\u003cC\u003e(\n        \u0026self,\n        converter: C,\n    ) -\u003e Option\u003cAHashMap\u003cFastStr, FastStr\u003e\u003e\n    where\n        C: Converter,\n    {\n        match self.forward_node.as_ref() {\n            Some(node) =\u003e {\n                let persistents = node.get_all_persistents();\n                let transients = node.get_all_transients();\n                let new_cap = persistents.map(|p| p.len()).unwrap_or(0)\n                    + transients.map(|t| t.len()).unwrap_or(0);\n                if new_cap == 0 {\n                    return None;\n                }\n                let mut map = AHashMap::with_capacity(new_cap);\n                if let Some(persistents) = persistents {\n                    map.extend(\n                        persistents\n                            .iter()\n                            .map(|(k, v)| (converter.add_persistent_prefix(k), v.clone())),\n                    );\n                }\n                if let Some(transients) = transients {\n                    map.extend(\n                        transients\n                            .iter()\n                            .map(|(k, v)| (converter.add_transient_prefix(k), v.clone())),\n                    );\n                }\n                Some(map)\n            }\n            None =\u003e None,\n        }\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "Results": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "get_all_persistents_and_transients",
                                    "File": "src/lib.rs",
                                    "Line": 555,
                                    "StartOffset": 16895,
                                    "EndOffset": 16929
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/lib.rs",
                                    "Line": 558,
                                    "StartOffset": 16972,
                                    "EndOffset": 16978
                                },
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap",
                                    "File": "src/lib.rs",
                                    "Line": 558,
                                    "StartOffset": 16979,
                                    "EndOffset": 16987
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/lib.rs",
                                    "Line": 558,
                                    "StartOffset": 16988,
                                    "EndOffset": 16995
                                }
                            ],
                            "FunctionCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::kv",
                                    "Name": "get_all_impl",
                                    "File": "src/lib.rs",
                                    "Line": 564,
                                    "StartOffset": 17149,
                                    "EndOffset": 17168
                                },
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap::with_capacity",
                                    "File": "src/lib.rs",
                                    "Line": 571,
                                    "StartOffset": 17503,
                                    "EndOffset": 17516
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "as_ref",
                                    "File": "src/lib.rs",
                                    "Line": 562,
                                    "StartOffset": 17093,
                                    "EndOffset": 17099
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "map",
                                    "File": "src/lib.rs",
                                    "Line": 566,
                                    "StartOffset": 17242,
                                    "EndOffset": 17245
                                },
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "len",
                                    "File": "src/lib.rs",
                                    "Line": 566,
                                    "StartOffset": 17252,
                                    "EndOffset": 17255
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "unwrap_or",
                                    "File": "src/lib.rs",
                                    "Line": 566,
                                    "StartOffset": 17259,
                                    "EndOffset": 17268
                                },
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "Extend\u003cAHashMap\u003e.extend",
                                    "File": "src/lib.rs",
                                    "Line": 573,
                                    "StartOffset": 17569,
                                    "EndOffset": 17575
                                },
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "iter",
                                    "File": "src/lib.rs",
                                    "Line": 575,
                                    "StartOffset": 17663,
                                    "EndOffset": 17667
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::iter::traits::iterator",
                                    "Name": "map",
                                    "File": "src/lib.rs",
                                    "Line": 576,
                                    "StartOffset": 17699,
                                    "EndOffset": 17702
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "add_transient_prefix",
                                    "File": "src/lib.rs",
                                    "Line": 583,
                                    "StartOffset": 18014,
                                    "EndOffset": 18034
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "Converter",
                                    "File": "src/lib.rs",
                                    "Line": 560,
                                    "StartOffset": 17040,
                                    "EndOffset": 17049
                                },
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap",
                                    "File": "src/lib.rs",
                                    "Line": 571,
                                    "StartOffset": 17493,
                                    "EndOffset": 17501
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/lib.rs",
                                    "Line": 576,
                                    "StartOffset": 17751,
                                    "EndOffset": 17756
                                }
                            ]
                        },
                        "MetaInfo.get_faststr": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "MetaInfo.get_faststr",
                            "File": "src/lib.rs",
                            "Line": 244,
                            "StartOffset": 7323,
                            "EndOffset": 7770,
                            "Content": "impl MetaInfo {\n    /// Creates an empty `MetaInfo`.\n    #[inline]\n    /// Get a reference to a faststr newtype previously inserted on this `MetaInfo`.\n    #[inline]\n    pub fn get_faststr\u003cT: 'static\u003e(\u0026self) -\u003e Option\u003c\u0026FastStr\u003e {\n        self.faststr_tmap\n            .as_ref()\n            .and_then(|faststr_tmap: \u0026FastStrMap| faststr_tmap.get::\u003cT\u003e())\n            .or_else(|| {\n                self.parent\n                    .as_ref()\n                    .and_then(|parent| parent.as_ref().get_faststr::\u003cT\u003e())\n            })\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "as_ref",
                                    "File": "src/lib.rs",
                                    "Line": 248,
                                    "StartOffset": 7496,
                                    "EndOffset": 7502
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "and_then",
                                    "File": "src/lib.rs",
                                    "Line": 249,
                                    "StartOffset": 7522,
                                    "EndOffset": 7530
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap.get",
                                    "File": "src/lib.rs",
                                    "Line": 249,
                                    "StartOffset": 7572,
                                    "EndOffset": 7575
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "or_else",
                                    "File": "src/lib.rs",
                                    "Line": 250,
                                    "StartOffset": 7544,
                                    "EndOffset": 7551
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "alloc::sync",
                                    "Name": "as_ref",
                                    "File": "src/lib.rs",
                                    "Line": 253,
                                    "StartOffset": 7706,
                                    "EndOffset": 7712
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/lib.rs",
                                    "Line": 246,
                                    "StartOffset": 7450,
                                    "EndOffset": 7456
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/lib.rs",
                                    "Line": 246,
                                    "StartOffset": 7458,
                                    "EndOffset": 7465
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap",
                                    "File": "src/lib.rs",
                                    "Line": 249,
                                    "StartOffset": 7547,
                                    "EndOffset": 7557
                                }
                            ]
                        },
                        "MetaInfo.get_string": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "MetaInfo.get_string",
                            "File": "src/lib.rs",
                            "Line": 266,
                            "StartOffset": 8118,
                            "EndOffset": 8537,
                            "Content": "impl MetaInfo {\n    /// Creates an empty `MetaInfo`.\n    #[inline]\n    /// Get a reference to a string k-v previously inserted on this `MetaInfo`.\n    #[inline]\n    pub fn get_string\u003cK: AsRef\u003cstr\u003e\u003e(\u0026self, key: K) -\u003e Option\u003c\u0026FastStr\u003e {\n        self.smap\n            .as_ref()\n            .and_then(|smap| smap.get(key.as_ref()))\n            .or_else(|| {\n                self.parent\n                    .as_ref()\n                    .and_then(|parent| parent.as_ref().get_string(key))\n            })\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "as_ref",
                                    "File": "src/lib.rs",
                                    "Line": 270,
                                    "StartOffset": 8296,
                                    "EndOffset": 8302
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "and_then",
                                    "File": "src/lib.rs",
                                    "Line": 271,
                                    "StartOffset": 8314,
                                    "EndOffset": 8322
                                },
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap.get",
                                    "File": "src/lib.rs",
                                    "Line": 271,
                                    "StartOffset": 8335,
                                    "EndOffset": 8338
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "as_ref",
                                    "File": "src/lib.rs",
                                    "Line": 271,
                                    "StartOffset": 8343,
                                    "EndOffset": 8349
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "or_else",
                                    "File": "src/lib.rs",
                                    "Line": 272,
                                    "StartOffset": 8336,
                                    "EndOffset": 8343
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "alloc::sync",
                                    "Name": "as_ref",
                                    "File": "src/lib.rs",
                                    "Line": 275,
                                    "StartOffset": 8476,
                                    "EndOffset": 8482
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "AsRef",
                                    "File": "src/lib.rs",
                                    "Line": 268,
                                    "StartOffset": 8220,
                                    "EndOffset": 8225
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/lib.rs",
                                    "Line": 268,
                                    "StartOffset": 8250,
                                    "EndOffset": 8256
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/lib.rs",
                                    "Line": 268,
                                    "StartOffset": 8258,
                                    "EndOffset": 8265
                                }
                            ]
                        },
                        "MetaInfo.insert": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "MetaInfo.insert",
                            "File": "src/lib.rs",
                            "Line": 152,
                            "StartOffset": 4554,
                            "EndOffset": 4774,
                            "Content": "impl MetaInfo {\n    /// Creates an empty `MetaInfo`.\n    #[inline]\n    /// Insert a type into this `MetaInfo`.\n    #[inline]\n    pub fn insert\u003cT: Send + Sync + 'static\u003e(\u0026mut self, val: T) {\n        self.tmap\n            .get_or_insert_with(|| TypeMap::with_capacity(DEFAULT_MAP_SIZE))\n            .insert(val);\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "FunctionCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap::with_capacity",
                                    "File": "src/lib.rs",
                                    "Line": 156,
                                    "StartOffset": 4718,
                                    "EndOffset": 4731
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "get_or_insert_with",
                                    "File": "src/lib.rs",
                                    "Line": 156,
                                    "StartOffset": 4687,
                                    "EndOffset": 4705
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap.insert",
                                    "File": "src/lib.rs",
                                    "Line": 157,
                                    "StartOffset": 4705,
                                    "EndOffset": 4711
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::marker",
                                    "Name": "Send",
                                    "File": "src/lib.rs",
                                    "Line": 154,
                                    "StartOffset": 4616,
                                    "EndOffset": 4620
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::marker",
                                    "Name": "Sync",
                                    "File": "src/lib.rs",
                                    "Line": 154,
                                    "StartOffset": 4623,
                                    "EndOffset": 4627
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap",
                                    "File": "src/lib.rs",
                                    "Line": 156,
                                    "StartOffset": 4709,
                                    "EndOffset": 4716
                                }
                            ],
                            "GlobalVars": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "DEFAULT_MAP_SIZE",
                                    "File": "src/lib.rs",
                                    "Line": 156,
                                    "StartOffset": 4732,
                                    "EndOffset": 4748
                                }
                            ]
                        },
                        "MetaInfo.insert_faststr": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "MetaInfo.insert_faststr",
                            "File": "src/lib.rs",
                            "Line": 160,
                            "StartOffset": 4805,
                            "EndOffset": 5061,
                            "Content": "impl MetaInfo {\n    /// Creates an empty `MetaInfo`.\n    #[inline]\n    /// Insert a faststr newtype into this `MetaInfo`.\n    #[inline]\n    pub fn insert_faststr\u003cT: Send + Sync + 'static\u003e(\u0026mut self, val: FastStr) {\n        self.faststr_tmap\n            .get_or_insert_with(|| FastStrMap::with_capacity(DEFAULT_MAP_SIZE))\n            .insert::\u003cT\u003e(val);\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "FunctionCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap::with_capacity",
                                    "File": "src/lib.rs",
                                    "Line": 164,
                                    "StartOffset": 4997,
                                    "EndOffset": 5010
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "get_or_insert_with",
                                    "File": "src/lib.rs",
                                    "Line": 164,
                                    "StartOffset": 4963,
                                    "EndOffset": 4981
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap.insert",
                                    "File": "src/lib.rs",
                                    "Line": 165,
                                    "StartOffset": 4989,
                                    "EndOffset": 4995
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::marker",
                                    "Name": "Send",
                                    "File": "src/lib.rs",
                                    "Line": 162,
                                    "StartOffset": 4886,
                                    "EndOffset": 4890
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::marker",
                                    "Name": "Sync",
                                    "File": "src/lib.rs",
                                    "Line": 162,
                                    "StartOffset": 4893,
                                    "EndOffset": 4897
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/lib.rs",
                                    "Line": 162,
                                    "StartOffset": 4925,
                                    "EndOffset": 4932
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap",
                                    "File": "src/lib.rs",
                                    "Line": 164,
                                    "StartOffset": 4985,
                                    "EndOffset": 4995
                                }
                            ],
                            "GlobalVars": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "DEFAULT_MAP_SIZE",
                                    "File": "src/lib.rs",
                                    "Line": 164,
                                    "StartOffset": 5011,
                                    "EndOffset": 5027
                                }
                            ]
                        },
                        "MetaInfo.insert_string": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "MetaInfo.insert_string",
                            "File": "src/lib.rs",
                            "Line": 168,
                            "StartOffset": 5097,
                            "EndOffset": 5325,
                            "Content": "impl MetaInfo {\n    /// Creates an empty `MetaInfo`.\n    #[inline]\n    /// Insert a string k-v into this `MetaInfo`.\n    #[inline]\n    pub fn insert_string(\u0026mut self, key: FastStr, val: FastStr) {\n        self.smap\n            .get_or_insert_with(|| AHashMap::with_capacity(DEFAULT_MAP_SIZE))\n            .insert(key, val);\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "FunctionCalls": [
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap::with_capacity",
                                    "File": "src/lib.rs",
                                    "Line": 172,
                                    "StartOffset": 5269,
                                    "EndOffset": 5282
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "get_or_insert_with",
                                    "File": "src/lib.rs",
                                    "Line": 172,
                                    "StartOffset": 5237,
                                    "EndOffset": 5255
                                },
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap.insert",
                                    "File": "src/lib.rs",
                                    "Line": 173,
                                    "StartOffset": 5255,
                                    "EndOffset": 5261
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/lib.rs",
                                    "Line": 170,
                                    "StartOffset": 5185,
                                    "EndOffset": 5192
                                },
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap",
                                    "File": "src/lib.rs",
                                    "Line": 172,
                                    "StartOffset": 5259,
                                    "EndOffset": 5267
                                }
                            ],
                            "GlobalVars": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "DEFAULT_MAP_SIZE",
                                    "File": "src/lib.rs",
                                    "Line": 172,
                                    "StartOffset": 5283,
                                    "EndOffset": 5299
                                }
                            ]
                        },
                        "MetaInfo.remove": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "MetaInfo.remove",
                            "File": "src/lib.rs",
                            "Line": 237,
                            "StartOffset": 7070,
                            "EndOffset": 7255,
                            "Content": "impl MetaInfo {\n    /// Creates an empty `MetaInfo`.\n    #[inline]\n    /// Remove a type from this `MetaInfo` and return it.\n    /// Can only remove the type in the current scope.\n    #[inline]\n    pub fn remove\u003cT: 'static\u003e(\u0026mut self) -\u003e Option\u003cT\u003e {\n        self.tmap.as_mut().and_then(|tmap| tmap.remove::\u003cT\u003e())\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "as_mut",
                                    "File": "src/lib.rs",
                                    "Line": 241,
                                    "StartOffset": 7212,
                                    "EndOffset": 7218
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "and_then",
                                    "File": "src/lib.rs",
                                    "Line": 241,
                                    "StartOffset": 7221,
                                    "EndOffset": 7229
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap.remove",
                                    "File": "src/lib.rs",
                                    "Line": 241,
                                    "StartOffset": 7242,
                                    "EndOffset": 7248
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/lib.rs",
                                    "Line": 240,
                                    "StartOffset": 7224,
                                    "EndOffset": 7230
                                }
                            ]
                        },
                        "MetaInfo.remove_faststr": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "MetaInfo.remove_faststr",
                            "File": "src/lib.rs",
                            "Line": 257,
                            "StartOffset": 7790,
                            "EndOffset": 8048,
                            "Content": "impl MetaInfo {\n    /// Creates an empty `MetaInfo`.\n    #[inline]\n    /// Remove a faststr newtype from this `MetaInfo` and return it.\n    /// Can only remove the type in the current scope.\n    #[inline]\n    pub fn remove_faststr\u003cT: 'static\u003e(\u0026mut self) -\u003e Option\u003cFastStr\u003e {\n        self.faststr_tmap\n            .as_mut()\n            .and_then(|faststr_tmap| faststr_tmap.remove::\u003cT\u003e())\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "as_mut",
                                    "File": "src/lib.rs",
                                    "Line": 262,
                                    "StartOffset": 8008,
                                    "EndOffset": 8014
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "and_then",
                                    "File": "src/lib.rs",
                                    "Line": 263,
                                    "StartOffset": 8034,
                                    "EndOffset": 8042
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap.remove",
                                    "File": "src/lib.rs",
                                    "Line": 263,
                                    "StartOffset": 8071,
                                    "EndOffset": 8077
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/lib.rs",
                                    "Line": 260,
                                    "StartOffset": 7963,
                                    "EndOffset": 7969
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/lib.rs",
                                    "Line": 260,
                                    "StartOffset": 7970,
                                    "EndOffset": 7977
                                }
                            ]
                        },
                        "MetaInfo.remove_string": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "MetaInfo.remove_string",
                            "File": "src/lib.rs",
                            "Line": 279,
                            "StartOffset": 8557,
                            "EndOffset": 8812,
                            "Content": "impl MetaInfo {\n    /// Creates an empty `MetaInfo`.\n    #[inline]\n    /// Remove a string k-v from this `MetaInfo` and return it.\n    /// Can only remove the type in the current scope.\n    #[inline]\n    pub fn remove_string\u003cK: AsRef\u003cstr\u003e\u003e(\u0026mut self, key: K) -\u003e Option\u003cFastStr\u003e {\n        self.smap\n            .as_mut()\n            .and_then(|smap| smap.remove(key.as_ref()))\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "as_mut",
                                    "File": "src/lib.rs",
                                    "Line": 284,
                                    "StartOffset": 8780,
                                    "EndOffset": 8786
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "and_then",
                                    "File": "src/lib.rs",
                                    "Line": 285,
                                    "StartOffset": 8798,
                                    "EndOffset": 8806
                                },
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap.remove",
                                    "File": "src/lib.rs",
                                    "Line": 285,
                                    "StartOffset": 8819,
                                    "EndOffset": 8825
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "as_ref",
                                    "File": "src/lib.rs",
                                    "Line": 285,
                                    "StartOffset": 8830,
                                    "EndOffset": 8836
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "AsRef",
                                    "File": "src/lib.rs",
                                    "Line": 282,
                                    "StartOffset": 8701,
                                    "EndOffset": 8706
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/lib.rs",
                                    "Line": 282,
                                    "StartOffset": 8735,
                                    "EndOffset": 8741
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/lib.rs",
                                    "Line": 282,
                                    "StartOffset": 8742,
                                    "EndOffset": 8749
                                }
                            ]
                        },
                        "MetaInfo::from": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "MetaInfo::from",
                            "File": "src/lib.rs",
                            "Line": 86,
                            "StartOffset": 2322,
                            "EndOffset": 2959,
                            "Content": "impl MetaInfo {\n    /// Creates an empty `MetaInfo`.\n    #[inline]\n    /// Creates an `MetaInfo` with the parent given.\n    ///\n    /// When the info is not found in the current scope, `MetaInfo` will try to get from parent.\n    ///\n    /// [`derive`] is more efficient than this. It is recommended to use [`derive`] instead of this.\n    #[inline]\n    pub fn from(parent: Arc\u003cMetaInfo\u003e) -\u003e MetaInfo {\n        let forward_node = parent.forward_node.clone();\n        let backward_node = parent.backward_node.clone();\n        MetaInfo {\n            parent: Some(parent),\n            tmap: None,\n            smap: None,\n            faststr_tmap: None,\n\n            forward_node,\n            backward_node,\n        }\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "Results": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::macros",
                                    "Name": "derive",
                                    "File": "src/lib.rs",
                                    "Line": 90,
                                    "StartOffset": 2485,
                                    "EndOffset": 2495
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "clone",
                                    "File": "src/lib.rs",
                                    "Line": 93,
                                    "StartOffset": 2647,
                                    "EndOffset": 2652
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "alloc::sync",
                                    "Name": "Arc",
                                    "File": "src/lib.rs",
                                    "Line": 92,
                                    "StartOffset": 2610,
                                    "EndOffset": 2613
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo",
                                    "File": "src/lib.rs",
                                    "Line": 92,
                                    "StartOffset": 2614,
                                    "EndOffset": 2622
                                }
                            ]
                        },
                        "MetaInfo::from_node": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "MetaInfo::from_node",
                            "File": "src/lib.rs",
                            "Line": 135,
                            "StartOffset": 4138,
                            "EndOffset": 4539,
                            "Content": "impl MetaInfo {\n    /// Creates an empty `MetaInfo`.\n    #[inline]\n    /// Creates an `MetaInfo` with the parent and node given.\n    fn from_node(\n        parent: Arc\u003cMetaInfo\u003e,\n        forward_node: Option\u003ckv::Node\u003e,\n        backward_node: Option\u003ckv::Node\u003e,\n    ) -\u003e MetaInfo {\n        MetaInfo {\n            parent: Some(parent),\n            tmap: None,\n            smap: None,\n            faststr_tmap: None,\n\n            forward_node,\n            backward_node,\n        }\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "Types": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "alloc::sync",
                                    "Name": "Arc",
                                    "File": "src/lib.rs",
                                    "Line": 137,
                                    "StartOffset": 4213,
                                    "EndOffset": 4216
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo",
                                    "File": "src/lib.rs",
                                    "Line": 137,
                                    "StartOffset": 4217,
                                    "EndOffset": 4225
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/lib.rs",
                                    "Line": 138,
                                    "StartOffset": 4237,
                                    "EndOffset": 4243
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::kv",
                                    "Name": "Node",
                                    "File": "src/lib.rs",
                                    "Line": 138,
                                    "StartOffset": 4248,
                                    "EndOffset": 4252
                                }
                            ]
                        },
                        "MetaInfo::new": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "MetaInfo::new",
                            "File": "src/lib.rs",
                            "Line": 80,
                            "StartOffset": 2191,
                            "EndOffset": 2290,
                            "Content": "impl MetaInfo {\n    /// Creates an empty `MetaInfo`.\n    #[inline]\n    /// Creates an empty `MetaInfo`.\n    #[inline]\n    pub fn new() -\u003e MetaInfo {\n        Default::default()\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "Types": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo",
                                    "File": "src/lib.rs",
                                    "Line": 82,
                                    "StartOffset": 2260,
                                    "EndOffset": 2268
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::default",
                                    "Name": "Default",
                                    "File": "src/lib.rs",
                                    "Line": 83,
                                    "StartOffset": 2262,
                                    "EndOffset": 2269
                                }
                            ]
                        },
                        "del_impl": {
                            "Exported": true,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "del_impl",
                            "File": "src/lib.rs",
                            "Line": 393,
                            "StartOffset": -1,
                            "EndOffset": 12388,
                            "Content": "macro_rules! del_impl {\n    ($name:ident,$node:ident,$func_name:ident) =\u003e {\n        paste! {\n            fn [\u003cdel_ $name\u003e]\u003cK: AsRef\u003cstr\u003e\u003e(\u0026mut self, key: K) -\u003e Option\u003cFastStr\u003e {\n                if let Some(node) = self.[\u003c$node _node\u003e].as_mut() {\n                    node.[\u003cdel_ $func_name\u003e](key)\n                } else {\n                    None\n                }\n            }\n        }\n    };\n}"
                        },
                        "get_impl": {
                            "Exported": true,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "get_impl",
                            "File": "src/lib.rs",
                            "Line": 362,
                            "StartOffset": -1,
                            "EndOffset": 11505,
                            "Content": "macro_rules! get_impl {\n    ($name:ident,$node:ident,$func_name:ident) =\u003e {\n        paste! {\n            fn [\u003cget_ $name\u003e]\u003cK: AsRef\u003cstr\u003e\u003e(\u0026self, key: K) -\u003e Option\u003cFastStr\u003e {\n                match self.[\u003c$node _node\u003e].as_ref() {\n                    Some(node) =\u003e node.[\u003cget_ $func_name\u003e](key),\n                    None =\u003e None,\n                }\n            }\n        }\n    };\n}"
                        },
                        "http_forward_test": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "http_forward_test",
                            "File": "src/lib.rs",
                            "Line": 799,
                            "StartOffset": 24040,
                            "EndOffset": 24739,
                            "Content": "#[test]\n    fn http_forward_test() {\n        let mut metainfo = MetaInfo::new();\n        metainfo.strip_http_prefix_and_set_persistent(\"rpc-persist-test-key\", \"persist\");\n        metainfo.strip_http_prefix_and_set_upstream(\"rpc-transit-test-key\", \"transit\");\n        assert_eq!(metainfo.get_persistent(\"TEST_KEY\").unwrap(), \"persist\");\n        assert_eq!(metainfo.get_upstream(\"TEST_KEY\").unwrap(), \"transit\");\n        let map = metainfo\n            .get_all_persistents_and_transients_with_http_prefix()\n            .unwrap();\n        assert_eq!(map.get(\"rpc-persist-test-key\").unwrap(), \"persist\");\n        // The `RPC_TRANSIT_TEST_KEY` is inserted into `upstream` and we cannot get it from\n        // `transients`.\n    }",
                            "FunctionCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo::new",
                                    "File": "src/lib.rs",
                                    "Line": 801,
                                    "StartOffset": 24086,
                                    "EndOffset": 24089
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::macros",
                                    "Name": "assert_eq",
                                    "File": "src/lib.rs",
                                    "Line": 804,
                                    "StartOffset": 24220,
                                    "EndOffset": 24229
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "get_impl",
                                    "File": "src/lib.rs",
                                    "Line": 804,
                                    "StartOffset": 24240,
                                    "EndOffset": 24254
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "Forward\u003cMetaInfo\u003e.strip_http_prefix_and_set_persistent",
                                    "File": "src/lib.rs",
                                    "Line": 802,
                                    "StartOffset": 24095,
                                    "EndOffset": 24131
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "Forward\u003cMetaInfo\u003e.strip_http_prefix_and_set_upstream",
                                    "File": "src/lib.rs",
                                    "Line": 803,
                                    "StartOffset": 24139,
                                    "EndOffset": 24173
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "unwrap",
                                    "File": "src/lib.rs",
                                    "Line": 804,
                                    "StartOffset": 24267,
                                    "EndOffset": 24273
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "Forward\u003cMetaInfo\u003e.get_all_persistents_and_transients_with_http_prefix",
                                    "File": "src/lib.rs",
                                    "Line": 807,
                                    "StartOffset": 24465,
                                    "EndOffset": 24516
                                },
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap.get",
                                    "File": "src/lib.rs",
                                    "Line": 809,
                                    "StartOffset": 24569,
                                    "EndOffset": 24572
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo",
                                    "File": "src/lib.rs",
                                    "Line": 801,
                                    "StartOffset": 24076,
                                    "EndOffset": 24084
                                }
                            ]
                        },
                        "rpc_forward_test": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "rpc_forward_test",
                            "File": "src/lib.rs",
                            "Line": 784,
                            "StartOffset": 23315,
                            "EndOffset": 24010,
                            "Content": "#[test]\n    fn rpc_forward_test() {\n        let mut metainfo = MetaInfo::new();\n        metainfo.strip_rpc_prefix_and_set_persistent(\"RPC_PERSIST_TEST_KEY\", \"PERSIST\");\n        metainfo.strip_rpc_prefix_and_set_upstream(\"RPC_TRANSIT_TEST_KEY\", \"TRANSIT\");\n        assert_eq!(metainfo.get_persistent(\"TEST_KEY\").unwrap(), \"PERSIST\");\n        assert_eq!(metainfo.get_upstream(\"TEST_KEY\").unwrap(), \"TRANSIT\");\n        let map = metainfo\n            .get_all_persistents_and_transients_with_rpc_prefix()\n            .unwrap();\n        assert_eq!(map.get(\"RPC_PERSIST_TEST_KEY\").unwrap(), \"PERSIST\");\n        // The `RPC_TRANSIT_TEST_KEY` is inserted into `upstream` and we cannot get it from\n        // `transients`.\n    }",
                            "FunctionCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo::new",
                                    "File": "src/lib.rs",
                                    "Line": 786,
                                    "StartOffset": 23361,
                                    "EndOffset": 23364
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::macros",
                                    "Name": "assert_eq",
                                    "File": "src/lib.rs",
                                    "Line": 789,
                                    "StartOffset": 23493,
                                    "EndOffset": 23502
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "get_impl",
                                    "File": "src/lib.rs",
                                    "Line": 789,
                                    "StartOffset": 23513,
                                    "EndOffset": 23527
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "Forward\u003cMetaInfo\u003e.strip_rpc_prefix_and_set_persistent",
                                    "File": "src/lib.rs",
                                    "Line": 787,
                                    "StartOffset": 23369,
                                    "EndOffset": 23404
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "Forward\u003cMetaInfo\u003e.strip_rpc_prefix_and_set_upstream",
                                    "File": "src/lib.rs",
                                    "Line": 788,
                                    "StartOffset": 23413,
                                    "EndOffset": 23446
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "unwrap",
                                    "File": "src/lib.rs",
                                    "Line": 789,
                                    "StartOffset": 23540,
                                    "EndOffset": 23546
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "Forward\u003cMetaInfo\u003e.get_all_persistents_and_transients_with_rpc_prefix",
                                    "File": "src/lib.rs",
                                    "Line": 792,
                                    "StartOffset": 23737,
                                    "EndOffset": 23787
                                },
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap.get",
                                    "File": "src/lib.rs",
                                    "Line": 794,
                                    "StartOffset": 23840,
                                    "EndOffset": 23843
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo",
                                    "File": "src/lib.rs",
                                    "Line": 786,
                                    "StartOffset": 23351,
                                    "EndOffset": 23359
                                }
                            ]
                        },
                        "set_impl": {
                            "Exported": true,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "set_impl",
                            "File": "src/lib.rs",
                            "Line": 375,
                            "StartOffset": -1,
                            "EndOffset": 11990,
                            "Content": "macro_rules! set_impl {\n    ($name:ident,$node:ident,$func_name:ident) =\u003e {\n        paste! {\n            fn [\u003cset_ $name\u003e]\u003cK: Into\u003cFastStr\u003e, V: Into\u003cFastStr\u003e\u003e(\n                \u0026mut self,\n                key: K,\n                value: V,\n            ) {\n                self.[\u003censure_ $node _node\u003e]();\n                self.[\u003c$node _node\u003e]\n                    .as_mut()\n                    .unwrap()\n                    .[\u003cset_ $func_name\u003e](key, value)\n            }\n        }\n    };\n}"
                        },
                        "test_clear": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "test_clear",
                            "File": "src/lib.rs",
                            "Line": 650,
                            "StartOffset": 19653,
                            "EndOffset": 20116,
                            "Content": "#[test]\n    fn test_clear() {\n        let mut map = MetaInfo::new();\n\n        map.insert::\u003ci8\u003e(8);\n        map.insert::\u003ci16\u003e(16);\n        map.insert::\u003ci32\u003e(32);\n\n        assert!(map.contains::\u003ci8\u003e());\n        assert!(map.contains::\u003ci16\u003e());\n        assert!(map.contains::\u003ci32\u003e());\n\n        map.clear();\n\n        assert!(!map.contains::\u003ci8\u003e());\n        assert!(!map.contains::\u003ci16\u003e());\n        assert!(!map.contains::\u003ci32\u003e());\n\n        map.insert::\u003ci8\u003e(10);\n        assert_eq!(*map.get::\u003ci8\u003e().unwrap(), 10);\n    }",
                            "FunctionCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo::new",
                                    "File": "src/lib.rs",
                                    "Line": 652,
                                    "StartOffset": 19694,
                                    "EndOffset": 19697
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::macros",
                                    "Name": "assert",
                                    "File": "src/lib.rs",
                                    "Line": 658,
                                    "StartOffset": 19823,
                                    "EndOffset": 19829
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::macros",
                                    "Name": "assert_eq",
                                    "File": "src/lib.rs",
                                    "Line": 669,
                                    "StartOffset": 20089,
                                    "EndOffset": 20098
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo.insert",
                                    "File": "src/lib.rs",
                                    "Line": 654,
                                    "StartOffset": 19735,
                                    "EndOffset": 19741
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo.contains",
                                    "File": "src/lib.rs",
                                    "Line": 658,
                                    "StartOffset": 19835,
                                    "EndOffset": 19843
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo.clear",
                                    "File": "src/lib.rs",
                                    "Line": 662,
                                    "StartOffset": 19947,
                                    "EndOffset": 19952
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo.get",
                                    "File": "src/lib.rs",
                                    "Line": 669,
                                    "StartOffset": 20105,
                                    "EndOffset": 20108
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "unwrap",
                                    "File": "src/lib.rs",
                                    "Line": 669,
                                    "StartOffset": 20117,
                                    "EndOffset": 20123
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo",
                                    "File": "src/lib.rs",
                                    "Line": 652,
                                    "StartOffset": 19684,
                                    "EndOffset": 19692
                                }
                            ]
                        },
                        "test_composition": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "test_composition",
                            "File": "src/lib.rs",
                            "Line": 710,
                            "StartOffset": 21505,
                            "EndOffset": 22087,
                            "Content": "#[test]\n    fn test_composition() {\n        struct Magi\u003cT\u003e(pub T);\n\n        struct Madoka {\n            pub god: bool,\n        }\n\n        struct Homura {\n            pub attempts: usize,\n        }\n\n        struct Mami {\n            pub guns: usize,\n        }\n\n        let mut map = MetaInfo::new();\n\n        map.insert(Magi(Madoka { god: false }));\n        map.insert(Magi(Homura { attempts: 0 }));\n        map.insert(Magi(Mami { guns: 999 }));\n\n        assert!(!map.get::\u003cMagi\u003cMadoka\u003e\u003e().unwrap().0.god);\n        assert_eq!(0, map.get::\u003cMagi\u003cHomura\u003e\u003e().unwrap().0.attempts);\n        assert_eq!(999, map.get::\u003cMagi\u003cMami\u003e\u003e().unwrap().0.guns);\n    }",
                            "FunctionCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo::new",
                                    "File": "src/lib.rs",
                                    "Line": 726,
                                    "StartOffset": 21797,
                                    "EndOffset": 21800
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::macros",
                                    "Name": "assert",
                                    "File": "src/lib.rs",
                                    "Line": 732,
                                    "StartOffset": 21959,
                                    "EndOffset": 21965
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::macros",
                                    "Name": "assert_eq",
                                    "File": "src/lib.rs",
                                    "Line": 733,
                                    "StartOffset": 21960,
                                    "EndOffset": 21969
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo.insert",
                                    "File": "src/lib.rs",
                                    "Line": 728,
                                    "StartOffset": 21817,
                                    "EndOffset": 21823
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo.get",
                                    "File": "src/lib.rs",
                                    "Line": 732,
                                    "StartOffset": 21972,
                                    "EndOffset": 21975
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "unwrap",
                                    "File": "src/lib.rs",
                                    "Line": 732,
                                    "StartOffset": 21994,
                                    "EndOffset": 22000
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo",
                                    "File": "src/lib.rs",
                                    "Line": 726,
                                    "StartOffset": 21787,
                                    "EndOffset": 21795
                                }
                            ]
                        },
                        "test_extend": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "test_extend",
                            "File": "src/lib.rs",
                            "Line": 756,
                            "StartOffset": 22645,
                            "EndOffset": 23261,
                            "Content": "#[test]\n    fn test_extend() {\n        #[derive(Debug, PartialEq)]\n        struct MyType(i32);\n\n        let mut metainfo = MetaInfo::new();\n\n        metainfo.insert(5i32);\n        metainfo.insert(MyType(10));\n\n        let mut other = MetaInfo::new();\n\n        other.insert(15i32);\n        other.insert(20u8);\n\n        metainfo.extend(other);\n\n        assert_eq!(metainfo.get(), Some(\u002615i32));\n\n        assert_eq!(metainfo.remove::\u003ci32\u003e(), Some(15i32));\n        assert!(metainfo.get::\u003ci32\u003e().is_none());\n\n        assert_eq!(metainfo.get::\u003cbool\u003e(), None);\n        assert_eq!(metainfo.get(), Some(\u0026MyType(10)));\n\n        assert_eq!(metainfo.get(), Some(\u002620u8));\n    }",
                            "FunctionCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo::new",
                                    "File": "src/lib.rs",
                                    "Line": 761,
                                    "StartOffset": 22778,
                                    "EndOffset": 22781
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::macros",
                                    "Name": "assert_eq",
                                    "File": "src/lib.rs",
                                    "Line": 773,
                                    "StartOffset": 22996,
                                    "EndOffset": 23005
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::macros",
                                    "Name": "assert",
                                    "File": "src/lib.rs",
                                    "Line": 776,
                                    "StartOffset": 23048,
                                    "EndOffset": 23054
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo.insert",
                                    "File": "src/lib.rs",
                                    "Line": 763,
                                    "StartOffset": 22803,
                                    "EndOffset": 22809
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo.extend",
                                    "File": "src/lib.rs",
                                    "Line": 771,
                                    "StartOffset": 22972,
                                    "EndOffset": 22978
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo.get",
                                    "File": "src/lib.rs",
                                    "Line": 773,
                                    "StartOffset": 23016,
                                    "EndOffset": 23019
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo.remove",
                                    "File": "src/lib.rs",
                                    "Line": 775,
                                    "StartOffset": 23067,
                                    "EndOffset": 23073
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "is_none",
                                    "File": "src/lib.rs",
                                    "Line": 776,
                                    "StartOffset": 23078,
                                    "EndOffset": 23085
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo",
                                    "File": "src/lib.rs",
                                    "Line": 761,
                                    "StartOffset": 22768,
                                    "EndOffset": 22776
                                }
                            ]
                        },
                        "test_integers": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "test_integers",
                            "File": "src/lib.rs",
                            "Line": 672,
                            "StartOffset": 20172,
                            "EndOffset": 21455,
                            "Content": "#[test]\n    fn test_integers() {\n        let mut map = MetaInfo::new();\n\n        map.insert::\u003ci8\u003e(8);\n        map.insert::\u003ci16\u003e(16);\n        map.insert::\u003ci32\u003e(32);\n        map.insert::\u003ci64\u003e(64);\n        map.insert::\u003ci128\u003e(128);\n        map.insert::\u003cu8\u003e(8);\n        map.insert::\u003cu16\u003e(16);\n        map.insert::\u003cu32\u003e(32);\n        map.insert::\u003cu64\u003e(64);\n        map.insert::\u003cu128\u003e(128);\n        assert!(map.get::\u003ci8\u003e().is_some());\n        assert!(map.get::\u003ci16\u003e().is_some());\n        assert!(map.get::\u003ci32\u003e().is_some());\n        assert!(map.get::\u003ci64\u003e().is_some());\n        assert!(map.get::\u003ci128\u003e().is_some());\n        assert!(map.get::\u003cu8\u003e().is_some());\n        assert!(map.get::\u003cu16\u003e().is_some());\n        assert!(map.get::\u003cu32\u003e().is_some());\n        assert!(map.get::\u003cu64\u003e().is_some());\n        assert!(map.get::\u003cu128\u003e().is_some());\n\n        let m2 = MetaInfo::from(Arc::new(map));\n        assert!(m2.get::\u003ci8\u003e().is_some());\n        assert!(m2.get::\u003ci16\u003e().is_some());\n        assert!(m2.get::\u003ci32\u003e().is_some());\n        assert!(m2.get::\u003ci64\u003e().is_some());\n        assert!(m2.get::\u003ci128\u003e().is_some());\n        assert!(m2.get::\u003cu8\u003e().is_some());\n        assert!(m2.get::\u003cu16\u003e().is_some());\n        assert!(m2.get::\u003cu32\u003e().is_some());\n        assert!(m2.get::\u003cu64\u003e().is_some());\n        assert!(m2.get::\u003cu128\u003e().is_some());\n    }",
                            "FunctionCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo::new",
                                    "File": "src/lib.rs",
                                    "Line": 674,
                                    "StartOffset": 20213,
                                    "EndOffset": 20216
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::macros",
                                    "Name": "assert",
                                    "File": "src/lib.rs",
                                    "Line": 686,
                                    "StartOffset": 20531,
                                    "EndOffset": 20537
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo::from",
                                    "File": "src/lib.rs",
                                    "Line": 697,
                                    "StartOffset": 21033,
                                    "EndOffset": 21037
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "alloc::sync",
                                    "Name": "new",
                                    "File": "src/lib.rs",
                                    "Line": 697,
                                    "StartOffset": 21043,
                                    "EndOffset": 21046
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo.insert",
                                    "File": "src/lib.rs",
                                    "Line": 676,
                                    "StartOffset": 20257,
                                    "EndOffset": 20263
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo.get",
                                    "File": "src/lib.rs",
                                    "Line": 686,
                                    "StartOffset": 20543,
                                    "EndOffset": 20546
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "is_some",
                                    "File": "src/lib.rs",
                                    "Line": 686,
                                    "StartOffset": 20555,
                                    "EndOffset": 20562
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo",
                                    "File": "src/lib.rs",
                                    "Line": 674,
                                    "StartOffset": 20203,
                                    "EndOffset": 20211
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "alloc::sync",
                                    "Name": "Arc",
                                    "File": "src/lib.rs",
                                    "Line": 697,
                                    "StartOffset": 21038,
                                    "EndOffset": 21041
                                }
                            ]
                        },
                        "test_metainfo": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "test_metainfo",
                            "File": "src/lib.rs",
                            "Line": 737,
                            "StartOffset": 22158,
                            "EndOffset": 22585,
                            "Content": "#[test]\n    fn test_metainfo() {\n        #[derive(Debug, PartialEq)]\n        struct MyType(i32);\n\n        let mut metainfo = MetaInfo::new();\n\n        metainfo.insert(5i32);\n        metainfo.insert(MyType(10));\n\n        assert_eq!(metainfo.get(), Some(\u00265i32));\n\n        assert_eq!(metainfo.remove::\u003ci32\u003e(), Some(5i32));\n        assert!(metainfo.get::\u003ci32\u003e().is_none());\n\n        assert_eq!(metainfo.get::\u003cbool\u003e(), None);\n        assert_eq!(metainfo.get(), Some(\u0026MyType(10)));\n    }",
                            "FunctionCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo::new",
                                    "File": "src/lib.rs",
                                    "Line": 742,
                                    "StartOffset": 22293,
                                    "EndOffset": 22296
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::macros",
                                    "Name": "assert_eq",
                                    "File": "src/lib.rs",
                                    "Line": 747,
                                    "StartOffset": 22378,
                                    "EndOffset": 22387
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::macros",
                                    "Name": "assert",
                                    "File": "src/lib.rs",
                                    "Line": 750,
                                    "StartOffset": 22429,
                                    "EndOffset": 22435
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo.insert",
                                    "File": "src/lib.rs",
                                    "Line": 744,
                                    "StartOffset": 22318,
                                    "EndOffset": 22324
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo.get",
                                    "File": "src/lib.rs",
                                    "Line": 747,
                                    "StartOffset": 22398,
                                    "EndOffset": 22401
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo.remove",
                                    "File": "src/lib.rs",
                                    "Line": 749,
                                    "StartOffset": 22448,
                                    "EndOffset": 22454
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "is_none",
                                    "File": "src/lib.rs",
                                    "Line": 750,
                                    "StartOffset": 22459,
                                    "EndOffset": 22466
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo",
                                    "File": "src/lib.rs",
                                    "Line": 742,
                                    "StartOffset": 22283,
                                    "EndOffset": 22291
                                }
                            ]
                        },
                        "test_remove": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "test_remove",
                            "File": "src/lib.rs",
                            "Line": 632,
                            "StartOffset": 19267,
                            "EndOffset": 19605,
                            "Content": "#[test]\n    fn test_remove() {\n        let mut map = MetaInfo::new();\n\n        map.insert::\u003ci8\u003e(123);\n        assert!(map.get::\u003ci8\u003e().is_some());\n\n        map.remove::\u003ci8\u003e();\n        assert!(map.get::\u003ci8\u003e().is_none());\n\n        map.insert::\u003ci8\u003e(123);\n\n        let mut m2 = MetaInfo::from(Arc::new(map));\n\n        m2.remove::\u003ci8\u003e();\n        assert!(m2.get::\u003ci8\u003e().is_some());\n    }",
                            "FunctionCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo::new",
                                    "File": "src/lib.rs",
                                    "Line": 634,
                                    "StartOffset": 19308,
                                    "EndOffset": 19311
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::macros",
                                    "Name": "assert",
                                    "File": "src/lib.rs",
                                    "Line": 637,
                                    "StartOffset": 19347,
                                    "EndOffset": 19353
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo::from",
                                    "File": "src/lib.rs",
                                    "Line": 644,
                                    "StartOffset": 19550,
                                    "EndOffset": 19554
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "alloc::sync",
                                    "Name": "new",
                                    "File": "src/lib.rs",
                                    "Line": 644,
                                    "StartOffset": 19560,
                                    "EndOffset": 19563
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo.insert",
                                    "File": "src/lib.rs",
                                    "Line": 636,
                                    "StartOffset": 19350,
                                    "EndOffset": 19356
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo.get",
                                    "File": "src/lib.rs",
                                    "Line": 637,
                                    "StartOffset": 19359,
                                    "EndOffset": 19362
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "is_some",
                                    "File": "src/lib.rs",
                                    "Line": 637,
                                    "StartOffset": 19371,
                                    "EndOffset": 19378
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo.remove",
                                    "File": "src/lib.rs",
                                    "Line": 639,
                                    "StartOffset": 19426,
                                    "EndOffset": 19432
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "is_none",
                                    "File": "src/lib.rs",
                                    "Line": 640,
                                    "StartOffset": 19447,
                                    "EndOffset": 19454
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo",
                                    "File": "src/lib.rs",
                                    "Line": 634,
                                    "StartOffset": 19298,
                                    "EndOffset": 19306
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "alloc::sync",
                                    "Name": "Arc",
                                    "File": "src/lib.rs",
                                    "Line": 644,
                                    "StartOffset": 19555,
                                    "EndOffset": 19558
                                }
                            ]
                        }
                    },
                    "Types": {
                        "Homura": {
                            "Exported": false,
                            "TypeKind": "struct",
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "Homura",
                            "File": "src/lib.rs",
                            "Line": 718,
                            "StartOffset": 21643,
                            "EndOffset": 21669,
                            "Content": "struct Homura {\n            pub attempts: usize,\n        }"
                        },
                        "Madoka": {
                            "Exported": false,
                            "TypeKind": "struct",
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "Madoka",
                            "File": "src/lib.rs",
                            "Line": 714,
                            "StartOffset": 21581,
                            "EndOffset": 21607,
                            "Content": "struct Madoka {\n            pub god: bool,\n        }"
                        },
                        "Magi": {
                            "Exported": false,
                            "TypeKind": "struct",
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "Magi",
                            "File": "src/lib.rs",
                            "Line": 712,
                            "StartOffset": 21522,
                            "EndOffset": 21544,
                            "Content": "struct Magi\u003cT\u003e(pub T);"
                        },
                        "Mami": {
                            "Exported": false,
                            "TypeKind": "struct",
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "Mami",
                            "File": "src/lib.rs",
                            "Line": 722,
                            "StartOffset": 21711,
                            "EndOffset": 21735,
                            "Content": "struct Mami {\n            pub guns: usize,\n        }"
                        },
                        "MetaInfo": {
                            "Exported": true,
                            "TypeKind": "struct",
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "MetaInfo",
                            "File": "src/lib.rs",
                            "Line": 37,
                            "StartOffset": -1,
                            "EndOffset": 2148,
                            "Content": "/// `MetaInfo` is used to passthrough information between components and even client-server.\n///\n/// It supports two types of info: typed map and string k-v.\n///\n/// It is designed to be tree-like, which means you can share a `MetaInfo` with multiple children.\n///\n/// Note: only the current scope is mutable.\n///\n/// Examples:\n/// ```rust\n/// use metainfo::MetaInfo;\n///\n/// fn test() {\n///     let mut m1 = MetaInfo::new();\n///     m1.insert::\u003ci8\u003e(2);\n///     assert_eq!(*m1.get::\u003ci8\u003e().unwrap(), 2);\n///\n///     let (mut m1, mut m2) = m1.derive();\n///     assert_eq!(*m2.get::\u003ci8\u003e().unwrap(), 2);\n///\n///     m2.insert::\u003ci8\u003e(4);\n///     assert_eq!(*m2.get::\u003ci8\u003e().unwrap(), 4);\n///\n///     m2.remove::\u003ci8\u003e();\n///     assert_eq!(*m2.get::\u003ci8\u003e().unwrap(), 2);\n/// }\n/// ```\n#[derive(Default)]\npub struct MetaInfo {\n    /// Parent is read-only, if we can't find the specified key in the current,\n    /// we search it in the parent scope.\n    parent: Option\u003cArc\u003cMetaInfo\u003e\u003e,\n    tmap: Option\u003cTypeMap\u003e,\n    smap: Option\u003cAHashMap\u003cFastStr, FastStr\u003e\u003e, // for str k-v\n    faststr_tmap: Option\u003cFastStrMap\u003e,         // for newtype wrapper of FastStr\n\n    /// for information transport through client and server.\n    /// e.g. RPC\n    forward_node: Option\u003ckv::Node\u003e,\n    backward_node: Option\u003ckv::Node\u003e,\n}",
                            "SubStruct": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/lib.rs",
                                    "Line": 68,
                                    "StartOffset": 1799,
                                    "EndOffset": 1805
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "alloc::sync",
                                    "Name": "Arc",
                                    "File": "src/lib.rs",
                                    "Line": 68,
                                    "StartOffset": 1806,
                                    "EndOffset": 1809
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/lib.rs",
                                    "Line": 69,
                                    "StartOffset": 1839,
                                    "EndOffset": 1845
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap",
                                    "File": "src/lib.rs",
                                    "Line": 69,
                                    "StartOffset": 1846,
                                    "EndOffset": 1853
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/lib.rs",
                                    "Line": 70,
                                    "StartOffset": 1874,
                                    "EndOffset": 1880
                                },
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap",
                                    "File": "src/lib.rs",
                                    "Line": 70,
                                    "StartOffset": 1881,
                                    "EndOffset": 1889
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/lib.rs",
                                    "Line": 70,
                                    "StartOffset": 1890,
                                    "EndOffset": 1897
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/lib.rs",
                                    "Line": 70,
                                    "StartOffset": 1899,
                                    "EndOffset": 1906
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/lib.rs",
                                    "Line": 71,
                                    "StartOffset": 1909,
                                    "EndOffset": 1915
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap",
                                    "File": "src/lib.rs",
                                    "Line": 71,
                                    "StartOffset": 1916,
                                    "EndOffset": 1926
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/lib.rs",
                                    "Line": 75,
                                    "StartOffset": 2112,
                                    "EndOffset": 2118
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::kv",
                                    "Name": "Node",
                                    "File": "src/lib.rs",
                                    "Line": 75,
                                    "StartOffset": 2123,
                                    "EndOffset": 2127
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/lib.rs",
                                    "Line": 76,
                                    "StartOffset": 2130,
                                    "EndOffset": 2136
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::kv",
                                    "Name": "Node",
                                    "File": "src/lib.rs",
                                    "Line": 76,
                                    "StartOffset": 2141,
                                    "EndOffset": 2145
                                }
                            ],
                            "Methods": {
                                "clear": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo.clear"
                                },
                                "contains": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo.contains"
                                },
                                "contains_faststr": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo.contains_faststr"
                                },
                                "contains_string": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo.contains_string"
                                },
                                "derive": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo.derive"
                                },
                                "ensure_backward_node": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo.ensure_backward_node"
                                },
                                "ensure_forward_node": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo.ensure_forward_node"
                                },
                                "extend": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo.extend"
                                },
                                "fmt": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "Debug\u003cMetaInfo\u003e.fmt"
                                },
                                "get": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo.get"
                                },
                                "get_all_backward_downstreams": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "Backward\u003cMetaInfo\u003e.get_all_backward_downstreams"
                                },
                                "get_all_backward_transients": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "Backward\u003cMetaInfo\u003e.get_all_backward_transients"
                                },
                                "get_all_backward_transients_with_http_prefix": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "Backward\u003cMetaInfo\u003e.get_all_backward_transients_with_http_prefix"
                                },
                                "get_all_backward_transients_with_rpc_prefix": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "Backward\u003cMetaInfo\u003e.get_all_backward_transients_with_rpc_prefix"
                                },
                                "get_all_backword_transients_with_prefix": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo.get_all_backword_transients_with_prefix"
                                },
                                "get_all_persistents": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "Forward\u003cMetaInfo\u003e.get_all_persistents"
                                },
                                "get_all_persistents_and_transients": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo.get_all_persistents_and_transients"
                                },
                                "get_all_persistents_and_transients_with_http_prefix": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "Forward\u003cMetaInfo\u003e.get_all_persistents_and_transients_with_http_prefix"
                                },
                                "get_all_persistents_and_transients_with_rpc_prefix": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "Forward\u003cMetaInfo\u003e.get_all_persistents_and_transients_with_rpc_prefix"
                                },
                                "get_all_transients": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "Forward\u003cMetaInfo\u003e.get_all_transients"
                                },
                                "get_all_upstreams": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "Forward\u003cMetaInfo\u003e.get_all_upstreams"
                                },
                                "get_faststr": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo.get_faststr"
                                },
                                "get_string": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo.get_string"
                                },
                                "insert": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo.insert"
                                },
                                "insert_faststr": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo.insert_faststr"
                                },
                                "insert_string": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo.insert_string"
                                },
                                "remove": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo.remove"
                                },
                                "remove_faststr": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo.remove_faststr"
                                },
                                "remove_string": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo.remove_string"
                                },
                                "strip_http_prefix_and_set_backward_downstream": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "Backward\u003cMetaInfo\u003e.strip_http_prefix_and_set_backward_downstream"
                                },
                                "strip_http_prefix_and_set_persistent": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "Forward\u003cMetaInfo\u003e.strip_http_prefix_and_set_persistent"
                                },
                                "strip_http_prefix_and_set_upstream": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "Forward\u003cMetaInfo\u003e.strip_http_prefix_and_set_upstream"
                                },
                                "strip_rpc_prefix_and_set_backward_downstream": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "Backward\u003cMetaInfo\u003e.strip_rpc_prefix_and_set_backward_downstream"
                                },
                                "strip_rpc_prefix_and_set_persistent": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "Forward\u003cMetaInfo\u003e.strip_rpc_prefix_and_set_persistent"
                                },
                                "strip_rpc_prefix_and_set_upstream": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "strip_rpc_prefix_and_set_upstream"
                                }
                            }
                        },
                        "MyType": {
                            "Exported": false,
                            "TypeKind": "struct",
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "MyType",
                            "File": "src/lib.rs",
                            "Line": 758,
                            "StartOffset": 22662,
                            "EndOffset": 22704,
                            "Content": "#[derive(Debug, PartialEq)]\n        struct MyType(i32);"
                        }
                    },
                    "Vars": {
                        "DEFAULT_MAP_SIZE": {
                            "IsExported": false,
                            "IsConst": true,
                            "IsPointer": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "DEFAULT_MAP_SIZE",
                            "File": "src/lib.rs",
                            "Line": 35,
                            "StartOffset": -1,
                            "EndOffset": 888,
                            "Content": "const DEFAULT_MAP_SIZE: usize = 10;"
                        },
                        "HTTP_PREFIX_BACKWARD": {
                            "IsExported": true,
                            "IsConst": true,
                            "IsPointer": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "HTTP_PREFIX_BACKWARD",
                            "File": "src/lib.rs",
                            "Line": 33,
                            "StartOffset": -1,
                            "EndOffset": 796,
                            "Content": "pub const HTTP_PREFIX_BACKWARD: \u0026str = \"rpc-backward-\";"
                        },
                        "HTTP_PREFIX_PERSISTENT": {
                            "IsExported": true,
                            "IsConst": true,
                            "IsPointer": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "HTTP_PREFIX_PERSISTENT",
                            "File": "src/lib.rs",
                            "Line": 31,
                            "StartOffset": -1,
                            "EndOffset": 685,
                            "Content": "pub const HTTP_PREFIX_PERSISTENT: \u0026str = \"rpc-persist-\";"
                        },
                        "HTTP_PREFIX_TRANSIENT": {
                            "IsExported": true,
                            "IsConst": true,
                            "IsPointer": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "HTTP_PREFIX_TRANSIENT",
                            "File": "src/lib.rs",
                            "Line": 32,
                            "StartOffset": -1,
                            "EndOffset": 739,
                            "Content": "pub const HTTP_PREFIX_TRANSIENT: \u0026str = \"rpc-transit-\";"
                        },
                        "RPC_PREFIX_BACKWARD": {
                            "IsExported": true,
                            "IsConst": true,
                            "IsPointer": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "RPC_PREFIX_BACKWARD",
                            "File": "src/lib.rs",
                            "Line": 30,
                            "StartOffset": -1,
                            "EndOffset": 628,
                            "Content": "pub const RPC_PREFIX_BACKWARD: \u0026str = \"RPC_BACKWARD_\";"
                        },
                        "RPC_PREFIX_PERSISTENT": {
                            "IsExported": true,
                            "IsConst": true,
                            "IsPointer": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "RPC_PREFIX_PERSISTENT",
                            "File": "src/lib.rs",
                            "Line": 26,
                            "StartOffset": -1,
                            "EndOffset": 572,
                            "Content": "/// Framework should all obey these prefixes.\n\npub const RPC_PREFIX_PERSISTENT: \u0026str = \"RPC_PERSIST_\";"
                        },
                        "RPC_PREFIX_TRANSIENT": {
                            "IsExported": true,
                            "IsConst": true,
                            "IsPointer": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "RPC_PREFIX_TRANSIENT",
                            "File": "src/lib.rs",
                            "Line": 29,
                            "StartOffset": -1,
                            "EndOffset": 572,
                            "Content": "pub const RPC_PREFIX_TRANSIENT: \u0026str = \"RPC_TRANSIT_\";"
                        },
                        "backward_node": {
                            "IsExported": false,
                            "IsConst": false,
                            "IsPointer": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "backward_node",
                            "File": "src/lib.rs",
                            "Line": 94,
                            "StartOffset": 2661,
                            "EndOffset": 2710,
                            "Type": {
                                "ModPath": "",
                                "PkgPath": "core::option",
                                "Name": "clone"
                            },
                            "Content": "let backward_node = parent.backward_node.clone();"
                        },
                        "forward_node": {
                            "IsExported": false,
                            "IsConst": false,
                            "IsPointer": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "forward_node",
                            "File": "src/lib.rs",
                            "Line": 93,
                            "StartOffset": 2608,
                            "EndOffset": 2655,
                            "Type": {
                                "ModPath": "",
                                "PkgPath": "core::option",
                                "Name": "clone"
                            },
                            "Content": "let forward_node = parent.forward_node.clone();"
                        },
                        "key": {
                            "IsExported": false,
                            "IsConst": false,
                            "IsPointer": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "key",
                            "File": "src/lib.rs",
                            "Line": 491,
                            "StartOffset": 14904,
                            "EndOffset": 14927,
                            "Type": {
                                "ModPath": "",
                                "PkgPath": "core::convert",
                                "Name": "as_ref"
                            },
                            "Content": "let key = key.as_ref();"
                        },
                        "m2": {
                            "IsExported": false,
                            "IsConst": false,
                            "IsPointer": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "m2",
                            "File": "src/lib.rs",
                            "Line": 697,
                            "StartOffset": 21014,
                            "EndOffset": 21053,
                            "Type": {
                                "ModPath": "metainfo",
                                "PkgPath": "metainfo",
                                "Name": "MetaInfo"
                            },
                            "Content": "let m2 = MetaInfo::from(Arc::new(map));"
                        },
                        "map": {
                            "IsExported": false,
                            "IsConst": false,
                            "IsPointer": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "map",
                            "File": "src/lib.rs",
                            "Line": 806,
                            "StartOffset": 24385,
                            "EndOffset": 24501,
                            "Type": {
                                "ModPath": "metainfo",
                                "PkgPath": "metainfo",
                                "Name": "http_forward_test"
                            },
                            "Content": "let map = metainfo\n            .get_all_persistents_and_transients_with_http_prefix()\n            .unwrap();"
                        },
                        "mi": {
                            "IsExported": false,
                            "IsConst": false,
                            "IsPointer": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "mi",
                            "File": "src/lib.rs",
                            "Line": 127,
                            "StartOffset": 3842,
                            "EndOffset": 3866,
                            "Type": {
                                "ModPath": "",
                                "PkgPath": "alloc::sync",
                                "Name": "Arc"
                            },
                            "Content": "let mi = Arc::new(self);"
                        },
                        "mut m2": {
                            "IsExported": false,
                            "IsConst": false,
                            "IsPointer": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "mut m2",
                            "File": "src/lib.rs",
                            "Line": 644,
                            "StartOffset": 19527,
                            "EndOffset": 19570,
                            "Type": {
                                "ModPath": "metainfo",
                                "PkgPath": "metainfo",
                                "Name": "MetaInfo"
                            },
                            "Content": "let mut m2 = MetaInfo::from(Arc::new(map));"
                        },
                        "mut map": {
                            "IsExported": false,
                            "IsConst": false,
                            "IsPointer": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "mut map",
                            "File": "src/lib.rs",
                            "Line": 571,
                            "StartOffset": 17479,
                            "EndOffset": 17526,
                            "Type": {
                                "ModPath": "ahash@0.8.11",
                                "PkgPath": "ahash::hash_map",
                                "Name": "AHashMap"
                            },
                            "Content": "let mut map = AHashMap::with_capacity(new_cap);"
                        },
                        "mut metainfo": {
                            "IsExported": false,
                            "IsConst": false,
                            "IsPointer": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "mut metainfo",
                            "File": "src/lib.rs",
                            "Line": 801,
                            "StartOffset": 24057,
                            "EndOffset": 24092,
                            "Type": {
                                "ModPath": "metainfo",
                                "PkgPath": "metainfo",
                                "Name": "MetaInfo"
                            },
                            "Content": "let mut metainfo = MetaInfo::new();"
                        },
                        "mut other": {
                            "IsExported": false,
                            "IsConst": false,
                            "IsPointer": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "mut other",
                            "File": "src/lib.rs",
                            "Line": 766,
                            "StartOffset": 22863,
                            "EndOffset": 22895,
                            "Type": {
                                "ModPath": "metainfo",
                                "PkgPath": "metainfo",
                                "Name": "MetaInfo"
                            },
                            "Content": "let mut other = MetaInfo::new();"
                        },
                        "new": {
                            "IsExported": false,
                            "IsConst": false,
                            "IsPointer": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "new",
                            "File": "src/lib.rs",
                            "Line": 115,
                            "StartOffset": 3370,
                            "EndOffset": 3672,
                            "Type": {
                                "ModPath": "metainfo",
                                "PkgPath": "metainfo",
                                "Name": "MetaInfo"
                            },
                            "Content": "let new = MetaInfo {\n                parent: self.parent.clone(),\n                tmap: None,\n                smap: None,\n                faststr_tmap: None,\n                forward_node: self.forward_node.clone(),\n                backward_node: self.backward_node.clone(),\n            };"
                        },
                        "new_cap": {
                            "IsExported": false,
                            "IsConst": false,
                            "IsPointer": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "new_cap",
                            "File": "src/lib.rs",
                            "Line": 603,
                            "StartOffset": 18488,
                            "EndOffset": 18510,
                            "Type": {
                                "ModPath": "metainfo",
                                "PkgPath": "metainfo",
                                "Name": "MetaInfo.get_all_backword_transients_with_prefix"
                            },
                            "Content": "let new_cap = t.len();"
                        },
                        "persistents": {
                            "IsExported": false,
                            "IsConst": false,
                            "IsPointer": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "persistents",
                            "File": "src/lib.rs",
                            "Line": 564,
                            "StartOffset": 17126,
                            "EndOffset": 17171,
                            "Type": {
                                "ModPath": "metainfo",
                                "PkgPath": "metainfo",
                                "Name": "MetaInfo.get_all_persistents_and_transients"
                            },
                            "Content": "let persistents = node.get_all_persistents();"
                        },
                        "transients": {
                            "IsExported": false,
                            "IsConst": false,
                            "IsPointer": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "transients",
                            "File": "src/lib.rs",
                            "Line": 565,
                            "StartOffset": 17154,
                            "EndOffset": 17197,
                            "Type": {
                                "ModPath": "metainfo",
                                "PkgPath": "metainfo",
                                "Name": "MetaInfo.get_all_persistents_and_transients"
                            },
                            "Content": "let transients = node.get_all_transients();"
                        }
                    }
                },
                "metainfo::backward": {
                    "IsMain": false,
                    "IsTest": false,
                    "PkgPath": "metainfo::backward",
                    "Functions": {},
                    "Types": {
                        "Backward": {
                            "Exported": true,
                            "TypeKind": "interface",
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::backward",
                            "Name": "Backward",
                            "File": "src/backward.rs",
                            "Line": 4,
                            "StartOffset": -1,
                            "EndOffset": 1217,
                            "Content": "pub trait Backward {\n    // We don't think backward persistent makes sense.\n    fn get_backward_transient\u003cK: AsRef\u003cstr\u003e\u003e(\u0026self, key: K) -\u003e Option\u003cFastStr\u003e;\n    fn get_backward_downstream\u003cK: AsRef\u003cstr\u003e\u003e(\u0026self, key: K) -\u003e Option\u003cFastStr\u003e;\n\n    fn get_all_backward_transients(\u0026self) -\u003e Option\u003c\u0026AHashMap\u003cFastStr, FastStr\u003e\u003e;\n    fn get_all_backward_downstreams(\u0026self) -\u003e Option\u003c\u0026AHashMap\u003cFastStr, FastStr\u003e\u003e;\n\n    fn get_all_backward_transients_with_rpc_prefix(\u0026self) -\u003e Option\u003cAHashMap\u003cFastStr, FastStr\u003e\u003e;\n    fn get_all_backward_transients_with_http_prefix(\u0026self) -\u003e Option\u003cAHashMap\u003cFastStr, FastStr\u003e\u003e;\n\n    fn set_backward_transient\u003cK: Into\u003cFastStr\u003e, V: Into\u003cFastStr\u003e\u003e(\u0026mut self, key: K, value: V);\n    fn set_backward_downstream\u003cK: Into\u003cFastStr\u003e, V: Into\u003cFastStr\u003e\u003e(\u0026mut self, key: K, value: V);\n\n    fn strip_rpc_prefix_and_set_backward_downstream\u003cK: AsRef\u003cstr\u003e, V: Into\u003cFastStr\u003e\u003e(\n        \u0026mut self,\n        key: K,\n        value: V,\n    );\n\n    fn strip_http_prefix_and_set_backward_downstream\u003cK: AsRef\u003cstr\u003e, V: Into\u003cFastStr\u003e\u003e(\n        \u0026mut self,\n        key: K,\n        value: V,\n    );\n\n    fn del_backward_transient\u003cK: AsRef\u003cstr\u003e\u003e(\u0026mut self, key: K) -\u003e Option\u003cFastStr\u003e;\n    fn del_backward_downstream\u003cK: AsRef\u003cstr\u003e\u003e(\u0026mut self, key: K) -\u003e Option\u003cFastStr\u003e;\n}",
                            "SubStruct": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "AsRef",
                                    "File": "src/backward.rs",
                                    "Line": 6,
                                    "StartOffset": 97,
                                    "EndOffset": 102
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/backward.rs",
                                    "Line": 6,
                                    "StartOffset": 127,
                                    "EndOffset": 133
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/backward.rs",
                                    "Line": 6,
                                    "StartOffset": 134,
                                    "EndOffset": 141
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "AsRef",
                                    "File": "src/backward.rs",
                                    "Line": 7,
                                    "StartOffset": 153,
                                    "EndOffset": 158
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/backward.rs",
                                    "Line": 7,
                                    "StartOffset": 183,
                                    "EndOffset": 189
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/backward.rs",
                                    "Line": 7,
                                    "StartOffset": 190,
                                    "EndOffset": 197
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/backward.rs",
                                    "Line": 9,
                                    "StartOffset": 325,
                                    "EndOffset": 331
                                },
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap",
                                    "File": "src/backward.rs",
                                    "Line": 9,
                                    "StartOffset": 333,
                                    "EndOffset": 341
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/backward.rs",
                                    "Line": 9,
                                    "StartOffset": 342,
                                    "EndOffset": 349
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/backward.rs",
                                    "Line": 9,
                                    "StartOffset": 351,
                                    "EndOffset": 358
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/backward.rs",
                                    "Line": 10,
                                    "StartOffset": 327,
                                    "EndOffset": 333
                                },
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap",
                                    "File": "src/backward.rs",
                                    "Line": 10,
                                    "StartOffset": 335,
                                    "EndOffset": 343
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/backward.rs",
                                    "Line": 10,
                                    "StartOffset": 344,
                                    "EndOffset": 351
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/backward.rs",
                                    "Line": 10,
                                    "StartOffset": 353,
                                    "EndOffset": 360
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/backward.rs",
                                    "Line": 12,
                                    "StartOffset": 507,
                                    "EndOffset": 513
                                },
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap",
                                    "File": "src/backward.rs",
                                    "Line": 12,
                                    "StartOffset": 514,
                                    "EndOffset": 522
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/backward.rs",
                                    "Line": 12,
                                    "StartOffset": 523,
                                    "EndOffset": 530
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/backward.rs",
                                    "Line": 12,
                                    "StartOffset": 532,
                                    "EndOffset": 539
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/backward.rs",
                                    "Line": 13,
                                    "StartOffset": 509,
                                    "EndOffset": 515
                                },
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap",
                                    "File": "src/backward.rs",
                                    "Line": 13,
                                    "StartOffset": 516,
                                    "EndOffset": 524
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/backward.rs",
                                    "Line": 13,
                                    "StartOffset": 525,
                                    "EndOffset": 532
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/backward.rs",
                                    "Line": 13,
                                    "StartOffset": 534,
                                    "EndOffset": 541
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "Into",
                                    "File": "src/backward.rs",
                                    "Line": 15,
                                    "StartOffset": 675,
                                    "EndOffset": 679
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/backward.rs",
                                    "Line": 15,
                                    "StartOffset": 680,
                                    "EndOffset": 687
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "Into",
                                    "File": "src/backward.rs",
                                    "Line": 15,
                                    "StartOffset": 693,
                                    "EndOffset": 697
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/backward.rs",
                                    "Line": 15,
                                    "StartOffset": 698,
                                    "EndOffset": 705
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "Into",
                                    "File": "src/backward.rs",
                                    "Line": 16,
                                    "StartOffset": 677,
                                    "EndOffset": 681
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/backward.rs",
                                    "Line": 16,
                                    "StartOffset": 682,
                                    "EndOffset": 689
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "Into",
                                    "File": "src/backward.rs",
                                    "Line": 16,
                                    "StartOffset": 695,
                                    "EndOffset": 699
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/backward.rs",
                                    "Line": 16,
                                    "StartOffset": 700,
                                    "EndOffset": 707
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "AsRef",
                                    "File": "src/backward.rs",
                                    "Line": 18,
                                    "StartOffset": 891,
                                    "EndOffset": 896
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "Into",
                                    "File": "src/backward.rs",
                                    "Line": 18,
                                    "StartOffset": 906,
                                    "EndOffset": 910
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/backward.rs",
                                    "Line": 18,
                                    "StartOffset": 911,
                                    "EndOffset": 918
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "AsRef",
                                    "File": "src/backward.rs",
                                    "Line": 24,
                                    "StartOffset": 1039,
                                    "EndOffset": 1044
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "Into",
                                    "File": "src/backward.rs",
                                    "Line": 24,
                                    "StartOffset": 1054,
                                    "EndOffset": 1058
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/backward.rs",
                                    "Line": 24,
                                    "StartOffset": 1059,
                                    "EndOffset": 1066
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "AsRef",
                                    "File": "src/backward.rs",
                                    "Line": 30,
                                    "StartOffset": 1164,
                                    "EndOffset": 1169
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/backward.rs",
                                    "Line": 30,
                                    "StartOffset": 1198,
                                    "EndOffset": 1204
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/backward.rs",
                                    "Line": 30,
                                    "StartOffset": 1205,
                                    "EndOffset": 1212
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "AsRef",
                                    "File": "src/backward.rs",
                                    "Line": 31,
                                    "StartOffset": 1166,
                                    "EndOffset": 1171
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/backward.rs",
                                    "Line": 31,
                                    "StartOffset": 1200,
                                    "EndOffset": 1206
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/backward.rs",
                                    "Line": 31,
                                    "StartOffset": 1207,
                                    "EndOffset": 1214
                                }
                            ]
                        }
                    },
                    "Vars": {}
                },
                "metainfo::convert": {
                    "IsMain": false,
                    "IsTest": false,
                    "PkgPath": "metainfo::convert",
                    "Functions": {
                        "Converter\u003cHttpConverter\u003e.add_backward_prefix": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::convert",
                            "Name": "Converter\u003cHttpConverter\u003e.add_backward_prefix",
                            "File": "src/convert.rs",
                            "Line": 118,
                            "StartOffset": 3588,
                            "EndOffset": 3648,
                            "Content": "impl Converter for HttpConverter {\n    fn add_backward_prefix(\u0026self, key: \u0026str) -\u003e FastStr {\n        self.add_prefix_and_to_http_format(HTTP_PREFIX_BACKWARD, key)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter"
                                }
                            },
                            "Results": [
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/convert.rs",
                                    "Line": 118,
                                    "StartOffset": 3632,
                                    "EndOffset": 3639
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter.add_prefix_and_to_http_format",
                                    "File": "src/convert.rs",
                                    "Line": 119,
                                    "StartOffset": 3598,
                                    "EndOffset": 3627
                                }
                            ],
                            "GlobalVars": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "HTTP_PREFIX_BACKWARD",
                                    "File": "src/convert.rs",
                                    "Line": 119,
                                    "StartOffset": 3628,
                                    "EndOffset": 3648
                                }
                            ]
                        },
                        "Converter\u003cHttpConverter\u003e.add_persistent_prefix": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::convert",
                            "Name": "Converter\u003cHttpConverter\u003e.add_persistent_prefix",
                            "File": "src/convert.rs",
                            "Line": 110,
                            "StartOffset": 3278,
                            "EndOffset": 3374,
                            "Content": "impl Converter for HttpConverter {\n    fn add_persistent_prefix(\u0026self, key: \u0026str) -\u003e FastStr {\n        self.add_prefix_and_to_http_format(HTTP_PREFIX_PERSISTENT, key)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter.add_prefix_and_to_http_format",
                                    "File": "src/convert.rs",
                                    "Line": 111,
                                    "StartOffset": 3322,
                                    "EndOffset": 3351
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/convert.rs",
                                    "Line": 110,
                                    "StartOffset": 3324,
                                    "EndOffset": 3331
                                }
                            ],
                            "GlobalVars": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "HTTP_PREFIX_PERSISTENT",
                                    "File": "src/convert.rs",
                                    "Line": 111,
                                    "StartOffset": 3352,
                                    "EndOffset": 3374
                                }
                            ]
                        },
                        "Converter\u003cHttpConverter\u003e.add_transient_prefix": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::convert",
                            "Name": "Converter\u003cHttpConverter\u003e.add_transient_prefix",
                            "File": "src/convert.rs",
                            "Line": 114,
                            "StartOffset": 3451,
                            "EndOffset": 3512,
                            "Content": "impl Converter for HttpConverter {\n    fn add_transient_prefix(\u0026self, key: \u0026str) -\u003e FastStr {\n        self.add_prefix_and_to_http_format(HTTP_PREFIX_TRANSIENT, key)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter.add_prefix_and_to_http_format",
                                    "File": "src/convert.rs",
                                    "Line": 115,
                                    "StartOffset": 3461,
                                    "EndOffset": 3490
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/convert.rs",
                                    "Line": 114,
                                    "StartOffset": 3496,
                                    "EndOffset": 3503
                                }
                            ],
                            "GlobalVars": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "HTTP_PREFIX_TRANSIENT",
                                    "File": "src/convert.rs",
                                    "Line": 115,
                                    "StartOffset": 3491,
                                    "EndOffset": 3512
                                }
                            ]
                        },
                        "Converter\u003cHttpConverter\u003e.remove_backward_prefix": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::convert",
                            "Name": "Converter\u003cHttpConverter\u003e.remove_backward_prefix",
                            "File": "src/convert.rs",
                            "Line": 130,
                            "StartOffset": 4025,
                            "EndOffset": 4096,
                            "Content": "impl Converter for HttpConverter {\n    fn remove_backward_prefix(\u0026self, key: \u0026str) -\u003e Option\u003cFastStr\u003e {\n        self.remove_prefix_and_to_rpc_format(HTTP_PREFIX_BACKWARD, key)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter.remove_prefix_and_to_rpc_format",
                                    "File": "src/convert.rs",
                                    "Line": 131,
                                    "StartOffset": 4035,
                                    "EndOffset": 4066
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/convert.rs",
                                    "Line": 130,
                                    "StartOffset": 4072,
                                    "EndOffset": 4078
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/convert.rs",
                                    "Line": 130,
                                    "StartOffset": 4079,
                                    "EndOffset": 4086
                                }
                            ],
                            "GlobalVars": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "HTTP_PREFIX_BACKWARD",
                                    "File": "src/convert.rs",
                                    "Line": 131,
                                    "StartOffset": 4067,
                                    "EndOffset": 4087
                                }
                            ]
                        },
                        "Converter\u003cHttpConverter\u003e.remove_persistent_prefix": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::convert",
                            "Name": "Converter\u003cHttpConverter\u003e.remove_persistent_prefix",
                            "File": "src/convert.rs",
                            "Line": 122,
                            "StartOffset": 3723,
                            "EndOffset": 3796,
                            "Content": "impl Converter for HttpConverter {\n    fn remove_persistent_prefix(\u0026self, key: \u0026str) -\u003e Option\u003cFastStr\u003e {\n        self.remove_prefix_and_to_rpc_format(HTTP_PREFIX_PERSISTENT, key)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter.remove_prefix_and_to_rpc_format",
                                    "File": "src/convert.rs",
                                    "Line": 123,
                                    "StartOffset": 3733,
                                    "EndOffset": 3764
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/convert.rs",
                                    "Line": 122,
                                    "StartOffset": 3772,
                                    "EndOffset": 3778
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/convert.rs",
                                    "Line": 122,
                                    "StartOffset": 3779,
                                    "EndOffset": 3786
                                }
                            ],
                            "GlobalVars": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "HTTP_PREFIX_PERSISTENT",
                                    "File": "src/convert.rs",
                                    "Line": 123,
                                    "StartOffset": 3765,
                                    "EndOffset": 3787
                                }
                            ]
                        },
                        "Converter\u003cHttpConverter\u003e.remove_transient_prefix": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::convert",
                            "Name": "Converter\u003cHttpConverter\u003e.remove_transient_prefix",
                            "File": "src/convert.rs",
                            "Line": 126,
                            "StartOffset": 3875,
                            "EndOffset": 3947,
                            "Content": "impl Converter for HttpConverter {\n    fn remove_transient_prefix(\u0026self, key: \u0026str) -\u003e Option\u003cFastStr\u003e {\n        self.remove_prefix_and_to_rpc_format(HTTP_PREFIX_TRANSIENT, key)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter.remove_prefix_and_to_rpc_format",
                                    "File": "src/convert.rs",
                                    "Line": 127,
                                    "StartOffset": 3885,
                                    "EndOffset": 3916
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/convert.rs",
                                    "Line": 126,
                                    "StartOffset": 3923,
                                    "EndOffset": 3929
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/convert.rs",
                                    "Line": 126,
                                    "StartOffset": 3930,
                                    "EndOffset": 3937
                                }
                            ],
                            "GlobalVars": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "HTTP_PREFIX_TRANSIENT",
                                    "File": "src/convert.rs",
                                    "Line": 127,
                                    "StartOffset": 3917,
                                    "EndOffset": 3938
                                }
                            ]
                        },
                        "Converter\u003cRpcConverter\u003e.add_backward_prefix": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::convert",
                            "Name": "Converter\u003cRpcConverter\u003e.add_backward_prefix",
                            "File": "src/convert.rs",
                            "Line": 46,
                            "StartOffset": 1387,
                            "EndOffset": 1447,
                            "Content": "impl Converter for RpcConverter {\n    fn add_backward_prefix(\u0026self, key: \u0026str) -\u003e FastStr {\n        self.add_prefix(RPC_PREFIX_BACKWARD, key)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "RpcConverter"
                                }
                            },
                            "Results": [
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/convert.rs",
                                    "Line": 46,
                                    "StartOffset": 1431,
                                    "EndOffset": 1438
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "RpcConverter.add_prefix",
                                    "File": "src/convert.rs",
                                    "Line": 47,
                                    "StartOffset": 1397,
                                    "EndOffset": 1407
                                }
                            ],
                            "GlobalVars": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "RPC_PREFIX_BACKWARD",
                                    "File": "src/convert.rs",
                                    "Line": 47,
                                    "StartOffset": 1408,
                                    "EndOffset": 1427
                                }
                            ]
                        },
                        "Converter\u003cRpcConverter\u003e.add_persistent_prefix": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::convert",
                            "Name": "Converter\u003cRpcConverter\u003e.add_persistent_prefix",
                            "File": "src/convert.rs",
                            "Line": 38,
                            "StartOffset": 1118,
                            "EndOffset": 1213,
                            "Content": "impl Converter for RpcConverter {\n    fn add_persistent_prefix(\u0026self, key: \u0026str) -\u003e FastStr {\n        self.add_prefix(RPC_PREFIX_PERSISTENT, key)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "RpcConverter"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "RpcConverter.add_prefix",
                                    "File": "src/convert.rs",
                                    "Line": 39,
                                    "StartOffset": 1161,
                                    "EndOffset": 1171
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/convert.rs",
                                    "Line": 38,
                                    "StartOffset": 1164,
                                    "EndOffset": 1171
                                }
                            ],
                            "GlobalVars": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "RPC_PREFIX_PERSISTENT",
                                    "File": "src/convert.rs",
                                    "Line": 39,
                                    "StartOffset": 1172,
                                    "EndOffset": 1193
                                }
                            ]
                        },
                        "Converter\u003cRpcConverter\u003e.add_transient_prefix": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::convert",
                            "Name": "Converter\u003cRpcConverter\u003e.add_transient_prefix",
                            "File": "src/convert.rs",
                            "Line": 42,
                            "StartOffset": 1270,
                            "EndOffset": 1331,
                            "Content": "impl Converter for RpcConverter {\n    fn add_transient_prefix(\u0026self, key: \u0026str) -\u003e FastStr {\n        self.add_prefix(RPC_PREFIX_TRANSIENT, key)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "RpcConverter"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "RpcConverter.add_prefix",
                                    "File": "src/convert.rs",
                                    "Line": 43,
                                    "StartOffset": 1280,
                                    "EndOffset": 1290
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/convert.rs",
                                    "Line": 42,
                                    "StartOffset": 1315,
                                    "EndOffset": 1322
                                }
                            ],
                            "GlobalVars": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "RPC_PREFIX_TRANSIENT",
                                    "File": "src/convert.rs",
                                    "Line": 43,
                                    "StartOffset": 1291,
                                    "EndOffset": 1311
                                }
                            ]
                        },
                        "Converter\u003cRpcConverter\u003e.remove_backward_prefix": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::convert",
                            "Name": "Converter\u003cRpcConverter\u003e.remove_backward_prefix",
                            "File": "src/convert.rs",
                            "Line": 58,
                            "StartOffset": 1766,
                            "EndOffset": 1837,
                            "Content": "impl Converter for RpcConverter {\n    fn remove_backward_prefix(\u0026self, key: \u0026str) -\u003e Option\u003cFastStr\u003e {\n        self.remove_prefix(RPC_PREFIX_BACKWARD, key)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "RpcConverter"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "RpcConverter.remove_prefix",
                                    "File": "src/convert.rs",
                                    "Line": 59,
                                    "StartOffset": 1776,
                                    "EndOffset": 1789
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/convert.rs",
                                    "Line": 58,
                                    "StartOffset": 1813,
                                    "EndOffset": 1819
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/convert.rs",
                                    "Line": 58,
                                    "StartOffset": 1820,
                                    "EndOffset": 1827
                                }
                            ],
                            "GlobalVars": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "RPC_PREFIX_BACKWARD",
                                    "File": "src/convert.rs",
                                    "Line": 59,
                                    "StartOffset": 1790,
                                    "EndOffset": 1809
                                }
                            ]
                        },
                        "Converter\u003cRpcConverter\u003e.remove_persistent_prefix": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::convert",
                            "Name": "Converter\u003cRpcConverter\u003e.remove_persistent_prefix",
                            "File": "src/convert.rs",
                            "Line": 50,
                            "StartOffset": 1502,
                            "EndOffset": 1575,
                            "Content": "impl Converter for RpcConverter {\n    fn remove_persistent_prefix(\u0026self, key: \u0026str) -\u003e Option\u003cFastStr\u003e {\n        self.remove_prefix(RPC_PREFIX_PERSISTENT, key)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "RpcConverter"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "RpcConverter.remove_prefix",
                                    "File": "src/convert.rs",
                                    "Line": 51,
                                    "StartOffset": 1512,
                                    "EndOffset": 1525
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/convert.rs",
                                    "Line": 50,
                                    "StartOffset": 1551,
                                    "EndOffset": 1557
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/convert.rs",
                                    "Line": 50,
                                    "StartOffset": 1558,
                                    "EndOffset": 1565
                                }
                            ],
                            "GlobalVars": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "RPC_PREFIX_PERSISTENT",
                                    "File": "src/convert.rs",
                                    "Line": 51,
                                    "StartOffset": 1526,
                                    "EndOffset": 1547
                                }
                            ]
                        },
                        "Converter\u003cRpcConverter\u003e.remove_transient_prefix": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::convert",
                            "Name": "Converter\u003cRpcConverter\u003e.remove_transient_prefix",
                            "File": "src/convert.rs",
                            "Line": 54,
                            "StartOffset": 1635,
                            "EndOffset": 1707,
                            "Content": "impl Converter for RpcConverter {\n    fn remove_transient_prefix(\u0026self, key: \u0026str) -\u003e Option\u003cFastStr\u003e {\n        self.remove_prefix(RPC_PREFIX_TRANSIENT, key)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "RpcConverter"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "RpcConverter.remove_prefix",
                                    "File": "src/convert.rs",
                                    "Line": 55,
                                    "StartOffset": 1645,
                                    "EndOffset": 1658
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/convert.rs",
                                    "Line": 54,
                                    "StartOffset": 1683,
                                    "EndOffset": 1689
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/convert.rs",
                                    "Line": 54,
                                    "StartOffset": 1690,
                                    "EndOffset": 1697
                                }
                            ],
                            "GlobalVars": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "RPC_PREFIX_TRANSIENT",
                                    "File": "src/convert.rs",
                                    "Line": 55,
                                    "StartOffset": 1659,
                                    "EndOffset": 1679
                                }
                            ]
                        },
                        "HttpConverter.add_prefix_and_to_http_format": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::convert",
                            "Name": "HttpConverter.add_prefix_and_to_http_format",
                            "File": "src/convert.rs",
                            "Line": 92,
                            "StartOffset": 2680,
                            "EndOffset": 2931,
                            "Content": "impl HttpConverter {\n    /// Convert `RPC_PERSIST_TEST_KEY` to `rpc-persist-test-key`\n    #[inline]\n    #[inline]\n    fn add_prefix_and_to_http_format(\u0026self, prefix: \u0026'static str, key: \u0026str) -\u003e FastStr {\n        let mut buf = String::with_capacity(prefix.len() + key.len());\n        buf.push_str(prefix);\n        self.to_http_format(key, \u0026mut buf);\n        FastStr::from_string(buf)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter"
                                }
                            },
                            "FunctionCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "alloc::string",
                                    "Name": "with_capacity",
                                    "File": "src/convert.rs",
                                    "Line": 94,
                                    "StartOffset": 2721,
                                    "EndOffset": 2734
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr::from_string",
                                    "File": "src/convert.rs",
                                    "Line": 97,
                                    "StartOffset": 2899,
                                    "EndOffset": 2910
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::str",
                                    "Name": "len",
                                    "File": "src/convert.rs",
                                    "Line": 94,
                                    "StartOffset": 2742,
                                    "EndOffset": 2745
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "alloc::string",
                                    "Name": "push_str",
                                    "File": "src/convert.rs",
                                    "Line": 95,
                                    "StartOffset": 2793,
                                    "EndOffset": 2801
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter.to_http_format",
                                    "File": "src/convert.rs",
                                    "Line": 96,
                                    "StartOffset": 2865,
                                    "EndOffset": 2879
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/convert.rs",
                                    "Line": 93,
                                    "StartOffset": 2757,
                                    "EndOffset": 2764
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "alloc::string",
                                    "Name": "String",
                                    "File": "src/convert.rs",
                                    "Line": 94,
                                    "StartOffset": 2713,
                                    "EndOffset": 2719
                                }
                            ]
                        },
                        "HttpConverter.remove_prefix_and_to_rpc_format": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::convert",
                            "Name": "HttpConverter.remove_prefix_and_to_rpc_format",
                            "File": "src/convert.rs",
                            "Line": 100,
                            "StartOffset": 2970,
                            "EndOffset": 3230,
                            "Content": "impl HttpConverter {\n    /// Convert `RPC_PERSIST_TEST_KEY` to `rpc-persist-test-key`\n    #[inline]\n    #[inline]\n    fn remove_prefix_and_to_rpc_format(\u0026self, prefix: \u0026'static str, key: \u0026str) -\u003e Option\u003cFastStr\u003e {\n        let key = key.strip_prefix(prefix)?;\n        let mut buf = String::with_capacity(key.len());\n        self.to_rpc_format(key, \u0026mut buf);\n        Some(FastStr::from_string(buf))\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter"
                                }
                            },
                            "FunctionCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "alloc::string",
                                    "Name": "with_capacity",
                                    "File": "src/convert.rs",
                                    "Line": 103,
                                    "StartOffset": 3111,
                                    "EndOffset": 3124
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr::from_string",
                                    "File": "src/convert.rs",
                                    "Line": 105,
                                    "StartOffset": 3204,
                                    "EndOffset": 3215
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::str",
                                    "Name": "strip_prefix",
                                    "File": "src/convert.rs",
                                    "Line": 102,
                                    "StartOffset": 3003,
                                    "EndOffset": 3015
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::str",
                                    "Name": "len",
                                    "File": "src/convert.rs",
                                    "Line": 103,
                                    "StartOffset": 3129,
                                    "EndOffset": 3132
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter.to_rpc_format",
                                    "File": "src/convert.rs",
                                    "Line": 104,
                                    "StartOffset": 3139,
                                    "EndOffset": 3152
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/convert.rs",
                                    "Line": 101,
                                    "StartOffset": 3049,
                                    "EndOffset": 3055
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/convert.rs",
                                    "Line": 101,
                                    "StartOffset": 3056,
                                    "EndOffset": 3063
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "alloc::string",
                                    "Name": "String",
                                    "File": "src/convert.rs",
                                    "Line": 103,
                                    "StartOffset": 3103,
                                    "EndOffset": 3109
                                }
                            ]
                        },
                        "HttpConverter.to_http_format": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::convert",
                            "Name": "HttpConverter.to_http_format",
                            "File": "src/convert.rs",
                            "Line": 66,
                            "StartOffset": 1925,
                            "EndOffset": 2298,
                            "Content": "impl HttpConverter {\n    /// Convert `RPC_PERSIST_TEST_KEY` to `rpc-persist-test-key`\n    #[inline]\n    /// Convert `RPC_PERSIST_TEST_KEY` to `rpc-persist-test-key`\n    #[inline]\n    fn to_http_format(\u0026self, key: \u0026str, buf: \u0026mut String) {\n        for ch in key.chars() {\n            let ch = match ch {\n                'A'..='Z' =\u003e ch.to_ascii_lowercase(),\n                '_' =\u003e '-',\n                _ =\u003e ch,\n            };\n            buf.push(ch);\n        }\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::str",
                                    "Name": "chars",
                                    "File": "src/convert.rs",
                                    "Line": 69,
                                    "StartOffset": 2043,
                                    "EndOffset": 2048
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::char::methods",
                                    "Name": "to_ascii_lowercase",
                                    "File": "src/convert.rs",
                                    "Line": 71,
                                    "StartOffset": 2145,
                                    "EndOffset": 2163
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "alloc::string",
                                    "Name": "push",
                                    "File": "src/convert.rs",
                                    "Line": 75,
                                    "StartOffset": 2268,
                                    "EndOffset": 2272
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "alloc::string",
                                    "Name": "String",
                                    "File": "src/convert.rs",
                                    "Line": 68,
                                    "StartOffset": 2057,
                                    "EndOffset": 2063
                                }
                            ]
                        },
                        "HttpConverter.to_http_format_string": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::convert",
                            "Name": "HttpConverter.to_http_format_string",
                            "File": "src/convert.rs",
                            "Line": 245,
                            "StartOffset": 7293,
                            "EndOffset": 7490,
                            "Content": "impl HttpConverter {\n    fn to_http_format_string(\u0026self, key: \u0026str) -\u003e String {\n            let mut buf = String::with_capacity(key.len());\n            self.to_http_format(key, \u0026mut buf);\n            buf\n        }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter"
                                }
                            },
                            "FunctionCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "alloc::string",
                                    "Name": "with_capacity",
                                    "File": "src/convert.rs",
                                    "Line": 246,
                                    "StartOffset": 7344,
                                    "EndOffset": 7357
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::str",
                                    "Name": "len",
                                    "File": "src/convert.rs",
                                    "Line": 246,
                                    "StartOffset": 7362,
                                    "EndOffset": 7365
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter.to_http_format",
                                    "File": "src/convert.rs",
                                    "Line": 247,
                                    "StartOffset": 7390,
                                    "EndOffset": 7404
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "alloc::string",
                                    "Name": "String",
                                    "File": "src/convert.rs",
                                    "Line": 245,
                                    "StartOffset": 7339,
                                    "EndOffset": 7345
                                }
                            ]
                        },
                        "HttpConverter.to_rpc_format": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::convert",
                            "Name": "HttpConverter.to_rpc_format",
                            "File": "src/convert.rs",
                            "Line": 79,
                            "StartOffset": 2313,
                            "EndOffset": 2665,
                            "Content": "impl HttpConverter {\n    /// Convert `RPC_PERSIST_TEST_KEY` to `rpc-persist-test-key`\n    #[inline]\n    /// Convert `rpc-persist-test-key` to `RPC_PERSIST_TEST_KEY`\n    #[inline]\n    fn to_rpc_format(\u0026self, key: \u0026str, buf: \u0026mut String) {\n        for ch in key.chars() {\n            let ch = match ch {\n                'a'..='z' =\u003e ch.to_ascii_uppercase(),\n                '-' =\u003e '_',\n                _ =\u003e ch,\n            };\n            buf.push(ch);\n        }\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::str",
                                    "Name": "chars",
                                    "File": "src/convert.rs",
                                    "Line": 82,
                                    "StartOffset": 2411,
                                    "EndOffset": 2416
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::char::methods",
                                    "Name": "to_ascii_uppercase",
                                    "File": "src/convert.rs",
                                    "Line": 84,
                                    "StartOffset": 2512,
                                    "EndOffset": 2530
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "alloc::string",
                                    "Name": "push",
                                    "File": "src/convert.rs",
                                    "Line": 88,
                                    "StartOffset": 2635,
                                    "EndOffset": 2639
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "alloc::string",
                                    "Name": "String",
                                    "File": "src/convert.rs",
                                    "Line": 81,
                                    "StartOffset": 2424,
                                    "EndOffset": 2430
                                }
                            ]
                        },
                        "HttpConverter.to_rpc_format_string": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::convert",
                            "Name": "HttpConverter.to_rpc_format_string",
                            "File": "src/convert.rs",
                            "Line": 251,
                            "StartOffset": 7515,
                            "EndOffset": 7686,
                            "Content": "impl HttpConverter {\n    fn to_rpc_format_string(\u0026self, key: \u0026str) -\u003e String {\n            let mut buf = String::with_capacity(key.len());\n            self.to_rpc_format(key, \u0026mut buf);\n            buf\n        }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter"
                                }
                            },
                            "FunctionCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "alloc::string",
                                    "Name": "with_capacity",
                                    "File": "src/convert.rs",
                                    "Line": 252,
                                    "StartOffset": 7542,
                                    "EndOffset": 7555
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::str",
                                    "Name": "len",
                                    "File": "src/convert.rs",
                                    "Line": 252,
                                    "StartOffset": 7560,
                                    "EndOffset": 7563
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter.to_rpc_format",
                                    "File": "src/convert.rs",
                                    "Line": 253,
                                    "StartOffset": 7587,
                                    "EndOffset": 7600
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "alloc::string",
                                    "Name": "String",
                                    "File": "src/convert.rs",
                                    "Line": 251,
                                    "StartOffset": 7560,
                                    "EndOffset": 7566
                                }
                            ]
                        },
                        "RpcConverter.add_prefix": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::convert",
                            "Name": "RpcConverter.add_prefix",
                            "File": "src/convert.rs",
                            "Line": 22,
                            "StartOffset": 643,
                            "EndOffset": 877,
                            "Content": "impl RpcConverter {\n    #[inline]\n    #[inline]\n    fn add_prefix(\u0026self, prefix: \u0026'static str, key: \u0026str) -\u003e FastStr {\n        let mut res = String::with_capacity(prefix.len() + key.len());\n        res.push_str(prefix);\n        res.push_str(key);\n        FastStr::from_string(res)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "RpcConverter"
                                }
                            },
                            "Results": [
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/convert.rs",
                                    "Line": 23,
                                    "StartOffset": 720,
                                    "EndOffset": 727
                                }
                            ],
                            "FunctionCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "alloc::string",
                                    "Name": "with_capacity",
                                    "File": "src/convert.rs",
                                    "Line": 24,
                                    "StartOffset": 703,
                                    "EndOffset": 716
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr::from_string",
                                    "File": "src/convert.rs",
                                    "Line": 27,
                                    "StartOffset": 862,
                                    "EndOffset": 873
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::str",
                                    "Name": "len",
                                    "File": "src/convert.rs",
                                    "Line": 24,
                                    "StartOffset": 724,
                                    "EndOffset": 727
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "alloc::string",
                                    "Name": "push_str",
                                    "File": "src/convert.rs",
                                    "Line": 25,
                                    "StartOffset": 756,
                                    "EndOffset": 764
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "alloc::string",
                                    "Name": "String",
                                    "File": "src/convert.rs",
                                    "Line": 24,
                                    "StartOffset": 695,
                                    "EndOffset": 701
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/convert.rs",
                                    "Line": 27,
                                    "StartOffset": 853,
                                    "EndOffset": 860
                                }
                            ]
                        },
                        "RpcConverter.remove_prefix": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::convert",
                            "Name": "RpcConverter.remove_prefix",
                            "File": "src/convert.rs",
                            "Line": 30,
                            "StartOffset": 916,
                            "EndOffset": 1059,
                            "Content": "impl RpcConverter {\n    #[inline]\n    #[inline]\n    fn remove_prefix(\u0026self, prefix: \u0026'static str, key: \u0026str) -\u003e Option\u003cFastStr\u003e {\n        let key = key.strip_prefix(prefix)?;\n        Some(FastStr::from_string(key.to_owned()))\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "RpcConverter"
                                }
                            },
                            "FunctionCalls": [
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr::from_string",
                                    "File": "src/convert.rs",
                                    "Line": 33,
                                    "StartOffset": 1031,
                                    "EndOffset": 1042
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::str",
                                    "Name": "strip_prefix",
                                    "File": "src/convert.rs",
                                    "Line": 32,
                                    "StartOffset": 949,
                                    "EndOffset": 961
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "alloc::str",
                                    "Name": "to_owned",
                                    "File": "src/convert.rs",
                                    "Line": 33,
                                    "StartOffset": 1047,
                                    "EndOffset": 1055
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/convert.rs",
                                    "Line": 31,
                                    "StartOffset": 977,
                                    "EndOffset": 983
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/convert.rs",
                                    "Line": 31,
                                    "StartOffset": 984,
                                    "EndOffset": 991
                                }
                            ]
                        },
                        "add_http_prefix": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::convert",
                            "Name": "add_http_prefix",
                            "File": "src/convert.rs",
                            "Line": 305,
                            "StartOffset": 9416,
                            "EndOffset": 9828,
                            "Content": "#[test]\n    fn add_http_prefix() {\n        assert_eq!(\n            HttpConverter.add_persistent_prefix(\"TEST_KEY\"),\n            \"rpc-persist-test-key\",\n        );\n        assert_eq!(\n            HttpConverter.add_transient_prefix(\"TEST_KEY\"),\n            \"rpc-transit-test-key\",\n        );\n        assert_eq!(\n            HttpConverter.add_backward_prefix(\"TEST_KEY\"),\n            \"rpc-backward-test-key\",\n        );\n    }",
                            "FunctionCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::macros",
                                    "Name": "assert_eq",
                                    "File": "src/convert.rs",
                                    "Line": 307,
                                    "StartOffset": 9433,
                                    "EndOffset": 9442
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "Converter\u003cHttpConverter\u003e.add_persistent_prefix",
                                    "File": "src/convert.rs",
                                    "Line": 308,
                                    "StartOffset": 9478,
                                    "EndOffset": 9499
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "Converter\u003cHttpConverter\u003e.add_transient_prefix",
                                    "File": "src/convert.rs",
                                    "Line": 312,
                                    "StartOffset": 9606,
                                    "EndOffset": 9626
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "Converter\u003cHttpConverter\u003e.add_backward_prefix",
                                    "File": "src/convert.rs",
                                    "Line": 316,
                                    "StartOffset": 9733,
                                    "EndOffset": 9752
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter",
                                    "File": "src/convert.rs",
                                    "Line": 308,
                                    "StartOffset": 9464,
                                    "EndOffset": 9477
                                }
                            ]
                        },
                        "add_rpc_prefix": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::convert",
                            "Name": "add_rpc_prefix",
                            "File": "src/convert.rs",
                            "Line": 139,
                            "StartOffset": 4275,
                            "EndOffset": 4683,
                            "Content": "#[test]\n    fn add_rpc_prefix() {\n        assert_eq!(\n            RpcConverter.add_persistent_prefix(\"TEST_KEY\"),\n            \"RPC_PERSIST_TEST_KEY\",\n        );\n        assert_eq!(\n            RpcConverter.add_transient_prefix(\"TEST_KEY\"),\n            \"RPC_TRANSIT_TEST_KEY\",\n        );\n        assert_eq!(\n            RpcConverter.add_backward_prefix(\"TEST_KEY\"),\n            \"RPC_BACKWARD_TEST_KEY\",\n        );\n    }",
                            "FunctionCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::macros",
                                    "Name": "assert_eq",
                                    "File": "src/convert.rs",
                                    "Line": 141,
                                    "StartOffset": 4292,
                                    "EndOffset": 4301
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "Converter\u003cRpcConverter\u003e.add_persistent_prefix",
                                    "File": "src/convert.rs",
                                    "Line": 142,
                                    "StartOffset": 4335,
                                    "EndOffset": 4356
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "Converter\u003cRpcConverter\u003e.add_transient_prefix",
                                    "File": "src/convert.rs",
                                    "Line": 146,
                                    "StartOffset": 4462,
                                    "EndOffset": 4482
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "Converter\u003cRpcConverter\u003e.add_backward_prefix",
                                    "File": "src/convert.rs",
                                    "Line": 150,
                                    "StartOffset": 4588,
                                    "EndOffset": 4607
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "RpcConverter",
                                    "File": "src/convert.rs",
                                    "Line": 142,
                                    "StartOffset": 4322,
                                    "EndOffset": 4334
                                }
                            ]
                        },
                        "check": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::convert",
                            "Name": "check",
                            "File": "src/convert.rs",
                            "Line": 260,
                            "StartOffset": 7730,
                            "EndOffset": 7821,
                            "Content": "fn check(rpc_style: \u0026str, http_style: \u0026str) {\n            assert_eq!(HttpConverter.to_http_format_string(rpc_style), http_style);\n        }",
                            "FunctionCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "http_format_convert_test",
                                    "File": "src/convert.rs",
                                    "Line": 260,
                                    "StartOffset": 7733,
                                    "EndOffset": 7738
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::macros",
                                    "Name": "assert_eq",
                                    "File": "src/convert.rs",
                                    "Line": 261,
                                    "StartOffset": 7770,
                                    "EndOffset": 7779
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter.to_http_format_string",
                                    "File": "src/convert.rs",
                                    "Line": 261,
                                    "StartOffset": 7795,
                                    "EndOffset": 7816
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter",
                                    "File": "src/convert.rs",
                                    "Line": 261,
                                    "StartOffset": 7781,
                                    "EndOffset": 7794
                                }
                            ]
                        },
                        "check_http": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::convert",
                            "Name": "check_http",
                            "File": "src/convert.rs",
                            "Line": 288,
                            "StartOffset": 8836,
                            "EndOffset": 9064,
                            "Content": "fn check_http(http_style: \u0026str) {\n            assert_eq!(\n                HttpConverter\n                    .to_http_format_string(\u0026HttpConverter.to_rpc_format_string(http_style)),\n                http_style,\n            );\n        }",
                            "FunctionCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "format_bidirect_convert",
                                    "File": "src/convert.rs",
                                    "Line": 288,
                                    "StartOffset": 8839,
                                    "EndOffset": 8849
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::macros",
                                    "Name": "assert_eq",
                                    "File": "src/convert.rs",
                                    "Line": 289,
                                    "StartOffset": 8850,
                                    "EndOffset": 8859
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter.to_http_format_string",
                                    "File": "src/convert.rs",
                                    "Line": 291,
                                    "StartOffset": 8925,
                                    "EndOffset": 8946
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter.to_rpc_format_string",
                                    "File": "src/convert.rs",
                                    "Line": 291,
                                    "StartOffset": 8962,
                                    "EndOffset": 8982
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter",
                                    "File": "src/convert.rs",
                                    "Line": 290,
                                    "StartOffset": 8896,
                                    "EndOffset": 8909
                                }
                            ]
                        },
                        "check_rpc": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::convert",
                            "Name": "check_rpc",
                            "File": "src/convert.rs",
                            "Line": 282,
                            "StartOffset": 8594,
                            "EndOffset": 8822,
                            "Content": "fn check_rpc(rpc_style: \u0026str) {\n            assert_eq!(\n                HttpConverter.to_rpc_format_string(\u0026HttpConverter.to_http_format_string(rpc_style)),\n                rpc_style,\n            );\n        }",
                            "FunctionCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "format_bidirect_convert",
                                    "File": "src/convert.rs",
                                    "Line": 282,
                                    "StartOffset": 8597,
                                    "EndOffset": 8606
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::macros",
                                    "Name": "assert_eq",
                                    "File": "src/convert.rs",
                                    "Line": 283,
                                    "StartOffset": 8633,
                                    "EndOffset": 8642
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter.to_rpc_format_string",
                                    "File": "src/convert.rs",
                                    "Line": 284,
                                    "StartOffset": 8691,
                                    "EndOffset": 8711
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter.to_http_format_string",
                                    "File": "src/convert.rs",
                                    "Line": 284,
                                    "StartOffset": 8727,
                                    "EndOffset": 8748
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter",
                                    "File": "src/convert.rs",
                                    "Line": 284,
                                    "StartOffset": 8677,
                                    "EndOffset": 8690
                                }
                            ]
                        },
                        "format_bidirect_convert": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::convert",
                            "Name": "format_bidirect_convert",
                            "File": "src/convert.rs",
                            "Line": 280,
                            "StartOffset": 8577,
                            "EndOffset": 9379,
                            "Content": "#[test]\n    fn format_bidirect_convert() {\n        fn check_rpc(rpc_style: \u0026str) {\n            assert_eq!(\n                HttpConverter.to_rpc_format_string(\u0026HttpConverter.to_http_format_string(rpc_style)),\n                rpc_style,\n            );\n        }\n        fn check_http(http_style: \u0026str) {\n            assert_eq!(\n                HttpConverter\n                    .to_http_format_string(\u0026HttpConverter.to_rpc_format_string(http_style)),\n                http_style,\n            );\n        }\n        check_rpc(\"RPC_PERSIST_TEST_KEY\");\n        check_rpc(\"RPC_TRANSIT_TEST_KEY\");\n        check_rpc(\"RPC_BACKWARD_TEST_KEY\");\n        check_rpc(\"TEST_KEY\");\n        check_http(\"rpc-persist-test-key\");\n        check_http(\"rpc-transit-test-key\");\n        check_http(\"rpc-backward-test-key\");\n        check_http(\"test-key\");\n    }",
                            "FunctionCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::macros",
                                    "Name": "assert_eq",
                                    "File": "src/convert.rs",
                                    "Line": 283,
                                    "StartOffset": 8633,
                                    "EndOffset": 8642
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter.to_rpc_format_string",
                                    "File": "src/convert.rs",
                                    "Line": 284,
                                    "StartOffset": 8691,
                                    "EndOffset": 8711
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter.to_http_format_string",
                                    "File": "src/convert.rs",
                                    "Line": 284,
                                    "StartOffset": 8727,
                                    "EndOffset": 8748
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter",
                                    "File": "src/convert.rs",
                                    "Line": 284,
                                    "StartOffset": 8677,
                                    "EndOffset": 8690
                                }
                            ]
                        },
                        "http_format_convert_test": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::convert",
                            "Name": "http_format_convert_test",
                            "File": "src/convert.rs",
                            "Line": 258,
                            "StartOffset": 7713,
                            "EndOffset": 8102,
                            "Content": "#[test]\n    fn http_format_convert_test() {\n        fn check(rpc_style: \u0026str, http_style: \u0026str) {\n            assert_eq!(HttpConverter.to_http_format_string(rpc_style), http_style);\n        }\n        check(\"RPC_PERSIST_TEST_KEY\", \"rpc-persist-test-key\");\n        check(\"RPC_TRANSIT_TEST_KEY\", \"rpc-transit-test-key\");\n        check(\"RPC_BACKWARD_TEST_KEY\", \"rpc-backward-test-key\");\n        check(\"TEST_KEY\", \"test-key\");\n    }",
                            "FunctionCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::macros",
                                    "Name": "assert_eq",
                                    "File": "src/convert.rs",
                                    "Line": 261,
                                    "StartOffset": 7770,
                                    "EndOffset": 7779
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter.to_http_format_string",
                                    "File": "src/convert.rs",
                                    "Line": 261,
                                    "StartOffset": 7795,
                                    "EndOffset": 7816
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter",
                                    "File": "src/convert.rs",
                                    "Line": 261,
                                    "StartOffset": 7781,
                                    "EndOffset": 7794
                                }
                            ]
                        },
                        "http_prefix_bidirect": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::convert",
                            "Name": "http_prefix_bidirect",
                            "File": "src/convert.rs",
                            "Line": 361,
                            "StartOffset": 10945,
                            "EndOffset": 12437,
                            "Content": "#[test]\n    fn http_prefix_bidirect() {\n        // remove after add\n        assert_eq!(\n            HttpConverter\n                .remove_persistent_prefix(\u0026HttpConverter.add_persistent_prefix(\"TEST_KEY\"))\n                .as_deref(),\n            Some(\"TEST_KEY\"),\n        );\n        assert_eq!(\n            HttpConverter\n                .remove_transient_prefix(\u0026HttpConverter.add_transient_prefix(\"TEST_KEY\"))\n                .as_deref(),\n            Some(\"TEST_KEY\"),\n        );\n        assert_eq!(\n            HttpConverter\n                .remove_backward_prefix(\u0026HttpConverter.add_backward_prefix(\"TEST_KEY\"))\n                .as_deref(),\n            Some(\"TEST_KEY\"),\n        );\n\n        // add after remove\n        assert_eq!(\n            HttpConverter.add_persistent_prefix(\n                \u0026HttpConverter\n                    .remove_persistent_prefix(\"rpc-persist-test-key\")\n                    .unwrap()\n            ),\n            \"rpc-persist-test-key\",\n        );\n        assert_eq!(\n            HttpConverter.add_transient_prefix(\n                \u0026HttpConverter\n                    .remove_transient_prefix(\"rpc-transit-test-key\")\n                    .unwrap()\n            ),\n            \"rpc-transit-test-key\",\n        );\n        assert_eq!(\n            HttpConverter.add_backward_prefix(\n                \u0026HttpConverter\n                    .remove_backward_prefix(\"rpc-backward-test-key\")\n                    .unwrap()\n            ),\n            \"rpc-backward-test-key\",\n        );\n    }",
                            "FunctionCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::macros",
                                    "Name": "assert_eq",
                                    "File": "src/convert.rs",
                                    "Line": 364,
                                    "StartOffset": 10994,
                                    "EndOffset": 11003
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "Converter\u003cHttpConverter\u003e.remove_persistent_prefix",
                                    "File": "src/convert.rs",
                                    "Line": 366,
                                    "StartOffset": 11051,
                                    "EndOffset": 11075
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "Converter\u003cHttpConverter\u003e.add_persistent_prefix",
                                    "File": "src/convert.rs",
                                    "Line": 366,
                                    "StartOffset": 11091,
                                    "EndOffset": 11112
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "as_deref",
                                    "File": "src/convert.rs",
                                    "Line": 367,
                                    "StartOffset": 11077,
                                    "EndOffset": 11085
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "Converter\u003cHttpConverter\u003e.remove_transient_prefix",
                                    "File": "src/convert.rs",
                                    "Line": 372,
                                    "StartOffset": 11259,
                                    "EndOffset": 11282
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "Converter\u003cHttpConverter\u003e.add_transient_prefix",
                                    "File": "src/convert.rs",
                                    "Line": 372,
                                    "StartOffset": 11298,
                                    "EndOffset": 11318
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "Converter\u003cHttpConverter\u003e.remove_backward_prefix",
                                    "File": "src/convert.rs",
                                    "Line": 378,
                                    "StartOffset": 11465,
                                    "EndOffset": 11487
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "Converter\u003cHttpConverter\u003e.add_backward_prefix",
                                    "File": "src/convert.rs",
                                    "Line": 378,
                                    "StartOffset": 11503,
                                    "EndOffset": 11522
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "unwrap",
                                    "File": "src/convert.rs",
                                    "Line": 388,
                                    "StartOffset": 11782,
                                    "EndOffset": 11788
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter",
                                    "File": "src/convert.rs",
                                    "Line": 365,
                                    "StartOffset": 11026,
                                    "EndOffset": 11039
                                }
                            ]
                        },
                        "remove_http_prefix": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::convert",
                            "Name": "remove_http_prefix",
                            "File": "src/convert.rs",
                            "Line": 321,
                            "StartOffset": 9844,
                            "EndOffset": 10929,
                            "Content": "#[test]\n    fn remove_http_prefix() {\n        assert_eq!(\n            HttpConverter\n                .remove_persistent_prefix(\"rpc-persist-test-key\")\n                .as_deref(),\n            Some(\"TEST_KEY\"),\n        );\n        assert_eq!(\n            HttpConverter\n                .remove_transient_prefix(\"rpc-transit-test-key\")\n                .as_deref(),\n            Some(\"TEST_KEY\"),\n        );\n        assert_eq!(\n            HttpConverter\n                .remove_backward_prefix(\"rpc-backward-test-key\")\n                .as_deref(),\n            Some(\"TEST_KEY\"),\n        );\n        assert_eq!(\n            HttpConverter\n                .remove_persistent_prefix(\"rpc-persist_test-key\")\n                .as_deref(),\n            None,\n        );\n        assert_eq!(\n            HttpConverter\n                .remove_transient_prefix(\"rpc_transit-test-key\")\n                .as_deref(),\n            None,\n        );\n        assert_eq!(\n            HttpConverter\n                .remove_backward_prefix(\"rpc-bbbbdddd-test-key\")\n                .as_deref(),\n            None,\n        );\n    }",
                            "FunctionCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::macros",
                                    "Name": "assert_eq",
                                    "File": "src/convert.rs",
                                    "Line": 323,
                                    "StartOffset": 9861,
                                    "EndOffset": 9870
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "Converter\u003cHttpConverter\u003e.remove_persistent_prefix",
                                    "File": "src/convert.rs",
                                    "Line": 325,
                                    "StartOffset": 9920,
                                    "EndOffset": 9944
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "as_deref",
                                    "File": "src/convert.rs",
                                    "Line": 326,
                                    "StartOffset": 9946,
                                    "EndOffset": 9954
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "Converter\u003cHttpConverter\u003e.remove_transient_prefix",
                                    "File": "src/convert.rs",
                                    "Line": 331,
                                    "StartOffset": 10102,
                                    "EndOffset": 10125
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "Converter\u003cHttpConverter\u003e.remove_backward_prefix",
                                    "File": "src/convert.rs",
                                    "Line": 337,
                                    "StartOffset": 10283,
                                    "EndOffset": 10305
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter",
                                    "File": "src/convert.rs",
                                    "Line": 324,
                                    "StartOffset": 9895,
                                    "EndOffset": 9908
                                }
                            ]
                        },
                        "remove_rpc_prefix": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::convert",
                            "Name": "remove_rpc_prefix",
                            "File": "src/convert.rs",
                            "Line": 155,
                            "StartOffset": 4699,
                            "EndOffset": 5777,
                            "Content": "#[test]\n    fn remove_rpc_prefix() {\n        assert_eq!(\n            RpcConverter\n                .remove_persistent_prefix(\"RPC_PERSIST_TEST_KEY\")\n                .as_deref(),\n            Some(\"TEST_KEY\"),\n        );\n        assert_eq!(\n            RpcConverter\n                .remove_transient_prefix(\"RPC_TRANSIT_TEST_KEY\")\n                .as_deref(),\n            Some(\"TEST_KEY\"),\n        );\n        assert_eq!(\n            RpcConverter\n                .remove_backward_prefix(\"RPC_BACKWARD_TEST_KEY\")\n                .as_deref(),\n            Some(\"TEST_KEY\"),\n        );\n        assert_eq!(\n            RpcConverter\n                .remove_persistent_prefix(\"RPC_PERSIST-TEST_KEY\")\n                .as_deref(),\n            None,\n        );\n        assert_eq!(\n            RpcConverter\n                .remove_transient_prefix(\"RPC-TRANSIT_TEST_KEY\")\n                .as_deref(),\n            None,\n        );\n        assert_eq!(\n            RpcConverter\n                .remove_backward_prefix(\"RPC_BBBBDDDD_TEST_KEY\")\n                .as_deref(),\n            None,\n        );\n    }",
                            "FunctionCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::macros",
                                    "Name": "assert_eq",
                                    "File": "src/convert.rs",
                                    "Line": 157,
                                    "StartOffset": 4716,
                                    "EndOffset": 4725
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "Converter\u003cRpcConverter\u003e.remove_persistent_prefix",
                                    "File": "src/convert.rs",
                                    "Line": 159,
                                    "StartOffset": 4774,
                                    "EndOffset": 4798
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "as_deref",
                                    "File": "src/convert.rs",
                                    "Line": 160,
                                    "StartOffset": 4799,
                                    "EndOffset": 4807
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "Converter\u003cRpcConverter\u003e.remove_transient_prefix",
                                    "File": "src/convert.rs",
                                    "Line": 165,
                                    "StartOffset": 4955,
                                    "EndOffset": 4978
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "Converter\u003cRpcConverter\u003e.remove_backward_prefix",
                                    "File": "src/convert.rs",
                                    "Line": 171,
                                    "StartOffset": 5135,
                                    "EndOffset": 5157
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "RpcConverter",
                                    "File": "src/convert.rs",
                                    "Line": 158,
                                    "StartOffset": 4749,
                                    "EndOffset": 4761
                                }
                            ]
                        },
                        "rpc_format_convert_test": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::convert",
                            "Name": "rpc_format_convert_test",
                            "File": "src/convert.rs",
                            "Line": 269,
                            "StartOffset": 8146,
                            "EndOffset": 8533,
                            "Content": "#[test]\n    fn rpc_format_convert_test() {\n        fn check(http_style: \u0026str, rpc_style: \u0026str) {\n            assert_eq!(HttpConverter.to_rpc_format_string(http_style), rpc_style);\n        }\n        check(\"rpc-persist-test-key\", \"RPC_PERSIST_TEST_KEY\");\n        check(\"rpc-transit-test-key\", \"RPC_TRANSIT_TEST_KEY\");\n        check(\"rpc-backward-test-key\", \"RPC_BACKWARD_TEST_KEY\");\n        check(\"test-key\", \"TEST_KEY\");\n    }",
                            "FunctionCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::macros",
                                    "Name": "assert_eq",
                                    "File": "src/convert.rs",
                                    "Line": 272,
                                    "StartOffset": 8202,
                                    "EndOffset": 8211
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter.to_rpc_format_string",
                                    "File": "src/convert.rs",
                                    "Line": 272,
                                    "StartOffset": 8227,
                                    "EndOffset": 8247
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter",
                                    "File": "src/convert.rs",
                                    "Line": 272,
                                    "StartOffset": 8213,
                                    "EndOffset": 8226
                                }
                            ]
                        },
                        "rpc_prefix_bidirect": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::convert",
                            "Name": "rpc_prefix_bidirect",
                            "File": "src/convert.rs",
                            "Line": 195,
                            "StartOffset": 5793,
                            "EndOffset": 7272,
                            "Content": "#[test]\n    fn rpc_prefix_bidirect() {\n        // remove after add\n        assert_eq!(\n            RpcConverter\n                .remove_persistent_prefix(\u0026RpcConverter.add_persistent_prefix(\"TEST_KEY\"))\n                .as_deref(),\n            Some(\"TEST_KEY\"),\n        );\n        assert_eq!(\n            RpcConverter\n                .remove_transient_prefix(\u0026RpcConverter.add_transient_prefix(\"TEST_KEY\"))\n                .as_deref(),\n            Some(\"TEST_KEY\"),\n        );\n        assert_eq!(\n            RpcConverter\n                .remove_backward_prefix(\u0026RpcConverter.add_backward_prefix(\"TEST_KEY\"))\n                .as_deref(),\n            Some(\"TEST_KEY\"),\n        );\n\n        // add after remove\n        assert_eq!(\n            RpcConverter.add_persistent_prefix(\n                \u0026RpcConverter\n                    .remove_persistent_prefix(\"RPC_PERSIST_TEST_KEY\")\n                    .unwrap()\n            ),\n            \"RPC_PERSIST_TEST_KEY\",\n        );\n        assert_eq!(\n            RpcConverter.add_transient_prefix(\n                \u0026RpcConverter\n                    .remove_transient_prefix(\"RPC_TRANSIT_TEST_KEY\")\n                    .unwrap()\n            ),\n            \"RPC_TRANSIT_TEST_KEY\",\n        );\n        assert_eq!(\n            RpcConverter.add_backward_prefix(\n                \u0026RpcConverter\n                    .remove_backward_prefix(\"RPC_BACKWARD_TEST_KEY\")\n                    .unwrap()\n            ),\n            \"RPC_BACKWARD_TEST_KEY\",\n        );\n    }",
                            "FunctionCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::macros",
                                    "Name": "assert_eq",
                                    "File": "src/convert.rs",
                                    "Line": 198,
                                    "StartOffset": 5841,
                                    "EndOffset": 5850
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "Converter\u003cRpcConverter\u003e.remove_persistent_prefix",
                                    "File": "src/convert.rs",
                                    "Line": 200,
                                    "StartOffset": 5898,
                                    "EndOffset": 5922
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "Converter\u003cRpcConverter\u003e.add_persistent_prefix",
                                    "File": "src/convert.rs",
                                    "Line": 200,
                                    "StartOffset": 5937,
                                    "EndOffset": 5958
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "as_deref",
                                    "File": "src/convert.rs",
                                    "Line": 201,
                                    "StartOffset": 5923,
                                    "EndOffset": 5931
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "Converter\u003cRpcConverter\u003e.remove_transient_prefix",
                                    "File": "src/convert.rs",
                                    "Line": 206,
                                    "StartOffset": 6104,
                                    "EndOffset": 6127
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "Converter\u003cRpcConverter\u003e.add_transient_prefix",
                                    "File": "src/convert.rs",
                                    "Line": 206,
                                    "StartOffset": 6142,
                                    "EndOffset": 6162
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "Converter\u003cRpcConverter\u003e.remove_backward_prefix",
                                    "File": "src/convert.rs",
                                    "Line": 212,
                                    "StartOffset": 6308,
                                    "EndOffset": 6330
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "Converter\u003cRpcConverter\u003e.add_backward_prefix",
                                    "File": "src/convert.rs",
                                    "Line": 212,
                                    "StartOffset": 6345,
                                    "EndOffset": 6364
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "unwrap",
                                    "File": "src/convert.rs",
                                    "Line": 222,
                                    "StartOffset": 6621,
                                    "EndOffset": 6627
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "RpcConverter",
                                    "File": "src/convert.rs",
                                    "Line": 199,
                                    "StartOffset": 5873,
                                    "EndOffset": 5885
                                }
                            ]
                        }
                    },
                    "Types": {
                        "Converter": {
                            "Exported": true,
                            "TypeKind": "interface",
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::convert",
                            "Name": "Converter",
                            "File": "src/convert.rs",
                            "Line": 8,
                            "StartOffset": -1,
                            "EndOffset": 543,
                            "Content": "pub trait Converter {\n    fn add_persistent_prefix(\u0026self, key: \u0026str) -\u003e FastStr;\n    fn add_transient_prefix(\u0026self, key: \u0026str) -\u003e FastStr;\n    #[allow(dead_code)]\n    fn add_backward_prefix(\u0026self, key: \u0026str) -\u003e FastStr;\n\n    fn remove_persistent_prefix(\u0026self, key: \u0026str) -\u003e Option\u003cFastStr\u003e;\n    fn remove_transient_prefix(\u0026self, key: \u0026str) -\u003e Option\u003cFastStr\u003e;\n    fn remove_backward_prefix(\u0026self, key: \u0026str) -\u003e Option\u003cFastStr\u003e;\n}",
                            "SubStruct": [
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/convert.rs",
                                    "Line": 9,
                                    "StartOffset": 232,
                                    "EndOffset": 239
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/convert.rs",
                                    "Line": 10,
                                    "StartOffset": 253,
                                    "EndOffset": 260
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/convert.rs",
                                    "Line": 12,
                                    "StartOffset": 369,
                                    "EndOffset": 376
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/convert.rs",
                                    "Line": 14,
                                    "StartOffset": 455,
                                    "EndOffset": 461
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/convert.rs",
                                    "Line": 14,
                                    "StartOffset": 462,
                                    "EndOffset": 469
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/convert.rs",
                                    "Line": 15,
                                    "StartOffset": 455,
                                    "EndOffset": 461
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/convert.rs",
                                    "Line": 15,
                                    "StartOffset": 462,
                                    "EndOffset": 469
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/convert.rs",
                                    "Line": 16,
                                    "StartOffset": 524,
                                    "EndOffset": 530
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/convert.rs",
                                    "Line": 16,
                                    "StartOffset": 531,
                                    "EndOffset": 538
                                }
                            ]
                        },
                        "HttpConverter": {
                            "Exported": true,
                            "TypeKind": "struct",
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::convert",
                            "Name": "HttpConverter",
                            "File": "src/convert.rs",
                            "Line": 63,
                            "StartOffset": -1,
                            "EndOffset": 1918,
                            "Content": "pub struct HttpConverter;",
                            "Methods": {
                                "add_backward_prefix": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "Converter\u003cHttpConverter\u003e.add_backward_prefix"
                                },
                                "add_persistent_prefix": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "Converter\u003cHttpConverter\u003e.add_persistent_prefix"
                                },
                                "add_prefix_and_to_http_format": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter.add_prefix_and_to_http_format"
                                },
                                "add_transient_prefix": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "Converter\u003cHttpConverter\u003e.add_transient_prefix"
                                },
                                "remove_backward_prefix": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "Converter\u003cHttpConverter\u003e.remove_backward_prefix"
                                },
                                "remove_persistent_prefix": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "Converter\u003cHttpConverter\u003e.remove_persistent_prefix"
                                },
                                "remove_prefix_and_to_rpc_format": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter.remove_prefix_and_to_rpc_format"
                                },
                                "remove_transient_prefix": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "Converter\u003cHttpConverter\u003e.remove_transient_prefix"
                                },
                                "to_http_format": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter.to_http_format"
                                },
                                "to_http_format_string": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter.to_http_format_string"
                                },
                                "to_rpc_format": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter.to_rpc_format"
                                },
                                "to_rpc_format_string": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter.to_rpc_format_string"
                                }
                            }
                        },
                        "RpcConverter": {
                            "Exported": true,
                            "TypeKind": "struct",
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::convert",
                            "Name": "RpcConverter",
                            "File": "src/convert.rs",
                            "Line": 19,
                            "StartOffset": -1,
                            "EndOffset": 636,
                            "Content": "pub struct RpcConverter;",
                            "Methods": {
                                "add_backward_prefix": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "Converter\u003cRpcConverter\u003e.add_backward_prefix"
                                },
                                "add_persistent_prefix": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "Converter\u003cRpcConverter\u003e.add_persistent_prefix"
                                },
                                "add_prefix": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "RpcConverter.add_prefix"
                                },
                                "add_transient_prefix": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "Converter\u003cRpcConverter\u003e.add_transient_prefix"
                                },
                                "remove_backward_prefix": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "Converter\u003cRpcConverter\u003e.remove_backward_prefix"
                                },
                                "remove_persistent_prefix": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "Converter\u003cRpcConverter\u003e.remove_persistent_prefix"
                                },
                                "remove_prefix": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "RpcConverter.remove_prefix"
                                },
                                "remove_transient_prefix": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "Converter\u003cRpcConverter\u003e.remove_transient_prefix"
                                }
                            }
                        }
                    },
                    "Vars": {
                        "ch": {
                            "IsExported": false,
                            "IsConst": false,
                            "IsPointer": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::convert",
                            "Name": "ch",
                            "File": "src/convert.rs",
                            "Line": 83,
                            "StartOffset": 2460,
                            "EndOffset": 2608,
                            "Type": {
                                "ModPath": "metainfo",
                                "PkgPath": "metainfo::convert",
                                "Name": "HttpConverter.to_rpc_format"
                            },
                            "Content": "let ch = match ch {\n                'a'..='z' =\u003e ch.to_ascii_uppercase(),\n                '-' =\u003e '_',\n                _ =\u003e ch,\n            };"
                        },
                        "key": {
                            "IsExported": false,
                            "IsConst": false,
                            "IsPointer": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::convert",
                            "Name": "key",
                            "File": "src/convert.rs",
                            "Line": 32,
                            "StartOffset": 935,
                            "EndOffset": 971,
                            "Type": {
                                "ModPath": "",
                                "PkgPath": "core::str",
                                "Name": "strip_prefix"
                            },
                            "Content": "let key = key.strip_prefix(prefix)?;"
                        },
                        "mut buf": {
                            "IsExported": false,
                            "IsConst": false,
                            "IsPointer": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::convert",
                            "Name": "mut buf",
                            "File": "src/convert.rs",
                            "Line": 103,
                            "StartOffset": 3089,
                            "EndOffset": 3136,
                            "Type": {
                                "ModPath": "",
                                "PkgPath": "alloc::string",
                                "Name": "String"
                            },
                            "Content": "let mut buf = String::with_capacity(key.len());"
                        },
                        "mut res": {
                            "IsExported": false,
                            "IsConst": false,
                            "IsPointer": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::convert",
                            "Name": "mut res",
                            "File": "src/convert.rs",
                            "Line": 24,
                            "StartOffset": 681,
                            "EndOffset": 743,
                            "Type": {
                                "ModPath": "",
                                "PkgPath": "alloc::string",
                                "Name": "String"
                            },
                            "Content": "let mut res = String::with_capacity(prefix.len() + key.len());"
                        }
                    }
                },
                "metainfo::faststr_map": {
                    "IsMain": false,
                    "IsTest": false,
                    "PkgPath": "metainfo::faststr_map",
                    "Functions": {
                        "FastStrMap.capacity": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::faststr_map",
                            "Name": "FastStrMap.capacity",
                            "File": "src/faststr_map.rs",
                            "Line": 84,
                            "StartOffset": 1984,
                            "EndOffset": 2038,
                            "Content": "impl FastStrMap {\n    #[inline]\n    #[inline]\n    pub fn capacity(\u0026self) -\u003e usize {\n        self.inner.capacity()\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "capacity",
                                    "File": "src/faststr_map.rs",
                                    "Line": 86,
                                    "StartOffset": 2014,
                                    "EndOffset": 2022
                                }
                            ]
                        },
                        "FastStrMap.clear": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::faststr_map",
                            "Name": "FastStrMap.clear",
                            "File": "src/faststr_map.rs",
                            "Line": 54,
                            "StartOffset": 1360,
                            "EndOffset": 1406,
                            "Content": "impl FastStrMap {\n    #[inline]\n    #[inline]\n    pub fn clear(\u0026mut self) {\n        self.inner.clear();\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "clear",
                                    "File": "src/faststr_map.rs",
                                    "Line": 56,
                                    "StartOffset": 1390,
                                    "EndOffset": 1395
                                }
                            ]
                        },
                        "FastStrMap.contains": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::faststr_map",
                            "Name": "FastStrMap.contains",
                            "File": "src/faststr_map.rs",
                            "Line": 44,
                            "StartOffset": 1109,
                            "EndOffset": 1174,
                            "Content": "impl FastStrMap {\n    #[inline]\n    #[inline]\n    pub fn contains\u003cT: 'static\u003e(\u0026self) -\u003e bool {\n        self.inner.contains_key(\u0026TypeId::of::\u003cT\u003e())\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap"
                                }
                            },
                            "FunctionCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::any",
                                    "Name": "of",
                                    "File": "src/faststr_map.rs",
                                    "Line": 46,
                                    "StartOffset": 1161,
                                    "EndOffset": 1163
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "contains_key",
                                    "File": "src/faststr_map.rs",
                                    "Line": 46,
                                    "StartOffset": 1139,
                                    "EndOffset": 1151
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::any",
                                    "Name": "TypeId",
                                    "File": "src/faststr_map.rs",
                                    "Line": 46,
                                    "StartOffset": 1153,
                                    "EndOffset": 1159
                                }
                            ]
                        },
                        "FastStrMap.entry": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::faststr_map",
                            "Name": "FastStrMap.entry",
                            "File": "src/faststr_map.rs",
                            "Line": 69,
                            "StartOffset": 1680,
                            "EndOffset": 1768,
                            "Content": "impl FastStrMap {\n    #[inline]\n    #[inline]\n    pub fn entry\u003cT: 'static\u003e(\u0026mut self) -\u003e Entry\u003c'_, TypeId, FastStr\u003e {\n        self.inner.entry(TypeId::of::\u003cT\u003e())\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap"
                                }
                            },
                            "Results": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "Entry",
                                    "File": "src/faststr_map.rs",
                                    "Line": 70,
                                    "StartOffset": 1720,
                                    "EndOffset": 1725
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::any",
                                    "Name": "TypeId",
                                    "File": "src/faststr_map.rs",
                                    "Line": 70,
                                    "StartOffset": 1730,
                                    "EndOffset": 1736
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/faststr_map.rs",
                                    "Line": 70,
                                    "StartOffset": 1738,
                                    "EndOffset": 1745
                                }
                            ],
                            "FunctionCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::any",
                                    "Name": "of",
                                    "File": "src/faststr_map.rs",
                                    "Line": 71,
                                    "StartOffset": 1724,
                                    "EndOffset": 1726
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "entry",
                                    "File": "src/faststr_map.rs",
                                    "Line": 71,
                                    "StartOffset": 1710,
                                    "EndOffset": 1715
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::any",
                                    "Name": "TypeId",
                                    "File": "src/faststr_map.rs",
                                    "Line": 71,
                                    "StartOffset": 1716,
                                    "EndOffset": 1722
                                }
                            ]
                        },
                        "FastStrMap.extend": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::faststr_map",
                            "Name": "FastStrMap.extend",
                            "File": "src/faststr_map.rs",
                            "Line": 59,
                            "StartOffset": 1439,
                            "EndOffset": 1505,
                            "Content": "impl FastStrMap {\n    #[inline]\n    #[inline]\n    pub fn extend(\u0026mut self, other: FastStrMap) {\n        self.inner.extend(other.inner)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "extend",
                                    "File": "src/faststr_map.rs",
                                    "Line": 61,
                                    "StartOffset": 1469,
                                    "EndOffset": 1475
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap",
                                    "File": "src/faststr_map.rs",
                                    "Line": 60,
                                    "StartOffset": 1472,
                                    "EndOffset": 1482
                                }
                            ]
                        },
                        "FastStrMap.get": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::faststr_map",
                            "Name": "FastStrMap.get",
                            "File": "src/faststr_map.rs",
                            "Line": 34,
                            "StartOffset": 853,
                            "EndOffset": 925,
                            "Content": "impl FastStrMap {\n    #[inline]\n    #[inline]\n    pub fn get\u003cT: 'static\u003e(\u0026self) -\u003e Option\u003c\u0026FastStr\u003e {\n        self.inner.get(\u0026TypeId::of::\u003cT\u003e())\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap"
                                }
                            },
                            "Results": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/faststr_map.rs",
                                    "Line": 35,
                                    "StartOffset": 887,
                                    "EndOffset": 893
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/faststr_map.rs",
                                    "Line": 35,
                                    "StartOffset": 895,
                                    "EndOffset": 902
                                }
                            ],
                            "FunctionCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::any",
                                    "Name": "of",
                                    "File": "src/faststr_map.rs",
                                    "Line": 36,
                                    "StartOffset": 896,
                                    "EndOffset": 898
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "get",
                                    "File": "src/faststr_map.rs",
                                    "Line": 36,
                                    "StartOffset": 883,
                                    "EndOffset": 886
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::any",
                                    "Name": "TypeId",
                                    "File": "src/faststr_map.rs",
                                    "Line": 36,
                                    "StartOffset": 888,
                                    "EndOffset": 894
                                }
                            ]
                        },
                        "FastStrMap.get_mut": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::faststr_map",
                            "Name": "FastStrMap.get_mut",
                            "File": "src/faststr_map.rs",
                            "Line": 39,
                            "StartOffset": 973,
                            "EndOffset": 1057,
                            "Content": "impl FastStrMap {\n    #[inline]\n    #[inline]\n    pub fn get_mut\u003cT: 'static\u003e(\u0026mut self) -\u003e Option\u003c\u0026mut FastStr\u003e {\n        self.inner.get_mut(\u0026TypeId::of::\u003cT\u003e())\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap"
                                }
                            },
                            "Results": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/faststr_map.rs",
                                    "Line": 40,
                                    "StartOffset": 1015,
                                    "EndOffset": 1021
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/faststr_map.rs",
                                    "Line": 40,
                                    "StartOffset": 1027,
                                    "EndOffset": 1034
                                }
                            ],
                            "FunctionCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::any",
                                    "Name": "of",
                                    "File": "src/faststr_map.rs",
                                    "Line": 41,
                                    "StartOffset": 1020,
                                    "EndOffset": 1022
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "get_mut",
                                    "File": "src/faststr_map.rs",
                                    "Line": 41,
                                    "StartOffset": 1003,
                                    "EndOffset": 1010
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::any",
                                    "Name": "TypeId",
                                    "File": "src/faststr_map.rs",
                                    "Line": 41,
                                    "StartOffset": 1012,
                                    "EndOffset": 1018
                                }
                            ]
                        },
                        "FastStrMap.insert": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::faststr_map",
                            "Name": "FastStrMap.insert",
                            "File": "src/faststr_map.rs",
                            "Line": 29,
                            "StartOffset": 714,
                            "EndOffset": 799,
                            "Content": "impl FastStrMap {\n    #[inline]\n    #[inline]\n    pub fn insert\u003cT: Send + Sync + 'static\u003e(\u0026mut self, t: FastStr) {\n        self.inner.insert(TypeId::of::\u003cT\u003e(), t);\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap"
                                }
                            },
                            "FunctionCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::any",
                                    "Name": "of",
                                    "File": "src/faststr_map.rs",
                                    "Line": 31,
                                    "StartOffset": 759,
                                    "EndOffset": 761
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "insert",
                                    "File": "src/faststr_map.rs",
                                    "Line": 31,
                                    "StartOffset": 744,
                                    "EndOffset": 750
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::marker",
                                    "Name": "Send",
                                    "File": "src/faststr_map.rs",
                                    "Line": 30,
                                    "StartOffset": 732,
                                    "EndOffset": 736
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::marker",
                                    "Name": "Sync",
                                    "File": "src/faststr_map.rs",
                                    "Line": 30,
                                    "StartOffset": 739,
                                    "EndOffset": 743
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/faststr_map.rs",
                                    "Line": 30,
                                    "StartOffset": 769,
                                    "EndOffset": 776
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::any",
                                    "Name": "TypeId",
                                    "File": "src/faststr_map.rs",
                                    "Line": 31,
                                    "StartOffset": 751,
                                    "EndOffset": 757
                                }
                            ]
                        },
                        "FastStrMap.is_empty": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::faststr_map",
                            "Name": "FastStrMap.is_empty",
                            "File": "src/faststr_map.rs",
                            "Line": 74,
                            "StartOffset": 1817,
                            "EndOffset": 1870,
                            "Content": "impl FastStrMap {\n    #[inline]\n    #[inline]\n    pub fn is_empty(\u0026self) -\u003e bool {\n        self.inner.is_empty()\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "is_empty",
                                    "File": "src/faststr_map.rs",
                                    "Line": 76,
                                    "StartOffset": 1847,
                                    "EndOffset": 1855
                                }
                            ]
                        },
                        "FastStrMap.iter": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::faststr_map",
                            "Name": "FastStrMap.iter",
                            "File": "src/faststr_map.rs",
                            "Line": 64,
                            "StartOffset": 1549,
                            "EndOffset": 1649,
                            "Content": "impl FastStrMap {\n    #[inline]\n    #[inline]\n    pub fn iter(\u0026self) -\u003e ::std::collections::hash_map::Iter\u003c'_, TypeId, FastStr\u003e {\n        self.inner.iter()\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap"
                                }
                            },
                            "Results": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "Iter",
                                    "File": "src/faststr_map.rs",
                                    "Line": 65,
                                    "StartOffset": 1602,
                                    "EndOffset": 1606
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::any",
                                    "Name": "TypeId",
                                    "File": "src/faststr_map.rs",
                                    "Line": 65,
                                    "StartOffset": 1611,
                                    "EndOffset": 1617
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/faststr_map.rs",
                                    "Line": 65,
                                    "StartOffset": 1619,
                                    "EndOffset": 1626
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "iter",
                                    "File": "src/faststr_map.rs",
                                    "Line": 66,
                                    "StartOffset": 1579,
                                    "EndOffset": 1583
                                }
                            ]
                        },
                        "FastStrMap.len": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::faststr_map",
                            "Name": "FastStrMap.len",
                            "File": "src/faststr_map.rs",
                            "Line": 79,
                            "StartOffset": 1905,
                            "EndOffset": 1954,
                            "Content": "impl FastStrMap {\n    #[inline]\n    #[inline]\n    pub fn len(\u0026self) -\u003e usize {\n        self.inner.len()\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "len",
                                    "File": "src/faststr_map.rs",
                                    "Line": 81,
                                    "StartOffset": 1935,
                                    "EndOffset": 1938
                                }
                            ]
                        },
                        "FastStrMap.remove": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::faststr_map",
                            "Name": "FastStrMap.remove",
                            "File": "src/faststr_map.rs",
                            "Line": 49,
                            "StartOffset": 1231,
                            "EndOffset": 1309,
                            "Content": "impl FastStrMap {\n    #[inline]\n    #[inline]\n    pub fn remove\u003cT: 'static\u003e(\u0026mut self) -\u003e Option\u003cFastStr\u003e {\n        self.inner.remove(\u0026TypeId::of::\u003cT\u003e())\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap"
                                }
                            },
                            "Results": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/faststr_map.rs",
                                    "Line": 50,
                                    "StartOffset": 1272,
                                    "EndOffset": 1278
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/faststr_map.rs",
                                    "Line": 50,
                                    "StartOffset": 1279,
                                    "EndOffset": 1286
                                }
                            ],
                            "FunctionCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::any",
                                    "Name": "of",
                                    "File": "src/faststr_map.rs",
                                    "Line": 51,
                                    "StartOffset": 1277,
                                    "EndOffset": 1279
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "remove",
                                    "File": "src/faststr_map.rs",
                                    "Line": 51,
                                    "StartOffset": 1261,
                                    "EndOffset": 1267
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::any",
                                    "Name": "TypeId",
                                    "File": "src/faststr_map.rs",
                                    "Line": 51,
                                    "StartOffset": 1269,
                                    "EndOffset": 1275
                                }
                            ]
                        },
                        "FastStrMap::new": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::faststr_map",
                            "Name": "FastStrMap::new",
                            "File": "src/faststr_map.rs",
                            "Line": 15,
                            "StartOffset": 391,
                            "EndOffset": 511,
                            "Content": "impl FastStrMap {\n    #[inline]\n    #[inline]\n    pub fn new() -\u003e Self {\n        Self {\n            inner: FxHashMapRand::default(),\n        }\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap"
                                }
                            },
                            "FunctionCalls": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "default",
                                    "File": "src/faststr_map.rs",
                                    "Line": 18,
                                    "StartOffset": 480,
                                    "EndOffset": 487
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "rustc-hash@2.0.0",
                                    "PkgPath": "rustc-hash::random_state",
                                    "Name": "FxHashMapRand",
                                    "File": "src/faststr_map.rs",
                                    "Line": 18,
                                    "StartOffset": 465,
                                    "EndOffset": 478
                                }
                            ]
                        },
                        "FastStrMap::with_capacity": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::faststr_map",
                            "Name": "FastStrMap::with_capacity",
                            "File": "src/faststr_map.rs",
                            "Line": 22,
                            "StartOffset": 526,
                            "EndOffset": 699,
                            "Content": "impl FastStrMap {\n    #[inline]\n    #[inline]\n    pub fn with_capacity(capacity: usize) -\u003e Self {\n        Self {\n            inner: FxHashMapRand::with_capacity_and_hasher(capacity, Default::default()),\n        }\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap"
                                }
                            },
                            "FunctionCalls": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "with_capacity_and_hasher",
                                    "File": "src/faststr_map.rs",
                                    "Line": 25,
                                    "StartOffset": 623,
                                    "EndOffset": 647
                                },
                                {
                                    "ModPath": "rustc-hash@2.0.0",
                                    "PkgPath": "rustc-hash::random_state",
                                    "Name": "Default\u003cFxRandomState\u003e::default",
                                    "File": "src/faststr_map.rs",
                                    "Line": 25,
                                    "StartOffset": 667,
                                    "EndOffset": 674
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "rustc-hash@2.0.0",
                                    "PkgPath": "rustc-hash::random_state",
                                    "Name": "FxHashMapRand",
                                    "File": "src/faststr_map.rs",
                                    "Line": 25,
                                    "StartOffset": 608,
                                    "EndOffset": 621
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::default",
                                    "Name": "Default",
                                    "File": "src/faststr_map.rs",
                                    "Line": 25,
                                    "StartOffset": 658,
                                    "EndOffset": 665
                                }
                            ]
                        }
                    },
                    "Types": {
                        "FastStrMap": {
                            "Exported": true,
                            "TypeKind": "struct",
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::faststr_map",
                            "Name": "FastStrMap",
                            "File": "src/faststr_map.rs",
                            "Line": 6,
                            "StartOffset": -1,
                            "EndOffset": 342,
                            "Content": "/// This is an optimized version of TypeMap to FastStr that eliminates the need to Box the values.\n///\n/// This map is suitable for T that impls both From\u003cFastStr\u003e and Into\u003cFastStr\u003e.\n#[derive(Debug, Default)]\npub struct FastStrMap {\n    inner: FxHashMapRand\u003cTypeId, FastStr\u003e,\n}",
                            "SubStruct": [
                                {
                                    "ModPath": "rustc-hash@2.0.0",
                                    "PkgPath": "rustc-hash::random_state",
                                    "Name": "FxHashMapRand",
                                    "File": "src/faststr_map.rs",
                                    "Line": 11,
                                    "StartOffset": 328,
                                    "EndOffset": 341
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::any",
                                    "Name": "TypeId",
                                    "File": "src/faststr_map.rs",
                                    "Line": 11,
                                    "StartOffset": 342,
                                    "EndOffset": 348
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/faststr_map.rs",
                                    "Line": 11,
                                    "StartOffset": 350,
                                    "EndOffset": 357
                                }
                            ],
                            "Methods": {
                                "capacity": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap.capacity"
                                },
                                "clear": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap.clear"
                                },
                                "contains": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap.contains"
                                },
                                "entry": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap.entry"
                                },
                                "extend": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap.extend"
                                },
                                "get": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap.get"
                                },
                                "get_mut": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap.get_mut"
                                },
                                "insert": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap.insert"
                                },
                                "is_empty": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap.is_empty"
                                },
                                "iter": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap.iter"
                                },
                                "len": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap.len"
                                },
                                "remove": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap.remove"
                                }
                            }
                        }
                    },
                    "Vars": {}
                },
                "metainfo::forward": {
                    "IsMain": false,
                    "IsTest": false,
                    "PkgPath": "metainfo::forward",
                    "Functions": {},
                    "Types": {
                        "Forward": {
                            "Exported": true,
                            "TypeKind": "interface",
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::forward",
                            "Name": "Forward",
                            "File": "src/forward.rs",
                            "Line": 5,
                            "StartOffset": -1,
                            "EndOffset": 1700,
                            "Content": "pub trait Forward {\n    fn get_persistent\u003cK: AsRef\u003cstr\u003e\u003e(\u0026self, key: K) -\u003e Option\u003cFastStr\u003e;\n    fn get_transient\u003cK: AsRef\u003cstr\u003e\u003e(\u0026self, key: K) -\u003e Option\u003cFastStr\u003e;\n    fn get_upstream\u003cK: AsRef\u003cstr\u003e\u003e(\u0026self, key: K) -\u003e Option\u003cFastStr\u003e;\n\n    fn get_all_persistents(\u0026self) -\u003e Option\u003c\u0026AHashMap\u003cFastStr, FastStr\u003e\u003e;\n    fn get_all_transients(\u0026self) -\u003e Option\u003c\u0026AHashMap\u003cFastStr, FastStr\u003e\u003e;\n    fn get_all_upstreams(\u0026self) -\u003e Option\u003c\u0026AHashMap\u003cFastStr, FastStr\u003e\u003e;\n\n    fn get_all_persistents_and_transients_with_rpc_prefix(\n        \u0026self,\n    ) -\u003e Option\u003cAHashMap\u003cFastStr, FastStr\u003e\u003e;\n    fn get_all_persistents_and_transients_with_http_prefix(\n        \u0026self,\n    ) -\u003e Option\u003cAHashMap\u003cFastStr, FastStr\u003e\u003e;\n\n    fn set_persistent\u003cK: Into\u003cFastStr\u003e, V: Into\u003cFastStr\u003e\u003e(\u0026mut self, key: K, value: V);\n    fn set_transient\u003cK: Into\u003cFastStr\u003e, V: Into\u003cFastStr\u003e\u003e(\u0026mut self, key: K, value: V);\n    fn set_upstream\u003cK: Into\u003cFastStr\u003e, V: Into\u003cFastStr\u003e\u003e(\u0026mut self, key: K, value: V);\n\n    fn strip_rpc_prefix_and_set_persistent\u003cK: AsRef\u003cstr\u003e, V: Into\u003cFastStr\u003e\u003e(\n        \u0026mut self,\n        key: K,\n        value: V,\n    );\n    fn strip_rpc_prefix_and_set_upstream\u003cK: AsRef\u003cstr\u003e, V: Into\u003cFastStr\u003e\u003e(\n        \u0026mut self,\n        key: K,\n        value: V,\n    );\n\n    fn strip_http_prefix_and_set_persistent\u003cK: AsRef\u003cstr\u003e, V: Into\u003cFastStr\u003e\u003e(\n        \u0026mut self,\n        key: K,\n        value: V,\n    );\n    fn strip_http_prefix_and_set_upstream\u003cK: AsRef\u003cstr\u003e, V: Into\u003cFastStr\u003e\u003e(\n        \u0026mut self,\n        key: K,\n        value: V,\n    );\n\n    fn del_persistent\u003cK: AsRef\u003cstr\u003e\u003e(\u0026mut self, key: K) -\u003e Option\u003cFastStr\u003e;\n    fn del_transient\u003cK: AsRef\u003cstr\u003e\u003e(\u0026mut self, key: K) -\u003e Option\u003cFastStr\u003e;\n    fn del_upstream\u003cK: AsRef\u003cstr\u003e\u003e(\u0026mut self, key: K) -\u003e Option\u003cFastStr\u003e;\n}",
                            "SubStruct": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "AsRef",
                                    "File": "src/forward.rs",
                                    "Line": 6,
                                    "StartOffset": 69,
                                    "EndOffset": 74
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/forward.rs",
                                    "Line": 6,
                                    "StartOffset": 99,
                                    "EndOffset": 105
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/forward.rs",
                                    "Line": 6,
                                    "StartOffset": 106,
                                    "EndOffset": 113
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "AsRef",
                                    "File": "src/forward.rs",
                                    "Line": 7,
                                    "StartOffset": 88,
                                    "EndOffset": 93
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/forward.rs",
                                    "Line": 7,
                                    "StartOffset": 118,
                                    "EndOffset": 124
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/forward.rs",
                                    "Line": 7,
                                    "StartOffset": 125,
                                    "EndOffset": 132
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "AsRef",
                                    "File": "src/forward.rs",
                                    "Line": 8,
                                    "StartOffset": 159,
                                    "EndOffset": 164
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/forward.rs",
                                    "Line": 8,
                                    "StartOffset": 189,
                                    "EndOffset": 195
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/forward.rs",
                                    "Line": 8,
                                    "StartOffset": 196,
                                    "EndOffset": 203
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/forward.rs",
                                    "Line": 10,
                                    "StartOffset": 314,
                                    "EndOffset": 320
                                },
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap",
                                    "File": "src/forward.rs",
                                    "Line": 10,
                                    "StartOffset": 322,
                                    "EndOffset": 330
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/forward.rs",
                                    "Line": 10,
                                    "StartOffset": 331,
                                    "EndOffset": 338
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/forward.rs",
                                    "Line": 10,
                                    "StartOffset": 340,
                                    "EndOffset": 347
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/forward.rs",
                                    "Line": 11,
                                    "StartOffset": 314,
                                    "EndOffset": 320
                                },
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap",
                                    "File": "src/forward.rs",
                                    "Line": 11,
                                    "StartOffset": 322,
                                    "EndOffset": 330
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/forward.rs",
                                    "Line": 11,
                                    "StartOffset": 331,
                                    "EndOffset": 338
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/forward.rs",
                                    "Line": 11,
                                    "StartOffset": 340,
                                    "EndOffset": 347
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/forward.rs",
                                    "Line": 12,
                                    "StartOffset": 387,
                                    "EndOffset": 393
                                },
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap",
                                    "File": "src/forward.rs",
                                    "Line": 12,
                                    "StartOffset": 395,
                                    "EndOffset": 403
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/forward.rs",
                                    "Line": 12,
                                    "StartOffset": 404,
                                    "EndOffset": 411
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/forward.rs",
                                    "Line": 12,
                                    "StartOffset": 413,
                                    "EndOffset": 420
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/forward.rs",
                                    "Line": 16,
                                    "StartOffset": 566,
                                    "EndOffset": 572
                                },
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap",
                                    "File": "src/forward.rs",
                                    "Line": 16,
                                    "StartOffset": 573,
                                    "EndOffset": 581
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/forward.rs",
                                    "Line": 16,
                                    "StartOffset": 582,
                                    "EndOffset": 589
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/forward.rs",
                                    "Line": 16,
                                    "StartOffset": 591,
                                    "EndOffset": 598
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/forward.rs",
                                    "Line": 19,
                                    "StartOffset": 686,
                                    "EndOffset": 692
                                },
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap",
                                    "File": "src/forward.rs",
                                    "Line": 19,
                                    "StartOffset": 693,
                                    "EndOffset": 701
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/forward.rs",
                                    "Line": 19,
                                    "StartOffset": 702,
                                    "EndOffset": 709
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/forward.rs",
                                    "Line": 19,
                                    "StartOffset": 711,
                                    "EndOffset": 718
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "Into",
                                    "File": "src/forward.rs",
                                    "Line": 21,
                                    "StartOffset": 762,
                                    "EndOffset": 766
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/forward.rs",
                                    "Line": 21,
                                    "StartOffset": 767,
                                    "EndOffset": 774
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "Into",
                                    "File": "src/forward.rs",
                                    "Line": 21,
                                    "StartOffset": 780,
                                    "EndOffset": 784
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/forward.rs",
                                    "Line": 21,
                                    "StartOffset": 785,
                                    "EndOffset": 792
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "Into",
                                    "File": "src/forward.rs",
                                    "Line": 22,
                                    "StartOffset": 762,
                                    "EndOffset": 766
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/forward.rs",
                                    "Line": 22,
                                    "StartOffset": 767,
                                    "EndOffset": 774
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "Into",
                                    "File": "src/forward.rs",
                                    "Line": 22,
                                    "StartOffset": 780,
                                    "EndOffset": 784
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/forward.rs",
                                    "Line": 22,
                                    "StartOffset": 785,
                                    "EndOffset": 792
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "Into",
                                    "File": "src/forward.rs",
                                    "Line": 23,
                                    "StartOffset": 849,
                                    "EndOffset": 853
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/forward.rs",
                                    "Line": 23,
                                    "StartOffset": 854,
                                    "EndOffset": 861
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "Into",
                                    "File": "src/forward.rs",
                                    "Line": 23,
                                    "StartOffset": 867,
                                    "EndOffset": 871
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/forward.rs",
                                    "Line": 23,
                                    "StartOffset": 872,
                                    "EndOffset": 879
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "AsRef",
                                    "File": "src/forward.rs",
                                    "Line": 25,
                                    "StartOffset": 1045,
                                    "EndOffset": 1050
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "Into",
                                    "File": "src/forward.rs",
                                    "Line": 25,
                                    "StartOffset": 1060,
                                    "EndOffset": 1064
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/forward.rs",
                                    "Line": 25,
                                    "StartOffset": 1065,
                                    "EndOffset": 1072
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "AsRef",
                                    "File": "src/forward.rs",
                                    "Line": 30,
                                    "StartOffset": 1174,
                                    "EndOffset": 1179
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "Into",
                                    "File": "src/forward.rs",
                                    "Line": 30,
                                    "StartOffset": 1189,
                                    "EndOffset": 1193
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/forward.rs",
                                    "Line": 30,
                                    "StartOffset": 1194,
                                    "EndOffset": 1201
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "AsRef",
                                    "File": "src/forward.rs",
                                    "Line": 36,
                                    "StartOffset": 1319,
                                    "EndOffset": 1324
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "Into",
                                    "File": "src/forward.rs",
                                    "Line": 36,
                                    "StartOffset": 1334,
                                    "EndOffset": 1338
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/forward.rs",
                                    "Line": 36,
                                    "StartOffset": 1339,
                                    "EndOffset": 1346
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "AsRef",
                                    "File": "src/forward.rs",
                                    "Line": 41,
                                    "StartOffset": 1449,
                                    "EndOffset": 1454
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "Into",
                                    "File": "src/forward.rs",
                                    "Line": 41,
                                    "StartOffset": 1464,
                                    "EndOffset": 1468
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/forward.rs",
                                    "Line": 41,
                                    "StartOffset": 1469,
                                    "EndOffset": 1476
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "AsRef",
                                    "File": "src/forward.rs",
                                    "Line": 47,
                                    "StartOffset": 1572,
                                    "EndOffset": 1577
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/forward.rs",
                                    "Line": 47,
                                    "StartOffset": 1606,
                                    "EndOffset": 1612
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/forward.rs",
                                    "Line": 47,
                                    "StartOffset": 1613,
                                    "EndOffset": 1620
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "AsRef",
                                    "File": "src/forward.rs",
                                    "Line": 48,
                                    "StartOffset": 1572,
                                    "EndOffset": 1577
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/forward.rs",
                                    "Line": 48,
                                    "StartOffset": 1606,
                                    "EndOffset": 1612
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/forward.rs",
                                    "Line": 48,
                                    "StartOffset": 1613,
                                    "EndOffset": 1620
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "AsRef",
                                    "File": "src/forward.rs",
                                    "Line": 49,
                                    "StartOffset": 1647,
                                    "EndOffset": 1652
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/forward.rs",
                                    "Line": 49,
                                    "StartOffset": 1681,
                                    "EndOffset": 1687
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/forward.rs",
                                    "Line": 49,
                                    "StartOffset": 1688,
                                    "EndOffset": 1695
                                }
                            ]
                        }
                    },
                    "Vars": {}
                },
                "metainfo::kv": {
                    "IsMain": false,
                    "IsTest": false,
                    "PkgPath": "metainfo::kv",
                    "Functions": {
                        "Node.clear": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::kv",
                            "Name": "Node.clear",
                            "File": "src/kv.rs",
                            "Line": 116,
                            "StartOffset": 2987,
                            "EndOffset": 3260,
                            "Content": "impl Node {\n    set_impl!(persistent);\n    set_impl!(transient);\n    set_impl!(stale);\n\n    del_impl!(persistent);\n    del_impl!(transient);\n    del_impl!(stale);\n\n    get_impl!(persistent);\n    get_impl!(transient);\n    get_impl!(stale);\n\n    get_all_impl!(persistent);\n    get_all_impl!(transient);\n    get_all_impl!(stale);\n\n    pub fn clear(\u0026mut self) {\n        if let Some(v) = self.persistent.as_mut() {\n            v.clear();\n        }\n\n        if let Some(v) = self.transient.as_mut() {\n            v.clear();\n        }\n\n        if let Some(v) = self.stale.as_mut() {\n            v.clear();\n        }\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::kv",
                                    "Name": "Node"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "as_mut",
                                    "File": "src/kv.rs",
                                    "Line": 117,
                                    "StartOffset": 3025,
                                    "EndOffset": 3031
                                },
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "clear",
                                    "File": "src/kv.rs",
                                    "Line": 118,
                                    "StartOffset": 3028,
                                    "EndOffset": 3033
                                }
                            ]
                        },
                        "Node.extend": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::kv",
                            "Name": "Node.extend",
                            "File": "src/kv.rs",
                            "Line": 90,
                            "StartOffset": 2250,
                            "EndOffset": 2972,
                            "Content": "impl Node {\n    set_impl!(persistent);\n    set_impl!(transient);\n    set_impl!(stale);\n\n    del_impl!(persistent);\n    del_impl!(transient);\n    del_impl!(stale);\n\n    get_impl!(persistent);\n    get_impl!(transient);\n    get_impl!(stale);\n\n    get_all_impl!(persistent);\n    get_all_impl!(transient);\n    get_all_impl!(stale);\n\n    pub fn extend(\u0026mut self, other: Self) {\n        if let Some(v) = other.persistent {\n            if self.persistent.is_none() {\n                self.persistent = Some(v);\n            } else {\n                self.persistent.as_mut().unwrap().extend(v);\n            }\n        }\n\n        if let Some(v) = other.transient {\n            if self.transient.is_none() {\n                self.transient = Some(v);\n            } else {\n                self.transient.as_mut().unwrap().extend(v);\n            }\n        }\n\n        if let Some(v) = other.stale {\n            if self.stale.is_none() {\n                self.stale = Some(v);\n            } else {\n                self.stale.as_mut().unwrap().extend(v);\n            }\n        }\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::kv",
                                    "Name": "Node"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "is_none",
                                    "File": "src/kv.rs",
                                    "Line": 92,
                                    "StartOffset": 2322,
                                    "EndOffset": 2329
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "as_mut",
                                    "File": "src/kv.rs",
                                    "Line": 95,
                                    "StartOffset": 2453,
                                    "EndOffset": 2459
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "unwrap",
                                    "File": "src/kv.rs",
                                    "Line": 95,
                                    "StartOffset": 2462,
                                    "EndOffset": 2468
                                },
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "Extend\u003cAHashMap\u003e.extend",
                                    "File": "src/kv.rs",
                                    "Line": 95,
                                    "StartOffset": 2471,
                                    "EndOffset": 2477
                                }
                            ]
                        },
                        "del_impl": {
                            "Exported": true,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::kv",
                            "Name": "del_impl",
                            "File": "src/kv.rs",
                            "Line": 24,
                            "StartOffset": -1,
                            "EndOffset": 988,
                            "Content": "macro_rules! del_impl {\n    ($name:ident) =\u003e {\n        paste! {\n            pub fn [\u003cdel_ $name\u003e]\u003cK: AsRef\u003cstr\u003e\u003e(\u0026mut self, key: K) -\u003e Option\u003cFastStr\u003e {\n                let key = key.as_ref();\n                if let Some(v) = self.$name.as_mut() {\n                    v.remove(key)\n                } else {\n                    None\n                }\n            }\n        }\n    };\n}"
                        },
                        "get_all_impl": {
                            "Exported": true,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::kv",
                            "Name": "get_all_impl",
                            "File": "src/kv.rs",
                            "Line": 55,
                            "StartOffset": -1,
                            "EndOffset": 1632,
                            "Content": "macro_rules! get_all_impl {\n    ($name:ident) =\u003e {\n        paste! {\n            pub fn [\u003cget_all_ $name s\u003e](\u0026self) -\u003e Option\u003c\u0026AHashMap\u003cFastStr, FastStr\u003e\u003e {\n                self.$name.as_ref()\n            }\n        }\n    };\n}"
                        },
                        "get_impl": {
                            "Exported": true,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::kv",
                            "Name": "get_impl",
                            "File": "src/kv.rs",
                            "Line": 39,
                            "StartOffset": -1,
                            "EndOffset": 1406,
                            "Content": "macro_rules! get_impl {\n    ($name:ident) =\u003e {\n        paste! {\n            pub fn [\u003cget_ $name\u003e]\u003cK: AsRef\u003cstr\u003e\u003e(\u0026self, key: K) -\u003e Option\u003cFastStr\u003e {\n                let key = key.as_ref();\n                match self.$name.as_ref() {\n                    Some(v) =\u003e {\n                        v.get(key).cloned()\n                    }\n                    None =\u003e None,\n                }\n            }\n        }\n    };\n}"
                        },
                        "set_impl": {
                            "Exported": true,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::kv",
                            "Name": "set_impl",
                            "File": "src/kv.rs",
                            "Line": 7,
                            "StartOffset": -1,
                            "EndOffset": 604,
                            "Content": "macro_rules! set_impl {\n    ($name:ident) =\u003e {\n        paste! {\n            pub fn [\u003cset_ $name\u003e]\u003cK: Into\u003cFastStr\u003e, V: Into\u003cFastStr\u003e\u003e(\n                \u0026mut self,\n                key: K,\n                value: V,\n            ) {\n                if self.$name.is_none() {\n                    self.$name = Some(AHashMap::with_capacity(DEFAULT_CAPACITY));\n                }\n                self.$name.as_mut().unwrap().insert(key.into(), value.into());\n            }\n        }\n    };\n}"
                        },
                        "test_add_stale": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::kv",
                            "Name": "test_add_stale",
                            "File": "src/kv.rs",
                            "Line": 135,
                            "StartOffset": 3321,
                            "EndOffset": 3441,
                            "Content": "#[test]\n    fn test_add_stale() {\n        let mut node = Node::default();\n        node.set_stale(\"key\", \"value\");\n        println!(\"{node:?}\");\n    }",
                            "FunctionCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::kv",
                                    "Name": "set_impl",
                                    "File": "src/kv.rs",
                                    "Line": 138,
                                    "StartOffset": 3369,
                                    "EndOffset": 3378
                                },
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::macros",
                                    "Name": "println",
                                    "File": "src/kv.rs",
                                    "Line": 139,
                                    "StartOffset": 3404,
                                    "EndOffset": 3411
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::kv",
                                    "Name": "Node",
                                    "File": "src/kv.rs",
                                    "Line": 137,
                                    "StartOffset": 3353,
                                    "EndOffset": 3357
                                }
                            ]
                        }
                    },
                    "Types": {
                        "Node": {
                            "Exported": true,
                            "TypeKind": "struct",
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::kv",
                            "Name": "Node",
                            "File": "src/kv.rs",
                            "Line": 65,
                            "StartOffset": -1,
                            "EndOffset": 1870,
                            "Content": "#[derive(Debug, Default, Clone)]\npub struct Node {\n    persistent: Option\u003cAHashMap\u003cFastStr, FastStr\u003e\u003e,\n    transient: Option\u003cAHashMap\u003cFastStr, FastStr\u003e\u003e,\n    // this is called stale because upstream and downstream all use this.\n    stale: Option\u003cAHashMap\u003cFastStr, FastStr\u003e\u003e,\n}",
                            "SubStruct": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/kv.rs",
                                    "Line": 67,
                                    "StartOffset": 1690,
                                    "EndOffset": 1696
                                },
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap",
                                    "File": "src/kv.rs",
                                    "Line": 67,
                                    "StartOffset": 1697,
                                    "EndOffset": 1705
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/kv.rs",
                                    "Line": 67,
                                    "StartOffset": 1706,
                                    "EndOffset": 1713
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/kv.rs",
                                    "Line": 67,
                                    "StartOffset": 1715,
                                    "EndOffset": 1722
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/kv.rs",
                                    "Line": 68,
                                    "StartOffset": 1707,
                                    "EndOffset": 1713
                                },
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap",
                                    "File": "src/kv.rs",
                                    "Line": 68,
                                    "StartOffset": 1714,
                                    "EndOffset": 1722
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/kv.rs",
                                    "Line": 68,
                                    "StartOffset": 1723,
                                    "EndOffset": 1730
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/kv.rs",
                                    "Line": 68,
                                    "StartOffset": 1732,
                                    "EndOffset": 1739
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/kv.rs",
                                    "Line": 70,
                                    "StartOffset": 1806,
                                    "EndOffset": 1812
                                },
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap",
                                    "File": "src/kv.rs",
                                    "Line": 70,
                                    "StartOffset": 1813,
                                    "EndOffset": 1821
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/kv.rs",
                                    "Line": 70,
                                    "StartOffset": 1822,
                                    "EndOffset": 1829
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/kv.rs",
                                    "Line": 70,
                                    "StartOffset": 1831,
                                    "EndOffset": 1838
                                }
                            ],
                            "Methods": {
                                "clear": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::kv",
                                    "Name": "Node.clear"
                                },
                                "extend": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::kv",
                                    "Name": "Node.extend"
                                }
                            }
                        }
                    },
                    "Vars": {
                        "DEFAULT_CAPACITY": {
                            "IsExported": false,
                            "IsConst": true,
                            "IsPointer": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::kv",
                            "Name": "DEFAULT_CAPACITY",
                            "File": "src/kv.rs",
                            "Line": 5,
                            "StartOffset": -1,
                            "EndOffset": 95,
                            "Content": "const DEFAULT_CAPACITY: usize = 10;"
                        },
                        "mut node": {
                            "IsExported": false,
                            "IsConst": false,
                            "IsPointer": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::kv",
                            "Name": "mut node",
                            "File": "src/kv.rs",
                            "Line": 137,
                            "StartOffset": 3338,
                            "EndOffset": 3369,
                            "Type": {
                                "ModPath": "metainfo",
                                "PkgPath": "metainfo::kv",
                                "Name": "Node"
                            },
                            "Content": "let mut node = Node::default();"
                        }
                    }
                },
                "metainfo::type_map": {
                    "IsMain": false,
                    "IsTest": false,
                    "PkgPath": "metainfo::type_map",
                    "Functions": {
                        "Entry.and_modify": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::type_map",
                            "Name": "Entry.and_modify",
                            "File": "src/type_map.rs",
                            "Line": 44,
                            "StartOffset": 1074,
                            "EndOffset": 1360,
                            "Content": "impl\u003c'a, K, V\u003e Entry\u003c'a, K, V\u003e {\n    #[inline]\n    #[inline]\n    pub fn and_modify\u003cF: FnOnce(\u0026mut V)\u003e(self, f: F) -\u003e Self\n    where\n        V: Send + Sync + 'static,\n    {\n        Entry {\n            inner: self.inner.and_modify(|v| {\n                f(v.downcast_mut().unwrap());\n            }),\n            _marker: PhantomData,\n        }\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "Entry"
                                }
                            },
                            "Results": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "and_modify",
                                    "File": "src/type_map.rs",
                                    "Line": 45,
                                    "StartOffset": 1082,
                                    "EndOffset": 1092
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::ops::function",
                                    "Name": "FnOnce",
                                    "File": "src/type_map.rs",
                                    "Line": 45,
                                    "StartOffset": 1096,
                                    "EndOffset": 1102
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "and_modify",
                                    "File": "src/type_map.rs",
                                    "Line": 50,
                                    "StartOffset": 1226,
                                    "EndOffset": 1236
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::any",
                                    "Name": "downcast_mut",
                                    "File": "src/type_map.rs",
                                    "Line": 51,
                                    "StartOffset": 1232,
                                    "EndOffset": 1244
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "unwrap",
                                    "File": "src/type_map.rs",
                                    "Line": 51,
                                    "StartOffset": 1247,
                                    "EndOffset": 1253
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::ops::function",
                                    "Name": "FnOnce",
                                    "File": "src/type_map.rs",
                                    "Line": 45,
                                    "StartOffset": 1096,
                                    "EndOffset": 1102
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::marker",
                                    "Name": "Send",
                                    "File": "src/type_map.rs",
                                    "Line": 47,
                                    "StartOffset": 1157,
                                    "EndOffset": 1161
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::marker",
                                    "Name": "Sync",
                                    "File": "src/type_map.rs",
                                    "Line": 47,
                                    "StartOffset": 1164,
                                    "EndOffset": 1168
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "Entry",
                                    "File": "src/type_map.rs",
                                    "Line": 49,
                                    "StartOffset": 1198,
                                    "EndOffset": 1203
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::marker",
                                    "Name": "PhantomData",
                                    "File": "src/type_map.rs",
                                    "Line": 53,
                                    "StartOffset": 1326,
                                    "EndOffset": 1337
                                }
                            ]
                        },
                        "Entry.or_default": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::type_map",
                            "Name": "Entry.or_default",
                            "File": "src/type_map.rs",
                            "Line": 57,
                            "StartOffset": 1375,
                            "EndOffset": 1532,
                            "Content": "impl\u003c'a, K, V\u003e Entry\u003c'a, K, V\u003e {\n    #[inline]\n    #[allow(clippy::unwrap_or_default)]\n    #[inline]\n    pub fn or_default(self) -\u003e \u0026'a mut V\n    where\n        V: Default + Send + Sync + 'static,\n    {\n        self.or_insert_with(V::default)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "Entry"
                                }
                            },
                            "Results": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "or_default",
                                    "File": "src/type_map.rs",
                                    "Line": 59,
                                    "StartOffset": 1423,
                                    "EndOffset": 1433
                                }
                            ],
                            "FunctionCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::default",
                                    "Name": "default",
                                    "File": "src/type_map.rs",
                                    "Line": 63,
                                    "StartOffset": 1552,
                                    "EndOffset": 1559
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "Entry.or_insert_with",
                                    "File": "src/type_map.rs",
                                    "Line": 63,
                                    "StartOffset": 1534,
                                    "EndOffset": 1548
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::default",
                                    "Name": "Default",
                                    "File": "src/type_map.rs",
                                    "Line": 61,
                                    "StartOffset": 1478,
                                    "EndOffset": 1485
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::marker",
                                    "Name": "Send",
                                    "File": "src/type_map.rs",
                                    "Line": 61,
                                    "StartOffset": 1488,
                                    "EndOffset": 1492
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::marker",
                                    "Name": "Sync",
                                    "File": "src/type_map.rs",
                                    "Line": 61,
                                    "StartOffset": 1495,
                                    "EndOffset": 1499
                                }
                            ]
                        },
                        "Entry.or_insert": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::type_map",
                            "Name": "Entry.or_insert",
                            "File": "src/type_map.rs",
                            "Line": 17,
                            "StartOffset": 310,
                            "EndOffset": 525,
                            "Content": "impl\u003c'a, K, V\u003e Entry\u003c'a, K, V\u003e {\n    #[inline]\n    #[inline]\n    pub fn or_insert(self, default: V) -\u003e \u0026'a mut V\n    where\n        V: Send + Sync + 'static,\n    {\n        let v = self.inner.or_insert_with(|| Box::new(default));\n        v.downcast_mut().unwrap()\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "Entry"
                                }
                            },
                            "FunctionCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "alloc::boxed",
                                    "Name": "new",
                                    "File": "src/type_map.rs",
                                    "Line": 22,
                                    "StartOffset": 499,
                                    "EndOffset": 502
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "or_insert_with",
                                    "File": "src/type_map.rs",
                                    "Line": 22,
                                    "StartOffset": 476,
                                    "EndOffset": 490
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::any",
                                    "Name": "downcast_mut",
                                    "File": "src/type_map.rs",
                                    "Line": 23,
                                    "StartOffset": 465,
                                    "EndOffset": 477
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "unwrap",
                                    "File": "src/type_map.rs",
                                    "Line": 23,
                                    "StartOffset": 480,
                                    "EndOffset": 486
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::marker",
                                    "Name": "Send",
                                    "File": "src/type_map.rs",
                                    "Line": 20,
                                    "StartOffset": 416,
                                    "EndOffset": 420
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::marker",
                                    "Name": "Sync",
                                    "File": "src/type_map.rs",
                                    "Line": 20,
                                    "StartOffset": 423,
                                    "EndOffset": 427
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "alloc::boxed",
                                    "Name": "Box",
                                    "File": "src/type_map.rs",
                                    "Line": 22,
                                    "StartOffset": 494,
                                    "EndOffset": 497
                                }
                            ]
                        },
                        "Entry.or_insert_with": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::type_map",
                            "Name": "Entry.or_insert_with",
                            "File": "src/type_map.rs",
                            "Line": 26,
                            "StartOffset": 564,
                            "EndOffset": 772,
                            "Content": "impl\u003c'a, K, V\u003e Entry\u003c'a, K, V\u003e {\n    #[inline]\n    #[inline]\n    pub fn or_insert_with\u003cF: FnOnce() -\u003e V\u003e(self, default: F) -\u003e \u0026'a mut V\n    where\n        V: Send + Sync + 'static,\n    {\n        let v = self.inner.or_insert_with(|| Box::new(default()));\n        v.downcast_mut().unwrap()\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "Entry"
                                }
                            },
                            "FunctionCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "alloc::boxed",
                                    "Name": "new",
                                    "File": "src/type_map.rs",
                                    "Line": 31,
                                    "StartOffset": 744,
                                    "EndOffset": 747
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "or_insert_with",
                                    "File": "src/type_map.rs",
                                    "Line": 31,
                                    "StartOffset": 721,
                                    "EndOffset": 735
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::any",
                                    "Name": "downcast_mut",
                                    "File": "src/type_map.rs",
                                    "Line": 32,
                                    "StartOffset": 710,
                                    "EndOffset": 722
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "unwrap",
                                    "File": "src/type_map.rs",
                                    "Line": 32,
                                    "StartOffset": 725,
                                    "EndOffset": 731
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::ops::function",
                                    "Name": "FnOnce",
                                    "File": "src/type_map.rs",
                                    "Line": 27,
                                    "StartOffset": 590,
                                    "EndOffset": 596
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::marker",
                                    "Name": "Send",
                                    "File": "src/type_map.rs",
                                    "Line": 29,
                                    "StartOffset": 661,
                                    "EndOffset": 665
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::marker",
                                    "Name": "Sync",
                                    "File": "src/type_map.rs",
                                    "Line": 29,
                                    "StartOffset": 668,
                                    "EndOffset": 672
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "alloc::boxed",
                                    "Name": "Box",
                                    "File": "src/type_map.rs",
                                    "Line": 31,
                                    "StartOffset": 739,
                                    "EndOffset": 742
                                }
                            ]
                        },
                        "Entry.or_insert_with_key": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::type_map",
                            "Name": "Entry.or_insert_with_key",
                            "File": "src/type_map.rs",
                            "Line": 35,
                            "StartOffset": 811,
                            "EndOffset": 1035,
                            "Content": "impl\u003c'a, K, V\u003e Entry\u003c'a, K, V\u003e {\n    #[inline]\n    #[inline]\n    pub fn or_insert_with_key\u003cF: FnOnce(\u0026K) -\u003e V\u003e(self, default: F) -\u003e \u0026'a mut V\n    where\n        V: Send + Sync + 'static,\n    {\n        let v = self.inner.or_insert_with_key(|key| Box::new(default(key)));\n        v.downcast_mut().unwrap()\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "Entry"
                                }
                            },
                            "FunctionCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "alloc::boxed",
                                    "Name": "new",
                                    "File": "src/type_map.rs",
                                    "Line": 40,
                                    "StartOffset": 1004,
                                    "EndOffset": 1007
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "or_insert_with_key",
                                    "File": "src/type_map.rs",
                                    "Line": 40,
                                    "StartOffset": 974,
                                    "EndOffset": 992
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::any",
                                    "Name": "downcast_mut",
                                    "File": "src/type_map.rs",
                                    "Line": 41,
                                    "StartOffset": 963,
                                    "EndOffset": 975
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "unwrap",
                                    "File": "src/type_map.rs",
                                    "Line": 41,
                                    "StartOffset": 978,
                                    "EndOffset": 984
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::ops::function",
                                    "Name": "FnOnce",
                                    "File": "src/type_map.rs",
                                    "Line": 36,
                                    "StartOffset": 841,
                                    "EndOffset": 847
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::marker",
                                    "Name": "Send",
                                    "File": "src/type_map.rs",
                                    "Line": 38,
                                    "StartOffset": 914,
                                    "EndOffset": 918
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::marker",
                                    "Name": "Sync",
                                    "File": "src/type_map.rs",
                                    "Line": 38,
                                    "StartOffset": 921,
                                    "EndOffset": 925
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "alloc::boxed",
                                    "Name": "Box",
                                    "File": "src/type_map.rs",
                                    "Line": 40,
                                    "StartOffset": 999,
                                    "EndOffset": 1002
                                }
                            ]
                        },
                        "TypeMap.capacity": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::type_map",
                            "Name": "TypeMap.capacity",
                            "File": "src/type_map.rs",
                            "Line": 151,
                            "StartOffset": 3538,
                            "EndOffset": 3592,
                            "Content": "impl TypeMap {\n    #[inline]\n    #[inline]\n    pub fn capacity(\u0026self) -\u003e usize {\n        self.inner.capacity()\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "capacity",
                                    "File": "src/type_map.rs",
                                    "Line": 153,
                                    "StartOffset": 3568,
                                    "EndOffset": 3576
                                }
                            ]
                        },
                        "TypeMap.clear": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::type_map",
                            "Name": "TypeMap.clear",
                            "File": "src/type_map.rs",
                            "Line": 118,
                            "StartOffset": 2849,
                            "EndOffset": 2895,
                            "Content": "impl TypeMap {\n    #[inline]\n    #[inline]\n    pub fn clear(\u0026mut self) {\n        self.inner.clear();\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "clear",
                                    "File": "src/type_map.rs",
                                    "Line": 120,
                                    "StartOffset": 2879,
                                    "EndOffset": 2884
                                }
                            ]
                        },
                        "TypeMap.contains": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::type_map",
                            "Name": "TypeMap.contains",
                            "File": "src/type_map.rs",
                            "Line": 106,
                            "StartOffset": 2518,
                            "EndOffset": 2583,
                            "Content": "impl TypeMap {\n    #[inline]\n    #[inline]\n    pub fn contains\u003cT: 'static\u003e(\u0026self) -\u003e bool {\n        self.inner.contains_key(\u0026TypeId::of::\u003cT\u003e())\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap"
                                }
                            },
                            "FunctionCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::any",
                                    "Name": "of",
                                    "File": "src/type_map.rs",
                                    "Line": 108,
                                    "StartOffset": 2570,
                                    "EndOffset": 2572
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "contains_key",
                                    "File": "src/type_map.rs",
                                    "Line": 108,
                                    "StartOffset": 2548,
                                    "EndOffset": 2560
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::any",
                                    "Name": "TypeId",
                                    "File": "src/type_map.rs",
                                    "Line": 108,
                                    "StartOffset": 2562,
                                    "EndOffset": 2568
                                }
                            ]
                        },
                        "TypeMap.entry": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::type_map",
                            "Name": "TypeMap.entry",
                            "File": "src/type_map.rs",
                            "Line": 133,
                            "StartOffset": 3168,
                            "EndOffset": 3356,
                            "Content": "impl TypeMap {\n    #[inline]\n    #[inline]\n    pub fn entry\u003cT: 'static\u003e(\u0026mut self) -\u003e Entry\u003c'_, TypeId, T\u003e {\n        Entry {\n            inner: self.inner.entry(TypeId::of::\u003cT\u003e()),\n            _marker: PhantomData,\n        }\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap"
                                }
                            },
                            "FunctionCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::any",
                                    "Name": "of",
                                    "File": "src/type_map.rs",
                                    "Line": 136,
                                    "StartOffset": 3289,
                                    "EndOffset": 3291
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "entry",
                                    "File": "src/type_map.rs",
                                    "Line": 136,
                                    "StartOffset": 3275,
                                    "EndOffset": 3280
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "Entry",
                                    "File": "src/type_map.rs",
                                    "Line": 134,
                                    "StartOffset": 3208,
                                    "EndOffset": 3213
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::any",
                                    "Name": "TypeId",
                                    "File": "src/type_map.rs",
                                    "Line": 134,
                                    "StartOffset": 3218,
                                    "EndOffset": 3224
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::marker",
                                    "Name": "PhantomData",
                                    "File": "src/type_map.rs",
                                    "Line": 137,
                                    "StartOffset": 3282,
                                    "EndOffset": 3293
                                }
                            ]
                        },
                        "TypeMap.extend": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::type_map",
                            "Name": "TypeMap.extend",
                            "File": "src/type_map.rs",
                            "Line": 123,
                            "StartOffset": 2928,
                            "EndOffset": 2991,
                            "Content": "impl TypeMap {\n    #[inline]\n    #[inline]\n    pub fn extend(\u0026mut self, other: TypeMap) {\n        self.inner.extend(other.inner)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap"
                                }
                            },
                            "Params": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap",
                                    "File": "src/type_map.rs",
                                    "Line": 124,
                                    "StartOffset": 2961,
                                    "EndOffset": 2968
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "extend",
                                    "File": "src/type_map.rs",
                                    "Line": 125,
                                    "StartOffset": 2958,
                                    "EndOffset": 2964
                                }
                            ]
                        },
                        "TypeMap.get": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::type_map",
                            "Name": "TypeMap.get",
                            "File": "src/type_map.rs",
                            "Line": 92,
                            "StartOffset": 2144,
                            "EndOffset": 2266,
                            "Content": "impl TypeMap {\n    #[inline]\n    #[inline]\n    pub fn get\u003cT: 'static\u003e(\u0026self) -\u003e Option\u003c\u0026T\u003e {\n        self.inner\n            .get(\u0026TypeId::of::\u003cT\u003e())\n            .and_then(|boxed| boxed.downcast_ref())\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap"
                                }
                            },
                            "FunctionCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::any",
                                    "Name": "of",
                                    "File": "src/type_map.rs",
                                    "Line": 95,
                                    "StartOffset": 2231,
                                    "EndOffset": 2233
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "get",
                                    "File": "src/type_map.rs",
                                    "Line": 95,
                                    "StartOffset": 2218,
                                    "EndOffset": 2221
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "and_then",
                                    "File": "src/type_map.rs",
                                    "Line": 96,
                                    "StartOffset": 2237,
                                    "EndOffset": 2245
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::any",
                                    "Name": "downcast_ref",
                                    "File": "src/type_map.rs",
                                    "Line": 96,
                                    "StartOffset": 2260,
                                    "EndOffset": 2272
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/type_map.rs",
                                    "Line": 93,
                                    "StartOffset": 2178,
                                    "EndOffset": 2184
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::any",
                                    "Name": "TypeId",
                                    "File": "src/type_map.rs",
                                    "Line": 95,
                                    "StartOffset": 2223,
                                    "EndOffset": 2229
                                }
                            ]
                        },
                        "TypeMap.get_mut": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::type_map",
                            "Name": "TypeMap.get_mut",
                            "File": "src/type_map.rs",
                            "Line": 99,
                            "StartOffset": 2323,
                            "EndOffset": 2461,
                            "Content": "impl TypeMap {\n    #[inline]\n    #[inline]\n    pub fn get_mut\u003cT: 'static\u003e(\u0026mut self) -\u003e Option\u003c\u0026mut T\u003e {\n        self.inner\n            .get_mut(\u0026TypeId::of::\u003cT\u003e())\n            .and_then(|boxed| boxed.downcast_mut())\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap"
                                }
                            },
                            "FunctionCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::any",
                                    "Name": "of",
                                    "File": "src/type_map.rs",
                                    "Line": 102,
                                    "StartOffset": 2426,
                                    "EndOffset": 2428
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "get_mut",
                                    "File": "src/type_map.rs",
                                    "Line": 102,
                                    "StartOffset": 2409,
                                    "EndOffset": 2416
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "and_then",
                                    "File": "src/type_map.rs",
                                    "Line": 103,
                                    "StartOffset": 2428,
                                    "EndOffset": 2436
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::any",
                                    "Name": "downcast_mut",
                                    "File": "src/type_map.rs",
                                    "Line": 103,
                                    "StartOffset": 2451,
                                    "EndOffset": 2463
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/type_map.rs",
                                    "Line": 100,
                                    "StartOffset": 2365,
                                    "EndOffset": 2371
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::any",
                                    "Name": "TypeId",
                                    "File": "src/type_map.rs",
                                    "Line": 102,
                                    "StartOffset": 2418,
                                    "EndOffset": 2424
                                }
                            ]
                        },
                        "TypeMap.insert": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::type_map",
                            "Name": "TypeMap.insert",
                            "File": "src/type_map.rs",
                            "Line": 87,
                            "StartOffset": 2001,
                            "EndOffset": 2080,
                            "Content": "impl TypeMap {\n    #[inline]\n    #[inline]\n    pub fn insert\u003cT: Send + Sync + 'static\u003e(\u0026mut self, t: T) {\n        self.inner.insert(TypeId::of::\u003cT\u003e(), Box::new(t));\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap"
                                }
                            },
                            "FunctionCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::any",
                                    "Name": "of",
                                    "File": "src/type_map.rs",
                                    "Line": 89,
                                    "StartOffset": 2046,
                                    "EndOffset": 2048
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "alloc::boxed",
                                    "Name": "new",
                                    "File": "src/type_map.rs",
                                    "Line": 89,
                                    "StartOffset": 2062,
                                    "EndOffset": 2065
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "insert",
                                    "File": "src/type_map.rs",
                                    "Line": 89,
                                    "StartOffset": 2031,
                                    "EndOffset": 2037
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::marker",
                                    "Name": "Send",
                                    "File": "src/type_map.rs",
                                    "Line": 88,
                                    "StartOffset": 2019,
                                    "EndOffset": 2023
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::marker",
                                    "Name": "Sync",
                                    "File": "src/type_map.rs",
                                    "Line": 88,
                                    "StartOffset": 2026,
                                    "EndOffset": 2030
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::any",
                                    "Name": "TypeId",
                                    "File": "src/type_map.rs",
                                    "Line": 89,
                                    "StartOffset": 2038,
                                    "EndOffset": 2044
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "alloc::boxed",
                                    "Name": "Box",
                                    "File": "src/type_map.rs",
                                    "Line": 89,
                                    "StartOffset": 2057,
                                    "EndOffset": 2060
                                }
                            ]
                        },
                        "TypeMap.is_empty": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::type_map",
                            "Name": "TypeMap.is_empty",
                            "File": "src/type_map.rs",
                            "Line": 141,
                            "StartOffset": 3371,
                            "EndOffset": 3424,
                            "Content": "impl TypeMap {\n    #[inline]\n    #[inline]\n    pub fn is_empty(\u0026self) -\u003e bool {\n        self.inner.is_empty()\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "is_empty",
                                    "File": "src/type_map.rs",
                                    "Line": 143,
                                    "StartOffset": 3401,
                                    "EndOffset": 3409
                                }
                            ]
                        },
                        "TypeMap.iter": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::type_map",
                            "Name": "TypeMap.iter",
                            "File": "src/type_map.rs",
                            "Line": 128,
                            "StartOffset": 3035,
                            "EndOffset": 3137,
                            "Content": "impl TypeMap {\n    #[inline]\n    #[inline]\n    pub fn iter(\u0026self) -\u003e ::std::collections::hash_map::Iter\u003c'_, TypeId, AnyObject\u003e {\n        self.inner.iter()\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "iter",
                                    "File": "src/type_map.rs",
                                    "Line": 130,
                                    "StartOffset": 3065,
                                    "EndOffset": 3069
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "Iter",
                                    "File": "src/type_map.rs",
                                    "Line": 129,
                                    "StartOffset": 3088,
                                    "EndOffset": 3092
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::any",
                                    "Name": "TypeId",
                                    "File": "src/type_map.rs",
                                    "Line": 129,
                                    "StartOffset": 3097,
                                    "EndOffset": 3103
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "AnyObject",
                                    "File": "src/type_map.rs",
                                    "Line": 129,
                                    "StartOffset": 3105,
                                    "EndOffset": 3114
                                }
                            ]
                        },
                        "TypeMap.len": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::type_map",
                            "Name": "TypeMap.len",
                            "File": "src/type_map.rs",
                            "Line": 146,
                            "StartOffset": 3459,
                            "EndOffset": 3508,
                            "Content": "impl TypeMap {\n    #[inline]\n    #[inline]\n    pub fn len(\u0026self) -\u003e usize {\n        self.inner.len()\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "len",
                                    "File": "src/type_map.rs",
                                    "Line": 148,
                                    "StartOffset": 3489,
                                    "EndOffset": 3492
                                }
                            ]
                        },
                        "TypeMap.remove": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::type_map",
                            "Name": "TypeMap.remove",
                            "File": "src/type_map.rs",
                            "Line": 111,
                            "StartOffset": 2640,
                            "EndOffset": 2771,
                            "Content": "impl TypeMap {\n    #[inline]\n    #[inline]\n    pub fn remove\u003cT: 'static\u003e(\u0026mut self) -\u003e Option\u003cT\u003e {\n        self.inner\n            .remove(\u0026TypeId::of::\u003cT\u003e())\n            .and_then(|boxed| boxed.downcast().ok().map(|boxed| *boxed))\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap"
                                }
                            },
                            "FunctionCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::any",
                                    "Name": "of",
                                    "File": "src/type_map.rs",
                                    "Line": 114,
                                    "StartOffset": 2736,
                                    "EndOffset": 2738
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "remove",
                                    "File": "src/type_map.rs",
                                    "Line": 114,
                                    "StartOffset": 2720,
                                    "EndOffset": 2726
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "and_then",
                                    "File": "src/type_map.rs",
                                    "Line": 115,
                                    "StartOffset": 2739,
                                    "EndOffset": 2747
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "alloc::boxed::convert",
                                    "Name": "downcast",
                                    "File": "src/type_map.rs",
                                    "Line": 115,
                                    "StartOffset": 2762,
                                    "EndOffset": 2770
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::result",
                                    "Name": "ok",
                                    "File": "src/type_map.rs",
                                    "Line": 115,
                                    "StartOffset": 2773,
                                    "EndOffset": 2775
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "map",
                                    "File": "src/type_map.rs",
                                    "Line": 115,
                                    "StartOffset": 2778,
                                    "EndOffset": 2781
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/type_map.rs",
                                    "Line": 112,
                                    "StartOffset": 2681,
                                    "EndOffset": 2687
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::any",
                                    "Name": "TypeId",
                                    "File": "src/type_map.rs",
                                    "Line": 114,
                                    "StartOffset": 2728,
                                    "EndOffset": 2734
                                }
                            ]
                        },
                        "TypeMap::new": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::type_map",
                            "Name": "TypeMap::new",
                            "File": "src/type_map.rs",
                            "Line": 73,
                            "StartOffset": 1675,
                            "EndOffset": 1795,
                            "Content": "impl TypeMap {\n    #[inline]\n    #[inline]\n    pub fn new() -\u003e Self {\n        TypeMap {\n            inner: FxHashMapRand::default(),\n        }\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap"
                                }
                            },
                            "FunctionCalls": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "default",
                                    "File": "src/type_map.rs",
                                    "Line": 76,
                                    "StartOffset": 1761,
                                    "EndOffset": 1768
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap",
                                    "File": "src/type_map.rs",
                                    "Line": 75,
                                    "StartOffset": 1708,
                                    "EndOffset": 1715
                                },
                                {
                                    "ModPath": "rustc-hash@2.0.0",
                                    "PkgPath": "rustc-hash::random_state",
                                    "Name": "FxHashMapRand",
                                    "File": "src/type_map.rs",
                                    "Line": 76,
                                    "StartOffset": 1746,
                                    "EndOffset": 1759
                                }
                            ]
                        },
                        "TypeMap::with_capacity": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::type_map",
                            "Name": "TypeMap::with_capacity",
                            "File": "src/type_map.rs",
                            "Line": 80,
                            "StartOffset": 1810,
                            "EndOffset": 1986,
                            "Content": "impl TypeMap {\n    #[inline]\n    #[inline]\n    pub fn with_capacity(capacity: usize) -\u003e Self {\n        TypeMap {\n            inner: FxHashMapRand::with_capacity_and_hasher(capacity, Default::default()),\n        }\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap"
                                }
                            },
                            "FunctionCalls": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "with_capacity_and_hasher",
                                    "File": "src/type_map.rs",
                                    "Line": 83,
                                    "StartOffset": 1907,
                                    "EndOffset": 1931
                                },
                                {
                                    "ModPath": "rustc-hash@2.0.0",
                                    "PkgPath": "rustc-hash::random_state",
                                    "Name": "Default\u003cFxRandomState\u003e::default",
                                    "File": "src/type_map.rs",
                                    "Line": 83,
                                    "StartOffset": 1951,
                                    "EndOffset": 1958
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap",
                                    "File": "src/type_map.rs",
                                    "Line": 82,
                                    "StartOffset": 1829,
                                    "EndOffset": 1836
                                },
                                {
                                    "ModPath": "rustc-hash@2.0.0",
                                    "PkgPath": "rustc-hash::random_state",
                                    "Name": "FxHashMapRand",
                                    "File": "src/type_map.rs",
                                    "Line": 83,
                                    "StartOffset": 1892,
                                    "EndOffset": 1905
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::default",
                                    "Name": "Default",
                                    "File": "src/type_map.rs",
                                    "Line": 83,
                                    "StartOffset": 1942,
                                    "EndOffset": 1949
                                }
                            ]
                        }
                    },
                    "Types": {
                        "AnyObject": {
                            "Exported": false,
                            "TypeKind": "type-parameter",
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::type_map",
                            "Name": "AnyObject",
                            "File": "src/type_map.rs",
                            "Line": 9,
                            "StartOffset": -1,
                            "EndOffset": 195,
                            "Content": "pub(crate) type AnyObject = Box\u003cdyn Any + Send + Sync\u003e;",
                            "SubStruct": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "alloc::boxed",
                                    "Name": "Box",
                                    "File": "src/type_map.rs",
                                    "Line": 9,
                                    "StartOffset": 168,
                                    "EndOffset": 171
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::any",
                                    "Name": "Any",
                                    "File": "src/type_map.rs",
                                    "Line": 9,
                                    "StartOffset": 176,
                                    "EndOffset": 179
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::marker",
                                    "Name": "Send",
                                    "File": "src/type_map.rs",
                                    "Line": 9,
                                    "StartOffset": 182,
                                    "EndOffset": 186
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::marker",
                                    "Name": "Sync",
                                    "File": "src/type_map.rs",
                                    "Line": 9,
                                    "StartOffset": 189,
                                    "EndOffset": 193
                                }
                            ]
                        },
                        "Entry": {
                            "Exported": true,
                            "TypeKind": "struct",
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::type_map",
                            "Name": "Entry",
                            "File": "src/type_map.rs",
                            "Line": 11,
                            "StartOffset": -1,
                            "EndOffset": 275,
                            "Content": "pub struct Entry\u003c'a, K: 'a, V: 'a\u003e {\n    inner: MapEntry\u003c'a, K, AnyObject\u003e,\n    _marker: PhantomData\u003cV\u003e,\n}",
                            "SubStruct": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "Entry",
                                    "File": "src/type_map.rs",
                                    "Line": 12,
                                    "StartOffset": 209,
                                    "EndOffset": 217
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "AnyObject",
                                    "File": "src/type_map.rs",
                                    "Line": 12,
                                    "StartOffset": 225,
                                    "EndOffset": 234
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::marker",
                                    "Name": "PhantomData",
                                    "File": "src/type_map.rs",
                                    "Line": 13,
                                    "StartOffset": 248,
                                    "EndOffset": 259
                                }
                            ],
                            "Methods": {
                                "and_modify": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "Entry.and_modify"
                                },
                                "or_default": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "Entry.or_default"
                                },
                                "or_insert": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "Entry.or_insert"
                                },
                                "or_insert_with": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "Entry.or_insert_with"
                                },
                                "or_insert_with_key": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "Entry.or_insert_with_key"
                                }
                            }
                        },
                        "TypeMap": {
                            "Exported": true,
                            "TypeKind": "struct",
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::type_map",
                            "Name": "TypeMap",
                            "File": "src/type_map.rs",
                            "Line": 67,
                            "StartOffset": -1,
                            "EndOffset": 1624,
                            "Content": "#[derive(Debug, Default)]\npub struct TypeMap {\n    inner: FxHashMapRand\u003cTypeId, AnyObject\u003e,\n}",
                            "SubStruct": [
                                {
                                    "ModPath": "rustc-hash@2.0.0",
                                    "PkgPath": "rustc-hash::random_state",
                                    "Name": "FxHashMapRand",
                                    "File": "src/type_map.rs",
                                    "Line": 69,
                                    "StartOffset": 1613,
                                    "EndOffset": 1626
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::any",
                                    "Name": "TypeId",
                                    "File": "src/type_map.rs",
                                    "Line": 69,
                                    "StartOffset": 1627,
                                    "EndOffset": 1633
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "AnyObject",
                                    "File": "src/type_map.rs",
                                    "Line": 69,
                                    "StartOffset": 1635,
                                    "EndOffset": 1644
                                }
                            ],
                            "Methods": {
                                "capacity": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap.capacity"
                                },
                                "clear": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap.clear"
                                },
                                "contains": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap.contains"
                                },
                                "entry": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap.entry"
                                },
                                "extend": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap.extend"
                                },
                                "get": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap.get"
                                },
                                "get_mut": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap.get_mut"
                                },
                                "insert": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap.insert"
                                },
                                "is_empty": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap.is_empty"
                                },
                                "iter": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap.iter"
                                },
                                "len": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap.len"
                                },
                                "remove": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap.remove"
                                }
                            }
                        }
                    },
                    "Vars": {
                        "v": {
                            "IsExported": false,
                            "IsConst": false,
                            "IsPointer": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::type_map",
                            "Name": "v",
                            "File": "src/type_map.rs",
                            "Line": 40,
                            "StartOffset": 955,
                            "EndOffset": 1023,
                            "Type": {
                                "ModPath": "std",
                                "PkgPath": "std::collections::hash::map",
                                "Name": "or_insert_with_key"
                            },
                            "Content": "let v = self.inner.or_insert_with_key(|key| Box::new(default(key)));"
                        }
                    }
                }
            },
            "Dependencies": {},
            "Files": {
                ".github/CODEOWNERS": {
                    "Path": "/Users/bytedance/golang/work/abcoder/tmp/metainfo/.github/CODEOWNERS"
                },
                ".github/ISSUE_TEMPLATE/bug_report.md": {
                    "Path": "/Users/bytedance/golang/work/abcoder/tmp/metainfo/.github/ISSUE_TEMPLATE/bug_report.md"
                },
                ".github/ISSUE_TEMPLATE/feature_request.md": {
                    "Path": "/Users/bytedance/golang/work/abcoder/tmp/metainfo/.github/ISSUE_TEMPLATE/feature_request.md"
                },
                ".github/PULL_REQUEST_TEMPLATE.md": {
                    "Path": "/Users/bytedance/golang/work/abcoder/tmp/metainfo/.github/PULL_REQUEST_TEMPLATE.md"
                },
                ".github/assets/volo-feishu-dev-group.png": {
                    "Path": "/Users/bytedance/golang/work/abcoder/tmp/metainfo/.github/assets/volo-feishu-dev-group.png"
                },
                ".github/assets/volo-feishu-user-group.png": {
                    "Path": "/Users/bytedance/golang/work/abcoder/tmp/metainfo/.github/assets/volo-feishu-user-group.png"
                },
                ".github/workflows/ci.yaml": {
                    "Path": "/Users/bytedance/golang/work/abcoder/tmp/metainfo/.github/workflows/ci.yaml"
                },
                ".github/workflows/dependency-review.yaml": {
                    "Path": "/Users/bytedance/golang/work/abcoder/tmp/metainfo/.github/workflows/dependency-review.yaml"
                },
                ".github/workflows/security.yaml": {
                    "Path": "/Users/bytedance/golang/work/abcoder/tmp/metainfo/.github/workflows/security.yaml"
                },
                ".gitignore": {
                    "Path": "/Users/bytedance/golang/work/abcoder/tmp/metainfo/.gitignore"
                },
                "CHANGELOG.md": {
                    "Path": "/Users/bytedance/golang/work/abcoder/tmp/metainfo/CHANGELOG.md"
                },
                "CODE_OF_CONDUCT.md": {
                    "Path": "/Users/bytedance/golang/work/abcoder/tmp/metainfo/CODE_OF_CONDUCT.md"
                },
                "CONTRIBUTING.md": {
                    "Path": "/Users/bytedance/golang/work/abcoder/tmp/metainfo/CONTRIBUTING.md"
                },
                "CREDITS.md": {
                    "Path": "/Users/bytedance/golang/work/abcoder/tmp/metainfo/CREDITS.md"
                },
                "Cargo.lock": {
                    "Path": "/Users/bytedance/golang/work/abcoder/tmp/metainfo/Cargo.lock"
                },
                "Cargo.toml": {
                    "Path": "/Users/bytedance/golang/work/abcoder/tmp/metainfo/Cargo.toml"
                },
                "LICENSE-APACHE": {
                    "Path": "/Users/bytedance/golang/work/abcoder/tmp/metainfo/LICENSE-APACHE"
                },
                "LICENSE-MIT": {
                    "Path": "/Users/bytedance/golang/work/abcoder/tmp/metainfo/LICENSE-MIT"
                },
                "README.md": {
                    "Path": "/Users/bytedance/golang/work/abcoder/tmp/metainfo/README.md"
                },
                "ROADMAP.md": {
                    "Path": "/Users/bytedance/golang/work/abcoder/tmp/metainfo/ROADMAP.md"
                },
                "SECURITY.md": {
                    "Path": "/Users/bytedance/golang/work/abcoder/tmp/metainfo/SECURITY.md"
                },
                "SUPPORT.md": {
                    "Path": "/Users/bytedance/golang/work/abcoder/tmp/metainfo/SUPPORT.md"
                },
                "rustfmt.toml": {
                    "Path": "/Users/bytedance/golang/work/abcoder/tmp/metainfo/rustfmt.toml"
                },
                "src/backward.rs": {
                    "Path": "src/backward.rs",
                    "Imports": [
                        {
                            "Path": "use ahash::AHashMap;"
                        },
                        {
                            "Path": "use faststr::FastStr;"
                        }
                    ]
                },
                "src/convert.rs": {
                    "Path": "src/convert.rs",
                    "Imports": [
                        {
                            "Path": "use faststr::FastStr;"
                        },
                        {
                            "Path": "use crate::{HTTP_PREFIX_BACKWARD, HTTP_PREFIX_PERSISTENT, HTTP_PREFIX_TRANSIENT, RPC_PREFIX_BACKWARD,RPC_PREFIX_PERSISTENT, RPC_PREFIX_TRANSIENT,};"
                        },
                        {
                            "Path": "use crate::convert::{Converter, HttpConverter, RpcConverter};"
                        }
                    ]
                },
                "src/faststr_map.rs": {
                    "Path": "src/faststr_map.rs",
                    "Imports": [
                        {
                            "Path": "use std::{any::TypeId, collections::hash_map::Entry};"
                        },
                        {
                            "Path": "use faststr::FastStr;"
                        },
                        {
                            "Path": "use rustc_hash::FxHashMapRand;"
                        }
                    ]
                },
                "src/forward.rs": {
                    "Path": "src/forward.rs",
                    "Imports": [
                        {
                            "Path": "use faststr::FastStr;"
                        },
                        {
                            "Path": "use crate::AHashMap;"
                        }
                    ]
                },
                "src/kv.rs": {
                    "Path": "src/kv.rs",
                    "Imports": [
                        {
                            "Path": "use ahash::AHashMap;"
                        },
                        {
                            "Path": "use faststr::FastStr;"
                        },
                        {
                            "Path": "use paste::paste;"
                        },
                        {
                            "Path": "use super::*;"
                        }
                    ]
                },
                "src/lib.rs": {
                    "Path": "src/lib.rs",
                    "Imports": [
                        {
                            "Path": "use std::{fmt, sync::Arc};"
                        },
                        {
                            "Path": "use ahash::AHashMap;"
                        },
                        {
                            "Path": "use convert::{Converter, HttpConverter, RpcConverter};"
                        },
                        {
                            "Path": "use faststr::FastStr;"
                        },
                        {
                            "Path": "use kv::Node;"
                        },
                        {
                            "Path": "use paste::paste;"
                        },
                        {
                            "Path": "use super::*;"
                        }
                    ]
                },
                "src/type_map.rs": {
                    "Path": "src/type_map.rs",
                    "Imports": [
                        {
                            "Path": "use std::{any::{Any, TypeId},collections::hash_map::Entry as MapEntry,marker::PhantomData,};"
                        },
                        {
                            "Path": "use rustc_hash::FxHashMapRand;"
                        }
                    ]
                }
            }
        },
        "rustc-hash@2.0.0": {
            "Language": "rust",
            "Version": "2.0.0",
            "Name": "rustc-hash",
            "Dir": "",
            "Packages": {
                "rustc-hash::random_state": {
                    "IsMain": false,
                    "IsTest": false,
                    "PkgPath": "rustc-hash::random_state",
                    "Functions": {
                        "BuildHasher\u003cFxRandomState\u003e.build_hasher": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "rustc-hash@2.0.0",
                            "PkgPath": "rustc-hash::random_state",
                            "Name": "BuildHasher\u003cFxRandomState\u003e.build_hasher",
                            "File": "random_state.rs",
                            "Line": 48,
                            "StartOffset": 1624,
                            "EndOffset": 1671,
                            "Content": "impl core::hash::BuildHasher for FxRandomState {\n    type Hasher = FxHasher;\n\n    fn build_hasher(\u0026self) -\u003e Self::Hasher {\n        FxHasher::with_seed(self.seed)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "rustc-hash@2.0.0",
                                    "PkgPath": "rustc-hash::random_state",
                                    "Name": "FxRandomState"
                                }
                            }
                        },
                        "Default\u003cFxRandomState\u003e::default": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "rustc-hash@2.0.0",
                            "PkgPath": "rustc-hash::random_state",
                            "Name": "Default\u003cFxRandomState\u003e::default",
                            "File": "random_state.rs",
                            "Line": 54,
                            "StartOffset": 1718,
                            "EndOffset": 1779,
                            "Content": "impl Default for FxRandomState {\n    fn default() -\u003e Self {\n        Self::new()\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "rustc-hash@2.0.0",
                                    "PkgPath": "rustc-hash::random_state",
                                    "Name": "FxRandomState"
                                }
                            }
                        },
                        "FxRandomState::new": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "rustc-hash@2.0.0",
                            "PkgPath": "rustc-hash::random_state",
                            "Name": "FxRandomState::new",
                            "File": "random_state.rs",
                            "Line": 21,
                            "StartOffset": 692,
                            "EndOffset": 1528,
                            "Content": "impl FxRandomState {\n    /// Constructs a new `FxRandomState` that is initialized with random seed.\n    /// Constructs a new `FxRandomState` that is initialized with random seed.\n    pub fn new() -\u003e FxRandomState {\n        use rand::Rng;\n        use std::{cell::Cell, thread_local};\n\n        // This mirrors what `std::collections::hash_map::RandomState` does, as of 2024-01-14.\n        //\n        // Basically\n        // 1. Cache result of the rng in a thread local, so repeatedly\n        //    creating maps is cheaper\n        // 2. Change the cached result on every creation, so maps created\n        //    on the same thread don't have the same iteration order\n        thread_local!(static SEED: Cell\u003cusize\u003e = {\n            Cell::new(rand::thread_rng().gen())\n        });\n\n        SEED.with(|seed| {\n            let s = seed.get();\n            seed.set(s.wrapping_add(1));\n            FxRandomState { seed: s }\n        })\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "rustc-hash@2.0.0",
                                    "PkgPath": "rustc-hash::random_state",
                                    "Name": "FxRandomState"
                                }
                            }
                        },
                        "random_states_are_different": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "rustc-hash@2.0.0",
                            "PkgPath": "rustc-hash::random_state",
                            "Name": "random_states_are_different",
                            "File": "random_state.rs",
                            "Line": 65,
                            "StartOffset": 1884,
                            "EndOffset": 2278,
                            "Content": "#[test]\n    fn random_states_are_different() {\n        let a = FxHashMapRand::\u003c\u0026str, u32\u003e::default();\n        let b = FxHashMapRand::\u003c\u0026str, u32\u003e::default();\n\n        // That's the whole point of them being random!\n        //\n        // N.B.: `FxRandomState` uses a thread-local set to a random value and then incremented,\n        //       which means that this is *guaranteed* to pass :\u003e\n        assert_ne!(a.hasher().seed, b.hasher().seed);\n    }"
                        },
                        "random_states_are_different_cross_thread": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "rustc-hash@2.0.0",
                            "PkgPath": "rustc-hash::random_state",
                            "Name": "random_states_are_different_cross_thread",
                            "File": "random_state.rs",
                            "Line": 77,
                            "StartOffset": 2337,
                            "EndOffset": 2984,
                            "Content": "#[test]\n    fn random_states_are_different_cross_thread() {\n        // This is similar to the test above, but uses two different threads, so they both get\n        // completely random, unrelated values.\n        //\n        // This means that this test is technically flaky, but the probability of it failing is\n        // `1 / 2.pow(bit_size_of::\u003cusize\u003e())`. Or 1/1.7e19 for 64 bit platforms or 1/4294967295\n        // for 32 bit platforms. I suppose this is acceptable.\n        let a = FxHashMapRand::\u003c\u0026str, u32\u003e::default();\n        let b = thread::spawn(|| FxHashMapRand::\u003c\u0026str, u32\u003e::default())\n            .join()\n            .unwrap();\n\n        assert_ne!(a.hasher().seed, b.hasher().seed);\n    }"
                        }
                    },
                    "Types": {
                        "FxHashMapRand": {
                            "Exported": false,
                            "TypeKind": "type-parameter",
                            "ModPath": "rustc-hash@2.0.0",
                            "PkgPath": "rustc-hash::random_state",
                            "Name": "FxHashMapRand",
                            "File": "random_state.rs",
                            "Line": 5,
                            "StartOffset": -1,
                            "EndOffset": 124,
                            "Content": "/// Type alias for a hashmap using the `fx` hash algorithm with [`FxRandomState`].\npub type FxHashMapRand\u003cK, V\u003e = HashMap\u003cK, V, FxRandomState\u003e;"
                        },
                        "FxHashSetRand": {
                            "Exported": false,
                            "TypeKind": "type-parameter",
                            "ModPath": "rustc-hash@2.0.0",
                            "PkgPath": "rustc-hash::random_state",
                            "Name": "FxHashSetRand",
                            "File": "random_state.rs",
                            "Line": 8,
                            "StartOffset": -1,
                            "EndOffset": 263,
                            "Content": "/// Type alias for a hashmap using the `fx` hash algorithm with [`FxRandomState`].\npub type FxHashSetRand\u003cV\u003e = HashSet\u003cV, FxRandomState\u003e;"
                        },
                        "FxRandomState": {
                            "Exported": false,
                            "TypeKind": "struct",
                            "ModPath": "rustc-hash@2.0.0",
                            "PkgPath": "rustc-hash::random_state",
                            "Name": "FxRandomState",
                            "File": "random_state.rs",
                            "Line": 11,
                            "StartOffset": -1,
                            "EndOffset": 669,
                            "Content": "/// `FxRandomState` is an alternative state for `HashMap` types.\n///\n/// A particular instance `FxRandomState` will create the same instances of\n/// [`Hasher`], but the hashers created by two different `FxRandomState`\n/// instances are unlikely to produce the same result for the same values.\npub struct FxRandomState {\n    seed: usize,\n}",
                            "Methods": {
                                "build_hasher": {
                                    "ModPath": "rustc-hash@2.0.0",
                                    "PkgPath": "rustc-hash::random_state",
                                    "Name": "BuildHasher\u003cFxRandomState\u003e.build_hasher"
                                }
                            }
                        },
                        "Hasher": {
                            "Exported": false,
                            "TypeKind": "type-parameter",
                            "ModPath": "rustc-hash@2.0.0",
                            "PkgPath": "rustc-hash::random_state",
                            "Name": "Hasher",
                            "File": "random_state.rs",
                            "Line": 46,
                            "StartOffset": 1547,
                            "EndOffset": 1570,
                            "Content": "type Hasher = FxHasher;"
                        }
                    },
                    "Vars": {
                        "a": {
                            "IsExported": false,
                            "IsConst": false,
                            "IsPointer": false,
                            "ModPath": "rustc-hash@2.0.0",
                            "PkgPath": "rustc-hash::random_state",
                            "Name": "a",
                            "File": "random_state.rs",
                            "Line": 85,
                            "StartOffset": 2753,
                            "EndOffset": 2799,
                            "Content": "let a = FxHashMapRand::\u003c\u0026str, u32\u003e::default();"
                        },
                        "b": {
                            "IsExported": false,
                            "IsConst": false,
                            "IsPointer": false,
                            "ModPath": "rustc-hash@2.0.0",
                            "PkgPath": "rustc-hash::random_state",
                            "Name": "b",
                            "File": "random_state.rs",
                            "Line": 86,
                            "StartOffset": 2816,
                            "EndOffset": 2957,
                            "Content": "let b = thread::spawn(|| FxHashMapRand::\u003c\u0026str, u32\u003e::default())\n            .join()\n            .unwrap();"
                        },
                        "s": {
                            "IsExported": false,
                            "IsConst": false,
                            "IsPointer": false,
                            "ModPath": "rustc-hash@2.0.0",
                            "PkgPath": "rustc-hash::random_state",
                            "Name": "s",
                            "File": "random_state.rs",
                            "Line": 38,
                            "StartOffset": 1397,
                            "EndOffset": 1416,
                            "Content": "let s = seed.get();"
                        }
                    }
                }
            },
            "Dependencies": {},
            "Files": {
                "random_state.rs": {
                    "Path": "random_state.rs"
                }
            }
        },
        "std": {
            "Language": "rust",
            "Version": "",
            "Name": "std",
            "Dir": "",
            "Packages": {
                "std::collections::hash::map": {
                    "IsMain": false,
                    "IsTest": false,
                    "PkgPath": "std::collections::hash::map",
                    "Functions": {
                        "and_modify": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "std",
                            "PkgPath": "std::collections::hash::map",
                            "Name": "and_modify",
                            "File": "map.rs",
                            "Line": 2900,
                            "StartOffset": 89035,
                            "EndOffset": 89045,
                            "Content": "and_modify"
                        },
                        "capacity": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "std",
                            "PkgPath": "std::collections::hash::map",
                            "Name": "capacity",
                            "File": "map.rs",
                            "Line": 349,
                            "StartOffset": 13061,
                            "EndOffset": 13069,
                            "Content": "capacity"
                        },
                        "clear": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "std",
                            "PkgPath": "std::collections::hash::map",
                            "Name": "clear",
                            "File": "map.rs",
                            "Line": 727,
                            "StartOffset": 24375,
                            "EndOffset": 24380,
                            "Content": "clear"
                        },
                        "contains_key": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "std",
                            "PkgPath": "std::collections::hash::map",
                            "Name": "contains_key",
                            "File": "map.rs",
                            "Line": 1125,
                            "StartOffset": 37028,
                            "EndOffset": 37040,
                            "Content": "contains_key"
                        },
                        "default": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "std",
                            "PkgPath": "std::collections::hash::map",
                            "Name": "default",
                            "File": "map.rs",
                            "Line": 1406,
                            "StartOffset": 46179,
                            "EndOffset": 46186,
                            "Content": "default"
                        },
                        "entry": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "std",
                            "PkgPath": "std::collections::hash::map",
                            "Name": "entry",
                            "File": "map.rs",
                            "Line": 872,
                            "StartOffset": 29067,
                            "EndOffset": 29072,
                            "Content": "entry"
                        },
                        "extend": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "std",
                            "PkgPath": "std::collections::hash::map",
                            "Name": "extend",
                            "File": "map.rs",
                            "Line": 3246,
                            "StartOffset": 98942,
                            "EndOffset": 98948,
                            "Content": "extend"
                        },
                        "get": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "std",
                            "PkgPath": "std::collections::hash::map",
                            "Name": "get",
                            "File": "map.rs",
                            "Line": 894,
                            "StartOffset": 29770,
                            "EndOffset": 29773,
                            "Content": "get"
                        },
                        "get_mut": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "std",
                            "PkgPath": "std::collections::hash::map",
                            "Name": "get_mut",
                            "File": "map.rs",
                            "Line": 1153,
                            "StartOffset": 37801,
                            "EndOffset": 37808,
                            "Content": "get_mut"
                        },
                        "insert": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "std",
                            "PkgPath": "std::collections::hash::map",
                            "Name": "insert",
                            "File": "map.rs",
                            "Line": 1189,
                            "StartOffset": 38976,
                            "EndOffset": 38982,
                            "Content": "insert"
                        },
                        "is_empty": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "std",
                            "PkgPath": "std::collections::hash::map",
                            "Name": "is_empty",
                            "File": "map.rs",
                            "Line": 605,
                            "StartOffset": 20327,
                            "EndOffset": 20335,
                            "Content": "is_empty"
                        },
                        "iter": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "std",
                            "PkgPath": "std::collections::hash::map",
                            "Name": "iter",
                            "File": "map.rs",
                            "Line": 535,
                            "StartOffset": 18496,
                            "EndOffset": 18500,
                            "Content": "iter"
                        },
                        "len": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "std",
                            "PkgPath": "std::collections::hash::map",
                            "Name": "len",
                            "File": "map.rs",
                            "Line": 587,
                            "StartOffset": 19912,
                            "EndOffset": 19915,
                            "Content": "len"
                        },
                        "or_insert_with": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "std",
                            "PkgPath": "std::collections::hash::map",
                            "Name": "or_insert_with",
                            "File": "map.rs",
                            "Line": 2822,
                            "StartOffset": 86535,
                            "EndOffset": 86549,
                            "Content": "or_insert_with"
                        },
                        "or_insert_with_key": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "std",
                            "PkgPath": "std::collections::hash::map",
                            "Name": "or_insert_with_key",
                            "File": "map.rs",
                            "Line": 2849,
                            "StartOffset": 87569,
                            "EndOffset": 87587,
                            "Content": "or_insert_with_key"
                        },
                        "remove": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "std",
                            "PkgPath": "std::collections::hash::map",
                            "Name": "remove",
                            "File": "map.rs",
                            "Line": 1244,
                            "StartOffset": 40814,
                            "EndOffset": 40820,
                            "Content": "remove"
                        },
                        "with_capacity_and_hasher": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "std",
                            "PkgPath": "std::collections::hash::map",
                            "Name": "with_capacity_and_hasher",
                            "File": "map.rs",
                            "Line": 331,
                            "StartOffset": 12364,
                            "EndOffset": 12388,
                            "Content": "with_capacity_and_hasher"
                        }
                    },
                    "Types": {
                        "Entry": {
                            "Exported": false,
                            "TypeKind": "enum",
                            "ModPath": "std",
                            "PkgPath": "std::collections::hash::map",
                            "Name": "Entry",
                            "File": "map.rs",
                            "Line": 2239,
                            "StartOffset": 70485,
                            "EndOffset": 70490,
                            "Content": "Entry"
                        },
                        "Iter": {
                            "Exported": false,
                            "TypeKind": "struct",
                            "ModPath": "std",
                            "PkgPath": "std::collections::hash::map",
                            "Name": "Iter",
                            "File": "map.rs",
                            "Line": 1486,
                            "StartOffset": 48579,
                            "EndOffset": 48583,
                            "Content": "Iter"
                        }
                    },
                    "Vars": {}
                },
                "std::macros": {
                    "IsMain": false,
                    "IsTest": false,
                    "PkgPath": "std::macros",
                    "Functions": {
                        "println": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "std",
                            "PkgPath": "std::macros",
                            "Name": "println",
                            "File": "macros.rs",
                            "Line": 138,
                            "StartOffset": 4259,
                            "EndOffset": 4266,
                            "Content": "println"
                        }
                    },
                    "Types": {},
                    "Vars": {}
                }
            },
            "Dependencies": {},
            "Files": {
                ".github/CODEOWNERS": {
                    "Path": "/Users/bytedance/golang/work/abcoder/tmp/metainfo/.github/CODEOWNERS"
                },
                ".github/ISSUE_TEMPLATE/bug_report.md": {
                    "Path": "/Users/bytedance/golang/work/abcoder/tmp/metainfo/.github/ISSUE_TEMPLATE/bug_report.md"
                },
                ".github/ISSUE_TEMPLATE/feature_request.md": {
                    "Path": "/Users/bytedance/golang/work/abcoder/tmp/metainfo/.github/ISSUE_TEMPLATE/feature_request.md"
                },
                ".github/PULL_REQUEST_TEMPLATE.md": {
                    "Path": "/Users/bytedance/golang/work/abcoder/tmp/metainfo/.github/PULL_REQUEST_TEMPLATE.md"
                },
                ".github/assets/volo-feishu-dev-group.png": {
                    "Path": "/Users/bytedance/golang/work/abcoder/tmp/metainfo/.github/assets/volo-feishu-dev-group.png"
                },
                ".github/assets/volo-feishu-user-group.png": {
                    "Path": "/Users/bytedance/golang/work/abcoder/tmp/metainfo/.github/assets/volo-feishu-user-group.png"
                },
                ".github/workflows/ci.yaml": {
                    "Path": "/Users/bytedance/golang/work/abcoder/tmp/metainfo/.github/workflows/ci.yaml"
                },
                ".github/workflows/dependency-review.yaml": {
                    "Path": "/Users/bytedance/golang/work/abcoder/tmp/metainfo/.github/workflows/dependency-review.yaml"
                },
                ".github/workflows/security.yaml": {
                    "Path": "/Users/bytedance/golang/work/abcoder/tmp/metainfo/.github/workflows/security.yaml"
                },
                ".gitignore": {
                    "Path": "/Users/bytedance/golang/work/abcoder/tmp/metainfo/.gitignore"
                },
                "CHANGELOG.md": {
                    "Path": "/Users/bytedance/golang/work/abcoder/tmp/metainfo/CHANGELOG.md"
                },
                "CODE_OF_CONDUCT.md": {
                    "Path": "/Users/bytedance/golang/work/abcoder/tmp/metainfo/CODE_OF_CONDUCT.md"
                },
                "CONTRIBUTING.md": {
                    "Path": "/Users/bytedance/golang/work/abcoder/tmp/metainfo/CONTRIBUTING.md"
                },
                "CREDITS.md": {
                    "Path": "/Users/bytedance/golang/work/abcoder/tmp/metainfo/CREDITS.md"
                },
                "Cargo.lock": {
                    "Path": "/Users/bytedance/golang/work/abcoder/tmp/metainfo/Cargo.lock"
                },
                "Cargo.toml": {
                    "Path": "/Users/bytedance/golang/work/abcoder/tmp/metainfo/Cargo.toml"
                },
                "LICENSE-APACHE": {
                    "Path": "/Users/bytedance/golang/work/abcoder/tmp/metainfo/LICENSE-APACHE"
                },
                "LICENSE-MIT": {
                    "Path": "/Users/bytedance/golang/work/abcoder/tmp/metainfo/LICENSE-MIT"
                },
                "README.md": {
                    "Path": "/Users/bytedance/golang/work/abcoder/tmp/metainfo/README.md"
                },
                "ROADMAP.md": {
                    "Path": "/Users/bytedance/golang/work/abcoder/tmp/metainfo/ROADMAP.md"
                },
                "SECURITY.md": {
                    "Path": "/Users/bytedance/golang/work/abcoder/tmp/metainfo/SECURITY.md"
                },
                "SUPPORT.md": {
                    "Path": "/Users/bytedance/golang/work/abcoder/tmp/metainfo/SUPPORT.md"
                },
                "macros.rs": {
                    "Path": "macros.rs"
                },
                "map.rs": {
                    "Path": "map.rs"
                },
                "rustfmt.toml": {
                    "Path": "/Users/bytedance/golang/work/abcoder/tmp/metainfo/rustfmt.toml"
                },
                "src/backward.rs": {
                    "Path": "/Users/bytedance/golang/work/abcoder/tmp/metainfo/src/backward.rs",
                    "Imports": [
                        {
                            "Path": "use ahash::AHashMap;"
                        },
                        {
                            "Path": "use faststr::FastStr;"
                        }
                    ]
                },
                "src/convert.rs": {
                    "Path": "/Users/bytedance/golang/work/abcoder/tmp/metainfo/src/convert.rs",
                    "Imports": [
                        {
                            "Path": "use faststr::FastStr;"
                        },
                        {
                            "Path": "use crate::{HTTP_PREFIX_BACKWARD, HTTP_PREFIX_PERSISTENT, HTTP_PREFIX_TRANSIENT, RPC_PREFIX_BACKWARD,RPC_PREFIX_PERSISTENT, RPC_PREFIX_TRANSIENT,};"
                        },
                        {
                            "Path": "use crate::convert::{Converter, HttpConverter, RpcConverter};"
                        }
                    ]
                },
                "src/faststr_map.rs": {
                    "Path": "/Users/bytedance/golang/work/abcoder/tmp/metainfo/src/faststr_map.rs",
                    "Imports": [
                        {
                            "Path": "use std::{any::TypeId, collections::hash_map::Entry};"
                        },
                        {
                            "Path": "use faststr::FastStr;"
                        },
                        {
                            "Path": "use rustc_hash::FxHashMapRand;"
                        }
                    ]
                },
                "src/forward.rs": {
                    "Path": "/Users/bytedance/golang/work/abcoder/tmp/metainfo/src/forward.rs",
                    "Imports": [
                        {
                            "Path": "use faststr::FastStr;"
                        },
                        {
                            "Path": "use crate::AHashMap;"
                        }
                    ]
                },
                "src/kv.rs": {
                    "Path": "/Users/bytedance/golang/work/abcoder/tmp/metainfo/src/kv.rs",
                    "Imports": [
                        {
                            "Path": "use ahash::AHashMap;"
                        },
                        {
                            "Path": "use faststr::FastStr;"
                        },
                        {
                            "Path": "use paste::paste;"
                        },
                        {
                            "Path": "use super::*;"
                        }
                    ]
                },
                "src/lib.rs": {
                    "Path": "/Users/bytedance/golang/work/abcoder/tmp/metainfo/src/lib.rs",
                    "Imports": [
                        {
                            "Path": "use std::{fmt, sync::Arc};"
                        },
                        {
                            "Path": "use ahash::AHashMap;"
                        },
                        {
                            "Path": "use convert::{Converter, HttpConverter, RpcConverter};"
                        },
                        {
                            "Path": "use faststr::FastStr;"
                        },
                        {
                            "Path": "use kv::Node;"
                        },
                        {
                            "Path": "use paste::paste;"
                        },
                        {
                            "Path": "use super::*;"
                        }
                    ]
                },
                "src/type_map.rs": {
                    "Path": "/Users/bytedance/golang/work/abcoder/tmp/metainfo/src/type_map.rs",
                    "Imports": [
                        {
                            "Path": "use std::{any::{Any, TypeId},collections::hash_map::Entry as MapEntry,marker::PhantomData,};"
                        },
                        {
                            "Path": "use rustc_hash::FxHashMapRand;"
                        }
                    ]
                }
            }
        }
    },
    "Graph": {
        "?alloc::boxed#Box": {
            "ModPath": "",
            "PkgPath": "alloc::boxed",
            "Name": "Box",
            "Type": "TYPE",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry.or_insert",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry.or_insert_with",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry.or_insert_with_key",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.insert",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "AnyObject",
                    "Line": 0
                }
            ]
        },
        "?alloc::boxed#new": {
            "ModPath": "",
            "PkgPath": "alloc::boxed",
            "Name": "new",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry.or_insert",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry.or_insert_with",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry.or_insert_with_key",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.insert",
                    "Line": 2
                }
            ]
        },
        "?alloc::boxed::convert#downcast": {
            "ModPath": "",
            "PkgPath": "alloc::boxed::convert",
            "Name": "downcast",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.remove",
                    "Line": 4
                }
            ]
        },
        "?alloc::str#to_owned": {
            "ModPath": "",
            "PkgPath": "alloc::str",
            "Name": "to_owned",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "RpcConverter.remove_prefix",
                    "Line": 3
                }
            ]
        },
        "?alloc::string#String": {
            "ModPath": "",
            "PkgPath": "alloc::string",
            "Name": "String",
            "Type": "TYPE",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.to_rpc_format",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.to_rpc_format_string",
                    "Line": 0
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.to_http_format_string",
                    "Line": 0
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "RpcConverter.add_prefix",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.remove_prefix_and_to_rpc_format",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.to_http_format",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.add_prefix_and_to_http_format",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "mut buf",
                    "Line": 0
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "mut res",
                    "Line": 0
                }
            ]
        },
        "?alloc::string#push": {
            "ModPath": "",
            "PkgPath": "alloc::string",
            "Name": "push",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.to_rpc_format",
                    "Line": 9
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.to_http_format",
                    "Line": 9
                }
            ]
        },
        "?alloc::string#push_str": {
            "ModPath": "",
            "PkgPath": "alloc::string",
            "Name": "push_str",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "RpcConverter.add_prefix",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.add_prefix_and_to_http_format",
                    "Line": 3
                }
            ]
        },
        "?alloc::string#with_capacity": {
            "ModPath": "",
            "PkgPath": "alloc::string",
            "Name": "with_capacity",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.to_rpc_format_string",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.to_http_format_string",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "RpcConverter.add_prefix",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.remove_prefix_and_to_rpc_format",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.add_prefix_and_to_http_format",
                    "Line": 2
                }
            ]
        },
        "?alloc::sync#Arc": {
            "ModPath": "",
            "PkgPath": "alloc::sync",
            "Name": "Arc",
            "Type": "TYPE",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo::from",
                    "Line": 6
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "test_remove",
                    "Line": 12
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "test_integers",
                    "Line": 25
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo::from_node",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.derive",
                    "Line": 21
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo",
                    "Line": 31
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "mi",
                    "Line": 0
                }
            ]
        },
        "?alloc::sync#as_ref": {
            "ModPath": "",
            "PkgPath": "alloc::sync",
            "Name": "as_ref",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.contains_faststr",
                    "Line": 13
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_faststr",
                    "Line": 9
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.contains_string",
                    "Line": 13
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.contains",
                    "Line": 13
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_string",
                    "Line": 9
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get",
                    "Line": 6
                }
            ]
        },
        "?alloc::sync#clone": {
            "ModPath": "",
            "PkgPath": "alloc::sync",
            "Name": "clone",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.derive",
                    "Line": 23
                }
            ]
        },
        "?alloc::sync#new": {
            "ModPath": "",
            "PkgPath": "alloc::sync",
            "Name": "new",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "test_remove",
                    "Line": 12
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "test_integers",
                    "Line": 25
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.derive",
                    "Line": 21
                }
            ]
        },
        "?core::any#Any": {
            "ModPath": "",
            "PkgPath": "core::any",
            "Name": "Any",
            "Type": "TYPE",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "AnyObject",
                    "Line": 0
                }
            ]
        },
        "?core::any#TypeId": {
            "ModPath": "",
            "PkgPath": "core::any",
            "Name": "TypeId",
            "Type": "TYPE",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.iter",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.get",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.remove",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.entry",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.insert",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.contains",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.get_mut",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.entry",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.insert",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.contains",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.remove",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.get",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.get_mut",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap",
                    "Line": 5
                }
            ]
        },
        "?core::any#downcast_mut": {
            "ModPath": "",
            "PkgPath": "core::any",
            "Name": "downcast_mut",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry.or_insert",
                    "Line": 6
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry.or_insert_with",
                    "Line": 6
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry.or_insert_with_key",
                    "Line": 6
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry.and_modify",
                    "Line": 7
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.get_mut",
                    "Line": 4
                }
            ]
        },
        "?core::any#downcast_ref": {
            "ModPath": "",
            "PkgPath": "core::any",
            "Name": "downcast_ref",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.get",
                    "Line": 4
                }
            ]
        },
        "?core::any#of": {
            "ModPath": "",
            "PkgPath": "core::any",
            "Name": "of",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.get",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.remove",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.entry",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.insert",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.contains",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.get_mut",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.entry",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.insert",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.contains",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.remove",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.get",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.get_mut",
                    "Line": 2
                }
            ]
        },
        "?core::char::methods#to_ascii_lowercase": {
            "ModPath": "",
            "PkgPath": "core::char::methods",
            "Name": "to_ascii_lowercase",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.to_http_format",
                    "Line": 5
                }
            ]
        },
        "?core::char::methods#to_ascii_uppercase": {
            "ModPath": "",
            "PkgPath": "core::char::methods",
            "Name": "to_ascii_uppercase",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.to_rpc_format",
                    "Line": 5
                }
            ]
        },
        "?core::convert#AsRef": {
            "ModPath": "",
            "PkgPath": "core::convert",
            "Name": "AsRef",
            "Type": "TYPE",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::backward",
                    "Name": "Backward",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::backward",
                    "Name": "Backward",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::backward",
                    "Name": "Backward",
                    "Line": 14
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::backward",
                    "Name": "Backward",
                    "Line": 20
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::backward",
                    "Name": "Backward",
                    "Line": 26
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::backward",
                    "Name": "Backward",
                    "Line": 27
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 20
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 25
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 31
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 36
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 42
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 43
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 44
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.remove_string",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Backward\u003cMetaInfo\u003e.strip_rpc_prefix_and_set_backward_downstream",
                    "Line": 0
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.contains_string",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_string",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward\u003cMetaInfo\u003e.strip_rpc_prefix_and_set_upstream",
                    "Line": 0
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward\u003cMetaInfo\u003e.strip_http_prefix_and_set_upstream",
                    "Line": 0
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward\u003cMetaInfo\u003e.strip_http_prefix_and_set_persistent",
                    "Line": 0
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward\u003cMetaInfo\u003e.strip_rpc_prefix_and_set_persistent",
                    "Line": 0
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Backward\u003cMetaInfo\u003e.strip_http_prefix_and_set_backward_downstream",
                    "Line": 0
                }
            ]
        },
        "?core::convert#Into": {
            "ModPath": "",
            "PkgPath": "core::convert",
            "Name": "Into",
            "Type": "TYPE",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::backward",
                    "Name": "Backward",
                    "Line": 11
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::backward",
                    "Name": "Backward",
                    "Line": 11
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::backward",
                    "Name": "Backward",
                    "Line": 12
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::backward",
                    "Name": "Backward",
                    "Line": 12
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::backward",
                    "Name": "Backward",
                    "Line": 14
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::backward",
                    "Name": "Backward",
                    "Line": 20
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 16
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 16
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 17
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 17
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 18
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 18
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 20
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 25
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 31
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 36
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Backward\u003cMetaInfo\u003e.strip_rpc_prefix_and_set_backward_downstream",
                    "Line": 0
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward\u003cMetaInfo\u003e.strip_rpc_prefix_and_set_upstream",
                    "Line": 0
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward\u003cMetaInfo\u003e.strip_http_prefix_and_set_upstream",
                    "Line": 0
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward\u003cMetaInfo\u003e.strip_http_prefix_and_set_persistent",
                    "Line": 0
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward\u003cMetaInfo\u003e.strip_rpc_prefix_and_set_persistent",
                    "Line": 0
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Backward\u003cMetaInfo\u003e.strip_http_prefix_and_set_backward_downstream",
                    "Line": 0
                }
            ]
        },
        "?core::convert#as_ref": {
            "ModPath": "",
            "PkgPath": "core::convert",
            "Name": "as_ref",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.remove_string",
                    "Line": 6
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Backward\u003cMetaInfo\u003e.strip_rpc_prefix_and_set_backward_downstream",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.contains_string",
                    "Line": 6
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_string",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward\u003cMetaInfo\u003e.strip_rpc_prefix_and_set_upstream",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward\u003cMetaInfo\u003e.strip_http_prefix_and_set_upstream",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward\u003cMetaInfo\u003e.strip_http_prefix_and_set_persistent",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward\u003cMetaInfo\u003e.strip_rpc_prefix_and_set_persistent",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Backward\u003cMetaInfo\u003e.strip_http_prefix_and_set_backward_downstream",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "key",
                    "Line": 0
                }
            ]
        },
        "?core::default#Default": {
            "ModPath": "",
            "PkgPath": "core::default",
            "Name": "Default",
            "Type": "TYPE",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo::new",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap::with_capacity",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry.or_default",
                    "Line": 4
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap::with_capacity",
                    "Line": 3
                }
            ]
        },
        "?core::default#default": {
            "ModPath": "",
            "PkgPath": "core::default",
            "Name": "default",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry.or_default",
                    "Line": 6
                }
            ]
        },
        "?core::fmt#Formatter": {
            "ModPath": "",
            "PkgPath": "core::fmt",
            "Name": "Formatter",
            "Type": "TYPE",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Debug\u003cMetaInfo\u003e.fmt",
                    "Line": 0
                }
            ]
        },
        "?core::fmt#Result": {
            "ModPath": "",
            "PkgPath": "core::fmt",
            "Name": "Result",
            "Type": "TYPE",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Debug\u003cMetaInfo\u003e.fmt",
                    "Line": 0
                }
            ]
        },
        "?core::fmt#debug_struct": {
            "ModPath": "",
            "PkgPath": "core::fmt",
            "Name": "debug_struct",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Debug\u003cMetaInfo\u003e.fmt",
                    "Line": 1
                }
            ]
        },
        "?core::fmt::builders#finish": {
            "ModPath": "",
            "PkgPath": "core::fmt::builders",
            "Name": "finish",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Debug\u003cMetaInfo\u003e.fmt",
                    "Line": 1
                }
            ]
        },
        "?core::iter::traits::iterator#map": {
            "ModPath": "",
            "PkgPath": "core::iter::traits::iterator",
            "Name": "map",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_all_backword_transients_with_prefix",
                    "Line": 18
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_all_persistents_and_transients",
                    "Line": 22
                }
            ]
        },
        "?core::macros#assert": {
            "ModPath": "",
            "PkgPath": "core::macros",
            "Name": "assert",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "test_metainfo",
                    "Line": 13
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "test_clear",
                    "Line": 8
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "test_remove",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "test_composition",
                    "Line": 22
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "test_integers",
                    "Line": 14
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "test_extend",
                    "Line": 20
                }
            ]
        },
        "?core::macros#assert_eq": {
            "ModPath": "",
            "PkgPath": "core::macros",
            "Name": "assert_eq",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "check_rpc",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "check",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "check_http",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "add_rpc_prefix",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "add_http_prefix",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "format_bidirect_convert",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "http_format_convert_test",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "remove_http_prefix",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "rpc_prefix_bidirect",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "http_prefix_bidirect",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "remove_rpc_prefix",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "rpc_format_convert_test",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "test_metainfo",
                    "Line": 10
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "rpc_forward_test",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "test_clear",
                    "Line": 19
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "http_forward_test",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "test_composition",
                    "Line": 23
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "test_extend",
                    "Line": 17
                }
            ]
        },
        "?core::marker#PhantomData": {
            "ModPath": "",
            "PkgPath": "core::marker",
            "Name": "PhantomData",
            "Type": "TYPE",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.entry",
                    "Line": 4
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry.and_modify",
                    "Line": 9
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry",
                    "Line": 2
                }
            ]
        },
        "?core::marker#Send": {
            "ModPath": "",
            "PkgPath": "core::marker",
            "Name": "Send",
            "Type": "TYPE",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.insert",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.insert_faststr",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry.or_insert",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry.or_insert_with",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry.or_insert_with_key",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry.or_default",
                    "Line": 4
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry.and_modify",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.insert",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "AnyObject",
                    "Line": 0
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.insert",
                    "Line": 1
                }
            ]
        },
        "?core::marker#Sync": {
            "ModPath": "",
            "PkgPath": "core::marker",
            "Name": "Sync",
            "Type": "TYPE",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.insert",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.insert_faststr",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry.or_insert",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry.or_insert_with",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry.or_insert_with_key",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry.or_default",
                    "Line": 4
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry.and_modify",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.insert",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "AnyObject",
                    "Line": 0
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.insert",
                    "Line": 1
                }
            ]
        },
        "?core::ops::function#FnOnce": {
            "ModPath": "",
            "PkgPath": "core::ops::function",
            "Name": "FnOnce",
            "Type": "TYPE",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry.or_insert_with",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry.or_insert_with_key",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry.and_modify",
                    "Line": 1
                }
            ]
        },
        "?core::option#Option": {
            "ModPath": "",
            "PkgPath": "core::option",
            "Name": "Option",
            "Type": "TYPE",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "Node",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "Node",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "Node",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::backward",
                    "Name": "Backward",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::backward",
                    "Name": "Backward",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::backward",
                    "Name": "Backward",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::backward",
                    "Name": "Backward",
                    "Line": 6
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::backward",
                    "Name": "Backward",
                    "Line": 8
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::backward",
                    "Name": "Backward",
                    "Line": 9
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::backward",
                    "Name": "Backward",
                    "Line": 26
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::backward",
                    "Name": "Backward",
                    "Line": 27
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 6
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 7
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 11
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 14
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 42
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 43
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 44
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cRpcConverter\u003e.remove_persistent_prefix",
                    "Line": 0
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "RpcConverter.remove_prefix",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cHttpConverter\u003e.remove_transient_prefix",
                    "Line": 0
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cRpcConverter\u003e.remove_backward_prefix",
                    "Line": 0
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.remove_prefix_and_to_rpc_format",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cHttpConverter\u003e.remove_backward_prefix",
                    "Line": 0
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cHttpConverter\u003e.remove_persistent_prefix",
                    "Line": 0
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cRpcConverter\u003e.remove_transient_prefix",
                    "Line": 0
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter",
                    "Line": 6
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter",
                    "Line": 7
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter",
                    "Line": 8
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.remove_string",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_all_backword_transients_with_prefix",
                    "Line": 4
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.remove_faststr",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.remove",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_faststr",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward\u003cMetaInfo\u003e.get_all_upstreams",
                    "Line": 0
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_string",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward\u003cMetaInfo\u003e.get_all_persistents_and_transients_with_rpc_prefix",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo::from_node",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward\u003cMetaInfo\u003e.get_all_persistents_and_transients_with_http_prefix",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Backward\u003cMetaInfo\u003e.get_all_backward_downstreams",
                    "Line": 0
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo",
                    "Line": 31
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo",
                    "Line": 32
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo",
                    "Line": 33
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo",
                    "Line": 34
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo",
                    "Line": 38
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo",
                    "Line": 39
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.get",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.remove",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.get_mut",
                    "Line": 1
                }
            ]
        },
        "?core::option#and_then": {
            "ModPath": "",
            "PkgPath": "core::option",
            "Name": "and_then",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.remove_string",
                    "Line": 6
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.remove_faststr",
                    "Line": 6
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.remove",
                    "Line": 4
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_faststr",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_string",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.get",
                    "Line": 4
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.remove",
                    "Line": 4
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.get_mut",
                    "Line": 4
                }
            ]
        },
        "?core::option#as_deref": {
            "ModPath": "",
            "PkgPath": "core::option",
            "Name": "as_deref",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "remove_http_prefix",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "rpc_prefix_bidirect",
                    "Line": 6
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "http_prefix_bidirect",
                    "Line": 6
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "remove_rpc_prefix",
                    "Line": 5
                }
            ]
        },
        "?core::option#as_mut": {
            "ModPath": "",
            "PkgPath": "core::option",
            "Name": "as_mut",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "Node.clear",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "Node.extend",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.clear",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.remove_string",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.remove_faststr",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.remove",
                    "Line": 4
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.extend",
                    "Line": 26
                }
            ]
        },
        "?core::option#as_ref": {
            "ModPath": "",
            "PkgPath": "core::option",
            "Name": "as_ref",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.contains_faststr",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_all_backword_transients_with_prefix",
                    "Line": 8
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_faststr",
                    "Line": 4
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.contains_string",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.contains",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward\u003cMetaInfo\u003e.get_all_upstreams",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward\u003cMetaInfo\u003e.get_all_transients",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_string",
                    "Line": 4
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward\u003cMetaInfo\u003e.get_all_persistents",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_all_persistents_and_transients",
                    "Line": 8
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Backward\u003cMetaInfo\u003e.get_all_backward_transients",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Backward\u003cMetaInfo\u003e.get_all_backward_downstreams",
                    "Line": 1
                }
            ]
        },
        "?core::option#clone": {
            "ModPath": "",
            "PkgPath": "core::option",
            "Name": "clone",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo::from",
                    "Line": 7
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.derive",
                    "Line": 10
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "forward_node",
                    "Line": 0
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "backward_node",
                    "Line": 0
                }
            ]
        },
        "?core::option#get_or_insert_with": {
            "ModPath": "",
            "PkgPath": "core::option",
            "Name": "get_or_insert_with",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.insert",
                    "Line": 4
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.extend",
                    "Line": 6
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.insert_string",
                    "Line": 4
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.insert_faststr",
                    "Line": 4
                }
            ]
        },
        "?core::option#is_none": {
            "ModPath": "",
            "PkgPath": "core::option",
            "Name": "is_none",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "Node.extend",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.ensure_backward_node",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "test_metainfo",
                    "Line": 13
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.extend",
                    "Line": 23
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "test_remove",
                    "Line": 8
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.derive",
                    "Line": 7
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.ensure_forward_node",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "test_extend",
                    "Line": 20
                }
            ]
        },
        "?core::option#is_some": {
            "ModPath": "",
            "PkgPath": "core::option",
            "Name": "is_some",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "test_remove",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "test_integers",
                    "Line": 14
                }
            ]
        },
        "?core::option#map": {
            "ModPath": "",
            "PkgPath": "core::option",
            "Name": "map",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.contains_faststr",
                    "Line": 6
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.contains_string",
                    "Line": 6
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.contains",
                    "Line": 6
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_all_persistents_and_transients",
                    "Line": 12
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.remove",
                    "Line": 4
                }
            ]
        },
        "?core::option#or_else": {
            "ModPath": "",
            "PkgPath": "core::option",
            "Name": "or_else",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_faststr",
                    "Line": 6
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_string",
                    "Line": 6
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get",
                    "Line": 3
                }
            ]
        },
        "?core::option#take": {
            "ModPath": "",
            "PkgPath": "core::option",
            "Name": "take",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.derive",
                    "Line": 19
                }
            ]
        },
        "?core::option#unwrap": {
            "ModPath": "",
            "PkgPath": "core::option",
            "Name": "unwrap",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "Node.extend",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "rpc_prefix_bidirect",
                    "Line": 27
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "http_prefix_bidirect",
                    "Line": 27
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "rpc_forward_test",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.extend",
                    "Line": 26
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "test_clear",
                    "Line": 19
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "http_forward_test",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "test_composition",
                    "Line": 22
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry.or_insert",
                    "Line": 6
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry.or_insert_with",
                    "Line": 6
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry.or_insert_with_key",
                    "Line": 6
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry.and_modify",
                    "Line": 7
                }
            ]
        },
        "?core::option#unwrap_or": {
            "ModPath": "",
            "PkgPath": "core::option",
            "Name": "unwrap_or",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.contains_faststr",
                    "Line": 7
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.contains_string",
                    "Line": 7
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.contains",
                    "Line": 7
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_all_persistents_and_transients",
                    "Line": 12
                }
            ]
        },
        "?core::result#ok": {
            "ModPath": "",
            "PkgPath": "core::result",
            "Name": "ok",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.remove",
                    "Line": 4
                }
            ]
        },
        "?core::str#chars": {
            "ModPath": "",
            "PkgPath": "core::str",
            "Name": "chars",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.to_rpc_format",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.to_http_format",
                    "Line": 3
                }
            ]
        },
        "?core::str#len": {
            "ModPath": "",
            "PkgPath": "core::str",
            "Name": "len",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.to_rpc_format_string",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.to_http_format_string",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "RpcConverter.add_prefix",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.remove_prefix_and_to_rpc_format",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.add_prefix_and_to_http_format",
                    "Line": 2
                }
            ]
        },
        "?core::str#strip_prefix": {
            "ModPath": "",
            "PkgPath": "core::str",
            "Name": "strip_prefix",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "RpcConverter.remove_prefix",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.remove_prefix_and_to_rpc_format",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "key",
                    "Line": 0
                }
            ]
        },
        "ahash@0.8.11?ahash::hash_map#AHashMap": {
            "ModPath": "ahash@0.8.11",
            "PkgPath": "ahash::hash_map",
            "Name": "AHashMap",
            "Type": "TYPE",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "Node",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "Node",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "Node",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::backward",
                    "Name": "Backward",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::backward",
                    "Name": "Backward",
                    "Line": 6
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::backward",
                    "Name": "Backward",
                    "Line": 8
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::backward",
                    "Name": "Backward",
                    "Line": 9
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 6
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 7
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 11
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 14
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_all_backword_transients_with_prefix",
                    "Line": 4
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.extend",
                    "Line": 12
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.insert_string",
                    "Line": 4
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward\u003cMetaInfo\u003e.get_all_upstreams",
                    "Line": 0
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward\u003cMetaInfo\u003e.get_all_persistents_and_transients_with_rpc_prefix",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_all_persistents_and_transients",
                    "Line": 17
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward\u003cMetaInfo\u003e.get_all_persistents_and_transients_with_http_prefix",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Backward\u003cMetaInfo\u003e.get_all_backward_downstreams",
                    "Line": 0
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo",
                    "Line": 33
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "mut map",
                    "Line": 0
                }
            ]
        },
        "ahash@0.8.11?ahash::hash_map#AHashMap.get": {
            "ModPath": "ahash@0.8.11",
            "PkgPath": "ahash::hash_map",
            "Name": "AHashMap.get",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "rpc_forward_test",
                    "Line": 10
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_string",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "http_forward_test",
                    "Line": 10
                }
            ]
        },
        "ahash@0.8.11?ahash::hash_map#AHashMap.insert": {
            "ModPath": "ahash@0.8.11",
            "PkgPath": "ahash::hash_map",
            "Name": "AHashMap.insert",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.insert_string",
                    "Line": 5
                }
            ]
        },
        "ahash@0.8.11?ahash::hash_map#AHashMap.remove": {
            "ModPath": "ahash@0.8.11",
            "PkgPath": "ahash::hash_map",
            "Name": "AHashMap.remove",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.remove_string",
                    "Line": 6
                }
            ]
        },
        "ahash@0.8.11?ahash::hash_map#AHashMap::with_capacity": {
            "ModPath": "ahash@0.8.11",
            "PkgPath": "ahash::hash_map",
            "Name": "AHashMap::with_capacity",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_all_backword_transients_with_prefix",
                    "Line": 15
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.extend",
                    "Line": 12
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.insert_string",
                    "Line": 4
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_all_persistents_and_transients",
                    "Line": 17
                }
            ]
        },
        "ahash@0.8.11?ahash::hash_map#Extend\u003cAHashMap\u003e.extend": {
            "ModPath": "ahash@0.8.11",
            "PkgPath": "ahash::hash_map",
            "Name": "Extend\u003cAHashMap\u003e.extend",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "Node.extend",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_all_backword_transients_with_prefix",
                    "Line": 16
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.extend",
                    "Line": 13
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_all_persistents_and_transients",
                    "Line": 19
                }
            ]
        },
        "faststr@0.2.19?faststr#FastStr": {
            "ModPath": "faststr@0.2.19",
            "PkgPath": "faststr",
            "Name": "FastStr",
            "Type": "TYPE",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "Node",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "Node",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "Node",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "Node",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "Node",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "Node",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::backward",
                    "Name": "Backward",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::backward",
                    "Name": "Backward",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::backward",
                    "Name": "Backward",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::backward",
                    "Name": "Backward",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::backward",
                    "Name": "Backward",
                    "Line": 6
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::backward",
                    "Name": "Backward",
                    "Line": 6
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::backward",
                    "Name": "Backward",
                    "Line": 8
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::backward",
                    "Name": "Backward",
                    "Line": 8
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::backward",
                    "Name": "Backward",
                    "Line": 9
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::backward",
                    "Name": "Backward",
                    "Line": 9
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::backward",
                    "Name": "Backward",
                    "Line": 11
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::backward",
                    "Name": "Backward",
                    "Line": 11
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::backward",
                    "Name": "Backward",
                    "Line": 12
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::backward",
                    "Name": "Backward",
                    "Line": 12
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::backward",
                    "Name": "Backward",
                    "Line": 14
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::backward",
                    "Name": "Backward",
                    "Line": 20
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::backward",
                    "Name": "Backward",
                    "Line": 26
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::backward",
                    "Name": "Backward",
                    "Line": 27
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 6
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 6
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 7
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 7
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 11
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 11
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 14
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 14
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 16
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 16
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 17
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 17
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 18
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 18
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 20
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 25
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 31
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 36
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 42
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 43
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 44
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cRpcConverter\u003e.remove_persistent_prefix",
                    "Line": 0
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cHttpConverter\u003e.add_transient_prefix",
                    "Line": 0
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "RpcConverter.remove_prefix",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cHttpConverter\u003e.remove_transient_prefix",
                    "Line": 0
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cRpcConverter\u003e.remove_backward_prefix",
                    "Line": 0
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "RpcConverter.add_prefix",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cRpcConverter\u003e.add_transient_prefix",
                    "Line": 0
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.remove_prefix_and_to_rpc_format",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cHttpConverter\u003e.remove_backward_prefix",
                    "Line": 0
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cHttpConverter\u003e.add_persistent_prefix",
                    "Line": 0
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.add_prefix_and_to_http_format",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cHttpConverter\u003e.remove_persistent_prefix",
                    "Line": 0
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cRpcConverter\u003e.remove_transient_prefix",
                    "Line": 0
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cRpcConverter\u003e.add_persistent_prefix",
                    "Line": 0
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter",
                    "Line": 4
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter",
                    "Line": 6
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter",
                    "Line": 7
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter",
                    "Line": 8
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.remove_string",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Backward\u003cMetaInfo\u003e.strip_rpc_prefix_and_set_backward_downstream",
                    "Line": 0
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_all_backword_transients_with_prefix",
                    "Line": 4
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.remove_faststr",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_faststr",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.insert_string",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward\u003cMetaInfo\u003e.get_all_upstreams",
                    "Line": 0
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_string",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward\u003cMetaInfo\u003e.get_all_persistents_and_transients_with_rpc_prefix",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward\u003cMetaInfo\u003e.strip_rpc_prefix_and_set_upstream",
                    "Line": 0
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_all_persistents_and_transients",
                    "Line": 22
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward\u003cMetaInfo\u003e.strip_http_prefix_and_set_upstream",
                    "Line": 0
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward\u003cMetaInfo\u003e.strip_http_prefix_and_set_persistent",
                    "Line": 0
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward\u003cMetaInfo\u003e.strip_rpc_prefix_and_set_persistent",
                    "Line": 0
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.insert_faststr",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward\u003cMetaInfo\u003e.get_all_persistents_and_transients_with_http_prefix",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Backward\u003cMetaInfo\u003e.get_all_backward_downstreams",
                    "Line": 0
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Backward\u003cMetaInfo\u003e.strip_http_prefix_and_set_backward_downstream",
                    "Line": 0
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo",
                    "Line": 33
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo",
                    "Line": 33
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.insert",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap",
                    "Line": 5
                }
            ]
        },
        "faststr@0.2.19?faststr#FastStr::from_string": {
            "ModPath": "faststr@0.2.19",
            "PkgPath": "faststr",
            "Name": "FastStr::from_string",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "RpcConverter.remove_prefix",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "RpcConverter.add_prefix",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.remove_prefix_and_to_rpc_format",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.add_prefix_and_to_http_format",
                    "Line": 5
                }
            ]
        },
        "metainfo?metainfo#Backward\u003cMetaInfo\u003e.get_all_backward_downstreams": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "Backward\u003cMetaInfo\u003e.get_all_backward_downstreams",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "get_all_impl",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "as_ref",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 0
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "ahash@0.8.11",
                    "PkgPath": "ahash::hash_map",
                    "Name": "AHashMap",
                    "Line": 0
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 0
                }
            ],
            "References": null
        },
        "metainfo?metainfo#Backward\u003cMetaInfo\u003e.get_all_backward_transients": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "Backward\u003cMetaInfo\u003e.get_all_backward_transients",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "get_all_impl",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "as_ref",
                    "Line": 1
                }
            ],
            "References": null
        },
        "metainfo?metainfo#Backward\u003cMetaInfo\u003e.get_all_backward_transients_with_http_prefix": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "Backward\u003cMetaInfo\u003e.get_all_backward_transients_with_http_prefix",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_all_backword_transients_with_prefix",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter",
                    "Line": 1
                }
            ],
            "References": null
        },
        "metainfo?metainfo#Backward\u003cMetaInfo\u003e.get_all_backward_transients_with_rpc_prefix": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "Backward\u003cMetaInfo\u003e.get_all_backward_transients_with_rpc_prefix",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_all_backword_transients_with_prefix",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "RpcConverter",
                    "Line": 1
                }
            ],
            "References": null
        },
        "metainfo?metainfo#Backward\u003cMetaInfo\u003e.strip_http_prefix_and_set_backward_downstream": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "Backward\u003cMetaInfo\u003e.strip_http_prefix_and_set_backward_downstream",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "set_impl",
                    "Line": 7
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "as_ref",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cHttpConverter\u003e.remove_backward_prefix",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "AsRef",
                    "Line": 0
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "Into",
                    "Line": 0
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 0
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter",
                    "Line": 6
                }
            ],
            "References": null
        },
        "metainfo?metainfo#Backward\u003cMetaInfo\u003e.strip_rpc_prefix_and_set_backward_downstream": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "Backward\u003cMetaInfo\u003e.strip_rpc_prefix_and_set_backward_downstream",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "set_impl",
                    "Line": 7
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "as_ref",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cRpcConverter\u003e.remove_backward_prefix",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "AsRef",
                    "Line": 0
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "Into",
                    "Line": 0
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 0
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "RpcConverter",
                    "Line": 6
                }
            ],
            "References": null
        },
        "metainfo?metainfo#DEFAULT_MAP_SIZE": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "DEFAULT_MAP_SIZE",
            "Type": "VAR",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.insert",
                    "Line": 4
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.extend",
                    "Line": 6
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.insert_string",
                    "Line": 4
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.insert_faststr",
                    "Line": 4
                }
            ]
        },
        "metainfo?metainfo#Debug\u003cMetaInfo\u003e.fmt": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "Debug\u003cMetaInfo\u003e.fmt",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::fmt",
                    "Name": "debug_struct",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::fmt::builders",
                    "Name": "finish",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::fmt",
                    "Name": "Formatter",
                    "Line": 0
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::fmt",
                    "Name": "Result",
                    "Line": 0
                }
            ],
            "References": null
        },
        "metainfo?metainfo#Forward\u003cMetaInfo\u003e.get_all_persistents": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "Forward\u003cMetaInfo\u003e.get_all_persistents",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "get_all_impl",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "as_ref",
                    "Line": 1
                }
            ],
            "References": null
        },
        "metainfo?metainfo#Forward\u003cMetaInfo\u003e.get_all_persistents_and_transients_with_http_prefix": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "Forward\u003cMetaInfo\u003e.get_all_persistents_and_transients_with_http_prefix",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_all_persistents_and_transients",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "ahash@0.8.11",
                    "PkgPath": "ahash::hash_map",
                    "Name": "AHashMap",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter",
                    "Line": 3
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "http_forward_test",
                    "Line": 8
                }
            ]
        },
        "metainfo?metainfo#Forward\u003cMetaInfo\u003e.get_all_persistents_and_transients_with_rpc_prefix": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "Forward\u003cMetaInfo\u003e.get_all_persistents_and_transients_with_rpc_prefix",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_all_persistents_and_transients",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "ahash@0.8.11",
                    "PkgPath": "ahash::hash_map",
                    "Name": "AHashMap",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "RpcConverter",
                    "Line": 3
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "rpc_forward_test",
                    "Line": 8
                }
            ]
        },
        "metainfo?metainfo#Forward\u003cMetaInfo\u003e.get_all_transients": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "Forward\u003cMetaInfo\u003e.get_all_transients",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "get_all_impl",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "as_ref",
                    "Line": 1
                }
            ],
            "References": null
        },
        "metainfo?metainfo#Forward\u003cMetaInfo\u003e.get_all_upstreams": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "Forward\u003cMetaInfo\u003e.get_all_upstreams",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "get_all_impl",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "as_ref",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 0
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "ahash@0.8.11",
                    "PkgPath": "ahash::hash_map",
                    "Name": "AHashMap",
                    "Line": 0
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 0
                }
            ],
            "References": null
        },
        "metainfo?metainfo#Forward\u003cMetaInfo\u003e.strip_http_prefix_and_set_persistent": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "Forward\u003cMetaInfo\u003e.strip_http_prefix_and_set_persistent",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "set_impl",
                    "Line": 7
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "as_ref",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cHttpConverter\u003e.remove_persistent_prefix",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "AsRef",
                    "Line": 0
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "Into",
                    "Line": 0
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 0
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter",
                    "Line": 6
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "http_forward_test",
                    "Line": 3
                }
            ]
        },
        "metainfo?metainfo#Forward\u003cMetaInfo\u003e.strip_http_prefix_and_set_upstream": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "Forward\u003cMetaInfo\u003e.strip_http_prefix_and_set_upstream",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "set_impl",
                    "Line": 7
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "as_ref",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cHttpConverter\u003e.remove_transient_prefix",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "AsRef",
                    "Line": 0
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "Into",
                    "Line": 0
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 0
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter",
                    "Line": 6
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "http_forward_test",
                    "Line": 4
                }
            ]
        },
        "metainfo?metainfo#Forward\u003cMetaInfo\u003e.strip_rpc_prefix_and_set_persistent": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "Forward\u003cMetaInfo\u003e.strip_rpc_prefix_and_set_persistent",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "set_impl",
                    "Line": 7
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "as_ref",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cRpcConverter\u003e.remove_persistent_prefix",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "AsRef",
                    "Line": 0
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "Into",
                    "Line": 0
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 0
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "RpcConverter",
                    "Line": 6
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "rpc_forward_test",
                    "Line": 3
                }
            ]
        },
        "metainfo?metainfo#Forward\u003cMetaInfo\u003e.strip_rpc_prefix_and_set_upstream": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "Forward\u003cMetaInfo\u003e.strip_rpc_prefix_and_set_upstream",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "set_impl",
                    "Line": 7
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "as_ref",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cRpcConverter\u003e.remove_transient_prefix",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "AsRef",
                    "Line": 0
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "Into",
                    "Line": 0
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 0
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "RpcConverter",
                    "Line": 6
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "rpc_forward_test",
                    "Line": 4
                }
            ]
        },
        "metainfo?metainfo#HTTP_PREFIX_BACKWARD": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "HTTP_PREFIX_BACKWARD",
            "Type": "VAR",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cHttpConverter\u003e.remove_backward_prefix",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cHttpConverter\u003e.add_backward_prefix",
                    "Line": 1
                }
            ]
        },
        "metainfo?metainfo#HTTP_PREFIX_PERSISTENT": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "HTTP_PREFIX_PERSISTENT",
            "Type": "VAR",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cHttpConverter\u003e.add_persistent_prefix",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cHttpConverter\u003e.remove_persistent_prefix",
                    "Line": 1
                }
            ]
        },
        "metainfo?metainfo#HTTP_PREFIX_TRANSIENT": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "HTTP_PREFIX_TRANSIENT",
            "Type": "VAR",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cHttpConverter\u003e.add_transient_prefix",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cHttpConverter\u003e.remove_transient_prefix",
                    "Line": 1
                }
            ]
        },
        "metainfo?metainfo#Homura": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "Homura",
            "Type": "TYPE",
            "Dependencies": null,
            "References": null
        },
        "metainfo?metainfo#Madoka": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "Madoka",
            "Type": "TYPE",
            "Dependencies": null,
            "References": null
        },
        "metainfo?metainfo#Magi": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "Magi",
            "Type": "TYPE",
            "Dependencies": null,
            "References": null
        },
        "metainfo?metainfo#Mami": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "Mami",
            "Type": "TYPE",
            "Dependencies": null,
            "References": null
        },
        "metainfo?metainfo#MetaInfo": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "MetaInfo",
            "Type": "TYPE",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 31
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "alloc::sync",
                    "Name": "Arc",
                    "Line": 31
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 32
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap",
                    "Line": 32
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 33
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "ahash@0.8.11",
                    "PkgPath": "ahash::hash_map",
                    "Name": "AHashMap",
                    "Line": 33
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 33
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 33
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 34
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap",
                    "Line": 34
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 38
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "Node",
                    "Line": 38
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 39
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "Node",
                    "Line": 39
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "test_metainfo",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo::from",
                    "Line": 6
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "rpc_forward_test",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.extend",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo::new",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "test_clear",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "test_remove",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "http_forward_test",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "test_composition",
                    "Line": 16
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "test_integers",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo::from_node",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.derive",
                    "Line": 0
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "test_extend",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "mut other",
                    "Line": 0
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "mut m2",
                    "Line": 0
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "m2",
                    "Line": 0
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "new",
                    "Line": 0
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "mut metainfo",
                    "Line": 0
                }
            ]
        },
        "metainfo?metainfo#MetaInfo.clear": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "MetaInfo.clear",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "as_mut",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.clear",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "clear",
                    "Line": 9
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.clear",
                    "Line": 12
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "Node.clear",
                    "Line": 15
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "test_clear",
                    "Line": 12
                }
            ]
        },
        "metainfo?metainfo#MetaInfo.contains": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "MetaInfo.contains",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "as_ref",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "map",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.contains",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "unwrap_or",
                    "Line": 7
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "alloc::sync",
                    "Name": "as_ref",
                    "Line": 13
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "test_clear",
                    "Line": 8
                }
            ]
        },
        "metainfo?metainfo#MetaInfo.contains_faststr": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "MetaInfo.contains_faststr",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "as_ref",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "map",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.contains",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "unwrap_or",
                    "Line": 7
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "alloc::sync",
                    "Name": "as_ref",
                    "Line": 13
                }
            ],
            "References": null
        },
        "metainfo?metainfo#MetaInfo.contains_string": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "MetaInfo.contains_string",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "as_ref",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "map",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "contains_key",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "as_ref",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "unwrap_or",
                    "Line": 7
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "alloc::sync",
                    "Name": "as_ref",
                    "Line": 13
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "AsRef",
                    "Line": 2
                }
            ],
            "References": null
        },
        "metainfo?metainfo#MetaInfo.derive": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "MetaInfo.derive",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "alloc::sync",
                    "Name": "new",
                    "Line": 21
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo::from_node",
                    "Line": 23
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "is_none",
                    "Line": 7
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "clone",
                    "Line": 10
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "take",
                    "Line": 19
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "alloc::sync",
                    "Name": "clone",
                    "Line": 23
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo",
                    "Line": 0
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "alloc::sync",
                    "Name": "Arc",
                    "Line": 21
                }
            ],
            "References": null
        },
        "metainfo?metainfo#MetaInfo.ensure_backward_node": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "MetaInfo.ensure_backward_node",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "is_none",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "Node",
                    "Line": 2
                }
            ],
            "References": null
        },
        "metainfo?metainfo#MetaInfo.ensure_forward_node": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "MetaInfo.ensure_forward_node",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "is_none",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "Node",
                    "Line": 2
                }
            ],
            "References": null
        },
        "metainfo?metainfo#MetaInfo.extend": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "MetaInfo.extend",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap::with_capacity",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "ahash@0.8.11",
                    "PkgPath": "ahash::hash_map",
                    "Name": "AHashMap::with_capacity",
                    "Line": 12
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap::with_capacity",
                    "Line": 18
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "get_or_insert_with",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.extend",
                    "Line": 7
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "ahash@0.8.11",
                    "PkgPath": "ahash::hash_map",
                    "Name": "Extend\u003cAHashMap\u003e.extend",
                    "Line": 13
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.extend",
                    "Line": 19
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "is_none",
                    "Line": 23
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "as_mut",
                    "Line": 26
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "unwrap",
                    "Line": 26
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "Node.extend",
                    "Line": 26
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "ahash@0.8.11",
                    "PkgPath": "ahash::hash_map",
                    "Name": "AHashMap",
                    "Line": 12
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap",
                    "Line": 18
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "DEFAULT_MAP_SIZE",
                    "Line": 6
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "test_extend",
                    "Line": 15
                }
            ]
        },
        "metainfo?metainfo#MetaInfo.get": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "MetaInfo.get",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "as_ref",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "and_then",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.get",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "or_else",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "alloc::sync",
                    "Name": "as_ref",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 2
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "test_metainfo",
                    "Line": 10
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "test_clear",
                    "Line": 19
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "test_remove",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "test_composition",
                    "Line": 22
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "test_integers",
                    "Line": 14
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "test_extend",
                    "Line": 17
                }
            ]
        },
        "metainfo?metainfo#MetaInfo.get_all_backword_transients_with_prefix": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "MetaInfo.get_all_backword_transients_with_prefix",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "get_all_impl",
                    "Line": 10
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "ahash@0.8.11",
                    "PkgPath": "ahash::hash_map",
                    "Name": "AHashMap::with_capacity",
                    "Line": 15
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "as_ref",
                    "Line": 8
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "len",
                    "Line": 11
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "ahash@0.8.11",
                    "PkgPath": "ahash::hash_map",
                    "Name": "Extend\u003cAHashMap\u003e.extend",
                    "Line": 16
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "iter",
                    "Line": 17
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::iter::traits::iterator",
                    "Name": "map",
                    "Line": 18
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "ahash@0.8.11",
                    "PkgPath": "ahash::hash_map",
                    "Name": "AHashMap",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter",
                    "Line": 6
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Backward\u003cMetaInfo\u003e.get_all_backward_transients_with_http_prefix",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Backward\u003cMetaInfo\u003e.get_all_backward_transients_with_rpc_prefix",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "new_cap",
                    "Line": 0
                }
            ]
        },
        "metainfo?metainfo#MetaInfo.get_all_persistents_and_transients": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "MetaInfo.get_all_persistents_and_transients",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "get_all_impl",
                    "Line": 10
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "ahash@0.8.11",
                    "PkgPath": "ahash::hash_map",
                    "Name": "AHashMap::with_capacity",
                    "Line": 17
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "as_ref",
                    "Line": 8
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "map",
                    "Line": 12
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "len",
                    "Line": 12
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "unwrap_or",
                    "Line": 12
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "ahash@0.8.11",
                    "PkgPath": "ahash::hash_map",
                    "Name": "Extend\u003cAHashMap\u003e.extend",
                    "Line": 19
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "iter",
                    "Line": 21
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::iter::traits::iterator",
                    "Name": "map",
                    "Line": 22
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "add_transient_prefix",
                    "Line": 29
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "ahash@0.8.11",
                    "PkgPath": "ahash::hash_map",
                    "Name": "AHashMap",
                    "Line": 17
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 22
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward\u003cMetaInfo\u003e.get_all_persistents_and_transients_with_rpc_prefix",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward\u003cMetaInfo\u003e.get_all_persistents_and_transients_with_http_prefix",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "transients",
                    "Line": 0
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "persistents",
                    "Line": 0
                }
            ]
        },
        "metainfo?metainfo#MetaInfo.get_faststr": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "MetaInfo.get_faststr",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "as_ref",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "and_then",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.get",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "or_else",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "alloc::sync",
                    "Name": "as_ref",
                    "Line": 9
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap",
                    "Line": 5
                }
            ],
            "References": null
        },
        "metainfo?metainfo#MetaInfo.get_string": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "MetaInfo.get_string",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "as_ref",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "and_then",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "ahash@0.8.11",
                    "PkgPath": "ahash::hash_map",
                    "Name": "AHashMap.get",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "as_ref",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "or_else",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "alloc::sync",
                    "Name": "as_ref",
                    "Line": 9
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "AsRef",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 2
                }
            ],
            "References": null
        },
        "metainfo?metainfo#MetaInfo.insert": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "MetaInfo.insert",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap::with_capacity",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "get_or_insert_with",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.insert",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::marker",
                    "Name": "Send",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::marker",
                    "Name": "Sync",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "DEFAULT_MAP_SIZE",
                    "Line": 4
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "test_metainfo",
                    "Line": 7
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "test_clear",
                    "Line": 4
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "test_remove",
                    "Line": 4
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "test_composition",
                    "Line": 18
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "test_integers",
                    "Line": 4
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "test_extend",
                    "Line": 7
                }
            ]
        },
        "metainfo?metainfo#MetaInfo.insert_faststr": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "MetaInfo.insert_faststr",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap::with_capacity",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "get_or_insert_with",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.insert",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::marker",
                    "Name": "Send",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::marker",
                    "Name": "Sync",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "DEFAULT_MAP_SIZE",
                    "Line": 4
                }
            ],
            "References": null
        },
        "metainfo?metainfo#MetaInfo.insert_string": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "MetaInfo.insert_string",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "ahash@0.8.11",
                    "PkgPath": "ahash::hash_map",
                    "Name": "AHashMap::with_capacity",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "get_or_insert_with",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "ahash@0.8.11",
                    "PkgPath": "ahash::hash_map",
                    "Name": "AHashMap.insert",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "ahash@0.8.11",
                    "PkgPath": "ahash::hash_map",
                    "Name": "AHashMap",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "DEFAULT_MAP_SIZE",
                    "Line": 4
                }
            ],
            "References": null
        },
        "metainfo?metainfo#MetaInfo.remove": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "MetaInfo.remove",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "as_mut",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "and_then",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.remove",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 3
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "test_metainfo",
                    "Line": 12
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "test_remove",
                    "Line": 7
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "test_extend",
                    "Line": 19
                }
            ]
        },
        "metainfo?metainfo#MetaInfo.remove_faststr": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "MetaInfo.remove_faststr",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "as_mut",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "and_then",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.remove",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 3
                }
            ],
            "References": null
        },
        "metainfo?metainfo#MetaInfo.remove_string": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "MetaInfo.remove_string",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "as_mut",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "and_then",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "ahash@0.8.11",
                    "PkgPath": "ahash::hash_map",
                    "Name": "AHashMap.remove",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "as_ref",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "AsRef",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 3
                }
            ],
            "References": null
        },
        "metainfo?metainfo#MetaInfo::from": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "MetaInfo::from",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "clone",
                    "Line": 7
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "alloc::sync",
                    "Name": "Arc",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo",
                    "Line": 6
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "test_remove",
                    "Line": 12
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "test_integers",
                    "Line": 25
                }
            ]
        },
        "metainfo?metainfo#MetaInfo::from_node": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "MetaInfo::from_node",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "alloc::sync",
                    "Name": "Arc",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "Node",
                    "Line": 3
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.derive",
                    "Line": 23
                }
            ]
        },
        "metainfo?metainfo#MetaInfo::new": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "MetaInfo::new",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::default",
                    "Name": "Default",
                    "Line": 3
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "test_metainfo",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "rpc_forward_test",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "test_clear",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "test_remove",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "http_forward_test",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "test_composition",
                    "Line": 16
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "test_integers",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "test_extend",
                    "Line": 5
                }
            ]
        },
        "metainfo?metainfo#MyType": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "MyType",
            "Type": "TYPE",
            "Dependencies": null,
            "References": null
        },
        "metainfo?metainfo#RPC_PREFIX_BACKWARD": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "RPC_PREFIX_BACKWARD",
            "Type": "VAR",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cRpcConverter\u003e.remove_backward_prefix",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cRpcConverter\u003e.add_backward_prefix",
                    "Line": 1
                }
            ]
        },
        "metainfo?metainfo#RPC_PREFIX_PERSISTENT": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "RPC_PREFIX_PERSISTENT",
            "Type": "VAR",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cRpcConverter\u003e.remove_persistent_prefix",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cRpcConverter\u003e.add_persistent_prefix",
                    "Line": 1
                }
            ]
        },
        "metainfo?metainfo#RPC_PREFIX_TRANSIENT": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "RPC_PREFIX_TRANSIENT",
            "Type": "VAR",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cRpcConverter\u003e.add_transient_prefix",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cRpcConverter\u003e.remove_transient_prefix",
                    "Line": 1
                }
            ]
        },
        "metainfo?metainfo#backward_node": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "backward_node",
            "Type": "VAR",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "clone",
                    "Line": 0
                }
            ],
            "References": null
        },
        "metainfo?metainfo#del_impl": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "del_impl",
            "Type": "FUNC",
            "Dependencies": null,
            "References": null
        },
        "metainfo?metainfo#forward_node": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "forward_node",
            "Type": "VAR",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "clone",
                    "Line": 0
                }
            ],
            "References": null
        },
        "metainfo?metainfo#get_impl": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "get_impl",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "rpc_forward_test",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "http_forward_test",
                    "Line": 5
                }
            ]
        },
        "metainfo?metainfo#http_forward_test": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "http_forward_test",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo::new",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::macros",
                    "Name": "assert_eq",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "get_impl",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward\u003cMetaInfo\u003e.strip_http_prefix_and_set_persistent",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward\u003cMetaInfo\u003e.strip_http_prefix_and_set_upstream",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "unwrap",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward\u003cMetaInfo\u003e.get_all_persistents_and_transients_with_http_prefix",
                    "Line": 8
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "ahash@0.8.11",
                    "PkgPath": "ahash::hash_map",
                    "Name": "AHashMap.get",
                    "Line": 10
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo",
                    "Line": 2
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "map",
                    "Line": 0
                }
            ]
        },
        "metainfo?metainfo#key": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "key",
            "Type": "VAR",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "as_ref",
                    "Line": 0
                }
            ],
            "References": null
        },
        "metainfo?metainfo#m2": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "m2",
            "Type": "VAR",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo",
                    "Line": 0
                }
            ],
            "References": null
        },
        "metainfo?metainfo#map": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "map",
            "Type": "VAR",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "http_forward_test",
                    "Line": 0
                }
            ],
            "References": null
        },
        "metainfo?metainfo#mi": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "mi",
            "Type": "VAR",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "alloc::sync",
                    "Name": "Arc",
                    "Line": 0
                }
            ],
            "References": null
        },
        "metainfo?metainfo#mut m2": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "mut m2",
            "Type": "VAR",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo",
                    "Line": 0
                }
            ],
            "References": null
        },
        "metainfo?metainfo#mut map": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "mut map",
            "Type": "VAR",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "ahash@0.8.11",
                    "PkgPath": "ahash::hash_map",
                    "Name": "AHashMap",
                    "Line": 0
                }
            ],
            "References": null
        },
        "metainfo?metainfo#mut metainfo": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "mut metainfo",
            "Type": "VAR",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo",
                    "Line": 0
                }
            ],
            "References": null
        },
        "metainfo?metainfo#mut other": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "mut other",
            "Type": "VAR",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo",
                    "Line": 0
                }
            ],
            "References": null
        },
        "metainfo?metainfo#new": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "new",
            "Type": "VAR",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo",
                    "Line": 0
                }
            ],
            "References": null
        },
        "metainfo?metainfo#new_cap": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "new_cap",
            "Type": "VAR",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_all_backword_transients_with_prefix",
                    "Line": 0
                }
            ],
            "References": null
        },
        "metainfo?metainfo#persistents": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "persistents",
            "Type": "VAR",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_all_persistents_and_transients",
                    "Line": 0
                }
            ],
            "References": null
        },
        "metainfo?metainfo#rpc_forward_test": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "rpc_forward_test",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo::new",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::macros",
                    "Name": "assert_eq",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "get_impl",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward\u003cMetaInfo\u003e.strip_rpc_prefix_and_set_persistent",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward\u003cMetaInfo\u003e.strip_rpc_prefix_and_set_upstream",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "unwrap",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward\u003cMetaInfo\u003e.get_all_persistents_and_transients_with_rpc_prefix",
                    "Line": 8
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "ahash@0.8.11",
                    "PkgPath": "ahash::hash_map",
                    "Name": "AHashMap.get",
                    "Line": 10
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo",
                    "Line": 2
                }
            ],
            "References": null
        },
        "metainfo?metainfo#set_impl": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "set_impl",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Backward\u003cMetaInfo\u003e.strip_rpc_prefix_and_set_backward_downstream",
                    "Line": 7
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward\u003cMetaInfo\u003e.strip_rpc_prefix_and_set_upstream",
                    "Line": 7
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward\u003cMetaInfo\u003e.strip_http_prefix_and_set_upstream",
                    "Line": 7
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward\u003cMetaInfo\u003e.strip_http_prefix_and_set_persistent",
                    "Line": 7
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward\u003cMetaInfo\u003e.strip_rpc_prefix_and_set_persistent",
                    "Line": 7
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Backward\u003cMetaInfo\u003e.strip_http_prefix_and_set_backward_downstream",
                    "Line": 7
                }
            ]
        },
        "metainfo?metainfo#test_clear": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "test_clear",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo::new",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::macros",
                    "Name": "assert",
                    "Line": 8
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::macros",
                    "Name": "assert_eq",
                    "Line": 19
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.insert",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.contains",
                    "Line": 8
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.clear",
                    "Line": 12
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get",
                    "Line": 19
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "unwrap",
                    "Line": 19
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo",
                    "Line": 2
                }
            ],
            "References": null
        },
        "metainfo?metainfo#test_composition": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "test_composition",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo::new",
                    "Line": 16
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::macros",
                    "Name": "assert",
                    "Line": 22
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::macros",
                    "Name": "assert_eq",
                    "Line": 23
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.insert",
                    "Line": 18
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get",
                    "Line": 22
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "unwrap",
                    "Line": 22
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo",
                    "Line": 16
                }
            ],
            "References": null
        },
        "metainfo?metainfo#test_extend": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "test_extend",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo::new",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::macros",
                    "Name": "assert_eq",
                    "Line": 17
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::macros",
                    "Name": "assert",
                    "Line": 20
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.insert",
                    "Line": 7
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.extend",
                    "Line": 15
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get",
                    "Line": 17
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.remove",
                    "Line": 19
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "is_none",
                    "Line": 20
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo",
                    "Line": 5
                }
            ],
            "References": null
        },
        "metainfo?metainfo#test_integers": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "test_integers",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo::new",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::macros",
                    "Name": "assert",
                    "Line": 14
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo::from",
                    "Line": 25
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "alloc::sync",
                    "Name": "new",
                    "Line": 25
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.insert",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get",
                    "Line": 14
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "is_some",
                    "Line": 14
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "alloc::sync",
                    "Name": "Arc",
                    "Line": 25
                }
            ],
            "References": null
        },
        "metainfo?metainfo#test_metainfo": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "test_metainfo",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo::new",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::macros",
                    "Name": "assert_eq",
                    "Line": 10
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::macros",
                    "Name": "assert",
                    "Line": 13
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.insert",
                    "Line": 7
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get",
                    "Line": 10
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.remove",
                    "Line": 12
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "is_none",
                    "Line": 13
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo",
                    "Line": 5
                }
            ],
            "References": null
        },
        "metainfo?metainfo#test_remove": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "test_remove",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo::new",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::macros",
                    "Name": "assert",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo::from",
                    "Line": 12
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "alloc::sync",
                    "Name": "new",
                    "Line": 12
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.insert",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "is_some",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.remove",
                    "Line": 7
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "is_none",
                    "Line": 8
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "alloc::sync",
                    "Name": "Arc",
                    "Line": 12
                }
            ],
            "References": null
        },
        "metainfo?metainfo#transients": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "transients",
            "Type": "VAR",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_all_persistents_and_transients",
                    "Line": 0
                }
            ],
            "References": null
        },
        "metainfo?metainfo::backward#Backward": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::backward",
            "Name": "Backward",
            "Type": "TYPE",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "AsRef",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "AsRef",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "ahash@0.8.11",
                    "PkgPath": "ahash::hash_map",
                    "Name": "AHashMap",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "ahash@0.8.11",
                    "PkgPath": "ahash::hash_map",
                    "Name": "AHashMap",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 8
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "ahash@0.8.11",
                    "PkgPath": "ahash::hash_map",
                    "Name": "AHashMap",
                    "Line": 8
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 8
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 8
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 9
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "ahash@0.8.11",
                    "PkgPath": "ahash::hash_map",
                    "Name": "AHashMap",
                    "Line": 9
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 9
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 9
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "Into",
                    "Line": 11
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 11
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "Into",
                    "Line": 11
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 11
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "Into",
                    "Line": 12
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 12
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "Into",
                    "Line": 12
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 12
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "AsRef",
                    "Line": 14
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "Into",
                    "Line": 14
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 14
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "AsRef",
                    "Line": 20
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "Into",
                    "Line": 20
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 20
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "AsRef",
                    "Line": 26
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 26
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 26
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "AsRef",
                    "Line": 27
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 27
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 27
                }
            ],
            "References": null
        },
        "metainfo?metainfo::convert#Converter": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::convert",
            "Name": "Converter",
            "Type": "TYPE",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 7
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 7
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 8
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 8
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_all_backword_transients_with_prefix",
                    "Line": 6
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_all_persistents_and_transients",
                    "Line": 6
                }
            ]
        },
        "metainfo?metainfo::convert#Converter\u003cHttpConverter\u003e.add_backward_prefix": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::convert",
            "Name": "Converter\u003cHttpConverter\u003e.add_backward_prefix",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.add_prefix_and_to_http_format",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "HTTP_PREFIX_BACKWARD",
                    "Line": 1
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "add_http_prefix",
                    "Line": 11
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "http_prefix_bidirect",
                    "Line": 17
                }
            ]
        },
        "metainfo?metainfo::convert#Converter\u003cHttpConverter\u003e.add_persistent_prefix": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::convert",
            "Name": "Converter\u003cHttpConverter\u003e.add_persistent_prefix",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.add_prefix_and_to_http_format",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 0
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "HTTP_PREFIX_PERSISTENT",
                    "Line": 1
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "add_http_prefix",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "http_prefix_bidirect",
                    "Line": 5
                }
            ]
        },
        "metainfo?metainfo::convert#Converter\u003cHttpConverter\u003e.add_transient_prefix": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::convert",
            "Name": "Converter\u003cHttpConverter\u003e.add_transient_prefix",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.add_prefix_and_to_http_format",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 0
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "HTTP_PREFIX_TRANSIENT",
                    "Line": 1
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "add_http_prefix",
                    "Line": 7
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "http_prefix_bidirect",
                    "Line": 11
                }
            ]
        },
        "metainfo?metainfo::convert#Converter\u003cHttpConverter\u003e.remove_backward_prefix": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::convert",
            "Name": "Converter\u003cHttpConverter\u003e.remove_backward_prefix",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.remove_prefix_and_to_rpc_format",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 0
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 0
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "HTTP_PREFIX_BACKWARD",
                    "Line": 1
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "remove_http_prefix",
                    "Line": 16
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "http_prefix_bidirect",
                    "Line": 17
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Backward\u003cMetaInfo\u003e.strip_http_prefix_and_set_backward_downstream",
                    "Line": 6
                }
            ]
        },
        "metainfo?metainfo::convert#Converter\u003cHttpConverter\u003e.remove_persistent_prefix": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::convert",
            "Name": "Converter\u003cHttpConverter\u003e.remove_persistent_prefix",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.remove_prefix_and_to_rpc_format",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 0
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 0
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "HTTP_PREFIX_PERSISTENT",
                    "Line": 1
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "remove_http_prefix",
                    "Line": 4
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "http_prefix_bidirect",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward\u003cMetaInfo\u003e.strip_http_prefix_and_set_persistent",
                    "Line": 6
                }
            ]
        },
        "metainfo?metainfo::convert#Converter\u003cHttpConverter\u003e.remove_transient_prefix": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::convert",
            "Name": "Converter\u003cHttpConverter\u003e.remove_transient_prefix",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.remove_prefix_and_to_rpc_format",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 0
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 0
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "HTTP_PREFIX_TRANSIENT",
                    "Line": 1
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "remove_http_prefix",
                    "Line": 10
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "http_prefix_bidirect",
                    "Line": 11
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward\u003cMetaInfo\u003e.strip_http_prefix_and_set_upstream",
                    "Line": 6
                }
            ]
        },
        "metainfo?metainfo::convert#Converter\u003cRpcConverter\u003e.add_backward_prefix": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::convert",
            "Name": "Converter\u003cRpcConverter\u003e.add_backward_prefix",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "RpcConverter.add_prefix",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "RPC_PREFIX_BACKWARD",
                    "Line": 1
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "add_rpc_prefix",
                    "Line": 11
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "rpc_prefix_bidirect",
                    "Line": 17
                }
            ]
        },
        "metainfo?metainfo::convert#Converter\u003cRpcConverter\u003e.add_persistent_prefix": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::convert",
            "Name": "Converter\u003cRpcConverter\u003e.add_persistent_prefix",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "RpcConverter.add_prefix",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 0
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "RPC_PREFIX_PERSISTENT",
                    "Line": 1
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "add_rpc_prefix",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "rpc_prefix_bidirect",
                    "Line": 5
                }
            ]
        },
        "metainfo?metainfo::convert#Converter\u003cRpcConverter\u003e.add_transient_prefix": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::convert",
            "Name": "Converter\u003cRpcConverter\u003e.add_transient_prefix",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "RpcConverter.add_prefix",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 0
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "RPC_PREFIX_TRANSIENT",
                    "Line": 1
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "add_rpc_prefix",
                    "Line": 7
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "rpc_prefix_bidirect",
                    "Line": 11
                }
            ]
        },
        "metainfo?metainfo::convert#Converter\u003cRpcConverter\u003e.remove_backward_prefix": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::convert",
            "Name": "Converter\u003cRpcConverter\u003e.remove_backward_prefix",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "RpcConverter.remove_prefix",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 0
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 0
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "RPC_PREFIX_BACKWARD",
                    "Line": 1
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "rpc_prefix_bidirect",
                    "Line": 17
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "remove_rpc_prefix",
                    "Line": 16
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Backward\u003cMetaInfo\u003e.strip_rpc_prefix_and_set_backward_downstream",
                    "Line": 6
                }
            ]
        },
        "metainfo?metainfo::convert#Converter\u003cRpcConverter\u003e.remove_persistent_prefix": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::convert",
            "Name": "Converter\u003cRpcConverter\u003e.remove_persistent_prefix",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "RpcConverter.remove_prefix",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 0
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 0
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "RPC_PREFIX_PERSISTENT",
                    "Line": 1
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "rpc_prefix_bidirect",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "remove_rpc_prefix",
                    "Line": 4
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward\u003cMetaInfo\u003e.strip_rpc_prefix_and_set_persistent",
                    "Line": 6
                }
            ]
        },
        "metainfo?metainfo::convert#Converter\u003cRpcConverter\u003e.remove_transient_prefix": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::convert",
            "Name": "Converter\u003cRpcConverter\u003e.remove_transient_prefix",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "RpcConverter.remove_prefix",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 0
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 0
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "RPC_PREFIX_TRANSIENT",
                    "Line": 1
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "rpc_prefix_bidirect",
                    "Line": 11
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "remove_rpc_prefix",
                    "Line": 10
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward\u003cMetaInfo\u003e.strip_rpc_prefix_and_set_upstream",
                    "Line": 6
                }
            ]
        },
        "metainfo?metainfo::convert#HttpConverter": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::convert",
            "Name": "HttpConverter",
            "Type": "TYPE",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "check_rpc",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "check",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "check_http",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "add_http_prefix",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "format_bidirect_convert",
                    "Line": 4
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "http_format_convert_test",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "remove_http_prefix",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "http_prefix_bidirect",
                    "Line": 4
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "rpc_format_convert_test",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Backward\u003cMetaInfo\u003e.get_all_backward_transients_with_http_prefix",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward\u003cMetaInfo\u003e.strip_http_prefix_and_set_upstream",
                    "Line": 6
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward\u003cMetaInfo\u003e.strip_http_prefix_and_set_persistent",
                    "Line": 6
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward\u003cMetaInfo\u003e.get_all_persistents_and_transients_with_http_prefix",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Backward\u003cMetaInfo\u003e.strip_http_prefix_and_set_backward_downstream",
                    "Line": 6
                }
            ]
        },
        "metainfo?metainfo::convert#HttpConverter.add_prefix_and_to_http_format": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::convert",
            "Name": "HttpConverter.add_prefix_and_to_http_format",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "alloc::string",
                    "Name": "with_capacity",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr::from_string",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::str",
                    "Name": "len",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "alloc::string",
                    "Name": "push_str",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.to_http_format",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "alloc::string",
                    "Name": "String",
                    "Line": 2
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cHttpConverter\u003e.add_transient_prefix",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cHttpConverter\u003e.add_backward_prefix",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cHttpConverter\u003e.add_persistent_prefix",
                    "Line": 1
                }
            ]
        },
        "metainfo?metainfo::convert#HttpConverter.remove_prefix_and_to_rpc_format": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::convert",
            "Name": "HttpConverter.remove_prefix_and_to_rpc_format",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "alloc::string",
                    "Name": "with_capacity",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr::from_string",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::str",
                    "Name": "strip_prefix",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::str",
                    "Name": "len",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.to_rpc_format",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "alloc::string",
                    "Name": "String",
                    "Line": 3
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cHttpConverter\u003e.remove_transient_prefix",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cHttpConverter\u003e.remove_backward_prefix",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cHttpConverter\u003e.remove_persistent_prefix",
                    "Line": 1
                }
            ]
        },
        "metainfo?metainfo::convert#HttpConverter.to_http_format": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::convert",
            "Name": "HttpConverter.to_http_format",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::str",
                    "Name": "chars",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::char::methods",
                    "Name": "to_ascii_lowercase",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "alloc::string",
                    "Name": "push",
                    "Line": 9
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "alloc::string",
                    "Name": "String",
                    "Line": 2
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.to_http_format_string",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.add_prefix_and_to_http_format",
                    "Line": 4
                }
            ]
        },
        "metainfo?metainfo::convert#HttpConverter.to_http_format_string": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::convert",
            "Name": "HttpConverter.to_http_format_string",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "alloc::string",
                    "Name": "with_capacity",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::str",
                    "Name": "len",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.to_http_format",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "alloc::string",
                    "Name": "String",
                    "Line": 0
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "check_rpc",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "check",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "check_http",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "format_bidirect_convert",
                    "Line": 4
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "http_format_convert_test",
                    "Line": 3
                }
            ]
        },
        "metainfo?metainfo::convert#HttpConverter.to_rpc_format": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::convert",
            "Name": "HttpConverter.to_rpc_format",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::str",
                    "Name": "chars",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::char::methods",
                    "Name": "to_ascii_uppercase",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "alloc::string",
                    "Name": "push",
                    "Line": 9
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "alloc::string",
                    "Name": "String",
                    "Line": 2
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.to_rpc_format_string",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.remove_prefix_and_to_rpc_format",
                    "Line": 4
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "ch",
                    "Line": 0
                }
            ]
        },
        "metainfo?metainfo::convert#HttpConverter.to_rpc_format_string": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::convert",
            "Name": "HttpConverter.to_rpc_format_string",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "alloc::string",
                    "Name": "with_capacity",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::str",
                    "Name": "len",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.to_rpc_format",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "alloc::string",
                    "Name": "String",
                    "Line": 0
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "check_rpc",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "check_http",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "format_bidirect_convert",
                    "Line": 4
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "rpc_format_convert_test",
                    "Line": 3
                }
            ]
        },
        "metainfo?metainfo::convert#RpcConverter": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::convert",
            "Name": "RpcConverter",
            "Type": "TYPE",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "add_rpc_prefix",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "rpc_prefix_bidirect",
                    "Line": 4
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "remove_rpc_prefix",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Backward\u003cMetaInfo\u003e.strip_rpc_prefix_and_set_backward_downstream",
                    "Line": 6
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Backward\u003cMetaInfo\u003e.get_all_backward_transients_with_rpc_prefix",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward\u003cMetaInfo\u003e.get_all_persistents_and_transients_with_rpc_prefix",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward\u003cMetaInfo\u003e.strip_rpc_prefix_and_set_upstream",
                    "Line": 6
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward\u003cMetaInfo\u003e.strip_rpc_prefix_and_set_persistent",
                    "Line": 6
                }
            ]
        },
        "metainfo?metainfo::convert#RpcConverter.add_prefix": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::convert",
            "Name": "RpcConverter.add_prefix",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "alloc::string",
                    "Name": "with_capacity",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr::from_string",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::str",
                    "Name": "len",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "alloc::string",
                    "Name": "push_str",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "alloc::string",
                    "Name": "String",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 5
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cRpcConverter\u003e.add_transient_prefix",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cRpcConverter\u003e.add_persistent_prefix",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cRpcConverter\u003e.add_backward_prefix",
                    "Line": 1
                }
            ]
        },
        "metainfo?metainfo::convert#RpcConverter.remove_prefix": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::convert",
            "Name": "RpcConverter.remove_prefix",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr::from_string",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::str",
                    "Name": "strip_prefix",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "alloc::str",
                    "Name": "to_owned",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 1
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cRpcConverter\u003e.remove_persistent_prefix",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cRpcConverter\u003e.remove_backward_prefix",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cRpcConverter\u003e.remove_transient_prefix",
                    "Line": 1
                }
            ]
        },
        "metainfo?metainfo::convert#add_http_prefix": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::convert",
            "Name": "add_http_prefix",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::macros",
                    "Name": "assert_eq",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cHttpConverter\u003e.add_persistent_prefix",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cHttpConverter\u003e.add_transient_prefix",
                    "Line": 7
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cHttpConverter\u003e.add_backward_prefix",
                    "Line": 11
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter",
                    "Line": 3
                }
            ],
            "References": null
        },
        "metainfo?metainfo::convert#add_rpc_prefix": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::convert",
            "Name": "add_rpc_prefix",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::macros",
                    "Name": "assert_eq",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cRpcConverter\u003e.add_persistent_prefix",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cRpcConverter\u003e.add_transient_prefix",
                    "Line": 7
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cRpcConverter\u003e.add_backward_prefix",
                    "Line": 11
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "RpcConverter",
                    "Line": 3
                }
            ],
            "References": null
        },
        "metainfo?metainfo::convert#add_transient_prefix": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::convert",
            "Name": "add_transient_prefix",
            "Type": "UNKNOWN",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_all_persistents_and_transients",
                    "Line": 29
                }
            ]
        },
        "metainfo?metainfo::convert#ch": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::convert",
            "Name": "ch",
            "Type": "VAR",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.to_rpc_format",
                    "Line": 0
                }
            ],
            "References": null
        },
        "metainfo?metainfo::convert#check": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::convert",
            "Name": "check",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "http_format_convert_test",
                    "Line": 0
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::macros",
                    "Name": "assert_eq",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.to_http_format_string",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter",
                    "Line": 1
                }
            ],
            "References": null
        },
        "metainfo?metainfo::convert#check_http": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::convert",
            "Name": "check_http",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "format_bidirect_convert",
                    "Line": 0
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::macros",
                    "Name": "assert_eq",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.to_http_format_string",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.to_rpc_format_string",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter",
                    "Line": 2
                }
            ],
            "References": null
        },
        "metainfo?metainfo::convert#check_rpc": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::convert",
            "Name": "check_rpc",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "format_bidirect_convert",
                    "Line": 0
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::macros",
                    "Name": "assert_eq",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.to_rpc_format_string",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.to_http_format_string",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter",
                    "Line": 2
                }
            ],
            "References": null
        },
        "metainfo?metainfo::convert#format_bidirect_convert": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::convert",
            "Name": "format_bidirect_convert",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::macros",
                    "Name": "assert_eq",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.to_rpc_format_string",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.to_http_format_string",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter",
                    "Line": 4
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "check_rpc",
                    "Line": 0
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "check_http",
                    "Line": 0
                }
            ]
        },
        "metainfo?metainfo::convert#http_format_convert_test": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::convert",
            "Name": "http_format_convert_test",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::macros",
                    "Name": "assert_eq",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.to_http_format_string",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter",
                    "Line": 3
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "check",
                    "Line": 0
                }
            ]
        },
        "metainfo?metainfo::convert#http_prefix_bidirect": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::convert",
            "Name": "http_prefix_bidirect",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::macros",
                    "Name": "assert_eq",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cHttpConverter\u003e.remove_persistent_prefix",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cHttpConverter\u003e.add_persistent_prefix",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "as_deref",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cHttpConverter\u003e.remove_transient_prefix",
                    "Line": 11
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cHttpConverter\u003e.add_transient_prefix",
                    "Line": 11
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cHttpConverter\u003e.remove_backward_prefix",
                    "Line": 17
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cHttpConverter\u003e.add_backward_prefix",
                    "Line": 17
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "unwrap",
                    "Line": 27
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter",
                    "Line": 4
                }
            ],
            "References": null
        },
        "metainfo?metainfo::convert#key": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::convert",
            "Name": "key",
            "Type": "VAR",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::str",
                    "Name": "strip_prefix",
                    "Line": 0
                }
            ],
            "References": null
        },
        "metainfo?metainfo::convert#mut buf": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::convert",
            "Name": "mut buf",
            "Type": "VAR",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "alloc::string",
                    "Name": "String",
                    "Line": 0
                }
            ],
            "References": null
        },
        "metainfo?metainfo::convert#mut res": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::convert",
            "Name": "mut res",
            "Type": "VAR",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "alloc::string",
                    "Name": "String",
                    "Line": 0
                }
            ],
            "References": null
        },
        "metainfo?metainfo::convert#remove_http_prefix": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::convert",
            "Name": "remove_http_prefix",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::macros",
                    "Name": "assert_eq",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cHttpConverter\u003e.remove_persistent_prefix",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "as_deref",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cHttpConverter\u003e.remove_transient_prefix",
                    "Line": 10
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cHttpConverter\u003e.remove_backward_prefix",
                    "Line": 16
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter",
                    "Line": 3
                }
            ],
            "References": null
        },
        "metainfo?metainfo::convert#remove_rpc_prefix": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::convert",
            "Name": "remove_rpc_prefix",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::macros",
                    "Name": "assert_eq",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cRpcConverter\u003e.remove_persistent_prefix",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "as_deref",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cRpcConverter\u003e.remove_transient_prefix",
                    "Line": 10
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cRpcConverter\u003e.remove_backward_prefix",
                    "Line": 16
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "RpcConverter",
                    "Line": 3
                }
            ],
            "References": null
        },
        "metainfo?metainfo::convert#rpc_format_convert_test": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::convert",
            "Name": "rpc_format_convert_test",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::macros",
                    "Name": "assert_eq",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.to_rpc_format_string",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter",
                    "Line": 3
                }
            ],
            "References": null
        },
        "metainfo?metainfo::convert#rpc_prefix_bidirect": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::convert",
            "Name": "rpc_prefix_bidirect",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::macros",
                    "Name": "assert_eq",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cRpcConverter\u003e.remove_persistent_prefix",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cRpcConverter\u003e.add_persistent_prefix",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "as_deref",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cRpcConverter\u003e.remove_transient_prefix",
                    "Line": 11
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cRpcConverter\u003e.add_transient_prefix",
                    "Line": 11
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cRpcConverter\u003e.remove_backward_prefix",
                    "Line": 17
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cRpcConverter\u003e.add_backward_prefix",
                    "Line": 17
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "unwrap",
                    "Line": 27
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "RpcConverter",
                    "Line": 4
                }
            ],
            "References": null
        },
        "metainfo?metainfo::faststr_map#FastStrMap": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::faststr_map",
            "Name": "FastStrMap",
            "Type": "TYPE",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "rustc-hash@2.0.0",
                    "PkgPath": "rustc-hash::random_state",
                    "Name": "FxHashMapRand",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::any",
                    "Name": "TypeId",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 5
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_faststr",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.extend",
                    "Line": 18
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.insert_faststr",
                    "Line": 4
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo",
                    "Line": 34
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.extend",
                    "Line": 1
                }
            ]
        },
        "metainfo?metainfo::faststr_map#FastStrMap.capacity": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::faststr_map",
            "Name": "FastStrMap.capacity",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "capacity",
                    "Line": 2
                }
            ],
            "References": null
        },
        "metainfo?metainfo::faststr_map#FastStrMap.clear": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::faststr_map",
            "Name": "FastStrMap.clear",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "clear",
                    "Line": 2
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.clear",
                    "Line": 12
                }
            ]
        },
        "metainfo?metainfo::faststr_map#FastStrMap.contains": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::faststr_map",
            "Name": "FastStrMap.contains",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::any",
                    "Name": "of",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "contains_key",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::any",
                    "Name": "TypeId",
                    "Line": 2
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.contains_faststr",
                    "Line": 6
                }
            ]
        },
        "metainfo?metainfo::faststr_map#FastStrMap.entry": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::faststr_map",
            "Name": "FastStrMap.entry",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::any",
                    "Name": "of",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "entry",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::any",
                    "Name": "TypeId",
                    "Line": 2
                }
            ],
            "References": null
        },
        "metainfo?metainfo::faststr_map#FastStrMap.extend": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::faststr_map",
            "Name": "FastStrMap.extend",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "extend",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap",
                    "Line": 1
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.extend",
                    "Line": 19
                }
            ]
        },
        "metainfo?metainfo::faststr_map#FastStrMap.get": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::faststr_map",
            "Name": "FastStrMap.get",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::any",
                    "Name": "of",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "get",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::any",
                    "Name": "TypeId",
                    "Line": 2
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_faststr",
                    "Line": 5
                }
            ]
        },
        "metainfo?metainfo::faststr_map#FastStrMap.get_mut": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::faststr_map",
            "Name": "FastStrMap.get_mut",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::any",
                    "Name": "of",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "get_mut",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::any",
                    "Name": "TypeId",
                    "Line": 2
                }
            ],
            "References": null
        },
        "metainfo?metainfo::faststr_map#FastStrMap.insert": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::faststr_map",
            "Name": "FastStrMap.insert",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::any",
                    "Name": "of",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "insert",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::marker",
                    "Name": "Send",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::marker",
                    "Name": "Sync",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::any",
                    "Name": "TypeId",
                    "Line": 2
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.insert_faststr",
                    "Line": 5
                }
            ]
        },
        "metainfo?metainfo::faststr_map#FastStrMap.is_empty": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::faststr_map",
            "Name": "FastStrMap.is_empty",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "is_empty",
                    "Line": 2
                }
            ],
            "References": null
        },
        "metainfo?metainfo::faststr_map#FastStrMap.iter": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::faststr_map",
            "Name": "FastStrMap.iter",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "iter",
                    "Line": 2
                }
            ],
            "References": null
        },
        "metainfo?metainfo::faststr_map#FastStrMap.len": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::faststr_map",
            "Name": "FastStrMap.len",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "len",
                    "Line": 2
                }
            ],
            "References": null
        },
        "metainfo?metainfo::faststr_map#FastStrMap.remove": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::faststr_map",
            "Name": "FastStrMap.remove",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::any",
                    "Name": "of",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "remove",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::any",
                    "Name": "TypeId",
                    "Line": 2
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.remove_faststr",
                    "Line": 6
                }
            ]
        },
        "metainfo?metainfo::faststr_map#FastStrMap::new": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::faststr_map",
            "Name": "FastStrMap::new",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "default",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "rustc-hash@2.0.0",
                    "PkgPath": "rustc-hash::random_state",
                    "Name": "FxHashMapRand",
                    "Line": 3
                }
            ],
            "References": null
        },
        "metainfo?metainfo::faststr_map#FastStrMap::with_capacity": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::faststr_map",
            "Name": "FastStrMap::with_capacity",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "with_capacity_and_hasher",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "rustc-hash@2.0.0",
                    "PkgPath": "rustc-hash::random_state",
                    "Name": "Default\u003cFxRandomState\u003e::default",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "rustc-hash@2.0.0",
                    "PkgPath": "rustc-hash::random_state",
                    "Name": "FxHashMapRand",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::default",
                    "Name": "Default",
                    "Line": 3
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.extend",
                    "Line": 18
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.insert_faststr",
                    "Line": 4
                }
            ]
        },
        "metainfo?metainfo::forward#Forward": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::forward",
            "Name": "Forward",
            "Type": "TYPE",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "AsRef",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "AsRef",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "AsRef",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "ahash@0.8.11",
                    "PkgPath": "ahash::hash_map",
                    "Name": "AHashMap",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "ahash@0.8.11",
                    "PkgPath": "ahash::hash_map",
                    "Name": "AHashMap",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 7
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "ahash@0.8.11",
                    "PkgPath": "ahash::hash_map",
                    "Name": "AHashMap",
                    "Line": 7
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 7
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 7
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 11
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "ahash@0.8.11",
                    "PkgPath": "ahash::hash_map",
                    "Name": "AHashMap",
                    "Line": 11
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 11
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 11
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 14
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "ahash@0.8.11",
                    "PkgPath": "ahash::hash_map",
                    "Name": "AHashMap",
                    "Line": 14
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 14
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 14
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "Into",
                    "Line": 16
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 16
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "Into",
                    "Line": 16
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 16
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "Into",
                    "Line": 17
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 17
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "Into",
                    "Line": 17
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 17
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "Into",
                    "Line": 18
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 18
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "Into",
                    "Line": 18
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 18
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "AsRef",
                    "Line": 20
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "Into",
                    "Line": 20
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 20
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "AsRef",
                    "Line": 25
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "Into",
                    "Line": 25
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 25
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "AsRef",
                    "Line": 31
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "Into",
                    "Line": 31
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 31
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "AsRef",
                    "Line": 36
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "Into",
                    "Line": 36
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 36
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "AsRef",
                    "Line": 42
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 42
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 42
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "AsRef",
                    "Line": 43
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 43
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 43
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "AsRef",
                    "Line": 44
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 44
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 44
                }
            ],
            "References": null
        },
        "metainfo?metainfo::kv#DEFAULT_CAPACITY": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::kv",
            "Name": "DEFAULT_CAPACITY",
            "Type": "VAR",
            "Dependencies": null,
            "References": null
        },
        "metainfo?metainfo::kv#Node": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::kv",
            "Name": "Node",
            "Type": "TYPE",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "ahash@0.8.11",
                    "PkgPath": "ahash::hash_map",
                    "Name": "AHashMap",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "ahash@0.8.11",
                    "PkgPath": "ahash::hash_map",
                    "Name": "AHashMap",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "ahash@0.8.11",
                    "PkgPath": "ahash::hash_map",
                    "Name": "AHashMap",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 5
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "test_add_stale",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "mut node",
                    "Line": 0
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.ensure_backward_node",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo::from_node",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.ensure_forward_node",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo",
                    "Line": 38
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo",
                    "Line": 39
                }
            ]
        },
        "metainfo?metainfo::kv#Node.clear": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::kv",
            "Name": "Node.clear",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "as_mut",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "clear",
                    "Line": 2
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.clear",
                    "Line": 15
                }
            ]
        },
        "metainfo?metainfo::kv#Node.extend": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::kv",
            "Name": "Node.extend",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "is_none",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "as_mut",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "unwrap",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "ahash@0.8.11",
                    "PkgPath": "ahash::hash_map",
                    "Name": "Extend\u003cAHashMap\u003e.extend",
                    "Line": 5
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.extend",
                    "Line": 26
                }
            ]
        },
        "metainfo?metainfo::kv#del_impl": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::kv",
            "Name": "del_impl",
            "Type": "FUNC",
            "Dependencies": null,
            "References": null
        },
        "metainfo?metainfo::kv#get_all_impl": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::kv",
            "Name": "get_all_impl",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_all_backword_transients_with_prefix",
                    "Line": 10
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward\u003cMetaInfo\u003e.get_all_upstreams",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward\u003cMetaInfo\u003e.get_all_transients",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward\u003cMetaInfo\u003e.get_all_persistents",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_all_persistents_and_transients",
                    "Line": 10
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Backward\u003cMetaInfo\u003e.get_all_backward_transients",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Backward\u003cMetaInfo\u003e.get_all_backward_downstreams",
                    "Line": 2
                }
            ]
        },
        "metainfo?metainfo::kv#get_impl": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::kv",
            "Name": "get_impl",
            "Type": "FUNC",
            "Dependencies": null,
            "References": null
        },
        "metainfo?metainfo::kv#mut node": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::kv",
            "Name": "mut node",
            "Type": "VAR",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "Node",
                    "Line": 0
                }
            ],
            "References": null
        },
        "metainfo?metainfo::kv#set_impl": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::kv",
            "Name": "set_impl",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "test_add_stale",
                    "Line": 3
                }
            ]
        },
        "metainfo?metainfo::kv#test_add_stale": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::kv",
            "Name": "test_add_stale",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "set_impl",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::macros",
                    "Name": "println",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "Node",
                    "Line": 2
                }
            ],
            "References": null
        },
        "metainfo?metainfo::type_map#AnyObject": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::type_map",
            "Name": "AnyObject",
            "Type": "TYPE",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "alloc::boxed",
                    "Name": "Box",
                    "Line": 0
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::any",
                    "Name": "Any",
                    "Line": 0
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::marker",
                    "Name": "Send",
                    "Line": 0
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::marker",
                    "Name": "Sync",
                    "Line": 0
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.iter",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap",
                    "Line": 2
                }
            ]
        },
        "metainfo?metainfo::type_map#Entry": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::type_map",
            "Name": "Entry",
            "Type": "TYPE",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "Entry",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "AnyObject",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::marker",
                    "Name": "PhantomData",
                    "Line": 2
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.entry",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry.and_modify",
                    "Line": 5
                }
            ]
        },
        "metainfo?metainfo::type_map#Entry.and_modify": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::type_map",
            "Name": "Entry.and_modify",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "and_modify",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::any",
                    "Name": "downcast_mut",
                    "Line": 7
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "unwrap",
                    "Line": 7
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::ops::function",
                    "Name": "FnOnce",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::marker",
                    "Name": "Send",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::marker",
                    "Name": "Sync",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::marker",
                    "Name": "PhantomData",
                    "Line": 9
                }
            ],
            "References": null
        },
        "metainfo?metainfo::type_map#Entry.or_default": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::type_map",
            "Name": "Entry.or_default",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::default",
                    "Name": "default",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry.or_insert_with",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::default",
                    "Name": "Default",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::marker",
                    "Name": "Send",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::marker",
                    "Name": "Sync",
                    "Line": 4
                }
            ],
            "References": null
        },
        "metainfo?metainfo::type_map#Entry.or_insert": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::type_map",
            "Name": "Entry.or_insert",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "alloc::boxed",
                    "Name": "new",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "or_insert_with",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::any",
                    "Name": "downcast_mut",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "unwrap",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::marker",
                    "Name": "Send",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::marker",
                    "Name": "Sync",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "alloc::boxed",
                    "Name": "Box",
                    "Line": 5
                }
            ],
            "References": null
        },
        "metainfo?metainfo::type_map#Entry.or_insert_with": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::type_map",
            "Name": "Entry.or_insert_with",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "alloc::boxed",
                    "Name": "new",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "or_insert_with",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::any",
                    "Name": "downcast_mut",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "unwrap",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::ops::function",
                    "Name": "FnOnce",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::marker",
                    "Name": "Send",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::marker",
                    "Name": "Sync",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "alloc::boxed",
                    "Name": "Box",
                    "Line": 5
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry.or_default",
                    "Line": 6
                }
            ]
        },
        "metainfo?metainfo::type_map#Entry.or_insert_with_key": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::type_map",
            "Name": "Entry.or_insert_with_key",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "alloc::boxed",
                    "Name": "new",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "or_insert_with_key",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::any",
                    "Name": "downcast_mut",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "unwrap",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::ops::function",
                    "Name": "FnOnce",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::marker",
                    "Name": "Send",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::marker",
                    "Name": "Sync",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "alloc::boxed",
                    "Name": "Box",
                    "Line": 5
                }
            ],
            "References": null
        },
        "metainfo?metainfo::type_map#TypeMap": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::type_map",
            "Name": "TypeMap",
            "Type": "TYPE",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "rustc-hash@2.0.0",
                    "PkgPath": "rustc-hash::random_state",
                    "Name": "FxHashMapRand",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::any",
                    "Name": "TypeId",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "AnyObject",
                    "Line": 2
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.insert",
                    "Line": 4
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.extend",
                    "Line": 6
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo",
                    "Line": 32
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap::with_capacity",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap::new",
                    "Line": 2
                }
            ]
        },
        "metainfo?metainfo::type_map#TypeMap.capacity": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::type_map",
            "Name": "TypeMap.capacity",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "capacity",
                    "Line": 2
                }
            ],
            "References": null
        },
        "metainfo?metainfo::type_map#TypeMap.clear": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::type_map",
            "Name": "TypeMap.clear",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "clear",
                    "Line": 2
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.clear",
                    "Line": 6
                }
            ]
        },
        "metainfo?metainfo::type_map#TypeMap.contains": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::type_map",
            "Name": "TypeMap.contains",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::any",
                    "Name": "of",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "contains_key",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::any",
                    "Name": "TypeId",
                    "Line": 2
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.contains",
                    "Line": 6
                }
            ]
        },
        "metainfo?metainfo::type_map#TypeMap.entry": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::type_map",
            "Name": "TypeMap.entry",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::any",
                    "Name": "of",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "entry",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::any",
                    "Name": "TypeId",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::marker",
                    "Name": "PhantomData",
                    "Line": 4
                }
            ],
            "References": null
        },
        "metainfo?metainfo::type_map#TypeMap.extend": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::type_map",
            "Name": "TypeMap.extend",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "extend",
                    "Line": 2
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.extend",
                    "Line": 7
                }
            ]
        },
        "metainfo?metainfo::type_map#TypeMap.get": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::type_map",
            "Name": "TypeMap.get",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::any",
                    "Name": "of",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "get",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "and_then",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::any",
                    "Name": "downcast_ref",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::any",
                    "Name": "TypeId",
                    "Line": 3
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get",
                    "Line": 3
                }
            ]
        },
        "metainfo?metainfo::type_map#TypeMap.get_mut": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::type_map",
            "Name": "TypeMap.get_mut",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::any",
                    "Name": "of",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "get_mut",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "and_then",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::any",
                    "Name": "downcast_mut",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::any",
                    "Name": "TypeId",
                    "Line": 3
                }
            ],
            "References": null
        },
        "metainfo?metainfo::type_map#TypeMap.insert": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::type_map",
            "Name": "TypeMap.insert",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::any",
                    "Name": "of",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "alloc::boxed",
                    "Name": "new",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "insert",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::marker",
                    "Name": "Send",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::marker",
                    "Name": "Sync",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::any",
                    "Name": "TypeId",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "alloc::boxed",
                    "Name": "Box",
                    "Line": 2
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.insert",
                    "Line": 5
                }
            ]
        },
        "metainfo?metainfo::type_map#TypeMap.is_empty": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::type_map",
            "Name": "TypeMap.is_empty",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "is_empty",
                    "Line": 2
                }
            ],
            "References": null
        },
        "metainfo?metainfo::type_map#TypeMap.iter": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::type_map",
            "Name": "TypeMap.iter",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "iter",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "Iter",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::any",
                    "Name": "TypeId",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "AnyObject",
                    "Line": 1
                }
            ],
            "References": null
        },
        "metainfo?metainfo::type_map#TypeMap.len": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::type_map",
            "Name": "TypeMap.len",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "len",
                    "Line": 2
                }
            ],
            "References": null
        },
        "metainfo?metainfo::type_map#TypeMap.remove": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::type_map",
            "Name": "TypeMap.remove",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::any",
                    "Name": "of",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "remove",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "and_then",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "alloc::boxed::convert",
                    "Name": "downcast",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::result",
                    "Name": "ok",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "map",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::any",
                    "Name": "TypeId",
                    "Line": 3
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.remove",
                    "Line": 4
                }
            ]
        },
        "metainfo?metainfo::type_map#TypeMap::new": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::type_map",
            "Name": "TypeMap::new",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "default",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "rustc-hash@2.0.0",
                    "PkgPath": "rustc-hash::random_state",
                    "Name": "FxHashMapRand",
                    "Line": 3
                }
            ],
            "References": null
        },
        "metainfo?metainfo::type_map#TypeMap::with_capacity": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::type_map",
            "Name": "TypeMap::with_capacity",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "with_capacity_and_hasher",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "rustc-hash@2.0.0",
                    "PkgPath": "rustc-hash::random_state",
                    "Name": "Default\u003cFxRandomState\u003e::default",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "rustc-hash@2.0.0",
                    "PkgPath": "rustc-hash::random_state",
                    "Name": "FxHashMapRand",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::default",
                    "Name": "Default",
                    "Line": 3
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.insert",
                    "Line": 4
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.extend",
                    "Line": 6
                }
            ]
        },
        "metainfo?metainfo::type_map#v": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::type_map",
            "Name": "v",
            "Type": "VAR",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "or_insert_with_key",
                    "Line": 0
                }
            ],
            "References": null
        },
        "rustc-hash@2.0.0?rustc-hash::random_state#Default\u003cFxRandomState\u003e::default": {
            "ModPath": "rustc-hash@2.0.0",
            "PkgPath": "rustc-hash::random_state",
            "Name": "Default\u003cFxRandomState\u003e::default",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap::with_capacity",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap::with_capacity",
                    "Line": 3
                }
            ]
        },
        "rustc-hash@2.0.0?rustc-hash::random_state#FxHashMapRand": {
            "ModPath": "rustc-hash@2.0.0",
            "PkgPath": "rustc-hash::random_state",
            "Name": "FxHashMapRand",
            "Type": "TYPE",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap::with_capacity",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap::new",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap::with_capacity",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap::new",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap",
                    "Line": 5
                }
            ]
        },
        "std?std::collections::hash::map#Entry": {
            "ModPath": "std",
            "PkgPath": "std::collections::hash::map",
            "Name": "Entry",
            "Type": "TYPE",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry",
                    "Line": 1
                }
            ]
        },
        "std?std::collections::hash::map#Iter": {
            "ModPath": "std",
            "PkgPath": "std::collections::hash::map",
            "Name": "Iter",
            "Type": "TYPE",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.iter",
                    "Line": 1
                }
            ]
        },
        "std?std::collections::hash::map#and_modify": {
            "ModPath": "std",
            "PkgPath": "std::collections::hash::map",
            "Name": "and_modify",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry.and_modify",
                    "Line": 6
                }
            ]
        },
        "std?std::collections::hash::map#capacity": {
            "ModPath": "std",
            "PkgPath": "std::collections::hash::map",
            "Name": "capacity",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.capacity",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.capacity",
                    "Line": 2
                }
            ]
        },
        "std?std::collections::hash::map#clear": {
            "ModPath": "std",
            "PkgPath": "std::collections::hash::map",
            "Name": "clear",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "Node.clear",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.clear",
                    "Line": 9
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.clear",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.clear",
                    "Line": 2
                }
            ]
        },
        "std?std::collections::hash::map#contains_key": {
            "ModPath": "std",
            "PkgPath": "std::collections::hash::map",
            "Name": "contains_key",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.contains_string",
                    "Line": 6
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.contains",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.contains",
                    "Line": 2
                }
            ]
        },
        "std?std::collections::hash::map#default": {
            "ModPath": "std",
            "PkgPath": "std::collections::hash::map",
            "Name": "default",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap::new",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap::new",
                    "Line": 3
                }
            ]
        },
        "std?std::collections::hash::map#entry": {
            "ModPath": "std",
            "PkgPath": "std::collections::hash::map",
            "Name": "entry",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.entry",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.entry",
                    "Line": 2
                }
            ]
        },
        "std?std::collections::hash::map#extend": {
            "ModPath": "std",
            "PkgPath": "std::collections::hash::map",
            "Name": "extend",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.extend",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.extend",
                    "Line": 2
                }
            ]
        },
        "std?std::collections::hash::map#get": {
            "ModPath": "std",
            "PkgPath": "std::collections::hash::map",
            "Name": "get",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.get",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.get",
                    "Line": 2
                }
            ]
        },
        "std?std::collections::hash::map#get_mut": {
            "ModPath": "std",
            "PkgPath": "std::collections::hash::map",
            "Name": "get_mut",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.get_mut",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.get_mut",
                    "Line": 2
                }
            ]
        },
        "std?std::collections::hash::map#insert": {
            "ModPath": "std",
            "PkgPath": "std::collections::hash::map",
            "Name": "insert",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.insert",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.insert",
                    "Line": 2
                }
            ]
        },
        "std?std::collections::hash::map#is_empty": {
            "ModPath": "std",
            "PkgPath": "std::collections::hash::map",
            "Name": "is_empty",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.is_empty",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.is_empty",
                    "Line": 2
                }
            ]
        },
        "std?std::collections::hash::map#iter": {
            "ModPath": "std",
            "PkgPath": "std::collections::hash::map",
            "Name": "iter",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_all_backword_transients_with_prefix",
                    "Line": 17
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_all_persistents_and_transients",
                    "Line": 21
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.iter",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.iter",
                    "Line": 2
                }
            ]
        },
        "std?std::collections::hash::map#len": {
            "ModPath": "std",
            "PkgPath": "std::collections::hash::map",
            "Name": "len",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_all_backword_transients_with_prefix",
                    "Line": 11
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_all_persistents_and_transients",
                    "Line": 12
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.len",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.len",
                    "Line": 2
                }
            ]
        },
        "std?std::collections::hash::map#or_insert_with": {
            "ModPath": "std",
            "PkgPath": "std::collections::hash::map",
            "Name": "or_insert_with",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry.or_insert",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry.or_insert_with",
                    "Line": 5
                }
            ]
        },
        "std?std::collections::hash::map#or_insert_with_key": {
            "ModPath": "std",
            "PkgPath": "std::collections::hash::map",
            "Name": "or_insert_with_key",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry.or_insert_with_key",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "v",
                    "Line": 0
                }
            ]
        },
        "std?std::collections::hash::map#remove": {
            "ModPath": "std",
            "PkgPath": "std::collections::hash::map",
            "Name": "remove",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.remove",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.remove",
                    "Line": 2
                }
            ]
        },
        "std?std::collections::hash::map#with_capacity_and_hasher": {
            "ModPath": "std",
            "PkgPath": "std::collections::hash::map",
            "Name": "with_capacity_and_hasher",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap::with_capacity",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap::with_capacity",
                    "Line": 3
                }
            ]
        },
        "std?std::macros#println": {
            "ModPath": "std",
            "PkgPath": "std::macros",
            "Name": "println",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "test_add_stale",
                    "Line": 4
                }
            ]
        }
    }
}