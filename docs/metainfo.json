{
    "id": "/Users/bytedance/golang/work/abcoder/tmp/metainfo",
    "Modules": {
        "": {
            "Language": "rust",
            "Version": "",
            "Name": "",
            "Dir": "",
            "Packages": {
                "alloc::boxed": {
                    "IsMain": false,
                    "IsTest": false,
                    "PkgPath": "alloc::boxed",
                    "Functions": {
                        "new": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "alloc::boxed",
                            "Name": "new",
                            "File": "boxed.rs",
                            "Line": 272,
                            "StartOffset": 10263,
                            "EndOffset": 10266,
                            "Content": "new"
                        }
                    },
                    "Types": {
                        "Box": {
                            "Exported": false,
                            "TypeKind": "struct",
                            "ModPath": "",
                            "PkgPath": "alloc::boxed",
                            "Name": "Box",
                            "File": "boxed.rs",
                            "Line": 230,
                            "StartOffset": 8963,
                            "EndOffset": 8966,
                            "Content": "Box"
                        }
                    },
                    "Vars": {}
                },
                "alloc::boxed::convert": {
                    "IsMain": false,
                    "IsTest": false,
                    "PkgPath": "alloc::boxed::convert",
                    "Functions": {
                        "downcast": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "alloc::boxed::convert",
                            "Name": "downcast",
                            "File": "convert.rs",
                            "Line": 481,
                            "StartOffset": 14499,
                            "EndOffset": 14507,
                            "Content": "downcast"
                        }
                    },
                    "Types": {},
                    "Vars": {}
                },
                "alloc::str": {
                    "IsMain": false,
                    "IsTest": false,
                    "PkgPath": "alloc::str",
                    "Functions": {
                        "to_owned": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "alloc::str",
                            "Name": "to_owned",
                            "File": "str.rs",
                            "Line": 209,
                            "StartOffset": 7705,
                            "EndOffset": 7713,
                            "Content": "to_owned"
                        }
                    },
                    "Types": {},
                    "Vars": {}
                },
                "alloc::string": {
                    "IsMain": false,
                    "IsTest": false,
                    "PkgPath": "alloc::string",
                    "Functions": {
                        "push": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "alloc::string",
                            "Name": "push",
                            "File": "string.rs",
                            "Line": 1418,
                            "StartOffset": 48420,
                            "EndOffset": 48424,
                            "Content": "push"
                        },
                        "push_str": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "alloc::string",
                            "Name": "push_str",
                            "File": "string.rs",
                            "Line": 1125,
                            "StartOffset": 39213,
                            "EndOffset": 39221,
                            "Content": "push_str"
                        },
                        "with_capacity": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "alloc::string",
                            "Name": "with_capacity",
                            "File": "string.rs",
                            "Line": 488,
                            "StartOffset": 15668,
                            "EndOffset": 15681,
                            "Content": "with_capacity"
                        }
                    },
                    "Types": {
                        "String": {
                            "Exported": false,
                            "TypeKind": "struct",
                            "ModPath": "",
                            "PkgPath": "alloc::string",
                            "Name": "String",
                            "File": "string.rs",
                            "Line": 361,
                            "StartOffset": 11549,
                            "EndOffset": 11555,
                            "Content": "String",
                            "Methods": {
                                "eq": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "PartialEq\u003cString\u003e.eq"
                                }
                            }
                        }
                    },
                    "Vars": {}
                },
                "alloc::sync": {
                    "IsMain": false,
                    "IsTest": false,
                    "PkgPath": "alloc::sync",
                    "Functions": {
                        "as_ref": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "alloc::sync",
                            "Name": "as_ref",
                            "File": "sync.rs",
                            "Line": 3916,
                            "StartOffset": 139351,
                            "EndOffset": 139357,
                            "Content": "as_ref"
                        },
                        "clone": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "alloc::sync",
                            "Name": "clone",
                            "File": "sync.rs",
                            "Line": 2162,
                            "StartOffset": 77417,
                            "EndOffset": 77422,
                            "Content": "clone"
                        },
                        "new": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "alloc::sync",
                            "Name": "new",
                            "File": "sync.rs",
                            "Line": 385,
                            "StartOffset": 14660,
                            "EndOffset": 14663,
                            "Content": "new"
                        }
                    },
                    "Types": {
                        "Arc": {
                            "Exported": false,
                            "TypeKind": "struct",
                            "ModPath": "",
                            "PkgPath": "alloc::sync",
                            "Name": "Arc",
                            "File": "sync.rs",
                            "Line": 239,
                            "StartOffset": 8959,
                            "EndOffset": 8962,
                            "Content": "Arc"
                        }
                    },
                    "Vars": {}
                },
                "core::any": {
                    "IsMain": false,
                    "IsTest": false,
                    "PkgPath": "core::any",
                    "Functions": {
                        "downcast_mut": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::any",
                            "Name": "downcast_mut",
                            "File": "any.rs",
                            "Line": 537,
                            "StartOffset": 16698,
                            "EndOffset": 16710,
                            "Content": "downcast_mut"
                        },
                        "downcast_ref": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::any",
                            "Name": "downcast_ref",
                            "File": "any.rs",
                            "Line": 509,
                            "StartOffset": 15972,
                            "EndOffset": 15984,
                            "Content": "downcast_ref"
                        },
                        "of": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::any",
                            "Name": "of",
                            "File": "any.rs",
                            "Line": 741,
                            "StartOffset": 24137,
                            "EndOffset": 24139,
                            "Content": "of"
                        }
                    },
                    "Types": {
                        "Any": {
                            "Exported": false,
                            "TypeKind": "interface",
                            "ModPath": "",
                            "PkgPath": "core::any",
                            "Name": "Any",
                            "File": "any.rs",
                            "Line": 112,
                            "StartOffset": 4446,
                            "EndOffset": 4449,
                            "Content": "Any"
                        },
                        "TypeId": {
                            "Exported": false,
                            "TypeKind": "struct",
                            "ModPath": "",
                            "PkgPath": "core::any",
                            "Name": "TypeId",
                            "File": "any.rs",
                            "Line": 709,
                            "StartOffset": 23223,
                            "EndOffset": 23229,
                            "Content": "TypeId"
                        }
                    },
                    "Vars": {}
                },
                "core::borrow": {
                    "IsMain": false,
                    "IsTest": false,
                    "PkgPath": "core::borrow",
                    "Functions": {},
                    "Types": {
                        "Borrow": {
                            "Exported": false,
                            "TypeKind": "interface",
                            "ModPath": "",
                            "PkgPath": "core::borrow",
                            "Name": "Borrow",
                            "File": "borrow.rs",
                            "Line": 156,
                            "StartOffset": 6646,
                            "EndOffset": 6652,
                            "Content": "Borrow"
                        }
                    },
                    "Vars": {}
                },
                "core::char::methods": {
                    "IsMain": false,
                    "IsTest": false,
                    "PkgPath": "core::char::methods",
                    "Functions": {
                        "to_ascii_lowercase": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::char::methods",
                            "Name": "to_ascii_lowercase",
                            "File": "methods.rs",
                            "Line": 1253,
                            "StartOffset": 41988,
                            "EndOffset": 42006,
                            "Content": "to_ascii_lowercase"
                        },
                        "to_ascii_uppercase": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::char::methods",
                            "Name": "to_ascii_uppercase",
                            "File": "methods.rs",
                            "Line": 1219,
                            "StartOffset": 40785,
                            "EndOffset": 40803,
                            "Content": "to_ascii_uppercase"
                        }
                    },
                    "Types": {},
                    "Vars": {}
                },
                "core::cmp": {
                    "IsMain": false,
                    "IsTest": false,
                    "PkgPath": "core::cmp",
                    "Functions": {},
                    "Types": {
                        "Eq": {
                            "Exported": false,
                            "TypeKind": "interface",
                            "ModPath": "",
                            "PkgPath": "core::cmp",
                            "Name": "Eq",
                            "File": "cmp.rs",
                            "Line": 333,
                            "StartOffset": 12124,
                            "EndOffset": 12126,
                            "Content": "Eq",
                            "Methods": {
                                "expecting": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "Eq.expecting"
                                },
                                "visit_map": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "Eq.visit_map"
                                }
                            }
                        },
                        "Ord": {
                            "Exported": false,
                            "TypeKind": "interface",
                            "ModPath": "",
                            "PkgPath": "core::cmp",
                            "Name": "Ord",
                            "File": "cmp.rs",
                            "Line": 945,
                            "StartOffset": 31334,
                            "EndOffset": 31337,
                            "Content": "Ord"
                        },
                        "PartialEq": {
                            "Exported": false,
                            "TypeKind": "interface",
                            "ModPath": "",
                            "PkgPath": "core::cmp",
                            "Name": "PartialEq",
                            "File": "cmp.rs",
                            "Line": 247,
                            "StartOffset": 9120,
                            "EndOffset": 9129,
                            "Content": "PartialEq"
                        },
                        "PartialOrd": {
                            "Exported": false,
                            "TypeKind": "interface",
                            "ModPath": "",
                            "PkgPath": "core::cmp",
                            "Name": "PartialOrd",
                            "File": "cmp.rs",
                            "Line": 1328,
                            "StartOffset": 43968,
                            "EndOffset": 43978,
                            "Content": "PartialOrd"
                        }
                    },
                    "Vars": {}
                },
                "core::convert": {
                    "IsMain": false,
                    "IsTest": false,
                    "PkgPath": "core::convert",
                    "Functions": {
                        "as_ref": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::convert",
                            "Name": "as_ref",
                            "File": "mod.rs",
                            "Line": 220,
                            "StartOffset": 8251,
                            "EndOffset": 8257,
                            "Content": "as_ref"
                        }
                    },
                    "Types": {
                        "AsRef": {
                            "Exported": false,
                            "TypeKind": "interface",
                            "ModPath": "",
                            "PkgPath": "core::convert",
                            "Name": "AsRef",
                            "File": "mod.rs",
                            "Line": 217,
                            "StartOffset": 8086,
                            "EndOffset": 8091,
                            "Content": "AsRef"
                        },
                        "From": {
                            "Exported": false,
                            "TypeKind": "interface",
                            "ModPath": "",
                            "PkgPath": "core::convert",
                            "Name": "From",
                            "File": "mod.rs",
                            "Line": 581,
                            "StartOffset": 22571,
                            "EndOffset": 22575,
                            "Content": "From"
                        },
                        "Into": {
                            "Exported": false,
                            "TypeKind": "interface",
                            "ModPath": "",
                            "PkgPath": "core::convert",
                            "Name": "Into",
                            "File": "mod.rs",
                            "Line": 446,
                            "StartOffset": 16474,
                            "EndOffset": 16478,
                            "Content": "Into"
                        }
                    },
                    "Vars": {}
                },
                "core::default": {
                    "IsMain": false,
                    "IsTest": false,
                    "PkgPath": "core::default",
                    "Functions": {
                        "default": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::default",
                            "Name": "default",
                            "File": "default.rs",
                            "Line": 138,
                            "StartOffset": 3386,
                            "EndOffset": 3393,
                            "Content": "default"
                        }
                    },
                    "Types": {
                        "Default": {
                            "Exported": false,
                            "TypeKind": "interface",
                            "ModPath": "",
                            "PkgPath": "core::default",
                            "Name": "Default",
                            "File": "default.rs",
                            "Line": 106,
                            "StartOffset": 2526,
                            "EndOffset": 2533,
                            "Content": "Default"
                        }
                    },
                    "Vars": {}
                },
                "core::fmt": {
                    "IsMain": false,
                    "IsTest": false,
                    "PkgPath": "core::fmt",
                    "Functions": {
                        "debug_struct": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::fmt",
                            "Name": "debug_struct",
                            "File": "mod.rs",
                            "Line": 2227,
                            "StartOffset": 75558,
                            "EndOffset": 75570,
                            "Content": "debug_struct"
                        }
                    },
                    "Types": {
                        "Debug": {
                            "Exported": false,
                            "TypeKind": "interface",
                            "ModPath": "",
                            "PkgPath": "core::fmt",
                            "Name": "Debug",
                            "File": "mod.rs",
                            "Line": 869,
                            "StartOffset": 31542,
                            "EndOffset": 31547,
                            "Content": "Debug"
                        },
                        "Display": {
                            "Exported": false,
                            "TypeKind": "interface",
                            "ModPath": "",
                            "PkgPath": "core::fmt",
                            "Name": "Display",
                            "File": "mod.rs",
                            "Line": 986,
                            "StartOffset": 35769,
                            "EndOffset": 35776,
                            "Content": "Display"
                        },
                        "Formatter": {
                            "Exported": false,
                            "TypeKind": "struct",
                            "ModPath": "",
                            "PkgPath": "core::fmt",
                            "Name": "Formatter",
                            "File": "mod.rs",
                            "Line": 531,
                            "StartOffset": 20076,
                            "EndOffset": 20085,
                            "Content": "Formatter"
                        },
                        "Result": {
                            "Exported": false,
                            "TypeKind": "type-parameter",
                            "ModPath": "",
                            "PkgPath": "core::fmt",
                            "Name": "Result",
                            "File": "mod.rs",
                            "Line": 78,
                            "StartOffset": 2369,
                            "EndOffset": 2375,
                            "Content": "Result"
                        }
                    },
                    "Vars": {}
                },
                "core::fmt::builders": {
                    "IsMain": false,
                    "IsTest": false,
                    "PkgPath": "core::fmt::builders",
                    "Functions": {
                        "finish": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::fmt::builders",
                            "Name": "finish",
                            "File": "builders.rs",
                            "Line": 243,
                            "StartOffset": 7424,
                            "EndOffset": 7430,
                            "Content": "finish"
                        }
                    },
                    "Types": {},
                    "Vars": {}
                },
                "core::hash": {
                    "IsMain": false,
                    "IsTest": false,
                    "PkgPath": "core::hash",
                    "Functions": {},
                    "Types": {
                        "BuildHasher": {
                            "Exported": false,
                            "TypeKind": "interface",
                            "ModPath": "",
                            "PkgPath": "core::hash",
                            "Name": "BuildHasher",
                            "File": "mod.rs",
                            "Line": 636,
                            "StartOffset": 20914,
                            "EndOffset": 20925,
                            "Content": "BuildHasher"
                        },
                        "Hash": {
                            "Exported": false,
                            "TypeKind": "interface",
                            "ModPath": "",
                            "PkgPath": "core::hash",
                            "Name": "Hash",
                            "File": "mod.rs",
                            "Line": 185,
                            "StartOffset": 5429,
                            "EndOffset": 5433,
                            "Content": "Hash"
                        }
                    },
                    "Vars": {}
                },
                "core::iter::traits::collect": {
                    "IsMain": false,
                    "IsTest": false,
                    "PkgPath": "core::iter::traits::collect",
                    "Functions": {},
                    "Types": {
                        "Extend": {
                            "Exported": false,
                            "TypeKind": "interface",
                            "ModPath": "",
                            "PkgPath": "core::iter::traits::collect",
                            "Name": "Extend",
                            "File": "collect.rs",
                            "Line": 396,
                            "StartOffset": 12221,
                            "EndOffset": 12227,
                            "Content": "Extend"
                        },
                        "FromIterator": {
                            "Exported": false,
                            "TypeKind": "interface",
                            "ModPath": "",
                            "PkgPath": "core::iter::traits::collect",
                            "Name": "FromIterator",
                            "File": "collect.rs",
                            "Line": 133,
                            "StartOffset": 4217,
                            "EndOffset": 4229,
                            "Content": "FromIterator"
                        },
                        "IntoIterator": {
                            "Exported": false,
                            "TypeKind": "interface",
                            "ModPath": "",
                            "PkgPath": "core::iter::traits::collect",
                            "Name": "IntoIterator",
                            "File": "collect.rs",
                            "Line": 284,
                            "StartOffset": 8943,
                            "EndOffset": 8955,
                            "Content": "IntoIterator"
                        }
                    },
                    "Vars": {}
                },
                "core::iter::traits::iterator": {
                    "IsMain": false,
                    "IsTest": false,
                    "PkgPath": "core::iter::traits::iterator",
                    "Functions": {
                        "map": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::iter::traits::iterator",
                            "Name": "map",
                            "File": "iterator.rs",
                            "Line": 744,
                            "StartOffset": 25903,
                            "EndOffset": 25906,
                            "Content": "map"
                        }
                    },
                    "Types": {},
                    "Vars": {}
                },
                "core::macros": {
                    "IsMain": false,
                    "IsTest": false,
                    "PkgPath": "core::macros",
                    "Functions": {
                        "assert_eq": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::macros",
                            "Name": "assert_eq",
                            "File": "mod.rs",
                            "Line": 14,
                            "StartOffset": 435,
                            "EndOffset": 2638,
                            "Content": "/// Asserts that two expressions are equal to each other (using [`PartialEq`]).\n///\n/// Assertions are always checked in both debug and release builds, and cannot\n/// be disabled. See [`debug_assert_eq!`] for assertions that are disabled in\n/// release builds by default.\n///\n/// [`debug_assert_eq!`]: crate::debug_assert_eq\n///\n/// On panic, this macro will print the values of the expressions with their\n/// debug representations.\n///\n/// Like [`assert!`], this macro has a second form, where a custom\n/// panic message can be provided.\n///\n/// # Examples\n///\n/// ```\n/// let a = 3;\n/// let b = 1 + 2;\n/// assert_eq!(a, b);\n///\n/// assert_eq!(a, b, \"we are testing addition with {} and {}\", a, b);\n/// ```\n#[macro_export]\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\n#[cfg_attr(not(test), rustc_diagnostic_item = \"assert_eq_macro\")]\n#[allow_internal_unstable(panic_internals)]\nmacro_rules! assert_eq {\n    ($left:expr, $right:expr $(,)?) =\u003e {\n        match (\u0026$left, \u0026$right) {\n            (left_val, right_val) =\u003e {\n                if !(*left_val == *right_val) {\n                    let kind = $crate::panicking::AssertKind::Eq;\n                    // The reborrows below are intentional. Without them, the stack slot for the\n                    // borrow is initialized even before the values are compared, leading to a\n                    // noticeable slow down.\n                    $crate::panicking::assert_failed(kind, \u0026*left_val, \u0026*right_val, $crate::option::Option::None);\n                }\n            }\n        }\n    };\n    ($left:expr, $right:expr, $($arg:tt)+) =\u003e {\n        match (\u0026$left, \u0026$right) {\n            (left_val, right_val) =\u003e {\n                if !(*left_val == *right_val) {\n                    let kind = $crate::panicking::AssertKind::Eq;\n                    // The reborrows below are intentional. Without them, the stack slot for the\n                    // borrow is initialized even before the values are compared, leading to a\n                    // noticeable slow down.\n                    $crate::panicking::assert_failed(kind, \u0026*left_val, \u0026*right_val, $crate::option::Option::Some($crate::format_args!($($arg)+)));\n                }\n            }\n        }\n    };\n}"
                        },
                        "assert_matches": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::macros",
                            "Name": "assert_matches",
                            "File": "mod.rs",
                            "Line": 126,
                            "StartOffset": 4848,
                            "EndOffset": 7580,
                            "Content": "/// Asserts that an expression matches the provided pattern.\n///\n/// This macro is generally preferable to `assert!(matches!(value, pattern))`, because it can print\n/// the debug representation of the actual value shape that did not meet expectations. In contrast,\n/// using [`assert!`] will only print that expectations were not met, but not why.\n///\n/// The pattern syntax is exactly the same as found in a match arm and the `matches!` macro. The\n/// optional if guard can be used to add additional checks that must be true for the matched value,\n/// otherwise this macro will panic.\n///\n/// Assertions are always checked in both debug and release builds, and cannot\n/// be disabled. See [`debug_assert_matches!`] for assertions that are disabled in\n/// release builds by default.\n///\n/// [`debug_assert_matches!`]: crate::assert_matches::debug_assert_matches\n///\n/// On panic, this macro will print the value of the expression with its debug representation.\n///\n/// Like [`assert!`], this macro has a second form, where a custom panic message can be provided.\n///\n/// # Examples\n///\n/// ```\n/// #![feature(assert_matches)]\n///\n/// use std::assert_matches::assert_matches;\n///\n/// let a = Some(345);\n/// let b = Some(56);\n/// assert_matches!(a, Some(_));\n/// assert_matches!(b, Some(_));\n///\n/// assert_matches!(a, Some(345));\n/// assert_matches!(a, Some(345) | None);\n///\n/// // assert_matches!(a, None); // panics\n/// // assert_matches!(b, Some(345)); // panics\n/// // assert_matches!(b, Some(345) | None); // panics\n///\n/// assert_matches!(a, Some(x) if x \u003e 100);\n/// // assert_matches!(a, Some(x) if x \u003c 100); // panics\n/// ```\n#[unstable(feature = \"assert_matches\", issue = \"82775\")]\n#[allow_internal_unstable(panic_internals)]\n#[rustc_macro_transparency = \"semitransparent\"]\npub macro assert_matches {\n    ($left:expr, $(|)? $( $pattern:pat_param )|+ $( if $guard: expr )? $(,)?) =\u003e {\n        match $left {\n            $( $pattern )|+ $( if $guard )? =\u003e {}\n            ref left_val =\u003e {\n                $crate::panicking::assert_matches_failed(\n                    left_val,\n                    $crate::stringify!($($pattern)|+ $(if $guard)?),\n                    $crate::option::Option::None\n                );\n            }\n        }\n    },\n    ($left:expr, $(|)? $( $pattern:pat_param )|+ $( if $guard: expr )?, $($arg:tt)+) =\u003e {\n        match $left {\n            $( $pattern )|+ $( if $guard )? =\u003e {}\n            ref left_val =\u003e {\n                $crate::panicking::assert_matches_failed(\n                    left_val,\n                    $crate::stringify!($($pattern)|+ $(if $guard)?),\n                    $crate::option::Option::Some($crate::format_args!($($arg)+))\n                );\n            }\n        }\n    },\n}"
                        },
                        "assert_ne": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::macros",
                            "Name": "assert_ne",
                            "File": "mod.rs",
                            "Line": 70,
                            "StartOffset": 2640,
                            "EndOffset": 4846,
                            "Content": "/// Asserts that two expressions are not equal to each other (using [`PartialEq`]).\n///\n/// Assertions are always checked in both debug and release builds, and cannot\n/// be disabled. See [`debug_assert_ne!`] for assertions that are disabled in\n/// release builds by default.\n///\n/// [`debug_assert_ne!`]: crate::debug_assert_ne\n///\n/// On panic, this macro will print the values of the expressions with their\n/// debug representations.\n///\n/// Like [`assert!`], this macro has a second form, where a custom\n/// panic message can be provided.\n///\n/// # Examples\n///\n/// ```\n/// let a = 3;\n/// let b = 2;\n/// assert_ne!(a, b);\n///\n/// assert_ne!(a, b, \"we are testing that the values are not equal\");\n/// ```\n#[macro_export]\n#[stable(feature = \"assert_ne\", since = \"1.13.0\")]\n#[cfg_attr(not(test), rustc_diagnostic_item = \"assert_ne_macro\")]\n#[allow_internal_unstable(panic_internals)]\nmacro_rules! assert_ne {\n    ($left:expr, $right:expr $(,)?) =\u003e {\n        match (\u0026$left, \u0026$right) {\n            (left_val, right_val) =\u003e {\n                if *left_val == *right_val {\n                    let kind = $crate::panicking::AssertKind::Ne;\n                    // The reborrows below are intentional. Without them, the stack slot for the\n                    // borrow is initialized even before the values are compared, leading to a\n                    // noticeable slow down.\n                    $crate::panicking::assert_failed(kind, \u0026*left_val, \u0026*right_val, $crate::option::Option::None);\n                }\n            }\n        }\n    };\n    ($left:expr, $right:expr, $($arg:tt)+) =\u003e {\n        match (\u0026($left), \u0026($right)) {\n            (left_val, right_val) =\u003e {\n                if *left_val == *right_val {\n                    let kind = $crate::panicking::AssertKind::Ne;\n                    // The reborrows below are intentional. Without them, the stack slot for the\n                    // borrow is initialized even before the values are compared, leading to a\n                    // noticeable slow down.\n                    $crate::panicking::assert_failed(kind, \u0026*left_val, \u0026*right_val, $crate::option::Option::Some($crate::format_args!($($arg)+)));\n                }\n            }\n        }\n    };\n}"
                        },
                        "cfg_match": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::macros",
                            "Name": "cfg_match",
                            "File": "mod.rs",
                            "Line": 198,
                            "StartOffset": 7582,
                            "EndOffset": 10377,
                            "Content": "/// A macro for defining `#[cfg]` match-like statements.\n///\n/// It is similar to the `if/elif` C preprocessor macro by allowing definition of a cascade of\n/// `#[cfg]` cases, emitting the implementation which matches first.\n///\n/// This allows you to conveniently provide a long list `#[cfg]`'d blocks of code\n/// without having to rewrite each clause multiple times.\n///\n/// Trailing `_` wildcard match arms are **optional** and they indicate a fallback branch when\n/// all previous declarations do not evaluate to true.\n///\n/// # Example\n///\n/// ```\n/// #![feature(cfg_match)]\n///\n/// cfg_match! {\n///     cfg(unix) =\u003e {\n///         fn foo() { /* unix specific functionality */ }\n///     }\n///     cfg(target_pointer_width = \"32\") =\u003e {\n///         fn foo() { /* non-unix, 32-bit functionality */ }\n///     }\n///     _ =\u003e {\n///         fn foo() { /* fallback implementation */ }\n///     }\n/// }\n/// ```\n#[cfg(bootstrap)]\n#[unstable(feature = \"cfg_match\", issue = \"115585\")]\n#[rustc_diagnostic_item = \"cfg_match\"]\npub macro cfg_match {\n    // with a final wildcard\n    (\n        $(cfg($initial_meta:meta) =\u003e { $($initial_tokens:tt)* })+\n        _ =\u003e { $($extra_tokens:tt)* }\n    ) =\u003e {\n        cfg_match! {\n            @__items ();\n            $((($initial_meta) ($($initial_tokens)*)),)+\n            (() ($($extra_tokens)*)),\n        }\n    },\n\n    // without a final wildcard\n    (\n        $(cfg($extra_meta:meta) =\u003e { $($extra_tokens:tt)* })*\n    ) =\u003e {\n        cfg_match! {\n            @__items ();\n            $((($extra_meta) ($($extra_tokens)*)),)*\n        }\n    },\n\n    // Internal and recursive macro to emit all the items\n    //\n    // Collects all the previous cfgs in a list at the beginning, so they can be\n    // negated. After the semicolon is all the remaining items.\n    (@__items ($($_:meta,)*);) =\u003e {},\n    (\n        @__items ($($no:meta,)*);\n        (($($yes:meta)?) ($($tokens:tt)*)),\n        $($rest:tt,)*\n    ) =\u003e {\n        // Emit all items within one block, applying an appropriate #[cfg]. The\n        // #[cfg] will require all `$yes` matchers specified and must also negate\n        // all previous matchers.\n        #[cfg(all(\n            $($yes,)?\n            not(any($($no),*))\n        ))]\n        cfg_match! { @__identity $($tokens)* }\n\n        // Recurse to emit all other items in `$rest`, and when we do so add all\n        // our `$yes` matchers to the list of `$no` matchers as future emissions\n        // will have to negate everything we just matched as well.\n        cfg_match! {\n            @__items ($($no,)* $($yes,)?);\n            $($rest,)*\n        }\n    },\n\n    // Internal macro to make __apply work out right for different match types,\n    // because of how macros match/expand stuff.\n    (@__identity $($tokens:tt)*) =\u003e {\n        $($tokens)*\n    }\n}"
                        },
                        "debug_assert": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::macros",
                            "Name": "debug_assert",
                            "File": "mod.rs",
                            "Line": 349,
                            "StartOffset": 12102,
                            "EndOffset": 14084,
                            "Content": "/// Asserts that a boolean expression is `true` at runtime.\n///\n/// This will invoke the [`panic!`] macro if the provided expression cannot be\n/// evaluated to `true` at runtime.\n///\n/// Like [`assert!`], this macro also has a second version, where a custom panic\n/// message can be provided.\n///\n/// # Uses\n///\n/// Unlike [`assert!`], `debug_assert!` statements are only enabled in non\n/// optimized builds by default. An optimized build will not execute\n/// `debug_assert!` statements unless `-C debug-assertions` is passed to the\n/// compiler. This makes `debug_assert!` useful for checks that are too\n/// expensive to be present in a release build but may be helpful during\n/// development. The result of expanding `debug_assert!` is always type checked.\n///\n/// An unchecked assertion allows a program in an inconsistent state to keep\n/// running, which might have unexpected consequences but does not introduce\n/// unsafety as long as this only happens in safe code. The performance cost\n/// of assertions, however, is not measurable in general. Replacing [`assert!`]\n/// with `debug_assert!` is thus only encouraged after thorough profiling, and\n/// more importantly, only in safe code!\n///\n/// # Examples\n///\n/// ```\n/// // the panic message for these assertions is the stringified value of the\n/// // expression given.\n/// debug_assert!(true);\n///\n/// fn some_expensive_computation() -\u003e bool { true } // a very simple function\n/// debug_assert!(some_expensive_computation());\n///\n/// // assert with a custom message\n/// let x = true;\n/// debug_assert!(x, \"x wasn't true!\");\n///\n/// let a = 3; let b = 27;\n/// debug_assert!(a + b == 30, \"a = {}, b = {}\", a, b);\n/// ```\n#[macro_export]\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\n#[rustc_diagnostic_item = \"debug_assert_macro\"]\n#[allow_internal_unstable(edition_panic)]\nmacro_rules! debug_assert {\n    ($($arg:tt)*) =\u003e {\n        if $crate::cfg!(debug_assertions) {\n            $crate::assert!($($arg)*);\n        }\n    };\n}"
                        },
                        "debug_assert_eq": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::macros",
                            "Name": "debug_assert_eq",
                            "File": "mod.rs",
                            "Line": 402,
                            "StartOffset": 14086,
                            "EndOffset": 15111,
                            "Content": "/// Asserts that two expressions are equal to each other.\n///\n/// On panic, this macro will print the values of the expressions with their\n/// debug representations.\n///\n/// Unlike [`assert_eq!`], `debug_assert_eq!` statements are only enabled in non\n/// optimized builds by default. An optimized build will not execute\n/// `debug_assert_eq!` statements unless `-C debug-assertions` is passed to the\n/// compiler. This makes `debug_assert_eq!` useful for checks that are too\n/// expensive to be present in a release build but may be helpful during\n/// development. The result of expanding `debug_assert_eq!` is always type checked.\n///\n/// # Examples\n///\n/// ```\n/// let a = 3;\n/// let b = 1 + 2;\n/// debug_assert_eq!(a, b);\n/// ```\n#[macro_export]\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\n#[cfg_attr(not(test), rustc_diagnostic_item = \"debug_assert_eq_macro\")]\nmacro_rules! debug_assert_eq {\n    ($($arg:tt)*) =\u003e {\n        if $crate::cfg!(debug_assertions) {\n            $crate::assert_eq!($($arg)*);\n        }\n    };\n}"
                        },
                        "debug_assert_matches": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::macros",
                            "Name": "debug_assert_matches",
                            "File": "mod.rs",
                            "Line": 462,
                            "StartOffset": 16145,
                            "EndOffset": 18362,
                            "Content": "/// Asserts that an expression matches the provided pattern.\n///\n/// This macro is generally preferable to `debug_assert!(matches!(value, pattern))`, because it can\n/// print the debug representation of the actual value shape that did not meet expectations. In\n/// contrast, using [`debug_assert!`] will only print that expectations were not met, but not why.\n///\n/// The pattern syntax is exactly the same as found in a match arm and the `matches!` macro. The\n/// optional if guard can be used to add additional checks that must be true for the matched value,\n/// otherwise this macro will panic.\n///\n/// On panic, this macro will print the value of the expression with its debug representation.\n///\n/// Like [`assert!`], this macro has a second form, where a custom panic message can be provided.\n///\n/// Unlike [`assert_matches!`], `debug_assert_matches!` statements are only enabled in non optimized\n/// builds by default. An optimized build will not execute `debug_assert_matches!` statements unless\n/// `-C debug-assertions` is passed to the compiler. This makes `debug_assert_matches!` useful for\n/// checks that are too expensive to be present in a release build but may be helpful during\n/// development. The result of expanding `debug_assert_matches!` is always type checked.\n///\n/// # Examples\n///\n/// ```\n/// #![feature(assert_matches)]\n///\n/// use std::assert_matches::debug_assert_matches;\n///\n/// let a = Some(345);\n/// let b = Some(56);\n/// debug_assert_matches!(a, Some(_));\n/// debug_assert_matches!(b, Some(_));\n///\n/// debug_assert_matches!(a, Some(345));\n/// debug_assert_matches!(a, Some(345) | None);\n///\n/// // debug_assert_matches!(a, None); // panics\n/// // debug_assert_matches!(b, Some(345)); // panics\n/// // debug_assert_matches!(b, Some(345) | None); // panics\n///\n/// debug_assert_matches!(a, Some(x) if x \u003e 100);\n/// // debug_assert_matches!(a, Some(x) if x \u003c 100); // panics\n/// ```\n#[unstable(feature = \"assert_matches\", issue = \"82775\")]\n#[allow_internal_unstable(assert_matches)]\n#[rustc_macro_transparency = \"semitransparent\"]\npub macro debug_assert_matches($($arg:tt)*) {\n    if $crate::cfg!(debug_assertions) {\n        $crate::assert_matches::assert_matches!($($arg)*);\n    }\n}"
                        },
                        "debug_assert_ne": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::macros",
                            "Name": "debug_assert_ne",
                            "File": "mod.rs",
                            "Line": 432,
                            "StartOffset": 15113,
                            "EndOffset": 16143,
                            "Content": "/// Asserts that two expressions are not equal to each other.\n///\n/// On panic, this macro will print the values of the expressions with their\n/// debug representations.\n///\n/// Unlike [`assert_ne!`], `debug_assert_ne!` statements are only enabled in non\n/// optimized builds by default. An optimized build will not execute\n/// `debug_assert_ne!` statements unless `-C debug-assertions` is passed to the\n/// compiler. This makes `debug_assert_ne!` useful for checks that are too\n/// expensive to be present in a release build but may be helpful during\n/// development. The result of expanding `debug_assert_ne!` is always type checked.\n///\n/// # Examples\n///\n/// ```\n/// let a = 3;\n/// let b = 2;\n/// debug_assert_ne!(a, b);\n/// ```\n#[macro_export]\n#[stable(feature = \"assert_ne\", since = \"1.13.0\")]\n#[cfg_attr(not(test), rustc_diagnostic_item = \"debug_assert_ne_macro\")]\nmacro_rules! debug_assert_ne {\n    ($($arg:tt)*) =\u003e {\n        if $crate::cfg!(debug_assertions) {\n            $crate::assert_ne!($($arg)*);\n        }\n    };\n}"
                        },
                        "matches": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::macros",
                            "Name": "matches",
                            "File": "mod.rs",
                            "Line": 513,
                            "StartOffset": 18364,
                            "EndOffset": 19370,
                            "Content": "/// Returns whether the given expression matches the provided pattern.\n///\n/// The pattern syntax is exactly the same as found in a match arm. The optional if guard can be\n/// used to add additional checks that must be true for the matched value, otherwise this macro will\n/// return `false`.\n///\n/// When testing that a value matches a pattern, it's generally preferable to use\n/// [`assert_matches!`] as it will print the debug representation of the value if the assertion\n/// fails.\n///\n/// # Examples\n///\n/// ```\n/// let foo = 'f';\n/// assert!(matches!(foo, 'A'..='Z' | 'a'..='z'));\n///\n/// let bar = Some(4);\n/// assert!(matches!(bar, Some(x) if x \u003e 2));\n/// ```\n#[macro_export]\n#[stable(feature = \"matches_macro\", since = \"1.42.0\")]\n#[cfg_attr(not(test), rustc_diagnostic_item = \"matches_macro\")]\nmacro_rules! matches {\n    ($expression:expr, $pattern:pat $(if $guard:expr)? $(,)?) =\u003e {\n        match $expression {\n            $pattern $(if $guard)? =\u003e true,\n            _ =\u003e false\n        }\n    };\n}"
                        },
                        "panic": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::macros",
                            "Name": "panic",
                            "File": "mod.rs",
                            "Line": 0,
                            "StartOffset": 0,
                            "EndOffset": 433,
                            "Content": "#[doc = include_str!(\"panic.md\")]\n#[macro_export]\n#[rustc_builtin_macro(core_panic)]\n#[allow_internal_unstable(edition_panic)]\n#[stable(feature = \"core\", since = \"1.6.0\")]\n#[rustc_diagnostic_item = \"core_panic_macro\"]\nmacro_rules! panic {\n    // Expands to either `$crate::panic::panic_2015` or `$crate::panic::panic_2021`\n    // depending on the edition of the caller.\n    ($($arg:tt)*) =\u003e {\n        /* compiler built-in */\n    };\n}"
                        },
                        "r#try": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::macros",
                            "Name": "r#try",
                            "File": "mod.rs",
                            "Line": 544,
                            "StartOffset": 19372,
                            "EndOffset": 22027,
                            "Content": "/// Unwraps a result or propagates its error.\n///\n/// The [`?` operator][propagating-errors] was added to replace `try!`\n/// and should be used instead. Furthermore, `try` is a reserved word\n/// in Rust 2018, so if you must use it, you will need to use the\n/// [raw-identifier syntax][ris]: `r#try`.\n///\n/// [propagating-errors]: https://doc.rust-lang.org/book/ch09-02-recoverable-errors-with-result.html#a-shortcut-for-propagating-errors-the--operator\n/// [ris]: https://doc.rust-lang.org/nightly/rust-by-example/compatibility/raw_identifiers.html\n///\n/// `try!` matches the given [`Result`]. In case of the `Ok` variant, the\n/// expression has the value of the wrapped value.\n///\n/// In case of the `Err` variant, it retrieves the inner error. `try!` then\n/// performs conversion using `From`. This provides automatic conversion\n/// between specialized errors and more general ones. The resulting\n/// error is then immediately returned.\n///\n/// Because of the early return, `try!` can only be used in functions that\n/// return [`Result`].\n///\n/// # Examples\n///\n/// ```\n/// use std::io;\n/// use std::fs::File;\n/// use std::io::prelude::*;\n///\n/// enum MyError {\n///     FileWriteError\n/// }\n///\n/// impl From\u003cio::Error\u003e for MyError {\n///     fn from(e: io::Error) -\u003e MyError {\n///         MyError::FileWriteError\n///     }\n/// }\n///\n/// // The preferred method of quick returning Errors\n/// fn write_to_file_question() -\u003e Result\u003c(), MyError\u003e {\n///     let mut file = File::create(\"my_best_friends.txt\")?;\n///     file.write_all(b\"This is a list of my best friends.\")?;\n///     Ok(())\n/// }\n///\n/// // The previous method of quick returning Errors\n/// fn write_to_file_using_try() -\u003e Result\u003c(), MyError\u003e {\n///     let mut file = r#try!(File::create(\"my_best_friends.txt\"));\n///     r#try!(file.write_all(b\"This is a list of my best friends.\"));\n///     Ok(())\n/// }\n///\n/// // This is equivalent to:\n/// fn write_to_file_using_match() -\u003e Result\u003c(), MyError\u003e {\n///     let mut file = r#try!(File::create(\"my_best_friends.txt\"));\n///     match file.write_all(b\"This is a list of my best friends.\") {\n///         Ok(v) =\u003e v,\n///         Err(e) =\u003e return Err(From::from(e)),\n///     }\n///     Ok(())\n/// }\n/// ```\n#[macro_export]\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\n#[deprecated(since = \"1.39.0\", note = \"use the `?` operator instead\")]\n#[doc(alias = \"?\")]\nmacro_rules! r#try {\n    ($expr:expr $(,)?) =\u003e {\n        match $expr {\n            $crate::result::Result::Ok(val) =\u003e val,\n            $crate::result::Result::Err(err) =\u003e {\n                return $crate::result::Result::Err($crate::convert::From::from(err));\n            }\n        }\n    };\n}"
                        },
                        "todo": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::macros",
                            "Name": "todo",
                            "File": "mod.rs",
                            "Line": 906,
                            "StartOffset": 30913,
                            "EndOffset": 33244,
                            "Content": "/// Indicates unfinished code.\n///\n/// This can be useful if you are prototyping and just\n/// want a placeholder to let your code pass type analysis.\n///\n/// The difference between [`unimplemented!`] and `todo!` is that while `todo!` conveys\n/// an intent of implementing the functionality later and the message is \"not yet\n/// implemented\", `unimplemented!` makes no such claims. Its message is \"not implemented\".\n///\n/// Also, some IDEs will mark `todo!`s.\n///\n/// # Panics\n///\n/// This will always [`panic!`] because `todo!` is just a shorthand for `panic!` with a\n/// fixed, specific message.\n///\n/// Like `panic!`, this macro has a second form for displaying custom values.\n///\n/// # Examples\n///\n/// Here's an example of some in-progress code. We have a trait `Foo`:\n///\n/// ```\n/// trait Foo {\n///     fn bar(\u0026self) -\u003e u8;\n///     fn baz(\u0026self);\n///     fn qux(\u0026self) -\u003e Result\u003cu64, ()\u003e;\n/// }\n/// ```\n///\n/// We want to implement `Foo` on one of our types, but we also want to work on\n/// just `bar()` first. In order for our code to compile, we need to implement\n/// `baz()` and `qux()`, so we can use `todo!`:\n///\n/// ```\n/// # trait Foo {\n/// #     fn bar(\u0026self) -\u003e u8;\n/// #     fn baz(\u0026self);\n/// #     fn qux(\u0026self) -\u003e Result\u003cu64, ()\u003e;\n/// # }\n/// struct MyStruct;\n///\n/// impl Foo for MyStruct {\n///     fn bar(\u0026self) -\u003e u8 {\n///         1 + 1\n///     }\n///\n///     fn baz(\u0026self) {\n///         // Let's not worry about implementing baz() for now\n///         todo!();\n///     }\n///\n///     fn qux(\u0026self) -\u003e Result\u003cu64, ()\u003e {\n///         // We can add a message to todo! to display our omission.\n///         // This will display:\n///         // \"thread 'main' panicked at 'not yet implemented: MyStruct is not yet quxable'\".\n///         todo!(\"MyStruct is not yet quxable\");\n///     }\n/// }\n///\n/// fn main() {\n///     let s = MyStruct;\n///     s.bar();\n///\n///     // We aren't even using baz() or qux(), so this is fine.\n/// }\n/// ```\n#[macro_export]\n#[stable(feature = \"todo_macro\", since = \"1.40.0\")]\n#[cfg_attr(not(test), rustc_diagnostic_item = \"todo_macro\")]\n#[allow_internal_unstable(panic_internals)]\nmacro_rules! todo {\n    () =\u003e {\n        $crate::panicking::panic(\"not yet implemented\")\n    };\n    ($($arg:tt)+) =\u003e {\n        $crate::panic!(\"not yet implemented: {}\", $crate::format_args!($($arg)+))\n    };\n}"
                        },
                        "unimplemented": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::macros",
                            "Name": "unimplemented",
                            "File": "mod.rs",
                            "Line": 819,
                            "StartOffset": 28167,
                            "EndOffset": 30911,
                            "Content": "/// Indicates unimplemented code by panicking with a message of \"not implemented\".\n///\n/// This allows your code to type-check, which is useful if you are prototyping or\n/// implementing a trait that requires multiple methods which you don't plan to use all of.\n///\n/// The difference between `unimplemented!` and [`todo!`] is that while `todo!`\n/// conveys an intent of implementing the functionality later and the message is \"not yet\n/// implemented\", `unimplemented!` makes no such claims. Its message is \"not implemented\".\n///\n/// Also, some IDEs will mark `todo!`s.\n///\n/// # Panics\n///\n/// This will always [`panic!`] because `unimplemented!` is just a shorthand for `panic!` with a\n/// fixed, specific message.\n///\n/// Like `panic!`, this macro has a second form for displaying custom values.\n///\n/// [`todo!`]: crate::todo\n///\n/// # Examples\n///\n/// Say we have a trait `Foo`:\n///\n/// ```\n/// trait Foo {\n///     fn bar(\u0026self) -\u003e u8;\n///     fn baz(\u0026self);\n///     fn qux(\u0026self) -\u003e Result\u003cu64, ()\u003e;\n/// }\n/// ```\n///\n/// We want to implement `Foo` for 'MyStruct', but for some reason it only makes sense\n/// to implement the `bar()` function. `baz()` and `qux()` will still need to be defined\n/// in our implementation of `Foo`, but we can use `unimplemented!` in their definitions\n/// to allow our code to compile.\n///\n/// We still want to have our program stop running if the unimplemented methods are\n/// reached.\n///\n/// ```\n/// # trait Foo {\n/// #     fn bar(\u0026self) -\u003e u8;\n/// #     fn baz(\u0026self);\n/// #     fn qux(\u0026self) -\u003e Result\u003cu64, ()\u003e;\n/// # }\n/// struct MyStruct;\n///\n/// impl Foo for MyStruct {\n///     fn bar(\u0026self) -\u003e u8 {\n///         1 + 1\n///     }\n///\n///     fn baz(\u0026self) {\n///         // It makes no sense to `baz` a `MyStruct`, so we have no logic here\n///         // at all.\n///         // This will display \"thread 'main' panicked at 'not implemented'\".\n///         unimplemented!();\n///     }\n///\n///     fn qux(\u0026self) -\u003e Result\u003cu64, ()\u003e {\n///         // We have some logic here,\n///         // We can add a message to unimplemented! to display our omission.\n///         // This will display:\n///         // \"thread 'main' panicked at 'not implemented: MyStruct isn't quxable'\".\n///         unimplemented!(\"MyStruct isn't quxable\");\n///     }\n/// }\n///\n/// fn main() {\n///     let s = MyStruct;\n///     s.bar();\n/// }\n/// ```\n#[macro_export]\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\n#[cfg_attr(not(test), rustc_diagnostic_item = \"unimplemented_macro\")]\n#[allow_internal_unstable(panic_internals)]\nmacro_rules! unimplemented {\n    () =\u003e {\n        $crate::panicking::panic(\"not implemented\")\n    };\n    ($($arg:tt)+) =\u003e {\n        $crate::panic!(\"not implemented: {}\", $crate::format_args!($($arg)+))\n    };\n}"
                        },
                        "unreachable": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::macros",
                            "Name": "unreachable",
                            "File": "mod.rs",
                            "Line": 754,
                            "StartOffset": 26126,
                            "EndOffset": 28165,
                            "Content": "/// Indicates unreachable code.\n///\n/// This is useful any time that the compiler can't determine that some code is unreachable. For\n/// example:\n///\n/// * Match arms with guard conditions.\n/// * Loops that dynamically terminate.\n/// * Iterators that dynamically terminate.\n///\n/// If the determination that the code is unreachable proves incorrect, the\n/// program immediately terminates with a [`panic!`].\n///\n/// The unsafe counterpart of this macro is the [`unreachable_unchecked`] function, which\n/// will cause undefined behavior if the code is reached.\n///\n/// [`unreachable_unchecked`]: crate::hint::unreachable_unchecked\n///\n/// # Panics\n///\n/// This will always [`panic!`] because `unreachable!` is just a shorthand for `panic!` with a\n/// fixed, specific message.\n///\n/// Like `panic!`, this macro has a second form for displaying custom values.\n///\n/// # Examples\n///\n/// Match arms:\n///\n/// ```\n/// # #[allow(dead_code)]\n/// fn foo(x: Option\u003ci32\u003e) {\n///     match x {\n///         Some(n) if n \u003e= 0 =\u003e println!(\"Some(Non-negative)\"),\n///         Some(n) if n \u003c  0 =\u003e println!(\"Some(Negative)\"),\n///         Some(_)           =\u003e unreachable!(), // compile error if commented out\n///         None              =\u003e println!(\"None\")\n///     }\n/// }\n/// ```\n///\n/// Iterators:\n///\n/// ```\n/// # #[allow(dead_code)]\n/// fn divide_by_three(x: u32) -\u003e u32 { // one of the poorest implementations of x/3\n///     for i in 0.. {\n///         if 3*i \u003c i { panic!(\"u32 overflow\"); }\n///         if x \u003c 3*i { return i-1; }\n///     }\n///     unreachable!(\"The loop should always return\");\n/// }\n/// ```\n#[macro_export]\n#[rustc_builtin_macro(unreachable)]\n#[allow_internal_unstable(edition_panic)]\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\n#[cfg_attr(not(test), rustc_diagnostic_item = \"unreachable_macro\")]\nmacro_rules! unreachable {\n    // Expands to either `$crate::panic::unreachable_2015` or `$crate::panic::unreachable_2021`\n    // depending on the edition of the caller.\n    ($($arg:tt)*) =\u003e {\n        /* compiler built-in */\n    };\n}"
                        },
                        "write": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::macros",
                            "Name": "write",
                            "File": "mod.rs",
                            "Line": 621,
                            "StartOffset": 22029,
                            "EndOffset": 25045,
                            "Content": "/// Writes formatted data into a buffer.\n///\n/// This macro accepts a 'writer', a format string, and a list of arguments. Arguments will be\n/// formatted according to the specified format string and the result will be passed to the writer.\n/// The writer may be any value with a `write_fmt` method; generally this comes from an\n/// implementation of either the [`fmt::Write`] or the [`io::Write`] trait. The macro\n/// returns whatever the `write_fmt` method returns; commonly a [`fmt::Result`], or an\n/// [`io::Result`].\n///\n/// See [`std::fmt`] for more information on the format string syntax.\n///\n/// [`std::fmt`]: ../std/fmt/index.html\n/// [`fmt::Write`]: crate::fmt::Write\n/// [`io::Write`]: ../std/io/trait.Write.html\n/// [`fmt::Result`]: crate::fmt::Result\n/// [`io::Result`]: ../std/io/type.Result.html\n///\n/// # Examples\n///\n/// ```\n/// use std::io::Write;\n///\n/// fn main() -\u003e std::io::Result\u003c()\u003e {\n///     let mut w = Vec::new();\n///     write!(\u0026mut w, \"test\")?;\n///     write!(\u0026mut w, \"formatted {}\", \"arguments\")?;\n///\n///     assert_eq!(w, b\"testformatted arguments\");\n///     Ok(())\n/// }\n/// ```\n///\n/// A module can import both `std::fmt::Write` and `std::io::Write` and call `write!` on objects\n/// implementing either, as objects do not typically implement both. However, the module must\n/// avoid conflict between the trait names, such as by importing them as `_` or otherwise renaming\n/// them:\n///\n/// ```\n/// use std::fmt::Write as _;\n/// use std::io::Write as _;\n///\n/// fn main() -\u003e Result\u003c(), Box\u003cdyn std::error::Error\u003e\u003e {\n///     let mut s = String::new();\n///     let mut v = Vec::new();\n///\n///     write!(\u0026mut s, \"{} {}\", \"abc\", 123)?; // uses fmt::Write::write_fmt\n///     write!(\u0026mut v, \"s = {:?}\", s)?; // uses io::Write::write_fmt\n///     assert_eq!(v, b\"s = \\\"abc 123\\\"\");\n///     Ok(())\n/// }\n/// ```\n///\n/// If you also need the trait names themselves, such as to implement one or both on your types,\n/// import the containing module and then name them with a prefix:\n///\n/// ```\n/// # #![allow(unused_imports)]\n/// use std::fmt::{self, Write as _};\n/// use std::io::{self, Write as _};\n///\n/// struct Example;\n///\n/// impl fmt::Write for Example {\n///     fn write_str(\u0026mut self, _s: \u0026str) -\u003e core::fmt::Result {\n///          unimplemented!();\n///     }\n/// }\n/// ```\n///\n/// Note: This macro can be used in `no_std` setups as well.\n/// In a `no_std` setup you are responsible for the implementation details of the components.\n///\n/// ```no_run\n/// use core::fmt::Write;\n///\n/// struct Example;\n///\n/// impl Write for Example {\n///     fn write_str(\u0026mut self, _s: \u0026str) -\u003e core::fmt::Result {\n///          unimplemented!();\n///     }\n/// }\n///\n/// let mut m = Example{};\n/// write!(\u0026mut m, \"Hello World\").expect(\"Not written\");\n/// ```\n#[macro_export]\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\n#[cfg_attr(not(test), rustc_diagnostic_item = \"write_macro\")]\nmacro_rules! write {\n    ($dst:expr, $($arg:tt)*) =\u003e {\n        $dst.write_fmt($crate::format_args!($($arg)*))\n    };\n}"
                        },
                        "writeln": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::macros",
                            "Name": "writeln",
                            "File": "mod.rs",
                            "Line": 716,
                            "StartOffset": 25047,
                            "EndOffset": 26124,
                            "Content": "/// Writes formatted data into a buffer, with a newline appended.\n///\n/// On all platforms, the newline is the LINE FEED character (`\\n`/`U+000A`) alone\n/// (no additional CARRIAGE RETURN (`\\r`/`U+000D`).\n///\n/// For more information, see [`write!`]. For information on the format string syntax, see\n/// [`std::fmt`].\n///\n/// [`std::fmt`]: ../std/fmt/index.html\n///\n/// # Examples\n///\n/// ```\n/// use std::io::{Write, Result};\n///\n/// fn main() -\u003e Result\u003c()\u003e {\n///     let mut w = Vec::new();\n///     writeln!(\u0026mut w)?;\n///     writeln!(\u0026mut w, \"test\")?;\n///     writeln!(\u0026mut w, \"formatted {}\", \"arguments\")?;\n///\n///     assert_eq!(\u0026w[..], \"\\ntest\\nformatted arguments\\n\".as_bytes());\n///     Ok(())\n/// }\n/// ```\n#[macro_export]\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\n#[cfg_attr(not(test), rustc_diagnostic_item = \"writeln_macro\")]\n#[allow_internal_unstable(format_args_nl)]\nmacro_rules! writeln {\n    ($dst:expr $(,)?) =\u003e {\n        $crate::write!($dst, \"\\n\")\n    };\n    ($dst:expr, $($arg:tt)*) =\u003e {\n        $dst.write_fmt($crate::format_args_nl!($($arg)*))\n    };\n}"
                        }
                    },
                    "Types": {},
                    "Vars": {}
                },
                "core::marker": {
                    "IsMain": false,
                    "IsTest": false,
                    "PkgPath": "core::marker",
                    "Functions": {},
                    "Types": {
                        "PhantomData": {
                            "Exported": false,
                            "TypeKind": "struct",
                            "ModPath": "",
                            "PkgPath": "core::marker",
                            "Name": "PhantomData",
                            "File": "marker.rs",
                            "Line": 773,
                            "StartOffset": 29503,
                            "EndOffset": 29514,
                            "Content": "PhantomData"
                        },
                        "Send": {
                            "Exported": false,
                            "TypeKind": "interface",
                            "ModPath": "",
                            "PkgPath": "core::marker",
                            "Name": "Send",
                            "File": "marker.rs",
                            "Line": 89,
                            "StartOffset": 3423,
                            "EndOffset": 3427,
                            "Content": "Send"
                        },
                        "Sized": {
                            "Exported": false,
                            "TypeKind": "interface",
                            "ModPath": "",
                            "PkgPath": "core::marker",
                            "Name": "Sized",
                            "File": "marker.rs",
                            "Line": 153,
                            "StartOffset": 5644,
                            "EndOffset": 5649,
                            "Content": "Sized"
                        },
                        "Sync": {
                            "Exported": false,
                            "TypeKind": "interface",
                            "ModPath": "",
                            "PkgPath": "core::marker",
                            "Name": "Sync",
                            "File": "marker.rs",
                            "Line": 618,
                            "StartOffset": 24196,
                            "EndOffset": 24200,
                            "Content": "Sync"
                        }
                    },
                    "Vars": {}
                },
                "core::ops::deref": {
                    "IsMain": false,
                    "IsTest": false,
                    "PkgPath": "core::ops::deref",
                    "Functions": {},
                    "Types": {
                        "Deref": {
                            "Exported": false,
                            "TypeKind": "interface",
                            "ModPath": "",
                            "PkgPath": "core::ops::deref",
                            "Name": "Deref",
                            "File": "deref.rs",
                            "Line": 137,
                            "StartOffset": 6162,
                            "EndOffset": 6167,
                            "Content": "Deref"
                        },
                        "DerefMut": {
                            "Exported": false,
                            "TypeKind": "interface",
                            "ModPath": "",
                            "PkgPath": "core::ops::deref",
                            "Name": "DerefMut",
                            "File": "deref.rs",
                            "Line": 267,
                            "StartOffset": 10896,
                            "EndOffset": 10904,
                            "Content": "DerefMut"
                        }
                    },
                    "Vars": {}
                },
                "core::ops::function": {
                    "IsMain": false,
                    "IsTest": false,
                    "PkgPath": "core::ops::function",
                    "Functions": {},
                    "Types": {
                        "FnOnce": {
                            "Exported": false,
                            "TypeKind": "interface",
                            "ModPath": "",
                            "PkgPath": "core::ops::function",
                            "Name": "FnOnce",
                            "File": "function.rs",
                            "Line": 241,
                            "StartOffset": 8779,
                            "EndOffset": 8785,
                            "Content": "FnOnce"
                        }
                    },
                    "Vars": {}
                },
                "core::option": {
                    "IsMain": false,
                    "IsTest": false,
                    "PkgPath": "core::option",
                    "Functions": {
                        "and_then": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::option",
                            "Name": "and_then",
                            "File": "option.rs",
                            "Line": 1446,
                            "StartOffset": 51579,
                            "EndOffset": 51587,
                            "Content": "and_then"
                        },
                        "as_deref": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::option",
                            "Name": "as_deref",
                            "File": "option.rs",
                            "Line": 1302,
                            "StartOffset": 47161,
                            "EndOffset": 47169,
                            "Content": "as_deref"
                        },
                        "as_mut": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::option",
                            "Name": "as_mut",
                            "File": "option.rs",
                            "Line": 727,
                            "StartOffset": 27669,
                            "EndOffset": 27675,
                            "Content": "as_mut"
                        },
                        "as_ref": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::option",
                            "Name": "as_ref",
                            "File": "option.rs",
                            "Line": 705,
                            "StartOffset": 27113,
                            "EndOffset": 27119,
                            "Content": "as_ref"
                        },
                        "clone": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::option",
                            "Name": "clone",
                            "File": "option.rs",
                            "Line": 2036,
                            "StartOffset": 68534,
                            "EndOffset": 68539,
                            "Content": "clone"
                        },
                        "get_or_insert_with": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::option",
                            "Name": "get_or_insert_with",
                            "File": "option.rs",
                            "Line": 1690,
                            "StartOffset": 58420,
                            "EndOffset": 58438,
                            "Content": "get_or_insert_with"
                        },
                        "is_none": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::option",
                            "Name": "is_none",
                            "File": "option.rs",
                            "Line": 650,
                            "StartOffset": 25048,
                            "EndOffset": 25055,
                            "Content": "is_none"
                        },
                        "is_some": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::option",
                            "Name": "is_some",
                            "File": "option.rs",
                            "Line": 606,
                            "StartOffset": 23711,
                            "EndOffset": 23718,
                            "Content": "is_some"
                        },
                        "map": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::option",
                            "Name": "map",
                            "File": "option.rs",
                            "Line": 1113,
                            "StartOffset": 41654,
                            "EndOffset": 41657,
                            "Content": "map"
                        },
                        "or_else": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::option",
                            "Name": "or_else",
                            "File": "option.rs",
                            "Line": 1545,
                            "StartOffset": 54412,
                            "EndOffset": 54419,
                            "Content": "or_else"
                        },
                        "take": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::option",
                            "Name": "take",
                            "File": "option.rs",
                            "Line": 1725,
                            "StartOffset": 59465,
                            "EndOffset": 59469,
                            "Content": "take"
                        },
                        "unwrap": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::option",
                            "Name": "unwrap",
                            "File": "option.rs",
                            "Line": 974,
                            "StartOffset": 37310,
                            "EndOffset": 37316,
                            "Content": "unwrap"
                        },
                        "unwrap_or": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::option",
                            "Name": "unwrap_or",
                            "File": "option.rs",
                            "Line": 997,
                            "StartOffset": 38015,
                            "EndOffset": 38024,
                            "Content": "unwrap_or"
                        }
                    },
                    "Types": {
                        "Option": {
                            "Exported": false,
                            "TypeKind": "enum",
                            "ModPath": "",
                            "PkgPath": "core::option",
                            "Name": "Option",
                            "File": "option.rs",
                            "Line": 571,
                            "StartOffset": 22508,
                            "EndOffset": 22514,
                            "Content": "Option"
                        }
                    },
                    "Vars": {}
                },
                "core::panic::unwind_safe": {
                    "IsMain": false,
                    "IsTest": false,
                    "PkgPath": "core::panic::unwind_safe",
                    "Functions": {},
                    "Types": {
                        "UnwindSafe": {
                            "Exported": false,
                            "TypeKind": "interface",
                            "ModPath": "",
                            "PkgPath": "core::panic::unwind_safe",
                            "Name": "UnwindSafe",
                            "File": "unwind_safe.rs",
                            "Line": 89,
                            "StartOffset": 4467,
                            "EndOffset": 4477,
                            "Content": "UnwindSafe"
                        }
                    },
                    "Vars": {}
                },
                "core::result": {
                    "IsMain": false,
                    "IsTest": false,
                    "PkgPath": "core::result",
                    "Functions": {
                        "ok": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::result",
                            "Name": "ok",
                            "File": "result.rs",
                            "Line": 657,
                            "StartOffset": 23908,
                            "EndOffset": 23910,
                            "Content": "ok"
                        }
                    },
                    "Types": {},
                    "Vars": {}
                },
                "core::str": {
                    "IsMain": false,
                    "IsTest": false,
                    "PkgPath": "core::str",
                    "Functions": {
                        "chars": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::str",
                            "Name": "chars",
                            "File": "mod.rs",
                            "Line": 1039,
                            "StartOffset": 36275,
                            "EndOffset": 36280,
                            "Content": "chars"
                        },
                        "len": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::str",
                            "Name": "len",
                            "File": "mod.rs",
                            "Line": 139,
                            "StartOffset": 4744,
                            "EndOffset": 4747,
                            "Content": "len"
                        },
                        "strip_prefix": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "",
                            "PkgPath": "core::str",
                            "Name": "strip_prefix",
                            "File": "mod.rs",
                            "Line": 2396,
                            "StartOffset": 83811,
                            "EndOffset": 83823,
                            "Content": "strip_prefix"
                        }
                    },
                    "Types": {},
                    "Vars": {}
                },
                "core::str::traits": {
                    "IsMain": false,
                    "IsTest": false,
                    "PkgPath": "core::str::traits",
                    "Functions": {},
                    "Types": {
                        "FromStr": {
                            "Exported": false,
                            "TypeKind": "interface",
                            "ModPath": "",
                            "PkgPath": "core::str::traits",
                            "Name": "FromStr",
                            "File": "traits.rs",
                            "Line": 797,
                            "StartOffset": 29100,
                            "EndOffset": 29107,
                            "Content": "FromStr"
                        }
                    },
                    "Vars": {}
                }
            },
            "Dependencies": {},
            "Files": {
                "any.rs": {
                    "Path": "any.rs"
                },
                "borrow.rs": {
                    "Path": "borrow.rs"
                },
                "boxed.rs": {
                    "Path": "boxed.rs"
                },
                "builders.rs": {
                    "Path": "builders.rs"
                },
                "cmp.rs": {
                    "Path": "cmp.rs"
                },
                "collect.rs": {
                    "Path": "collect.rs"
                },
                "convert.rs": {
                    "Path": "convert.rs"
                },
                "default.rs": {
                    "Path": "default.rs"
                },
                "deref.rs": {
                    "Path": "deref.rs"
                },
                "function.rs": {
                    "Path": "function.rs"
                },
                "iterator.rs": {
                    "Path": "iterator.rs"
                },
                "marker.rs": {
                    "Path": "marker.rs"
                },
                "methods.rs": {
                    "Path": "methods.rs"
                },
                "mod.rs": {
                    "Path": "mod.rs"
                },
                "option.rs": {
                    "Path": "option.rs"
                },
                "result.rs": {
                    "Path": "result.rs"
                },
                "str.rs": {
                    "Path": "str.rs"
                },
                "string.rs": {
                    "Path": "string.rs"
                },
                "sync.rs": {
                    "Path": "sync.rs"
                },
                "traits.rs": {
                    "Path": "traits.rs"
                },
                "unwind_safe.rs": {
                    "Path": "unwind_safe.rs"
                }
            }
        },
        "ahash@0.8.11": {
            "Language": "rust",
            "Version": "0.8.11",
            "Name": "ahash",
            "Dir": "",
            "Packages": {
                "ahash::hash_map": {
                    "IsMain": false,
                    "IsTest": false,
                    "PkgPath": "ahash::hash_map",
                    "Functions": {
                        "AHashMap.get": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "ahash@0.8.11",
                            "PkgPath": "ahash::hash_map",
                            "Name": "AHashMap.get",
                            "File": "hash_map.rs",
                            "Line": 84,
                            "StartOffset": 2421,
                            "EndOffset": 3065,
                            "Content": "impl\u003cK, V, S\u003e AHashMap\u003cK, V, S\u003e\nwhere\n    K: Hash + Eq,\n    S: BuildHasher,\n{\n    /// Returns a reference to the value corresponding to the key.\n    ///\n    /// The key may be any borrowed form of the map's key type, but\n    /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for\n    /// the key type.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::collections::HashMap;\n    ///\n    /// let mut map = HashMap::new();\n    /// map.insert(1, \"a\");\n    /// assert_eq!(map.get(\u00261), Some(\u0026\"a\"));\n    /// assert_eq!(map.get(\u00262), None);\n    /// ```\n    #[inline]\n    /// Returns a reference to the value corresponding to the key.\n    ///\n    /// The key may be any borrowed form of the map's key type, but\n    /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for\n    /// the key type.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::collections::HashMap;\n    ///\n    /// let mut map = HashMap::new();\n    /// map.insert(1, \"a\");\n    /// assert_eq!(map.get(\u00261), Some(\u0026\"a\"));\n    /// assert_eq!(map.get(\u00262), None);\n    /// ```\n    #[inline]\n    pub fn get\u003cQ: ?Sized\u003e(\u0026self, k: \u0026Q) -\u003e Option\u003c\u0026V\u003e\n    where\n        K: Borrow\u003cQ\u003e,\n        Q: Hash + Eq,\n    {\n        self.0.get(k)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap"
                                }
                            }
                        },
                        "AHashMap.get_key_value": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "ahash@0.8.11",
                            "PkgPath": "ahash::hash_map",
                            "Name": "AHashMap.get_key_value",
                            "File": "hash_map.rs",
                            "Line": 109,
                            "StartOffset": 3071,
                            "EndOffset": 3779,
                            "Content": "impl\u003cK, V, S\u003e AHashMap\u003cK, V, S\u003e\nwhere\n    K: Hash + Eq,\n    S: BuildHasher,\n{\n    /// Returns a reference to the value corresponding to the key.\n    ///\n    /// The key may be any borrowed form of the map's key type, but\n    /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for\n    /// the key type.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::collections::HashMap;\n    ///\n    /// let mut map = HashMap::new();\n    /// map.insert(1, \"a\");\n    /// assert_eq!(map.get(\u00261), Some(\u0026\"a\"));\n    /// assert_eq!(map.get(\u00262), None);\n    /// ```\n    #[inline]\n    /// Returns the key-value pair corresponding to the supplied key.\n    ///\n    /// The supplied key may be any borrowed form of the map's key type, but\n    /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for\n    /// the key type.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::collections::HashMap;\n    ///\n    /// let mut map = HashMap::new();\n    /// map.insert(1, \"a\");\n    /// assert_eq!(map.get_key_value(\u00261), Some((\u00261, \u0026\"a\")));\n    /// assert_eq!(map.get_key_value(\u00262), None);\n    /// ```\n    #[inline]\n    pub fn get_key_value\u003cQ: ?Sized\u003e(\u0026self, k: \u0026Q) -\u003e Option\u003c(\u0026K, \u0026V)\u003e\n    where\n        K: Borrow\u003cQ\u003e,\n        Q: Hash + Eq,\n    {\n        self.0.get_key_value(k)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap"
                                }
                            }
                        },
                        "AHashMap.get_mut": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "ahash@0.8.11",
                            "PkgPath": "ahash::hash_map",
                            "Name": "AHashMap.get_mut",
                            "File": "hash_map.rs",
                            "Line": 134,
                            "StartOffset": 3785,
                            "EndOffset": 4478,
                            "Content": "impl\u003cK, V, S\u003e AHashMap\u003cK, V, S\u003e\nwhere\n    K: Hash + Eq,\n    S: BuildHasher,\n{\n    /// Returns a reference to the value corresponding to the key.\n    ///\n    /// The key may be any borrowed form of the map's key type, but\n    /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for\n    /// the key type.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::collections::HashMap;\n    ///\n    /// let mut map = HashMap::new();\n    /// map.insert(1, \"a\");\n    /// assert_eq!(map.get(\u00261), Some(\u0026\"a\"));\n    /// assert_eq!(map.get(\u00262), None);\n    /// ```\n    #[inline]\n    /// Returns a mutable reference to the value corresponding to the key.\n    ///\n    /// The key may be any borrowed form of the map's key type, but\n    /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for\n    /// the key type.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::collections::HashMap;\n    ///\n    /// let mut map = HashMap::new();\n    /// map.insert(1, \"a\");\n    /// if let Some(x) = map.get_mut(\u00261) {\n    ///     *x = \"b\";\n    /// }\n    /// assert_eq!(map[\u00261], \"b\");\n    /// ```\n    #[inline]\n    pub fn get_mut\u003cQ: ?Sized\u003e(\u0026mut self, k: \u0026Q) -\u003e Option\u003c\u0026mut V\u003e\n    where\n        K: Borrow\u003cQ\u003e,\n        Q: Hash + Eq,\n    {\n        self.0.get_mut(k)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap"
                                }
                            }
                        },
                        "AHashMap.insert": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "ahash@0.8.11",
                            "PkgPath": "ahash::hash_map",
                            "Name": "AHashMap.insert",
                            "File": "hash_map.rs",
                            "Line": 161,
                            "StartOffset": 4484,
                            "EndOffset": 5343,
                            "Content": "impl\u003cK, V, S\u003e AHashMap\u003cK, V, S\u003e\nwhere\n    K: Hash + Eq,\n    S: BuildHasher,\n{\n    /// Returns a reference to the value corresponding to the key.\n    ///\n    /// The key may be any borrowed form of the map's key type, but\n    /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for\n    /// the key type.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::collections::HashMap;\n    ///\n    /// let mut map = HashMap::new();\n    /// map.insert(1, \"a\");\n    /// assert_eq!(map.get(\u00261), Some(\u0026\"a\"));\n    /// assert_eq!(map.get(\u00262), None);\n    /// ```\n    #[inline]\n    /// Inserts a key-value pair into the map.\n    ///\n    /// If the map did not have this key present, [`None`] is returned.\n    ///\n    /// If the map did have this key present, the value is updated, and the old\n    /// value is returned. The key is not updated, though; this matters for\n    /// types that can be `==` without being identical. See the [module-level\n    /// documentation] for more.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::collections::HashMap;\n    ///\n    /// let mut map = HashMap::new();\n    /// assert_eq!(map.insert(37, \"a\"), None);\n    /// assert_eq!(map.is_empty(), false);\n    ///\n    /// map.insert(37, \"b\");\n    /// assert_eq!(map.insert(37, \"c\"), Some(\"b\"));\n    /// assert_eq!(map[\u002637], \"c\");\n    /// ```\n    #[inline]\n    pub fn insert(\u0026mut self, k: K, v: V) -\u003e Option\u003cV\u003e {\n        self.0.insert(k, v)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap"
                                }
                            }
                        },
                        "AHashMap.into_keys": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "ahash@0.8.11",
                            "PkgPath": "ahash::hash_map",
                            "Name": "AHashMap.into_keys",
                            "File": "hash_map.rs",
                            "Line": 188,
                            "StartOffset": 5349,
                            "EndOffset": 6305,
                            "Content": "impl\u003cK, V, S\u003e AHashMap\u003cK, V, S\u003e\nwhere\n    K: Hash + Eq,\n    S: BuildHasher,\n{\n    /// Returns a reference to the value corresponding to the key.\n    ///\n    /// The key may be any borrowed form of the map's key type, but\n    /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for\n    /// the key type.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::collections::HashMap;\n    ///\n    /// let mut map = HashMap::new();\n    /// map.insert(1, \"a\");\n    /// assert_eq!(map.get(\u00261), Some(\u0026\"a\"));\n    /// assert_eq!(map.get(\u00262), None);\n    /// ```\n    #[inline]\n    /// Creates a consuming iterator visiting all the keys in arbitrary order.\n    /// The map cannot be used after calling this.\n    /// The iterator element type is `K`.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::collections::HashMap;\n    ///\n    /// let map = HashMap::from([\n    ///     (\"a\", 1),\n    ///     (\"b\", 2),\n    ///     (\"c\", 3),\n    /// ]);\n    ///\n    /// let mut vec: Vec\u003c\u0026str\u003e = map.into_keys().collect();\n    /// // The `IntoKeys` iterator produces keys in arbitrary order, so the\n    /// // keys must be sorted to test them against a sorted array.\n    /// vec.sort_unstable();\n    /// assert_eq!(vec, [\"a\", \"b\", \"c\"]);\n    /// ```\n    ///\n    /// # Performance\n    ///\n    /// In the current implementation, iterating over keys takes O(capacity) time\n    /// instead of O(len) because it internally visits empty buckets too.\n    #[inline]\n    pub fn into_keys(self) -\u003e IntoKeys\u003cK, V\u003e {\n        self.0.into_keys()\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap"
                                }
                            }
                        },
                        "AHashMap.into_values": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "ahash@0.8.11",
                            "PkgPath": "ahash::hash_map",
                            "Name": "AHashMap.into_values",
                            "File": "hash_map.rs",
                            "Line": 219,
                            "StartOffset": 6311,
                            "EndOffset": 7278,
                            "Content": "impl\u003cK, V, S\u003e AHashMap\u003cK, V, S\u003e\nwhere\n    K: Hash + Eq,\n    S: BuildHasher,\n{\n    /// Returns a reference to the value corresponding to the key.\n    ///\n    /// The key may be any borrowed form of the map's key type, but\n    /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for\n    /// the key type.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::collections::HashMap;\n    ///\n    /// let mut map = HashMap::new();\n    /// map.insert(1, \"a\");\n    /// assert_eq!(map.get(\u00261), Some(\u0026\"a\"));\n    /// assert_eq!(map.get(\u00262), None);\n    /// ```\n    #[inline]\n    /// Creates a consuming iterator visiting all the values in arbitrary order.\n    /// The map cannot be used after calling this.\n    /// The iterator element type is `V`.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::collections::HashMap;\n    ///\n    /// let map = HashMap::from([\n    ///     (\"a\", 1),\n    ///     (\"b\", 2),\n    ///     (\"c\", 3),\n    /// ]);\n    ///\n    /// let mut vec: Vec\u003ci32\u003e = map.into_values().collect();\n    /// // The `IntoValues` iterator produces values in arbitrary order, so\n    /// // the values must be sorted to test them against a sorted array.\n    /// vec.sort_unstable();\n    /// assert_eq!(vec, [1, 2, 3]);\n    /// ```\n    ///\n    /// # Performance\n    ///\n    /// In the current implementation, iterating over values takes O(capacity) time\n    /// instead of O(len) because it internally visits empty buckets too.\n    #[inline]\n    pub fn into_values(self) -\u003e IntoValues\u003cK, V\u003e {\n        self.0.into_values()\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap"
                                }
                            }
                        },
                        "AHashMap.remove": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "ahash@0.8.11",
                            "PkgPath": "ahash::hash_map",
                            "Name": "AHashMap.remove",
                            "File": "hash_map.rs",
                            "Line": 250,
                            "StartOffset": 7284,
                            "EndOffset": 7988,
                            "Content": "impl\u003cK, V, S\u003e AHashMap\u003cK, V, S\u003e\nwhere\n    K: Hash + Eq,\n    S: BuildHasher,\n{\n    /// Returns a reference to the value corresponding to the key.\n    ///\n    /// The key may be any borrowed form of the map's key type, but\n    /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for\n    /// the key type.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::collections::HashMap;\n    ///\n    /// let mut map = HashMap::new();\n    /// map.insert(1, \"a\");\n    /// assert_eq!(map.get(\u00261), Some(\u0026\"a\"));\n    /// assert_eq!(map.get(\u00262), None);\n    /// ```\n    #[inline]\n    /// Removes a key from the map, returning the value at the key if the key\n    /// was previously in the map.\n    ///\n    /// The key may be any borrowed form of the map's key type, but\n    /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for\n    /// the key type.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::collections::HashMap;\n    ///\n    /// let mut map = HashMap::new();\n    /// map.insert(1, \"a\");\n    /// assert_eq!(map.remove(\u00261), Some(\"a\"));\n    /// assert_eq!(map.remove(\u00261), None);\n    /// ```\n    #[inline]\n    pub fn remove\u003cQ: ?Sized\u003e(\u0026mut self, k: \u0026Q) -\u003e Option\u003cV\u003e\n    where\n        K: Borrow\u003cQ\u003e,\n        Q: Hash + Eq,\n    {\n        self.0.remove(k)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap"
                                }
                            }
                        },
                        "AHashMap.serialize": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "ahash@0.8.11",
                            "PkgPath": "ahash::hash_map",
                            "Name": "AHashMap.serialize",
                            "File": "hash_map.rs",
                            "Line": 423,
                            "StartOffset": 11502,
                            "EndOffset": 11629,
                            "Content": "#[cfg(feature = \"serde\")]\nimpl\u003cK, V\u003e Serialize for AHashMap\u003cK, V\u003e\nwhere\n    K: Serialize + Eq + Hash,\n    V: Serialize,\n{\n    fn serialize\u003cS: Serializer\u003e(\u0026self, serializer: S) -\u003e Result\u003cS::Ok, S::Error\u003e {\n        self.deref().serialize(serializer)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap"
                                }
                            }
                        },
                        "AHashMap::with_capacity": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "ahash@0.8.11",
                            "PkgPath": "ahash::hash_map",
                            "Name": "AHashMap::with_capacity",
                            "File": "hash_map.rs",
                            "Line": 59,
                            "StartOffset": 1703,
                            "EndOffset": 2000,
                            "Content": "impl\u003cK, V\u003e AHashMap\u003cK, V, RandomState\u003e {\n    /// This crates a hashmap using [RandomState::new] which obtains its keys from [RandomSource].\n    /// See the documentation in [RandomSource] for notes about key strength.\n    /// This crates a hashmap with the specified capacity using [RandomState::new].\n    /// See the documentation in [RandomSource] for notes about key strength.\n    pub fn with_capacity(capacity: usize) -\u003e Self {\n        AHashMap(HashMap::with_capacity_and_hasher(capacity, RandomState::new()))\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap"
                                }
                            }
                        },
                        "Debug\u003cAHashMap\u003e.fmt": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "ahash@0.8.11",
                            "PkgPath": "ahash::hash_map",
                            "Name": "Debug\u003cAHashMap\u003e.fmt",
                            "File": "hash_map.rs",
                            "Line": 341,
                            "StartOffset": 9170,
                            "EndOffset": 9256,
                            "Content": "impl\u003cK, V, S\u003e Debug for AHashMap\u003cK, V, S\u003e\nwhere\n    K: Debug,\n    V: Debug,\n    S: BuildHasher,\n{\n    fn fmt(\u0026self, fmt: \u0026mut fmt::Formatter) -\u003e fmt::Result {\n        self.0.fmt(fmt)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap"
                                }
                            }
                        },
                        "Deref\u003cAHashMap\u003e.deref": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "ahash@0.8.11",
                            "PkgPath": "ahash::hash_map",
                            "Name": "Deref\u003cAHashMap\u003e.deref",
                            "File": "hash_map.rs",
                            "Line": 279,
                            "StartOffset": 8076,
                            "EndOffset": 8132,
                            "Content": "impl\u003cK, V, S\u003e Deref for AHashMap\u003cK, V, S\u003e {\n    type Target = HashMap\u003cK, V, S\u003e;\n    fn deref(\u0026self) -\u003e \u0026Self::Target {\n        \u0026self.0\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap"
                                }
                            }
                        },
                        "DerefMut\u003cAHashMap\u003e.deref_mut": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "ahash@0.8.11",
                            "PkgPath": "ahash::hash_map",
                            "Name": "DerefMut\u003cAHashMap\u003e.deref_mut",
                            "File": "hash_map.rs",
                            "Line": 285,
                            "StartOffset": 8187,
                            "EndOffset": 8259,
                            "Content": "impl\u003cK, V, S\u003e DerefMut for AHashMap\u003cK, V, S\u003e {\n    fn deref_mut(\u0026mut self) -\u003e \u0026mut Self::Target {\n        \u0026mut self.0\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap"
                                }
                            }
                        },
                        "Eq.expecting": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "ahash@0.8.11",
                            "PkgPath": "ahash::hash_map",
                            "Name": "Eq.expecting",
                            "File": "hash_map.rs",
                            "Line": 451,
                            "StartOffset": 12432,
                            "EndOffset": 12559,
                            "Content": "impl\u003c'a, 'de, K, V\u003e Visitor\u003c'de\u003e for MapInPlaceVisitor\u003c'a, K, V\u003e\n        where\n            K: Deserialize\u003c'de\u003e + Eq + Hash,\n            V: Deserialize\u003c'de\u003e,\n        {\n            type Value = ();\n\n    fn expecting(\u0026self, formatter: \u0026mut fmt::Formatter) -\u003e fmt::Result {\n                formatter.write_str(\"a map\")\n            }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "",
                                    "PkgPath": "core::cmp",
                                    "Name": "Eq"
                                }
                            }
                        },
                        "Eq.visit_map": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "ahash@0.8.11",
                            "PkgPath": "ahash::hash_map",
                            "Name": "Eq.visit_map",
                            "File": "hash_map.rs",
                            "Line": 455,
                            "StartOffset": 12573,
                            "EndOffset": 12981,
                            "Content": "impl\u003c'a, 'de, K, V\u003e Visitor\u003c'de\u003e for MapInPlaceVisitor\u003c'a, K, V\u003e\n        where\n            K: Deserialize\u003c'de\u003e + Eq + Hash,\n            V: Deserialize\u003c'de\u003e,\n        {\n            type Value = ();\n\n    fn visit_map\u003cA\u003e(self, mut map: A) -\u003e Result\u003cSelf::Value, A::Error\u003e\n            where\n                A: MapAccess\u003c'de\u003e,\n            {\n                self.0.clear();\n                self.0.reserve(map.size_hint().unwrap_or(0).min(4096));\n\n                while let Some((key, value)) = map.next_entry()? {\n                    self.0.insert(key, value);\n                }\n\n                Ok(())\n            }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "",
                                    "PkgPath": "core::cmp",
                                    "Name": "Eq"
                                }
                            }
                        },
                        "Extend\u003cAHashMap\u003e.extend": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "ahash@0.8.11",
                            "PkgPath": "ahash::hash_map",
                            "Name": "Extend\u003cAHashMap\u003e.extend",
                            "File": "hash_map.rs",
                            "Line": 400,
                            "StartOffset": 10712,
                            "EndOffset": 10831,
                            "Content": "impl\u003c'a, K, V, S\u003e Extend\u003c(\u0026'a K, \u0026'a V)\u003e for AHashMap\u003cK, V, S\u003e\nwhere\n    K: Eq + Hash + Copy + 'a,\n    V: Copy + 'a,\n    S: BuildHasher,\n{\n    #[inline]\n    #[inline]\n    fn extend\u003cT: IntoIterator\u003cItem = (\u0026'a K, \u0026'a V)\u003e\u003e(\u0026mut self, iter: T) {\n        self.0.extend(iter)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap"
                                }
                            }
                        },
                        "Into\u003cAHashMap\u003e.into": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "ahash@0.8.11",
                            "PkgPath": "ahash::hash_map",
                            "Name": "Into\u003cAHashMap\u003e.into",
                            "File": "hash_map.rs",
                            "Line": 47,
                            "StartOffset": 1311,
                            "EndOffset": 1384,
                            "Content": "impl\u003cK, V\u003e Into\u003cHashMap\u003cK, V, crate::RandomState\u003e\u003e for AHashMap\u003cK, V\u003e {\n    fn into(self) -\u003e HashMap\u003cK, V, crate::RandomState\u003e {\n        self.0\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap"
                                }
                            }
                        },
                        "IntoIterator\u003cAHashMap\u003e.into_iter": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "ahash@0.8.11",
                            "PkgPath": "ahash::hash_map",
                            "Name": "IntoIterator\u003cAHashMap\u003e.into_iter",
                            "File": "hash_map.rs",
                            "Line": 378,
                            "StartOffset": 10278,
                            "EndOffset": 10349,
                            "Content": "impl\u003cK, V, S\u003e IntoIterator for AHashMap\u003cK, V, S\u003e {\n    type Item = (K, V);\n    type IntoIter = hash_map::IntoIter\u003cK, V\u003e;\n    fn into_iter(self) -\u003e Self::IntoIter {\n        self.0.into_iter()\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap"
                                }
                            }
                        },
                        "PartialEq\u003cAHashMap\u003e.eq": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "ahash@0.8.11",
                            "PkgPath": "ahash::hash_map",
                            "Name": "PartialEq\u003cAHashMap\u003e.eq",
                            "File": "hash_map.rs",
                            "Line": 303,
                            "StartOffset": 8473,
                            "EndOffset": 8556,
                            "Content": "impl\u003cK, V, S\u003e PartialEq for AHashMap\u003cK, V, S\u003e\nwhere\n    K: Eq + Hash,\n    V: PartialEq,\n    S: BuildHasher,\n{\n    fn eq(\u0026self, other: \u0026AHashMap\u003cK, V, S\u003e) -\u003e bool {\n        self.0.eq(\u0026other.0)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap"
                                }
                            }
                        },
                        "Sized\u003cAHashMap\u003e.index": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "ahash@0.8.11",
                            "PkgPath": "ahash::hash_map",
                            "Name": "Sized\u003cAHashMap\u003e.index",
                            "File": "hash_map.rs",
                            "Line": 324,
                            "StartOffset": 8818,
                            "EndOffset": 9064,
                            "Content": "impl\u003cK, Q: ?Sized, V, S\u003e Index\u003c\u0026Q\u003e for AHashMap\u003cK, V, S\u003e\nwhere\n    K: Eq + Hash + Borrow\u003cQ\u003e,\n    Q: Eq + Hash,\n    S: BuildHasher,\n{\n    type Output = V;\n\n    /// Returns a reference to the value corresponding to the supplied key.\n    ///\n    /// # Panics\n    ///\n    /// Panics if the key is not present in the `HashMap`.\n    #[inline]\n    /// Returns a reference to the value corresponding to the supplied key.\n    ///\n    /// # Panics\n    ///\n    /// Panics if the key is not present in the `HashMap`.\n    #[inline]\n    fn index(\u0026self, key: \u0026Q) -\u003e \u0026V {\n        self.0.index(key)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap"
                                }
                            }
                        }
                    },
                    "Types": {
                        "AHashMap": {
                            "Exported": false,
                            "TypeKind": "struct",
                            "ModPath": "ahash@0.8.11",
                            "PkgPath": "ahash::hash_map",
                            "Name": "AHashMap",
                            "File": "hash_map.rs",
                            "Line": 17,
                            "StartOffset": 426,
                            "EndOffset": 665,
                            "Content": "/// A [`HashMap`](std::collections::HashMap) using [`RandomState`](crate::RandomState) to hash the items.\n/// (Requires the `std` feature to be enabled.)\n#[derive(Clone)]\npub struct AHashMap\u003cK, V, S = crate::RandomState\u003e(HashMap\u003cK, V, S\u003e);",
                            "Methods": {
                                "deref": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "Deref\u003cAHashMap\u003e.deref"
                                },
                                "deref_mut": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "DerefMut\u003cAHashMap\u003e.deref_mut"
                                },
                                "eq": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "PartialEq\u003cAHashMap\u003e.eq"
                                },
                                "extend": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "Extend\u003cAHashMap\u003e.extend"
                                },
                                "fmt": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "Debug\u003cAHashMap\u003e.fmt"
                                },
                                "get": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap.get"
                                },
                                "get_key_value": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap.get_key_value"
                                },
                                "get_mut": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap.get_mut"
                                },
                                "index": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "Sized\u003cAHashMap\u003e.index"
                                },
                                "insert": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap.insert"
                                },
                                "into": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "Into\u003cAHashMap\u003e.into"
                                },
                                "into_iter": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "IntoIterator\u003cAHashMap\u003e.into_iter"
                                },
                                "into_keys": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap.into_keys"
                                },
                                "into_values": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap.into_values"
                                },
                                "remove": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap.remove"
                                },
                                "serialize": {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap.serialize"
                                }
                            }
                        }
                    },
                    "Vars": {}
                }
            },
            "Dependencies": {},
            "Files": {
                "hash_map.rs": {
                    "Path": "hash_map.rs"
                }
            }
        },
        "bytes@1.6.0": {
            "Language": "rust",
            "Version": "1.6.0",
            "Name": "bytes",
            "Dir": "",
            "Packages": {
                "bytes::bytes": {
                    "IsMain": false,
                    "IsTest": false,
                    "PkgPath": "bytes::bytes",
                    "Functions": {
                        "_split_off_must_use": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "_split_off_must_use",
                            "File": "bytes.rs",
                            "Line": 1309,
                            "StartOffset": 36406,
                            "EndOffset": 36598,
                            "Content": "/// ```compile_fail\n/// use bytes::Bytes;\n/// #[deny(unused_must_use)]\n/// {\n///     let mut b1 = Bytes::from(\"hello world\");\n///     b1.split_off(6);\n/// }\n/// ```\nfn _split_off_must_use() {}"
                        },
                        "_split_to_must_use": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "_split_to_must_use",
                            "File": "bytes.rs",
                            "Line": 1299,
                            "StartOffset": 36214,
                            "EndOffset": 36404,
                            "Content": "/// ```compile_fail\n/// use bytes::Bytes;\n/// #[deny(unused_must_use)]\n/// {\n///     let mut b1 = Bytes::from(\"hello world\");\n///     b1.split_to(6);\n/// }\n/// ```\nfn _split_to_must_use() {}"
                        },
                        "free_boxed_slice": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "free_boxed_slice",
                            "File": "bytes.rs",
                            "Line": 1064,
                            "StartOffset": 28386,
                            "EndOffset": 28574,
                            "Content": "unsafe fn free_boxed_slice(buf: *mut u8, offset: *const u8, len: usize) {\n    let cap = (offset as usize - buf as usize) + len;\n    dealloc(buf, Layout::from_size_align(cap, 1).unwrap())\n}"
                        },
                        "promotable_even_clone": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "promotable_even_clone",
                            "File": "bytes.rs",
                            "Line": 961,
                            "StartOffset": 25358,
                            "EndOffset": 25805,
                            "Content": "unsafe fn promotable_even_clone(data: \u0026AtomicPtr\u003c()\u003e, ptr: *const u8, len: usize) -\u003e Bytes {\n    let shared = data.load(Ordering::Acquire);\n    let kind = shared as usize \u0026 KIND_MASK;\n\n    if kind == KIND_ARC {\n        shallow_clone_arc(shared.cast(), ptr, len)\n    } else {\n        debug_assert_eq!(kind, KIND_VEC);\n        let buf = ptr_map(shared.cast(), |addr| addr \u0026 !KIND_MASK);\n        shallow_clone_vec(data, shared, buf, ptr, len)\n    }\n}"
                        },
                        "promotable_even_drop": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "promotable_even_drop",
                            "File": "bytes.rs",
                            "Line": 1006,
                            "StartOffset": 26643,
                            "EndOffset": 27110,
                            "Content": "unsafe fn promotable_even_drop(data: \u0026mut AtomicPtr\u003c()\u003e, ptr: *const u8, len: usize) {\n    data.with_mut(|shared| {\n        let shared = *shared;\n        let kind = shared as usize \u0026 KIND_MASK;\n\n        if kind == KIND_ARC {\n            release_shared(shared.cast());\n        } else {\n            debug_assert_eq!(kind, KIND_VEC);\n            let buf = ptr_map(shared.cast(), |addr| addr \u0026 !KIND_MASK);\n            free_boxed_slice(buf, ptr, len);\n        }\n    });\n}"
                        },
                        "promotable_even_to_vec": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "promotable_even_to_vec",
                            "File": "bytes.rs",
                            "Line": 1000,
                            "StartOffset": 26431,
                            "EndOffset": 26641,
                            "Content": "unsafe fn promotable_even_to_vec(data: \u0026AtomicPtr\u003c()\u003e, ptr: *const u8, len: usize) -\u003e Vec\u003cu8\u003e {\n    promotable_to_vec(data, ptr, len, |shared| {\n        ptr_map(shared.cast(), |addr| addr \u0026 !KIND_MASK)\n    })\n}"
                        },
                        "promotable_is_unique": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "promotable_is_unique",
                            "File": "bytes.rs",
                            "Line": 1052,
                            "StartOffset": 28067,
                            "EndOffset": 28384,
                            "Content": "unsafe fn promotable_is_unique(data: \u0026AtomicPtr\u003c()\u003e) -\u003e bool {\n    let shared = data.load(Ordering::Acquire);\n    let kind = shared as usize \u0026 KIND_MASK;\n\n    if kind == KIND_ARC {\n        let ref_cnt = (*shared.cast::\u003cShared\u003e()).ref_cnt.load(Ordering::Relaxed);\n        ref_cnt == 1\n    } else {\n        true\n    }\n}"
                        },
                        "promotable_odd_clone": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "promotable_odd_clone",
                            "File": "bytes.rs",
                            "Line": 1021,
                            "StartOffset": 27112,
                            "EndOffset": 27498,
                            "Content": "unsafe fn promotable_odd_clone(data: \u0026AtomicPtr\u003c()\u003e, ptr: *const u8, len: usize) -\u003e Bytes {\n    let shared = data.load(Ordering::Acquire);\n    let kind = shared as usize \u0026 KIND_MASK;\n\n    if kind == KIND_ARC {\n        shallow_clone_arc(shared as _, ptr, len)\n    } else {\n        debug_assert_eq!(kind, KIND_VEC);\n        shallow_clone_vec(data, shared, shared.cast(), ptr, len)\n    }\n}"
                        },
                        "promotable_odd_drop": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "promotable_odd_drop",
                            "File": "bytes.rs",
                            "Line": 1037,
                            "StartOffset": 27660,
                            "EndOffset": 28065,
                            "Content": "unsafe fn promotable_odd_drop(data: \u0026mut AtomicPtr\u003c()\u003e, ptr: *const u8, len: usize) {\n    data.with_mut(|shared| {\n        let shared = *shared;\n        let kind = shared as usize \u0026 KIND_MASK;\n\n        if kind == KIND_ARC {\n            release_shared(shared.cast());\n        } else {\n            debug_assert_eq!(kind, KIND_VEC);\n\n            free_boxed_slice(shared.cast(), ptr, len);\n        }\n    });\n}"
                        },
                        "promotable_odd_to_vec": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "promotable_odd_to_vec",
                            "File": "bytes.rs",
                            "Line": 1033,
                            "StartOffset": 27500,
                            "EndOffset": 27658,
                            "Content": "unsafe fn promotable_odd_to_vec(data: \u0026AtomicPtr\u003c()\u003e, ptr: *const u8, len: usize) -\u003e Vec\u003cu8\u003e {\n    promotable_to_vec(data, ptr, len, |shared| shared.cast())\n}"
                        },
                        "promotable_to_vec": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "promotable_to_vec",
                            "File": "bytes.rs",
                            "Line": 974,
                            "StartOffset": 25807,
                            "EndOffset": 26429,
                            "Content": "unsafe fn promotable_to_vec(\n    data: \u0026AtomicPtr\u003c()\u003e,\n    ptr: *const u8,\n    len: usize,\n    f: fn(*mut ()) -\u003e *mut u8,\n) -\u003e Vec\u003cu8\u003e {\n    let shared = data.load(Ordering::Acquire);\n    let kind = shared as usize \u0026 KIND_MASK;\n\n    if kind == KIND_ARC {\n        shared_to_vec_impl(shared.cast(), ptr, len)\n    } else {\n        // If Bytes holds a Vec, then the offset must be 0.\n        debug_assert_eq!(kind, KIND_VEC);\n\n        let buf = f(shared);\n\n        let cap = (ptr as usize - buf as usize) + len;\n\n        // Copy back buffer\n        ptr::copy(ptr, buf, len);\n\n        Vec::from_raw_parts(buf, len, cap)\n    }\n}"
                        },
                        "ptr_map": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "ptr_map",
                            "File": "bytes.rs",
                            "Line": 1287,
                            "StartOffset": 36002,
                            "EndOffset": 36194,
                            "Content": "#[cfg(not(miri))]\nfn ptr_map\u003cF\u003e(ptr: *mut u8, f: F) -\u003e *mut u8\nwhere\n    F: FnOnce(usize) -\u003e usize,\n{\n    let old_addr = ptr as usize;\n    let new_addr = f(old_addr);\n    new_addr as *mut u8\n}"
                        },
                        "release_shared": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "release_shared",
                            "File": "bytes.rs",
                            "Line": 1238,
                            "StartOffset": 34070,
                            "EndOffset": 35436,
                            "Content": "unsafe fn release_shared(ptr: *mut Shared) {\n    // `Shared` storage... follow the drop steps from Arc.\n    if (*ptr).ref_cnt.fetch_sub(1, Ordering::Release) != 1 {\n        return;\n    }\n\n    // This fence is needed to prevent reordering of use of the data and\n    // deletion of the data.  Because it is marked `Release`, the decreasing\n    // of the reference count synchronizes with this `Acquire` fence. This\n    // means that use of the data happens before decreasing the reference\n    // count, which happens before this fence, which happens before the\n    // deletion of the data.\n    //\n    // As explained in the [Boost documentation][1],\n    //\n    // \u003e It is important to enforce any possible access to the object in one\n    // \u003e thread (through an existing reference) to *happen before* deleting\n    // \u003e the object in a different thread. This is achieved by a \"release\"\n    // \u003e operation after dropping a reference (any access to the object\n    // \u003e through this reference must obviously happened before), and an\n    // \u003e \"acquire\" operation before deleting the object.\n    //\n    // [1]: (www.boost.org/doc/libs/1_55_0/doc/html/atomic/usage_examples.html)\n    //\n    // Thread sanitizer does not support atomic fences. Use an atomic load\n    // instead.\n    (*ptr).ref_cnt.load(Ordering::Acquire);\n\n    // Drop the data\n    drop(Box::from_raw(ptr));\n}"
                        },
                        "shallow_clone_arc": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "shallow_clone_arc",
                            "File": "bytes.rs",
                            "Line": 1151,
                            "StartOffset": 31070,
                            "EndOffset": 31416,
                            "Content": "unsafe fn shallow_clone_arc(shared: *mut Shared, ptr: *const u8, len: usize) -\u003e Bytes {\n    let old_size = (*shared).ref_cnt.fetch_add(1, Ordering::Relaxed);\n\n    if old_size \u003e usize::MAX \u003e\u003e 1 {\n        crate::abort();\n    }\n\n    Bytes {\n        ptr,\n        len,\n        data: AtomicPtr::new(shared as _),\n        vtable: \u0026SHARED_VTABLE,\n    }\n}"
                        },
                        "shallow_clone_vec": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "shallow_clone_vec",
                            "File": "bytes.rs",
                            "Line": 1166,
                            "StartOffset": 31418,
                            "EndOffset": 34068,
                            "Content": "#[cold]\nunsafe fn shallow_clone_vec(\n    atom: \u0026AtomicPtr\u003c()\u003e,\n    ptr: *const (),\n    buf: *mut u8,\n    offset: *const u8,\n    len: usize,\n) -\u003e Bytes {\n    // If  the buffer is still tracked in a `Vec\u003cu8\u003e`. It is time to\n    // promote the vec to an `Arc`. This could potentially be called\n    // concurrently, so some care must be taken.\n\n    // First, allocate a new `Shared` instance containing the\n    // `Vec` fields. It's important to note that `ptr`, `len`,\n    // and `cap` cannot be mutated without having `\u0026mut self`.\n    // This means that these fields will not be concurrently\n    // updated and since the buffer hasn't been promoted to an\n    // `Arc`, those three fields still are the components of the\n    // vector.\n    let shared = Box::new(Shared {\n        buf,\n        cap: (offset as usize - buf as usize) + len,\n        // Initialize refcount to 2. One for this reference, and one\n        // for the new clone that will be returned from\n        // `shallow_clone`.\n        ref_cnt: AtomicUsize::new(2),\n    });\n\n    let shared = Box::into_raw(shared);\n\n    // The pointer should be aligned, so this assert should\n    // always succeed.\n    debug_assert!(\n        0 == (shared as usize \u0026 KIND_MASK),\n        \"internal: Box\u003cShared\u003e should have an aligned pointer\",\n    );\n\n    // Try compare \u0026 swapping the pointer into the `arc` field.\n    // `Release` is used synchronize with other threads that\n    // will load the `arc` field.\n    //\n    // If the `compare_exchange` fails, then the thread lost the\n    // race to promote the buffer to shared. The `Acquire`\n    // ordering will synchronize with the `compare_exchange`\n    // that happened in the other thread and the `Shared`\n    // pointed to by `actual` will be visible.\n    match atom.compare_exchange(ptr as _, shared as _, Ordering::AcqRel, Ordering::Acquire) {\n        Ok(actual) =\u003e {\n            debug_assert!(actual as usize == ptr as usize);\n            // The upgrade was successful, the new handle can be\n            // returned.\n            Bytes {\n                ptr: offset,\n                len,\n                data: AtomicPtr::new(shared as _),\n                vtable: \u0026SHARED_VTABLE,\n            }\n        }\n        Err(actual) =\u003e {\n            // The upgrade failed, a concurrent clone happened. Release\n            // the allocation that was made in this thread, it will not\n            // be needed.\n            let shared = Box::from_raw(shared);\n            mem::forget(*shared);\n\n            // Buffer already promoted to shared storage, so increment ref\n            // count.\n            shallow_clone_arc(actual as _, offset, len)\n        }\n    }\n}"
                        },
                        "shared_clone": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "shared_clone",
                            "File": "bytes.rs",
                            "Line": 1101,
                            "StartOffset": 29509,
                            "EndOffset": 29686,
                            "Content": "unsafe fn shared_clone(data: \u0026AtomicPtr\u003c()\u003e, ptr: *const u8, len: usize) -\u003e Bytes {\n    let shared = data.load(Ordering::Relaxed);\n    shallow_clone_arc(shared as _, ptr, len)\n}"
                        },
                        "shared_drop": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "shared_drop",
                            "File": "bytes.rs",
                            "Line": 1145,
                            "StartOffset": 30911,
                            "EndOffset": 31068,
                            "Content": "unsafe fn shared_drop(data: \u0026mut AtomicPtr\u003c()\u003e, _ptr: *const u8, _len: usize) {\n    data.with_mut(|shared| {\n        release_shared(shared.cast());\n    });\n}"
                        },
                        "shared_is_unique": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "shared_is_unique",
                            "File": "bytes.rs",
                            "Line": 1139,
                            "StartOffset": 30696,
                            "EndOffset": 30909,
                            "Content": "pub(crate) unsafe fn shared_is_unique(data: \u0026AtomicPtr\u003c()\u003e) -\u003e bool {\n    let shared = data.load(Ordering::Acquire);\n    let ref_cnt = (*shared.cast::\u003cShared\u003e()).ref_cnt.load(Ordering::Relaxed);\n    ref_cnt == 1\n}"
                        },
                        "shared_to_vec": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "shared_to_vec",
                            "File": "bytes.rs",
                            "Line": 1135,
                            "StartOffset": 30536,
                            "EndOffset": 30694,
                            "Content": "unsafe fn shared_to_vec(data: \u0026AtomicPtr\u003c()\u003e, ptr: *const u8, len: usize) -\u003e Vec\u003cu8\u003e {\n    shared_to_vec_impl(data.load(Ordering::Relaxed).cast(), ptr, len)\n}"
                        },
                        "shared_to_vec_impl": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "shared_to_vec_impl",
                            "File": "bytes.rs",
                            "Line": 1106,
                            "StartOffset": 29688,
                            "EndOffset": 30534,
                            "Content": "unsafe fn shared_to_vec_impl(shared: *mut Shared, ptr: *const u8, len: usize) -\u003e Vec\u003cu8\u003e {\n    // Check that the ref_cnt is 1 (unique).\n    //\n    // If it is unique, then it is set to 0 with AcqRel fence for the same\n    // reason in release_shared.\n    //\n    // Otherwise, we take the other branch and call release_shared.\n    if (*shared)\n        .ref_cnt\n        .compare_exchange(1, 0, Ordering::AcqRel, Ordering::Relaxed)\n        .is_ok()\n    {\n        let buf = (*shared).buf;\n        let cap = (*shared).cap;\n\n        // Deallocate Shared\n        drop(Box::from_raw(shared as *mut mem::ManuallyDrop\u003cShared\u003e));\n\n        // Copy back buffer\n        ptr::copy(ptr, buf, len);\n\n        Vec::from_raw_parts(buf, len, cap)\n    } else {\n        let v = slice::from_raw_parts(ptr, len).to_vec();\n        release_shared(shared);\n        v\n    }\n}"
                        },
                        "static_clone": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "static_clone",
                            "File": "bytes.rs",
                            "Line": 927,
                            "StartOffset": 24445,
                            "EndOffset": 24606,
                            "Content": "unsafe fn static_clone(_: \u0026AtomicPtr\u003c()\u003e, ptr: *const u8, len: usize) -\u003e Bytes {\n    let slice = slice::from_raw_parts(ptr, len);\n    Bytes::from_static(slice)\n}"
                        },
                        "static_drop": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "static_drop",
                            "File": "bytes.rs",
                            "Line": 941,
                            "StartOffset": 24825,
                            "EndOffset": 24938,
                            "Content": "unsafe fn static_drop(_: \u0026mut AtomicPtr\u003c()\u003e, _: *const u8, _: usize) {\n    // nothing to drop for \u0026'static [u8]\n}"
                        },
                        "static_is_unique": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "static_is_unique",
                            "File": "bytes.rs",
                            "Line": 937,
                            "StartOffset": 24763,
                            "EndOffset": 24823,
                            "Content": "fn static_is_unique(_: \u0026AtomicPtr\u003c()\u003e) -\u003e bool {\n    false\n}"
                        },
                        "static_to_vec": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "static_to_vec",
                            "File": "bytes.rs",
                            "Line": 932,
                            "StartOffset": 24608,
                            "EndOffset": 24761,
                            "Content": "unsafe fn static_to_vec(_: \u0026AtomicPtr\u003c()\u003e, ptr: *const u8, len: usize) -\u003e Vec\u003cu8\u003e {\n    let slice = slice::from_raw_parts(ptr, len);\n    slice.to_vec()\n}"
                        }
                    },
                    "Types": {
                        "Bytes": {
                            "Exported": false,
                            "TypeKind": "struct",
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "Bytes",
                            "File": "bytes.rs",
                            "Line": 18,
                            "StartOffset": 406,
                            "EndOffset": 4155,
                            "Content": "/// A cheaply cloneable and sliceable chunk of contiguous memory.\n///\n/// `Bytes` is an efficient container for storing and operating on contiguous\n/// slices of memory. It is intended for use primarily in networking code, but\n/// could have applications elsewhere as well.\n///\n/// `Bytes` values facilitate zero-copy network programming by allowing multiple\n/// `Bytes` objects to point to the same underlying memory.\n///\n/// `Bytes` does not have a single implementation. It is an interface, whose\n/// exact behavior is implemented through dynamic dispatch in several underlying\n/// implementations of `Bytes`.\n///\n/// All `Bytes` implementations must fulfill the following requirements:\n/// - They are cheaply cloneable and thereby shareable between an unlimited amount\n///   of components, for example by modifying a reference count.\n/// - Instances can be sliced to refer to a subset of the original buffer.\n///\n/// ```\n/// use bytes::Bytes;\n///\n/// let mut mem = Bytes::from(\"Hello world\");\n/// let a = mem.slice(0..5);\n///\n/// assert_eq!(a, \"Hello\");\n///\n/// let b = mem.split_to(6);\n///\n/// assert_eq!(mem, \"world\");\n/// assert_eq!(b, \"Hello \");\n/// ```\n///\n/// # Memory layout\n///\n/// The `Bytes` struct itself is fairly small, limited to 4 `usize` fields used\n/// to track information about which segment of the underlying memory the\n/// `Bytes` handle has access to.\n///\n/// `Bytes` keeps both a pointer to the shared state containing the full memory\n/// slice and a pointer to the start of the region visible by the handle.\n/// `Bytes` also tracks the length of its view into the memory.\n///\n/// # Sharing\n///\n/// `Bytes` contains a vtable, which allows implementations of `Bytes` to define\n/// how sharing/cloning is implemented in detail.\n/// When `Bytes::clone()` is called, `Bytes` will call the vtable function for\n/// cloning the backing storage in order to share it behind multiple `Bytes`\n/// instances.\n///\n/// For `Bytes` implementations which refer to constant memory (e.g. created\n/// via `Bytes::from_static()`) the cloning implementation will be a no-op.\n///\n/// For `Bytes` implementations which point to a reference counted shared storage\n/// (e.g. an `Arc\u003c[u8]\u003e`), sharing will be implemented by increasing the\n/// reference count.\n///\n/// Due to this mechanism, multiple `Bytes` instances may point to the same\n/// shared memory region.\n/// Each `Bytes` instance can point to different sections within that\n/// memory region, and `Bytes` instances may or may not have overlapping views\n/// into the memory.\n///\n/// The following diagram visualizes a scenario where 2 `Bytes` instances make\n/// use of an `Arc`-based backing storage, and provide access to different views:\n///\n/// ```text\n///\n///    Arc ptrs                   ┌─────────┐\n///    ________________________ / │ Bytes 2 │\n///   /                           └─────────┘\n///  /          ┌───────────┐     |         |\n/// |_________/ │  Bytes 1  │     |         |\n/// |           └───────────┘     |         |\n/// |           |           | ___/ data     | tail\n/// |      data |      tail |/              |\n/// v           v           v               v\n/// ┌─────┬─────┬───────────┬───────────────┬─────┐\n/// │ Arc │     │           │               │     │\n/// └─────┴─────┴───────────┴───────────────┴─────┘\n/// ```\npub struct Bytes {\n    ptr: *const u8,\n    len: usize,\n    // inlined \"trait object\"\n    data: AtomicPtr\u003c()\u003e,\n    vtable: \u0026'static Vtable,\n}"
                        },
                        "Shared": {
                            "Exported": false,
                            "TypeKind": "struct",
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "Shared",
                            "File": "bytes.rs",
                            "Line": 1071,
                            "StartOffset": 28610,
                            "EndOffset": 28763,
                            "Content": "struct Shared {\n    // Holds arguments to dealloc upon Drop, but otherwise doesn't use them\n    buf: *mut u8,\n    cap: usize,\n    ref_cnt: AtomicUsize,\n}"
                        },
                        "Vtable": {
                            "Exported": false,
                            "TypeKind": "struct",
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "Vtable",
                            "File": "bytes.rs",
                            "Line": 107,
                            "StartOffset": 4157,
                            "EndOffset": 4580,
                            "Content": "pub(crate) struct Vtable {\n    /// fn(data, ptr, len)\n    pub clone: unsafe fn(\u0026AtomicPtr\u003c()\u003e, *const u8, usize) -\u003e Bytes,\n    /// fn(data, ptr, len)\n    ///\n    /// takes `Bytes` to value\n    pub to_vec: unsafe fn(\u0026AtomicPtr\u003c()\u003e, *const u8, usize) -\u003e Vec\u003cu8\u003e,\n    /// fn(data)\n    pub is_unique: unsafe fn(\u0026AtomicPtr\u003c()\u003e) -\u003e bool,\n    /// fn(data, ptr, len)\n    pub drop: unsafe fn(\u0026mut AtomicPtr\u003c()\u003e, *const u8, usize),\n}"
                        }
                    },
                    "Vars": {
                        "KIND_ARC": {
                            "IsExported": false,
                            "IsConst": true,
                            "IsPointer": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "KIND_ARC",
                            "File": "bytes.rs",
                            "Line": 1097,
                            "StartOffset": 29420,
                            "EndOffset": 29448,
                            "Content": "const KIND_ARC: usize = 0b0;"
                        },
                        "KIND_MASK": {
                            "IsExported": false,
                            "IsConst": true,
                            "IsPointer": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "KIND_MASK",
                            "File": "bytes.rs",
                            "Line": 1099,
                            "StartOffset": 29478,
                            "EndOffset": 29507,
                            "Content": "const KIND_MASK: usize = 0b1;"
                        },
                        "KIND_VEC": {
                            "IsExported": false,
                            "IsConst": true,
                            "IsPointer": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "KIND_VEC",
                            "File": "bytes.rs",
                            "Line": 1098,
                            "StartOffset": 29449,
                            "EndOffset": 29477,
                            "Content": "const KIND_VEC: usize = 0b1;"
                        },
                        "PROMOTABLE_EVEN_VTABLE": {
                            "IsExported": false,
                            "IsConst": true,
                            "IsPointer": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "PROMOTABLE_EVEN_VTABLE",
                            "File": "bytes.rs",
                            "Line": 947,
                            "StartOffset": 24978,
                            "EndOffset": 25168,
                            "Content": "static PROMOTABLE_EVEN_VTABLE: Vtable = Vtable {\n    clone: promotable_even_clone,\n    to_vec: promotable_even_to_vec,\n    is_unique: promotable_is_unique,\n    drop: promotable_even_drop,\n};"
                        },
                        "PROMOTABLE_ODD_VTABLE": {
                            "IsExported": false,
                            "IsConst": true,
                            "IsPointer": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "PROMOTABLE_ODD_VTABLE",
                            "File": "bytes.rs",
                            "Line": 954,
                            "StartOffset": 25170,
                            "EndOffset": 25356,
                            "Content": "static PROMOTABLE_ODD_VTABLE: Vtable = Vtable {\n    clone: promotable_odd_clone,\n    to_vec: promotable_odd_to_vec,\n    is_unique: promotable_is_unique,\n    drop: promotable_odd_drop,\n};"
                        },
                        "SHARED_VTABLE": {
                            "IsExported": false,
                            "IsConst": true,
                            "IsPointer": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "SHARED_VTABLE",
                            "File": "bytes.rs",
                            "Line": 1090,
                            "StartOffset": 29268,
                            "EndOffset": 29418,
                            "Content": "static SHARED_VTABLE: Vtable = Vtable {\n    clone: shared_clone,\n    to_vec: shared_to_vec,\n    is_unique: shared_is_unique,\n    drop: shared_drop,\n};"
                        },
                        "STATIC_VTABLE": {
                            "IsExported": false,
                            "IsConst": true,
                            "IsPointer": false,
                            "ModPath": "bytes@1.6.0",
                            "PkgPath": "bytes::bytes",
                            "Name": "STATIC_VTABLE",
                            "File": "bytes.rs",
                            "Line": 920,
                            "StartOffset": 24294,
                            "EndOffset": 24443,
                            "Content": "const STATIC_VTABLE: Vtable = Vtable {\n    clone: static_clone,\n    to_vec: static_to_vec,\n    is_unique: static_is_unique,\n    drop: static_drop,\n};"
                        }
                    }
                }
            },
            "Dependencies": {},
            "Files": {
                "bytes.rs": {
                    "Path": "bytes.rs"
                }
            }
        },
        "faststr@0.2.19": {
            "Language": "rust",
            "Version": "0.2.19",
            "Name": "faststr",
            "Dir": "",
            "Packages": {
                "faststr": {
                    "IsMain": false,
                    "IsTest": false,
                    "PkgPath": "faststr",
                    "Functions": {
                        "AsRef\u003cFastStr\u003e.as_ref": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "AsRef\u003cFastStr\u003e.as_ref",
                            "File": "lib.rs",
                            "Line": 286,
                            "StartOffset": 8952,
                            "EndOffset": 9023,
                            "Content": "impl AsRef\u003c[u8]\u003e for FastStr {\n    #[inline]\n    #[inline]\n    fn as_ref(\u0026self) -\u003e \u0026[u8] {\n        self.0.as_ref()\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr"
                                }
                            }
                        },
                        "AsRef\u003cRepr\u003e.as_ref": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "AsRef\u003cRepr\u003e.as_ref",
                            "File": "lib.rs",
                            "Line": 757,
                            "StartOffset": 21270,
                            "EndOffset": 21656,
                            "Content": "impl AsRef\u003c[u8]\u003e for Repr {\n    #[inline]\n    #[inline]\n    fn as_ref(\u0026self) -\u003e \u0026[u8] {\n        match self {\n            Self::Empty =\u003e \u0026[],\n            Self::Bytes(bytes) =\u003e bytes.as_ref(),\n            Self::ArcStr(arc_str) =\u003e arc_str.as_bytes(),\n            Self::ArcString(arc_string) =\u003e arc_string.as_bytes(),\n            Self::StaticStr(s) =\u003e s.as_bytes(),\n            Self::Inline { len, buf } =\u003e \u0026buf[..*len],\n        }\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "Repr"
                                }
                            }
                        },
                        "Borrow\u003cFastStr\u003e.borrow": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "Borrow\u003cFastStr\u003e.borrow",
                            "File": "lib.rs",
                            "Line": 476,
                            "StartOffset": 13073,
                            "EndOffset": 13141,
                            "Content": "impl Borrow\u003cstr\u003e for FastStr {\n    #[inline]\n    #[inline]\n    fn borrow(\u0026self) -\u003e \u0026str {\n        self.as_str()\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr"
                                }
                            }
                        },
                        "Debug\u003cFastStr\u003e.fmt": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "Debug\u003cFastStr\u003e.fmt",
                            "File": "lib.rs",
                            "Line": 410,
                            "StartOffset": 11204,
                            "EndOffset": 11320,
                            "Content": "impl fmt::Debug for FastStr {\n    #[inline]\n    #[inline]\n    fn fmt(\u0026self, f: \u0026mut fmt::Formatter) -\u003e fmt::Result {\n        fmt::Debug::fmt(self.as_str(), f)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr"
                                }
                            }
                        },
                        "Deref\u003cFastStr\u003e.deref": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "Deref\u003cFastStr\u003e.deref",
                            "File": "lib.rs",
                            "Line": 302,
                            "StartOffset": 9194,
                            "EndOffset": 9261,
                            "Content": "impl Deref for FastStr {\n    type Target = str;\n\n    #[inline]\n    #[inline]\n    fn deref(\u0026self) -\u003e \u0026str {\n        self.as_str()\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr"
                                }
                            }
                        },
                        "Display\u003cFastStr\u003e.fmt": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "Display\u003cFastStr\u003e.fmt",
                            "File": "lib.rs",
                            "Line": 417,
                            "StartOffset": 11360,
                            "EndOffset": 11478,
                            "Content": "impl fmt::Display for FastStr {\n    #[inline]\n    #[inline]\n    fn fmt(\u0026self, f: \u0026mut fmt::Formatter) -\u003e fmt::Result {\n        fmt::Display::fmt(self.as_str(), f)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr"
                                }
                            }
                        },
                        "FastStr.as_str": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "FastStr.as_str",
                            "File": "lib.rs",
                            "Line": 190,
                            "StartOffset": 5910,
                            "EndOffset": 6040,
                            "Content": "impl FastStr {\n    /// Return the `FastStr` as a string slice.\n    #[inline(always)]\n    /// Return the `FastStr` as a string slice.\n    #[inline(always)]\n    pub fn as_str(\u0026self) -\u003e \u0026str {\n        self.0.as_str()\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr"
                                }
                            }
                        },
                        "FastStr.deep_clone_bytes": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "FastStr.deep_clone_bytes",
                            "File": "lib.rs",
                            "Line": 241,
                            "StartOffset": 7415,
                            "EndOffset": 7879,
                            "Content": "impl FastStr {\n    /// Return the `FastStr` as a string slice.\n    #[inline(always)]\n    /// If the inner repr of FastStr is a Bytes, then it will be deep cloned and returned as a new FastStr.\n    /// Otherwise, it will return a new FastStr with the same repr which has no cost.\n    ///\n    /// This is used to free the original memory of the Bytes.\n    ///\n    /// This is not stable and may be removed or renamed in the future.\n    #[inline]\n    #[doc(hidden)]\n    pub fn deep_clone_bytes(\u0026self) -\u003e Self {\n        Self(self.0.deep_clone_bytes())\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr"
                                }
                            }
                        },
                        "FastStr.index": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "FastStr.index",
                            "File": "lib.rs",
                            "Line": 220,
                            "StartOffset": 6680,
                            "EndOffset": 7055,
                            "Content": "impl FastStr {\n    /// Return the `FastStr` as a string slice.\n    #[inline(always)]\n    /// Return a new `FastStr` starting at index `start` and ending at index `end`. `[start..end)`\n    ///\n    /// # Safety\n    ///\n    /// The caller must guarantee that the string between `start` and `end` is valid utf-8.\n    #[inline(always)]\n    pub unsafe fn index(\u0026self, start: usize, end: usize) -\u003e Self {\n        Self(self.0.slice_ref(\u0026self.as_bytes()[start..end]))\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr"
                                }
                            }
                        },
                        "FastStr.into_bytes": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "FastStr.into_bytes",
                            "File": "lib.rs",
                            "Line": 196,
                            "StartOffset": 6046,
                            "EndOffset": 6203,
                            "Content": "impl FastStr {\n    /// Return the `FastStr` as a string slice.\n    #[inline(always)]\n    /// Consumes and converts the `FastStr` into a `Bytes` object.\n    #[inline(always)]\n    pub fn into_bytes(self) -\u003e Bytes {\n        self.0.into_bytes()\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr"
                                }
                            }
                        },
                        "FastStr.into_string": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "FastStr.into_string",
                            "File": "lib.rs",
                            "Line": 230,
                            "StartOffset": 7061,
                            "EndOffset": 7409,
                            "Content": "impl FastStr {\n    /// Return the `FastStr` as a string slice.\n    #[inline(always)]\n    /// Consumes and converts the `FastStr` into a `String` at best effort.\n    #[deprecated(\n        since = \"0.2.13\",\n        note = \"This method does not really express the `into` semantic. Use `to_string` instead.\"\n    )]\n    #[inline(always)]\n    pub fn into_string(self) -\u003e String {\n        #[allow(deprecated)]\n        self.0.into_string()\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr"
                                }
                            }
                        },
                        "FastStr.is_empty": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "FastStr.is_empty",
                            "File": "lib.rs",
                            "Line": 208,
                            "StartOffset": 6329,
                            "EndOffset": 6464,
                            "Content": "impl FastStr {\n    /// Return the `FastStr` as a string slice.\n    #[inline(always)]\n    /// Return `true` if the `FastStr` is empty.\n    #[inline(always)]\n    pub fn is_empty(\u0026self) -\u003e bool {\n        self.0.is_empty()\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr"
                                }
                            }
                        },
                        "FastStr.len": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "FastStr.len",
                            "File": "lib.rs",
                            "Line": 202,
                            "StartOffset": 6209,
                            "EndOffset": 6323,
                            "Content": "impl FastStr {\n    /// Return the `FastStr` as a string slice.\n    #[inline(always)]\n    /// Return the `FastStr` length.\n    #[inline(always)]\n    pub fn len(\u0026self) -\u003e usize {\n        self.0.len()\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr"
                                }
                            }
                        },
                        "FastStr.slice_ref": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "FastStr.slice_ref",
                            "File": "lib.rs",
                            "Line": 214,
                            "StartOffset": 6470,
                            "EndOffset": 6674,
                            "Content": "impl FastStr {\n    /// Return the `FastStr` as a string slice.\n    #[inline(always)]\n    /// Return a new `FastStr` that represents a subset of the current string.\n    #[inline(always)]\n    pub fn slice_ref(\u0026self, subset: \u0026str) -\u003e Self {\n        Self(self.0.slice_ref(subset.as_bytes()))\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr"
                                }
                            }
                        },
                        "FastStr::from_string": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "FastStr::from_string",
                            "File": "lib.rs",
                            "Line": 83,
                            "StartOffset": 2375,
                            "EndOffset": 2517,
                            "Content": "impl FastStr {\n    /// Create a new `FastStr` from any type `T` that can be converted to a string slice\n    /// (e.g., `String`, `\u0026str`, `Arc\u003cString\u003e`, `Arc\u003cstr\u003e`).\n    ///\n    /// For small strings (up to 24 bytes), this avoids heap allocation, and copies on stack.\n    #[inline]\n    /// Create a new `FastStr` from a `String`.\n    #[inline]\n    pub fn from_string(s: String) -\u003e Self {\n        Self(Repr::from_string(s))\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr"
                                }
                            }
                        },
                        "Hash\u003cFastStr\u003e.hash": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "Hash\u003cFastStr\u003e.hash",
                            "File": "lib.rs",
                            "Line": 403,
                            "StartOffset": 11062,
                            "EndOffset": 11166,
                            "Content": "impl hash::Hash for FastStr {\n    #[inline]\n    #[inline]\n    fn hash\u003cH: hash::Hasher\u003e(\u0026self, hasher: \u0026mut H) {\n        self.as_str().hash(hasher)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr"
                                }
                            }
                        },
                        "Ord\u003cFastStr\u003e.cmp": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "Ord\u003cFastStr\u003e.cmp",
                            "File": "lib.rs",
                            "Line": 389,
                            "StartOffset": 10770,
                            "EndOffset": 10876,
                            "Content": "impl Ord for FastStr {\n    #[inline]\n    #[inline]\n    fn cmp(\u0026self, other: \u0026FastStr) -\u003e Ordering {\n        self.as_str().cmp(other.as_str())\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr"
                                }
                            }
                        },
                        "PartialEq\u003cFastStr\u003e.eq": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "PartialEq\u003cFastStr\u003e.eq",
                            "File": "lib.rs",
                            "Line": 347,
                            "StartOffset": 9992,
                            "EndOffset": 10074,
                            "Content": "impl\u003c'a\u003e PartialEq\u003c\u0026'a str\u003e for FastStr {\n    #[inline]\n    #[inline]\n    fn eq(\u0026self, other: \u0026\u0026'a str) -\u003e bool {\n        self == *other\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr"
                                }
                            }
                        },
                        "PartialEq\u003cString\u003e.eq": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "PartialEq\u003cString\u003e.eq",
                            "File": "lib.rs",
                            "Line": 382,
                            "StartOffset": 10657,
                            "EndOffset": 10739,
                            "Content": "impl\u003c'a\u003e PartialEq\u003cFastStr\u003e for \u0026'a String {\n    #[inline]\n    #[inline]\n    fn eq(\u0026self, other: \u0026FastStr) -\u003e bool {\n        *self == other\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "",
                                    "PkgPath": "alloc::string",
                                    "Name": "String"
                                }
                            }
                        },
                        "PartialOrd\u003cFastStr\u003e.partial_cmp": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "PartialOrd\u003cFastStr\u003e.partial_cmp",
                            "File": "lib.rs",
                            "Line": 396,
                            "StartOffset": 10914,
                            "EndOffset": 11024,
                            "Content": "impl PartialOrd for FastStr {\n    #[inline]\n    #[inline]\n    fn partial_cmp(\u0026self, other: \u0026FastStr) -\u003e Option\u003cOrdering\u003e {\n        Some(self.cmp(other))\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr"
                                }
                            }
                        },
                        "Repr.as_str": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "Repr.as_str",
                            "File": "lib.rs",
                            "Line": 645,
                            "StartOffset": 17121,
                            "EndOffset": 17630,
                            "Content": "impl Repr {\n    #[inline]\n    #[inline]\n    fn as_str(\u0026self) -\u003e \u0026str {\n        match self {\n            Self::Empty =\u003e \"\",\n            // Safety: this is guaranteed by the user when creating the `FastStr`.\n            Self::Bytes(bytes) =\u003e unsafe { std::str::from_utf8_unchecked(bytes) },\n            Self::ArcStr(arc_str) =\u003e arc_str,\n            Self::ArcString(arc_string) =\u003e arc_string,\n            Self::StaticStr(s) =\u003e s,\n            Self::Inline { len, buf } =\u003e unsafe { std::str::from_utf8_unchecked(\u0026buf[..*len]) },\n        }\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "Repr"
                                }
                            }
                        },
                        "Repr.deep_clone_bytes": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "Repr.deep_clone_bytes",
                            "File": "lib.rs",
                            "Line": 689,
                            "StartOffset": 18794,
                            "EndOffset": 19433,
                            "Content": "impl Repr {\n    #[inline]\n    #[inline]\n    fn deep_clone_bytes(\u0026self) -\u003e Self {\n        match self {\n            Self::Empty =\u003e Self::Empty,\n            // Safety: this is guaranteed by the user when creating the `FastStr`.\n            Self::Bytes(bytes) =\u003e unsafe { Self::new(std::str::from_utf8_unchecked(bytes)) },\n            Self::ArcStr(arc_str) =\u003e Self::ArcStr(Arc::clone(arc_str)),\n            Self::ArcString(arc_string) =\u003e Self::ArcString(Arc::clone(arc_string)),\n            Self::StaticStr(s) =\u003e Self::StaticStr(s),\n            Self::Inline { len, buf } =\u003e Self::Inline {\n                len: *len,\n                buf: *buf,\n            },\n        }\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "Repr"
                                }
                            }
                        },
                        "Repr.into_bytes": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "Repr.into_bytes",
                            "File": "lib.rs",
                            "Line": 675,
                            "StartOffset": 18250,
                            "EndOffset": 18788,
                            "Content": "impl Repr {\n    #[inline]\n    #[inline]\n    fn into_bytes(self) -\u003e Bytes {\n        match self {\n            Self::Empty =\u003e Bytes::new(),\n            Self::Bytes(bytes) =\u003e bytes,\n            Self::ArcStr(arc_str) =\u003e Bytes::from(arc_str.as_bytes().to_vec()),\n            Self::ArcString(arc_string) =\u003e {\n                Bytes::from(Arc::try_unwrap(arc_string).unwrap_or_else(|arc| (*arc).clone()))\n            }\n            Self::StaticStr(s) =\u003e Bytes::from_static(s.as_bytes()),\n            Self::Inline { len, buf } =\u003e Bytes::from(buf[..len].to_vec()),\n        }\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "Repr"
                                }
                            }
                        },
                        "Repr.into_string": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "Repr.into_string",
                            "File": "lib.rs",
                            "Line": 658,
                            "StartOffset": 17636,
                            "EndOffset": 18244,
                            "Content": "impl Repr {\n    #[inline]\n    #[inline]\n    #[deprecated]\n    fn into_string(self) -\u003e String {\n        match self {\n            Self::Empty =\u003e String::new(),\n            Self::Bytes(bytes) =\u003e unsafe { String::from_utf8_unchecked(bytes.into()) },\n            Self::ArcStr(arc_str) =\u003e arc_str.to_string(),\n            Self::ArcString(arc_string) =\u003e {\n                Arc::try_unwrap(arc_string).unwrap_or_else(|arc| (*arc).clone())\n            }\n            Self::StaticStr(s) =\u003e s.to_string(),\n            Self::Inline { len, buf } =\u003e unsafe {\n                String::from_utf8_unchecked(buf[..len].to_vec())\n            },\n        }\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "Repr"
                                }
                            }
                        },
                        "Repr.is_empty": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "Repr.is_empty",
                            "File": "lib.rs",
                            "Line": 633,
                            "StartOffset": 16729,
                            "EndOffset": 17115,
                            "Content": "impl Repr {\n    #[inline]\n    #[inline]\n    fn is_empty(\u0026self) -\u003e bool {\n        match self {\n            Self::Empty =\u003e true,\n            Self::Bytes(bytes) =\u003e bytes.is_empty(),\n            Self::ArcStr(arc_str) =\u003e arc_str.is_empty(),\n            Self::ArcString(arc_string) =\u003e arc_string.is_empty(),\n            Self::StaticStr(s) =\u003e s.is_empty(),\n            Self::Inline { len, .. } =\u003e *len == 0,\n        }\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "Repr"
                                }
                            }
                        },
                        "Repr.len": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "Repr.len",
                            "File": "lib.rs",
                            "Line": 621,
                            "StartOffset": 16369,
                            "EndOffset": 16723,
                            "Content": "impl Repr {\n    #[inline]\n    #[inline]\n    fn len(\u0026self) -\u003e usize {\n        match self {\n            Self::Empty =\u003e 0,\n            Self::Bytes(bytes) =\u003e bytes.len(),\n            Self::ArcStr(arc_str) =\u003e arc_str.len(),\n            Self::ArcString(arc_string) =\u003e arc_string.len(),\n            Self::StaticStr(s) =\u003e s.len(),\n            Self::Inline { len, .. } =\u003e *len,\n        }\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "Repr"
                                }
                            }
                        },
                        "Repr.slice_ref": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "Repr.slice_ref",
                            "File": "lib.rs",
                            "Line": 705,
                            "StartOffset": 19439,
                            "EndOffset": 21234,
                            "Content": "impl Repr {\n    #[inline]\n    #[inline]\n    fn slice_ref(\u0026self, subset: \u0026[u8]) -\u003e Self {\n        if subset.is_empty() {\n            return Self::Empty;\n        }\n        let bytes_p = self.as_ref().as_ptr() as usize;\n        let bytes_len = self.len();\n\n        let sub_p = subset.as_ptr() as usize;\n        let sub_len = subset.len();\n\n        assert!(\n            sub_p \u003e= bytes_p,\n            \"subset pointer ({:p}) is smaller than self pointer ({:p})\",\n            subset.as_ptr(),\n            self.as_ref().as_ptr(),\n        );\n        assert!(\n            sub_p + sub_len \u003c= bytes_p + bytes_len,\n            \"subset is out of bounds: self = ({:p}, {}), subset = ({:p}, {})\",\n            self.as_ref().as_ptr(),\n            bytes_len,\n            subset.as_ptr(),\n            sub_len,\n        );\n\n        let sub_offset = sub_p - bytes_p;\n        match self {\n            Repr::Empty =\u003e panic!(\"invalid slice ref, self is empty but subset is not\"),\n            Repr::Bytes(b) =\u003e Self::Bytes(b.slice_ref(subset)),\n            Repr::ArcStr(s) =\u003e Self::Bytes(Bytes::copy_from_slice(\n                s[sub_offset..sub_offset + sub_len].as_bytes(),\n            )),\n            Repr::ArcString(s) =\u003e Self::Bytes(Bytes::copy_from_slice(\n                s[sub_offset..sub_offset + sub_len].as_bytes(),\n            )),\n            Repr::StaticStr(s) =\u003e Self::StaticStr(unsafe {\n                std::str::from_utf8_unchecked(\u0026s.as_bytes()[sub_offset..sub_offset + sub_len])\n            }),\n            Repr::Inline { len: _, buf } =\u003e Self::Inline {\n                len: sub_len,\n                buf: {\n                    let mut new_buf = [0; INLINE_CAP];\n                    new_buf[..sub_len].copy_from_slice(\u0026buf[sub_offset..sub_offset + sub_len]);\n                    new_buf\n                },\n            },\n        }\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "Repr"
                                }
                            }
                        },
                        "build_from_str_iter": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "build_from_str_iter",
                            "File": "lib.rs",
                            "Line": 431,
                            "StartOffset": 11696,
                            "EndOffset": 12423,
                            "Content": "fn build_from_str_iter\u003cT\u003e(mut iter: impl Iterator\u003cItem = T\u003e) -\u003e FastStr\nwhere\n    T: AsRef\u003cstr\u003e,\n    String: iter::Extend\u003cT\u003e,\n{\n    let mut len = 0;\n    let mut buf = [0u8; INLINE_CAP];\n    while let Some(slice) = iter.next() {\n        let slice = slice.as_ref();\n        let size = slice.len();\n        if size + len \u003e INLINE_CAP {\n            let mut s = String::with_capacity(size + len);\n            s.push_str(unsafe { core::str::from_utf8_unchecked(\u0026buf[..len]) });\n            s.push_str(slice);\n            s.extend(iter);\n            return FastStr(Repr::Bytes(Bytes::from(s)));\n        }\n        buf[len..][..size].copy_from_slice(slice.as_bytes());\n        len += size;\n    }\n    FastStr(Repr::Inline { len, buf })\n}"
                        }
                    },
                    "Types": {
                        "FastStr": {
                            "Exported": false,
                            "TypeKind": "struct",
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "FastStr",
                            "File": "lib.rs",
                            "Line": 14,
                            "StartOffset": 295,
                            "EndOffset": 405,
                            "Content": "/// `FastStr` is a string type that try to avoid the cost of clone.\n#[derive(Clone)]\npub struct FastStr(Repr);",
                            "Methods": {
                                "as_ref": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "AsRef\u003cFastStr\u003e.as_ref"
                                },
                                "as_str": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr.as_str"
                                },
                                "borrow": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "Borrow\u003cFastStr\u003e.borrow"
                                },
                                "cmp": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "Ord\u003cFastStr\u003e.cmp"
                                },
                                "deep_clone_bytes": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr.deep_clone_bytes"
                                },
                                "deref": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "Deref\u003cFastStr\u003e.deref"
                                },
                                "eq": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "PartialEq\u003cFastStr\u003e.eq"
                                },
                                "fmt": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "Debug\u003cFastStr\u003e.fmt"
                                },
                                "hash": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "Hash\u003cFastStr\u003e.hash"
                                },
                                "index": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr.index"
                                },
                                "into_bytes": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr.into_bytes"
                                },
                                "into_string": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr.into_string"
                                },
                                "is_empty": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr.is_empty"
                                },
                                "len": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr.len"
                                },
                                "partial_cmp": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "PartialOrd\u003cFastStr\u003e.partial_cmp"
                                },
                                "slice_ref": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr.slice_ref"
                                }
                            }
                        },
                        "Repr": {
                            "Exported": false,
                            "TypeKind": "enum",
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "Repr",
                            "File": "lib.rs",
                            "Line": 542,
                            "StartOffset": 14338,
                            "EndOffset": 14526,
                            "Content": "#[derive(Clone)]\nenum Repr {\n    Empty,\n    Bytes(Bytes),\n    ArcStr(Arc\u003cstr\u003e),\n    ArcString(Arc\u003cString\u003e),\n    StaticStr(\u0026'static str),\n    Inline { len: usize, buf: [u8; INLINE_CAP] },\n}",
                            "Methods": {
                                "as_ref": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "AsRef\u003cRepr\u003e.as_ref"
                                },
                                "as_str": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "Repr.as_str"
                                },
                                "deep_clone_bytes": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "Repr.deep_clone_bytes"
                                },
                                "into_bytes": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "Repr.into_bytes"
                                },
                                "into_string": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "Repr.into_string"
                                },
                                "is_empty": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "Repr.is_empty"
                                },
                                "len": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "Repr.len"
                                },
                                "slice_ref": {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "Repr.slice_ref"
                                }
                            }
                        }
                    },
                    "Vars": {
                        "INLINE_CAP": {
                            "IsExported": false,
                            "IsConst": true,
                            "IsPointer": false,
                            "ModPath": "faststr@0.2.19",
                            "PkgPath": "faststr",
                            "Name": "INLINE_CAP",
                            "File": "lib.rs",
                            "Line": 540,
                            "StartOffset": 14307,
                            "EndOffset": 14336,
                            "Content": "const INLINE_CAP: usize = 24;"
                        }
                    }
                }
            },
            "Dependencies": {},
            "Files": {
                "lib.rs": {
                    "Path": "lib.rs"
                }
            }
        },
        "metainfo": {
            "Language": "rust",
            "Version": "",
            "Name": "metainfo",
            "Dir": "src",
            "Packages": {
                "metainfo": {
                    "IsMain": false,
                    "IsTest": false,
                    "PkgPath": "metainfo",
                    "Functions": {
                        "Backward\u003cMetaInfo\u003e.get_all_backward_downstreams": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "Backward\u003cMetaInfo\u003e.get_all_backward_downstreams",
                            "File": "src/lib.rs",
                            "Line": 514,
                            "StartOffset": 15667,
                            "EndOffset": 15881,
                            "Content": "impl backward::Backward for MetaInfo {\n    get_impl!(backward_transient, backward, transient);\n    get_impl!(backward_downstream, backward, stale);\n\n    set_impl!(backward_transient, backward, transient);\n    set_impl!(backward_downstream, backward, stale);\n\n    del_impl!(backward_transient, backward, transient);\n    del_impl!(backward_downstream, backward, stale);\n\n    fn get_all_backward_downstreams(\u0026self) -\u003e Option\u003c\u0026AHashMap\u003cFastStr, FastStr\u003e\u003e {\n        match self.backward_node.as_ref() {\n            Some(node) =\u003e node.get_all_stales(),\n            None =\u003e None,\n        }\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "Results": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/lib.rs",
                                    "Line": 514,
                                    "StartOffset": 15709,
                                    "EndOffset": 15715
                                },
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap",
                                    "File": "src/lib.rs",
                                    "Line": 514,
                                    "StartOffset": 15717,
                                    "EndOffset": 15725
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/lib.rs",
                                    "Line": 514,
                                    "StartOffset": 15726,
                                    "EndOffset": 15733
                                }
                            ],
                            "FunctionCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::kv",
                                    "Name": "get_all_impl",
                                    "File": "src/lib.rs",
                                    "Line": 516,
                                    "StartOffset": 15822,
                                    "EndOffset": 15836
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "as_ref",
                                    "File": "src/lib.rs",
                                    "Line": 515,
                                    "StartOffset": 15780,
                                    "EndOffset": 15786
                                }
                            ]
                        },
                        "Backward\u003cMetaInfo\u003e.get_all_backward_transients": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "Backward\u003cMetaInfo\u003e.get_all_backward_transients",
                            "File": "src/lib.rs",
                            "Line": 507,
                            "StartOffset": 15444,
                            "EndOffset": 15661,
                            "Content": "impl backward::Backward for MetaInfo {\n    get_impl!(backward_transient, backward, transient);\n    get_impl!(backward_downstream, backward, stale);\n\n    set_impl!(backward_transient, backward, transient);\n    set_impl!(backward_downstream, backward, stale);\n\n    del_impl!(backward_transient, backward, transient);\n    del_impl!(backward_downstream, backward, stale);\n\n    fn get_all_backward_transients(\u0026self) -\u003e Option\u003c\u0026AHashMap\u003cFastStr, FastStr\u003e\u003e {\n        match self.backward_node.as_ref() {\n            Some(node) =\u003e node.get_all_transients(),\n            None =\u003e None,\n        }\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "Results": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/lib.rs",
                                    "Line": 507,
                                    "StartOffset": 15485,
                                    "EndOffset": 15491
                                },
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap",
                                    "File": "src/lib.rs",
                                    "Line": 507,
                                    "StartOffset": 15493,
                                    "EndOffset": 15501
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/lib.rs",
                                    "Line": 507,
                                    "StartOffset": 15502,
                                    "EndOffset": 15509
                                }
                            ],
                            "FunctionCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::kv",
                                    "Name": "get_all_impl",
                                    "File": "src/lib.rs",
                                    "Line": 509,
                                    "StartOffset": 15598,
                                    "EndOffset": 15616
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "as_ref",
                                    "File": "src/lib.rs",
                                    "Line": 508,
                                    "StartOffset": 15556,
                                    "EndOffset": 15562
                                }
                            ]
                        },
                        "Backward\u003cMetaInfo\u003e.get_all_backward_transients_with_http_prefix": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "Backward\u003cMetaInfo\u003e.get_all_backward_transients_with_http_prefix",
                            "File": "src/lib.rs",
                            "Line": 525,
                            "StartOffset": 16059,
                            "EndOffset": 16227,
                            "Content": "impl backward::Backward for MetaInfo {\n    get_impl!(backward_transient, backward, transient);\n    get_impl!(backward_downstream, backward, stale);\n\n    set_impl!(backward_transient, backward, transient);\n    set_impl!(backward_downstream, backward, stale);\n\n    del_impl!(backward_transient, backward, transient);\n    del_impl!(backward_downstream, backward, stale);\n\n    fn get_all_backward_transients_with_http_prefix(\u0026self) -\u003e Option\u003cAHashMap\u003cFastStr, FastStr\u003e\u003e {\n        self.get_all_backword_transients_with_prefix(HttpConverter)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "Results": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/lib.rs",
                                    "Line": 525,
                                    "StartOffset": 16117,
                                    "EndOffset": 16123
                                },
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap",
                                    "File": "src/lib.rs",
                                    "Line": 525,
                                    "StartOffset": 16124,
                                    "EndOffset": 16132
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/lib.rs",
                                    "Line": 525,
                                    "StartOffset": 16133,
                                    "EndOffset": 16140
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo.get_all_backword_transients_with_prefix",
                                    "File": "src/lib.rs",
                                    "Line": 526,
                                    "StartOffset": 16167,
                                    "EndOffset": 16206
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter",
                                    "File": "src/lib.rs",
                                    "Line": 526,
                                    "StartOffset": 16207,
                                    "EndOffset": 16220
                                }
                            ]
                        },
                        "Backward\u003cMetaInfo\u003e.get_all_backward_transients_with_rpc_prefix": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "Backward\u003cMetaInfo\u003e.get_all_backward_transients_with_rpc_prefix",
                            "File": "src/lib.rs",
                            "Line": 521,
                            "StartOffset": 15887,
                            "EndOffset": 16053,
                            "Content": "impl backward::Backward for MetaInfo {\n    get_impl!(backward_transient, backward, transient);\n    get_impl!(backward_downstream, backward, stale);\n\n    set_impl!(backward_transient, backward, transient);\n    set_impl!(backward_downstream, backward, stale);\n\n    del_impl!(backward_transient, backward, transient);\n    del_impl!(backward_downstream, backward, stale);\n\n    fn get_all_backward_transients_with_rpc_prefix(\u0026self) -\u003e Option\u003cAHashMap\u003cFastStr, FastStr\u003e\u003e {\n        self.get_all_backword_transients_with_prefix(RpcConverter)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "Results": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/lib.rs",
                                    "Line": 521,
                                    "StartOffset": 15944,
                                    "EndOffset": 15950
                                },
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap",
                                    "File": "src/lib.rs",
                                    "Line": 521,
                                    "StartOffset": 15951,
                                    "EndOffset": 15959
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/lib.rs",
                                    "Line": 521,
                                    "StartOffset": 15960,
                                    "EndOffset": 15967
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo.get_all_backword_transients_with_prefix",
                                    "File": "src/lib.rs",
                                    "Line": 522,
                                    "StartOffset": 15994,
                                    "EndOffset": 16033
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "RpcConverter",
                                    "File": "src/lib.rs",
                                    "Line": 522,
                                    "StartOffset": 16034,
                                    "EndOffset": 16046
                                }
                            ]
                        },
                        "Backward\u003cMetaInfo\u003e.strip_http_prefix_and_set_backward_downstream": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "Backward\u003cMetaInfo\u003e.strip_http_prefix_and_set_backward_downstream",
                            "File": "src/lib.rs",
                            "Line": 540,
                            "StartOffset": 16553,
                            "EndOffset": 16869,
                            "Content": "impl backward::Backward for MetaInfo {\n    get_impl!(backward_transient, backward, transient);\n    get_impl!(backward_downstream, backward, stale);\n\n    set_impl!(backward_transient, backward, transient);\n    set_impl!(backward_downstream, backward, stale);\n\n    del_impl!(backward_transient, backward, transient);\n    del_impl!(backward_downstream, backward, stale);\n\n    fn strip_http_prefix_and_set_backward_downstream\u003cK: AsRef\u003cstr\u003e, V: Into\u003cFastStr\u003e\u003e(\n        \u0026mut self,\n        key: K,\n        value: V,\n    ) {\n        let key = key.as_ref();\n        if let Some(key) = HttpConverter.remove_backward_prefix(key) {\n            self.set_backward_downstream(key, value);\n        }\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "FunctionCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "set_impl",
                                    "File": "src/lib.rs",
                                    "Line": 547,
                                    "StartOffset": 16817,
                                    "EndOffset": 16840
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "as_ref",
                                    "File": "src/lib.rs",
                                    "Line": 545,
                                    "StartOffset": 16719,
                                    "EndOffset": 16725
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "Converter\u003cHttpConverter\u003e.remove_backward_prefix",
                                    "File": "src/lib.rs",
                                    "Line": 546,
                                    "StartOffset": 16770,
                                    "EndOffset": 16792
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "AsRef",
                                    "File": "src/lib.rs",
                                    "Line": 540,
                                    "StartOffset": 16605,
                                    "EndOffset": 16610
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "Into",
                                    "File": "src/lib.rs",
                                    "Line": 540,
                                    "StartOffset": 16620,
                                    "EndOffset": 16624
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/lib.rs",
                                    "Line": 540,
                                    "StartOffset": 16625,
                                    "EndOffset": 16632
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter",
                                    "File": "src/lib.rs",
                                    "Line": 546,
                                    "StartOffset": 16756,
                                    "EndOffset": 16769
                                }
                            ]
                        },
                        "Backward\u003cMetaInfo\u003e.strip_rpc_prefix_and_set_backward_downstream": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "Backward\u003cMetaInfo\u003e.strip_rpc_prefix_and_set_backward_downstream",
                            "File": "src/lib.rs",
                            "Line": 529,
                            "StartOffset": 16233,
                            "EndOffset": 16547,
                            "Content": "impl backward::Backward for MetaInfo {\n    get_impl!(backward_transient, backward, transient);\n    get_impl!(backward_downstream, backward, stale);\n\n    set_impl!(backward_transient, backward, transient);\n    set_impl!(backward_downstream, backward, stale);\n\n    del_impl!(backward_transient, backward, transient);\n    del_impl!(backward_downstream, backward, stale);\n\n    fn strip_rpc_prefix_and_set_backward_downstream\u003cK: AsRef\u003cstr\u003e, V: Into\u003cFastStr\u003e\u003e(\n        \u0026mut self,\n        key: K,\n        value: V,\n    ) {\n        let key = key.as_ref();\n        if let Some(key) = RpcConverter.remove_backward_prefix(key) {\n            self.set_backward_downstream(key, value);\n        }\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "FunctionCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "set_impl",
                                    "File": "src/lib.rs",
                                    "Line": 536,
                                    "StartOffset": 16495,
                                    "EndOffset": 16518
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "as_ref",
                                    "File": "src/lib.rs",
                                    "Line": 534,
                                    "StartOffset": 16398,
                                    "EndOffset": 16404
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "Converter\u003cRpcConverter\u003e.remove_backward_prefix",
                                    "File": "src/lib.rs",
                                    "Line": 535,
                                    "StartOffset": 16448,
                                    "EndOffset": 16470
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "AsRef",
                                    "File": "src/lib.rs",
                                    "Line": 529,
                                    "StartOffset": 16284,
                                    "EndOffset": 16289
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "Into",
                                    "File": "src/lib.rs",
                                    "Line": 529,
                                    "StartOffset": 16299,
                                    "EndOffset": 16303
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/lib.rs",
                                    "Line": 529,
                                    "StartOffset": 16304,
                                    "EndOffset": 16311
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "RpcConverter",
                                    "File": "src/lib.rs",
                                    "Line": 535,
                                    "StartOffset": 16435,
                                    "EndOffset": 16447
                                }
                            ]
                        },
                        "Debug\u003cMetaInfo\u003e.fmt": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "Debug\u003cMetaInfo\u003e.fmt",
                            "File": "src/lib.rs",
                            "Line": 622,
                            "StartOffset": 19109,
                            "EndOffset": 19217,
                            "Content": "impl fmt::Debug for MetaInfo {\n    fn fmt(\u0026self, f: \u0026mut fmt::Formatter\u003c'_\u003e) -\u003e fmt::Result {\n        f.debug_struct(\"MetaInfo\").finish()\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "Params": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::fmt",
                                    "Name": "Formatter",
                                    "File": "src/lib.rs",
                                    "Line": 622,
                                    "StartOffset": 19136,
                                    "EndOffset": 19145
                                }
                            ],
                            "Results": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::fmt",
                                    "Name": "Result",
                                    "File": "src/lib.rs",
                                    "Line": 622,
                                    "StartOffset": 19159,
                                    "EndOffset": 19165
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::fmt",
                                    "Name": "debug_struct",
                                    "File": "src/lib.rs",
                                    "Line": 623,
                                    "StartOffset": 19178,
                                    "EndOffset": 19190
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::fmt::builders",
                                    "Name": "finish",
                                    "File": "src/lib.rs",
                                    "Line": 623,
                                    "StartOffset": 19203,
                                    "EndOffset": 19209
                                }
                            ]
                        },
                        "Forward\u003cMetaInfo\u003e.get_all_persistents": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "Forward\u003cMetaInfo\u003e.get_all_persistents",
                            "File": "src/lib.rs",
                            "Line": 419,
                            "StartOffset": 12847,
                            "EndOffset": 13056,
                            "Content": "impl forward::Forward for MetaInfo {\n    get_impl!(persistent, forward, persistent);\n    get_impl!(transient, forward, transient);\n    get_impl!(upstream, forward, stale);\n\n    set_impl!(persistent, forward, persistent);\n    set_impl!(transient, forward, transient);\n    set_impl!(upstream, forward, stale);\n\n    del_impl!(persistent, forward, persistent);\n    del_impl!(transient, forward, transient);\n    del_impl!(upstream, forward, stale);\n\n    fn get_all_persistents(\u0026self) -\u003e Option\u003c\u0026AHashMap\u003cFastStr, FastStr\u003e\u003e {\n        match self.forward_node.as_ref() {\n            Some(node) =\u003e node.get_all_persistents(),\n            None =\u003e None,\n        }\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "Results": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/lib.rs",
                                    "Line": 419,
                                    "StartOffset": 12880,
                                    "EndOffset": 12886
                                },
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap",
                                    "File": "src/lib.rs",
                                    "Line": 419,
                                    "StartOffset": 12888,
                                    "EndOffset": 12896
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/lib.rs",
                                    "Line": 419,
                                    "StartOffset": 12897,
                                    "EndOffset": 12904
                                }
                            ],
                            "FunctionCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::kv",
                                    "Name": "get_all_impl",
                                    "File": "src/lib.rs",
                                    "Line": 421,
                                    "StartOffset": 12992,
                                    "EndOffset": 13011
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "as_ref",
                                    "File": "src/lib.rs",
                                    "Line": 420,
                                    "StartOffset": 12950,
                                    "EndOffset": 12956
                                }
                            ]
                        },
                        "Forward\u003cMetaInfo\u003e.get_all_persistents_and_transients_with_http_prefix": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "Forward\u003cMetaInfo\u003e.get_all_persistents_and_transients_with_http_prefix",
                            "File": "src/lib.rs",
                            "Line": 432,
                            "StartOffset": 13251,
                            "EndOffset": 13436,
                            "Content": "impl forward::Forward for MetaInfo {\n    get_impl!(persistent, forward, persistent);\n    get_impl!(transient, forward, transient);\n    get_impl!(upstream, forward, stale);\n\n    set_impl!(persistent, forward, persistent);\n    set_impl!(transient, forward, transient);\n    set_impl!(upstream, forward, stale);\n\n    del_impl!(persistent, forward, persistent);\n    del_impl!(transient, forward, transient);\n    del_impl!(upstream, forward, stale);\n\n    fn get_all_persistents_and_transients_with_http_prefix(\n        \u0026self,\n    ) -\u003e Option\u003cAHashMap\u003cFastStr, FastStr\u003e\u003e {\n        self.get_all_persistents_and_transients(HttpConverter)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "Results": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/lib.rs",
                                    "Line": 434,
                                    "StartOffset": 13331,
                                    "EndOffset": 13337
                                },
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap",
                                    "File": "src/lib.rs",
                                    "Line": 434,
                                    "StartOffset": 13338,
                                    "EndOffset": 13346
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/lib.rs",
                                    "Line": 434,
                                    "StartOffset": 13347,
                                    "EndOffset": 13354
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo.get_all_persistents_and_transients",
                                    "File": "src/lib.rs",
                                    "Line": 435,
                                    "StartOffset": 13381,
                                    "EndOffset": 13415
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter",
                                    "File": "src/lib.rs",
                                    "Line": 435,
                                    "StartOffset": 13416,
                                    "EndOffset": 13429
                                }
                            ]
                        },
                        "Forward\u003cMetaInfo\u003e.get_all_persistents_and_transients_with_rpc_prefix": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "Forward\u003cMetaInfo\u003e.get_all_persistents_and_transients_with_rpc_prefix",
                            "File": "src/lib.rs",
                            "Line": 426,
                            "StartOffset": 13062,
                            "EndOffset": 13245,
                            "Content": "impl forward::Forward for MetaInfo {\n    get_impl!(persistent, forward, persistent);\n    get_impl!(transient, forward, transient);\n    get_impl!(upstream, forward, stale);\n\n    set_impl!(persistent, forward, persistent);\n    set_impl!(transient, forward, transient);\n    set_impl!(upstream, forward, stale);\n\n    del_impl!(persistent, forward, persistent);\n    del_impl!(transient, forward, transient);\n    del_impl!(upstream, forward, stale);\n\n    fn get_all_persistents_and_transients_with_rpc_prefix(\n        \u0026self,\n    ) -\u003e Option\u003cAHashMap\u003cFastStr, FastStr\u003e\u003e {\n        self.get_all_persistents_and_transients(RpcConverter)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "Results": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/lib.rs",
                                    "Line": 428,
                                    "StartOffset": 13141,
                                    "EndOffset": 13147
                                },
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap",
                                    "File": "src/lib.rs",
                                    "Line": 428,
                                    "StartOffset": 13148,
                                    "EndOffset": 13156
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/lib.rs",
                                    "Line": 428,
                                    "StartOffset": 13157,
                                    "EndOffset": 13164
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo.get_all_persistents_and_transients",
                                    "File": "src/lib.rs",
                                    "Line": 429,
                                    "StartOffset": 13191,
                                    "EndOffset": 13225
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "RpcConverter",
                                    "File": "src/lib.rs",
                                    "Line": 429,
                                    "StartOffset": 13226,
                                    "EndOffset": 13238
                                }
                            ]
                        },
                        "Forward\u003cMetaInfo\u003e.get_all_transients": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "Forward\u003cMetaInfo\u003e.get_all_transients",
                            "File": "src/lib.rs",
                            "Line": 438,
                            "StartOffset": 13442,
                            "EndOffset": 13649,
                            "Content": "impl forward::Forward for MetaInfo {\n    get_impl!(persistent, forward, persistent);\n    get_impl!(transient, forward, transient);\n    get_impl!(upstream, forward, stale);\n\n    set_impl!(persistent, forward, persistent);\n    set_impl!(transient, forward, transient);\n    set_impl!(upstream, forward, stale);\n\n    del_impl!(persistent, forward, persistent);\n    del_impl!(transient, forward, transient);\n    del_impl!(upstream, forward, stale);\n\n    fn get_all_transients(\u0026self) -\u003e Option\u003c\u0026AHashMap\u003cFastStr, FastStr\u003e\u003e {\n        match self.forward_node.as_ref() {\n            Some(node) =\u003e node.get_all_transients(),\n            None =\u003e None,\n        }\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "Results": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/lib.rs",
                                    "Line": 438,
                                    "StartOffset": 13474,
                                    "EndOffset": 13480
                                },
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap",
                                    "File": "src/lib.rs",
                                    "Line": 438,
                                    "StartOffset": 13482,
                                    "EndOffset": 13490
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/lib.rs",
                                    "Line": 438,
                                    "StartOffset": 13491,
                                    "EndOffset": 13498
                                }
                            ],
                            "FunctionCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::kv",
                                    "Name": "get_all_impl",
                                    "File": "src/lib.rs",
                                    "Line": 440,
                                    "StartOffset": 13586,
                                    "EndOffset": 13604
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "as_ref",
                                    "File": "src/lib.rs",
                                    "Line": 439,
                                    "StartOffset": 13544,
                                    "EndOffset": 13550
                                }
                            ]
                        },
                        "Forward\u003cMetaInfo\u003e.get_all_upstreams": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "Forward\u003cMetaInfo\u003e.get_all_upstreams",
                            "File": "src/lib.rs",
                            "Line": 445,
                            "StartOffset": 13655,
                            "EndOffset": 13857,
                            "Content": "impl forward::Forward for MetaInfo {\n    get_impl!(persistent, forward, persistent);\n    get_impl!(transient, forward, transient);\n    get_impl!(upstream, forward, stale);\n\n    set_impl!(persistent, forward, persistent);\n    set_impl!(transient, forward, transient);\n    set_impl!(upstream, forward, stale);\n\n    del_impl!(persistent, forward, persistent);\n    del_impl!(transient, forward, transient);\n    del_impl!(upstream, forward, stale);\n\n    fn get_all_upstreams(\u0026self) -\u003e Option\u003c\u0026AHashMap\u003cFastStr, FastStr\u003e\u003e {\n        match self.forward_node.as_ref() {\n            Some(node) =\u003e node.get_all_stales(),\n            None =\u003e None,\n        }\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "Results": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/lib.rs",
                                    "Line": 445,
                                    "StartOffset": 13686,
                                    "EndOffset": 13692
                                },
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap",
                                    "File": "src/lib.rs",
                                    "Line": 445,
                                    "StartOffset": 13694,
                                    "EndOffset": 13702
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/lib.rs",
                                    "Line": 445,
                                    "StartOffset": 13703,
                                    "EndOffset": 13710
                                }
                            ],
                            "FunctionCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::kv",
                                    "Name": "get_all_impl",
                                    "File": "src/lib.rs",
                                    "Line": 447,
                                    "StartOffset": 13798,
                                    "EndOffset": 13812
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "as_ref",
                                    "File": "src/lib.rs",
                                    "Line": 446,
                                    "StartOffset": 13756,
                                    "EndOffset": 13762
                                }
                            ]
                        },
                        "Forward\u003cMetaInfo\u003e.strip_http_prefix_and_set_persistent": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "Forward\u003cMetaInfo\u003e.strip_http_prefix_and_set_persistent",
                            "File": "src/lib.rs",
                            "Line": 474,
                            "StartOffset": 14466,
                            "EndOffset": 14766,
                            "Content": "impl forward::Forward for MetaInfo {\n    get_impl!(persistent, forward, persistent);\n    get_impl!(transient, forward, transient);\n    get_impl!(upstream, forward, stale);\n\n    set_impl!(persistent, forward, persistent);\n    set_impl!(transient, forward, transient);\n    set_impl!(upstream, forward, stale);\n\n    del_impl!(persistent, forward, persistent);\n    del_impl!(transient, forward, transient);\n    del_impl!(upstream, forward, stale);\n\n    fn strip_http_prefix_and_set_persistent\u003cK: AsRef\u003cstr\u003e, V: Into\u003cFastStr\u003e\u003e(\n        \u0026mut self,\n        key: K,\n        value: V,\n    ) {\n        let key = key.as_ref();\n        if let Some(key) = HttpConverter.remove_persistent_prefix(key) {\n            self.set_persistent(key, value);\n        }\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "FunctionCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "set_impl",
                                    "File": "src/lib.rs",
                                    "Line": 481,
                                    "StartOffset": 14723,
                                    "EndOffset": 14737
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "as_ref",
                                    "File": "src/lib.rs",
                                    "Line": 479,
                                    "StartOffset": 14623,
                                    "EndOffset": 14629
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "Converter\u003cHttpConverter\u003e.remove_persistent_prefix",
                                    "File": "src/lib.rs",
                                    "Line": 480,
                                    "StartOffset": 14674,
                                    "EndOffset": 14698
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "AsRef",
                                    "File": "src/lib.rs",
                                    "Line": 474,
                                    "StartOffset": 14509,
                                    "EndOffset": 14514
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "Into",
                                    "File": "src/lib.rs",
                                    "Line": 474,
                                    "StartOffset": 14524,
                                    "EndOffset": 14528
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/lib.rs",
                                    "Line": 474,
                                    "StartOffset": 14529,
                                    "EndOffset": 14536
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter",
                                    "File": "src/lib.rs",
                                    "Line": 480,
                                    "StartOffset": 14660,
                                    "EndOffset": 14673
                                }
                            ]
                        },
                        "Forward\u003cMetaInfo\u003e.strip_http_prefix_and_set_upstream": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "Forward\u003cMetaInfo\u003e.strip_http_prefix_and_set_upstream",
                            "File": "src/lib.rs",
                            "Line": 485,
                            "StartOffset": 14772,
                            "EndOffset": 15067,
                            "Content": "impl forward::Forward for MetaInfo {\n    get_impl!(persistent, forward, persistent);\n    get_impl!(transient, forward, transient);\n    get_impl!(upstream, forward, stale);\n\n    set_impl!(persistent, forward, persistent);\n    set_impl!(transient, forward, transient);\n    set_impl!(upstream, forward, stale);\n\n    del_impl!(persistent, forward, persistent);\n    del_impl!(transient, forward, transient);\n    del_impl!(upstream, forward, stale);\n\n    fn strip_http_prefix_and_set_upstream\u003cK: AsRef\u003cstr\u003e, V: Into\u003cFastStr\u003e\u003e(\n        \u0026mut self,\n        key: K,\n        value: V,\n    ) {\n        let key = key.as_ref();\n        if let Some(key) = HttpConverter.remove_transient_prefix(key) {\n            self.set_upstream(key, value);\n        }\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "FunctionCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "set_impl",
                                    "File": "src/lib.rs",
                                    "Line": 492,
                                    "StartOffset": 15026,
                                    "EndOffset": 15038
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "as_ref",
                                    "File": "src/lib.rs",
                                    "Line": 490,
                                    "StartOffset": 14927,
                                    "EndOffset": 14933
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "Converter\u003cHttpConverter\u003e.remove_transient_prefix",
                                    "File": "src/lib.rs",
                                    "Line": 491,
                                    "StartOffset": 14978,
                                    "EndOffset": 15001
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "AsRef",
                                    "File": "src/lib.rs",
                                    "Line": 485,
                                    "StartOffset": 14813,
                                    "EndOffset": 14818
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "Into",
                                    "File": "src/lib.rs",
                                    "Line": 485,
                                    "StartOffset": 14828,
                                    "EndOffset": 14832
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/lib.rs",
                                    "Line": 485,
                                    "StartOffset": 14833,
                                    "EndOffset": 14840
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter",
                                    "File": "src/lib.rs",
                                    "Line": 491,
                                    "StartOffset": 14964,
                                    "EndOffset": 14977
                                }
                            ]
                        },
                        "Forward\u003cMetaInfo\u003e.strip_rpc_prefix_and_set_persistent": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "Forward\u003cMetaInfo\u003e.strip_rpc_prefix_and_set_persistent",
                            "File": "src/lib.rs",
                            "Line": 452,
                            "StartOffset": 13863,
                            "EndOffset": 14161,
                            "Content": "impl forward::Forward for MetaInfo {\n    get_impl!(persistent, forward, persistent);\n    get_impl!(transient, forward, transient);\n    get_impl!(upstream, forward, stale);\n\n    set_impl!(persistent, forward, persistent);\n    set_impl!(transient, forward, transient);\n    set_impl!(upstream, forward, stale);\n\n    del_impl!(persistent, forward, persistent);\n    del_impl!(transient, forward, transient);\n    del_impl!(upstream, forward, stale);\n\n    fn strip_rpc_prefix_and_set_persistent\u003cK: AsRef\u003cstr\u003e, V: Into\u003cFastStr\u003e\u003e(\n        \u0026mut self,\n        key: K,\n        value: V,\n    ) {\n        let key = key.as_ref();\n        if let Some(key) = RpcConverter.remove_persistent_prefix(key) {\n            self.set_persistent(key, value);\n        }\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "FunctionCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "set_impl",
                                    "File": "src/lib.rs",
                                    "Line": 459,
                                    "StartOffset": 14118,
                                    "EndOffset": 14132
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "as_ref",
                                    "File": "src/lib.rs",
                                    "Line": 457,
                                    "StartOffset": 14019,
                                    "EndOffset": 14025
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "Converter\u003cRpcConverter\u003e.remove_persistent_prefix",
                                    "File": "src/lib.rs",
                                    "Line": 458,
                                    "StartOffset": 14069,
                                    "EndOffset": 14093
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "AsRef",
                                    "File": "src/lib.rs",
                                    "Line": 452,
                                    "StartOffset": 13905,
                                    "EndOffset": 13910
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "Into",
                                    "File": "src/lib.rs",
                                    "Line": 452,
                                    "StartOffset": 13920,
                                    "EndOffset": 13924
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/lib.rs",
                                    "Line": 452,
                                    "StartOffset": 13925,
                                    "EndOffset": 13932
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "RpcConverter",
                                    "File": "src/lib.rs",
                                    "Line": 458,
                                    "StartOffset": 14056,
                                    "EndOffset": 14068
                                }
                            ]
                        },
                        "Forward\u003cMetaInfo\u003e.strip_rpc_prefix_and_set_upstream": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "Forward\u003cMetaInfo\u003e.strip_rpc_prefix_and_set_upstream",
                            "File": "src/lib.rs",
                            "Line": 463,
                            "StartOffset": 14167,
                            "EndOffset": 14460,
                            "Content": "impl forward::Forward for MetaInfo {\n    get_impl!(persistent, forward, persistent);\n    get_impl!(transient, forward, transient);\n    get_impl!(upstream, forward, stale);\n\n    set_impl!(persistent, forward, persistent);\n    set_impl!(transient, forward, transient);\n    set_impl!(upstream, forward, stale);\n\n    del_impl!(persistent, forward, persistent);\n    del_impl!(transient, forward, transient);\n    del_impl!(upstream, forward, stale);\n\n    fn strip_rpc_prefix_and_set_upstream\u003cK: AsRef\u003cstr\u003e, V: Into\u003cFastStr\u003e\u003e(\n        \u0026mut self,\n        key: K,\n        value: V,\n    ) {\n        let key = key.as_ref();\n        if let Some(key) = RpcConverter.remove_transient_prefix(key) {\n            self.set_upstream(key, value);\n        }\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "FunctionCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "set_impl",
                                    "File": "src/lib.rs",
                                    "Line": 470,
                                    "StartOffset": 14419,
                                    "EndOffset": 14431
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "as_ref",
                                    "File": "src/lib.rs",
                                    "Line": 468,
                                    "StartOffset": 14321,
                                    "EndOffset": 14327
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "Converter\u003cRpcConverter\u003e.remove_transient_prefix",
                                    "File": "src/lib.rs",
                                    "Line": 469,
                                    "StartOffset": 14371,
                                    "EndOffset": 14394
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "AsRef",
                                    "File": "src/lib.rs",
                                    "Line": 463,
                                    "StartOffset": 14207,
                                    "EndOffset": 14212
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "Into",
                                    "File": "src/lib.rs",
                                    "Line": 463,
                                    "StartOffset": 14222,
                                    "EndOffset": 14226
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/lib.rs",
                                    "Line": 463,
                                    "StartOffset": 14227,
                                    "EndOffset": 14234
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "RpcConverter",
                                    "File": "src/lib.rs",
                                    "Line": 469,
                                    "StartOffset": 14358,
                                    "EndOffset": 14370
                                }
                            ]
                        },
                        "MetaInfo.clear": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "MetaInfo.clear",
                            "File": "src/lib.rs",
                            "Line": 287,
                            "StartOffset": 8875,
                            "EndOffset": 9538,
                            "Content": "impl MetaInfo {\n    /// Creates an empty `MetaInfo`.\n    #[inline]\n    /// Clear the `MetaInfo` of all inserted MetaInfo.\n    /// This will not clear the parent.\n    #[inline]\n    pub fn clear(\u0026mut self) {\n        self.parent = None;\n        if let Some(tmap) = self.tmap.as_mut() {\n            tmap.clear()\n        }\n        if let Some(smap) = self.smap.as_mut() {\n            smap.clear()\n        }\n        if let Some(faststr_tmap) = self.faststr_tmap.as_mut() {\n            faststr_tmap.clear()\n        }\n        if let Some(forward_node) = self.forward_node.as_mut() {\n            forward_node.clear()\n        }\n        if let Some(backward_node) = self.backward_node.as_mut() {\n            backward_node.clear()\n        }\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "as_mut",
                                    "File": "src/lib.rs",
                                    "Line": 292,
                                    "StartOffset": 9076,
                                    "EndOffset": 9082
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap.clear",
                                    "File": "src/lib.rs",
                                    "Line": 293,
                                    "StartOffset": 9104,
                                    "EndOffset": 9109
                                },
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "clear",
                                    "File": "src/lib.rs",
                                    "Line": 296,
                                    "StartOffset": 9188,
                                    "EndOffset": 9193
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap.clear",
                                    "File": "src/lib.rs",
                                    "Line": 299,
                                    "StartOffset": 9296,
                                    "EndOffset": 9301
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::kv",
                                    "Name": "Node.clear",
                                    "File": "src/lib.rs",
                                    "Line": 302,
                                    "StartOffset": 9404,
                                    "EndOffset": 9409
                                }
                            ]
                        },
                        "MetaInfo.contains": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "MetaInfo.contains",
                            "File": "src/lib.rs",
                            "Line": 175,
                            "StartOffset": 5363,
                            "EndOffset": 5778,
                            "Content": "impl MetaInfo {\n    /// Creates an empty `MetaInfo`.\n    #[inline]\n    /// Check if `MetaInfo` contains entry\n    #[inline]\n    pub fn contains\u003cT: 'static\u003e(\u0026self) -\u003e bool {\n        if self\n            .tmap\n            .as_ref()\n            .map(|tmap| tmap.contains::\u003cT\u003e())\n            .unwrap_or(false)\n        {\n            return true;\n        }\n        self.parent\n            .as_ref()\n            .map(|parent| parent.as_ref().contains::\u003cT\u003e())\n            .unwrap_or(false)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "as_ref",
                                    "File": "src/lib.rs",
                                    "Line": 180,
                                    "StartOffset": 5512,
                                    "EndOffset": 5518
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "map",
                                    "File": "src/lib.rs",
                                    "Line": 181,
                                    "StartOffset": 5534,
                                    "EndOffset": 5537
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap.contains",
                                    "File": "src/lib.rs",
                                    "Line": 181,
                                    "StartOffset": 5550,
                                    "EndOffset": 5558
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "unwrap_or",
                                    "File": "src/lib.rs",
                                    "Line": 182,
                                    "StartOffset": 5580,
                                    "EndOffset": 5589
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "alloc::sync",
                                    "Name": "as_ref",
                                    "File": "src/lib.rs",
                                    "Line": 188,
                                    "StartOffset": 5717,
                                    "EndOffset": 5723
                                }
                            ]
                        },
                        "MetaInfo.contains_faststr": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "MetaInfo.contains_faststr",
                            "File": "src/lib.rs",
                            "Line": 192,
                            "StartOffset": 5784,
                            "EndOffset": 6259,
                            "Content": "impl MetaInfo {\n    /// Creates an empty `MetaInfo`.\n    #[inline]\n    /// Check if `MetaInfo` contains the given Faststr newtype\n    #[inline]\n    pub fn contains_faststr\u003cT: 'static\u003e(\u0026self) -\u003e bool {\n        if self\n            .faststr_tmap\n            .as_ref()\n            .map(|faststr_tmap| faststr_tmap.contains::\u003cT\u003e())\n            .unwrap_or(false)\n        {\n            return true;\n        }\n        self.parent\n            .as_ref()\n            .map(|parent| parent.as_ref().contains_faststr::\u003cT\u003e())\n            .unwrap_or(false)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "as_ref",
                                    "File": "src/lib.rs",
                                    "Line": 197,
                                    "StartOffset": 5969,
                                    "EndOffset": 5975
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "map",
                                    "File": "src/lib.rs",
                                    "Line": 198,
                                    "StartOffset": 5991,
                                    "EndOffset": 5994
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap.contains",
                                    "File": "src/lib.rs",
                                    "Line": 198,
                                    "StartOffset": 6023,
                                    "EndOffset": 6031
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "unwrap_or",
                                    "File": "src/lib.rs",
                                    "Line": 199,
                                    "StartOffset": 6053,
                                    "EndOffset": 6062
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "alloc::sync",
                                    "Name": "as_ref",
                                    "File": "src/lib.rs",
                                    "Line": 205,
                                    "StartOffset": 6190,
                                    "EndOffset": 6196
                                }
                            ]
                        },
                        "MetaInfo.contains_string": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "MetaInfo.contains_string",
                            "File": "src/lib.rs",
                            "Line": 209,
                            "StartOffset": 6265,
                            "EndOffset": 6729,
                            "Content": "impl MetaInfo {\n    /// Creates an empty `MetaInfo`.\n    #[inline]\n    /// Check if `MetaInfo` contains the given string k-v\n    #[inline]\n    pub fn contains_string\u003cK: AsRef\u003cstr\u003e\u003e(\u0026self, key: K) -\u003e bool {\n        if self\n            .smap\n            .as_ref()\n            .map(|smap| smap.contains_key(key.as_ref()))\n            .unwrap_or(false)\n        {\n            return true;\n        }\n        self.parent\n            .as_ref()\n            .map(|parent| parent.as_ref().contains_string(key))\n            .unwrap_or(false)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "as_ref",
                                    "File": "src/lib.rs",
                                    "Line": 214,
                                    "StartOffset": 6447,
                                    "EndOffset": 6453
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "map",
                                    "File": "src/lib.rs",
                                    "Line": 215,
                                    "StartOffset": 6469,
                                    "EndOffset": 6472
                                },
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "contains_key",
                                    "File": "src/lib.rs",
                                    "Line": 215,
                                    "StartOffset": 6485,
                                    "EndOffset": 6497
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "as_ref",
                                    "File": "src/lib.rs",
                                    "Line": 215,
                                    "StartOffset": 6502,
                                    "EndOffset": 6508
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "unwrap_or",
                                    "File": "src/lib.rs",
                                    "Line": 216,
                                    "StartOffset": 6526,
                                    "EndOffset": 6535
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "alloc::sync",
                                    "Name": "as_ref",
                                    "File": "src/lib.rs",
                                    "Line": 222,
                                    "StartOffset": 6663,
                                    "EndOffset": 6669
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "AsRef",
                                    "File": "src/lib.rs",
                                    "Line": 211,
                                    "StartOffset": 6363,
                                    "EndOffset": 6368
                                }
                            ]
                        },
                        "MetaInfo.derive": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "MetaInfo.derive",
                            "File": "src/lib.rs",
                            "Line": 105,
                            "StartOffset": 2976,
                            "EndOffset": 4134,
                            "Content": "impl MetaInfo {\n    /// Creates an empty `MetaInfo`.\n    #[inline]\n    /// Derives the current [`MetaInfo`], returns two new equivalent `Metainfo`s.\n    ///\n    /// When the info is not found in the current scope, `MetaInfo` will try to get from parent.\n    ///\n    /// This is the recommended way.\n    #[inline]\n    pub fn derive(mut self) -\u003e (MetaInfo, MetaInfo) {\n        if self.tmap.is_none() \u0026\u0026 self.smap.is_none() \u0026\u0026 self.faststr_tmap.is_none() {\n            // we can use the same parent as self to make the tree small\n            let new = MetaInfo {\n                parent: self.parent.clone(),\n                tmap: None,\n                smap: None,\n                faststr_tmap: None,\n                forward_node: self.forward_node.clone(),\n                backward_node: self.backward_node.clone(),\n            };\n            (self, new)\n        } else {\n            let forward_node = self.forward_node.take();\n            let backward_node = self.backward_node.take();\n            let mi = Arc::new(self);\n            (\n                MetaInfo::from_node(mi.clone(), forward_node.clone(), backward_node.clone()),\n                MetaInfo::from_node(mi, forward_node, backward_node),\n            )\n        }\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "Results": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo",
                                    "File": "src/lib.rs",
                                    "Line": 105,
                                    "StartOffset": 3000,
                                    "EndOffset": 3012
                                }
                            ],
                            "FunctionCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "alloc::sync",
                                    "Name": "new",
                                    "File": "src/lib.rs",
                                    "Line": 126,
                                    "StartOffset": 3916,
                                    "EndOffset": 3919
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo::from_node",
                                    "File": "src/lib.rs",
                                    "Line": 128,
                                    "StartOffset": 3967,
                                    "EndOffset": 3976
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "is_none",
                                    "File": "src/lib.rs",
                                    "Line": 112,
                                    "StartOffset": 3293,
                                    "EndOffset": 3300
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "clone",
                                    "File": "src/lib.rs",
                                    "Line": 115,
                                    "StartOffset": 3501,
                                    "EndOffset": 3506
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "take",
                                    "File": "src/lib.rs",
                                    "Line": 124,
                                    "StartOffset": 3823,
                                    "EndOffset": 3827
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "alloc::sync",
                                    "Name": "clone",
                                    "File": "src/lib.rs",
                                    "Line": 128,
                                    "StartOffset": 3980,
                                    "EndOffset": 3985
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo",
                                    "File": "src/lib.rs",
                                    "Line": 111,
                                    "StartOffset": 3250,
                                    "EndOffset": 3258
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "alloc::sync",
                                    "Name": "Arc",
                                    "File": "src/lib.rs",
                                    "Line": 126,
                                    "StartOffset": 3911,
                                    "EndOffset": 3914
                                }
                            ]
                        },
                        "MetaInfo.ensure_backward_node": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "MetaInfo.ensure_backward_node",
                            "File": "src/lib.rs",
                            "Line": 354,
                            "StartOffset": 10983,
                            "EndOffset": 11132,
                            "Content": "impl MetaInfo {\n    /// Creates an empty `MetaInfo`.\n    #[inline]\n    fn ensure_backward_node(\u0026mut self) {\n        if self.backward_node.is_none() {\n            self.backward_node = Some(Node::default())\n        }\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "is_none",
                                    "File": "src/lib.rs",
                                    "Line": 355,
                                    "StartOffset": 11050,
                                    "EndOffset": 11057
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::kv",
                                    "Name": "Node",
                                    "File": "src/lib.rs",
                                    "Line": 356,
                                    "StartOffset": 11100,
                                    "EndOffset": 11104
                                }
                            ]
                        },
                        "MetaInfo.ensure_forward_node": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "MetaInfo.ensure_forward_node",
                            "File": "src/lib.rs",
                            "Line": 348,
                            "StartOffset": 10831,
                            "EndOffset": 10977,
                            "Content": "impl MetaInfo {\n    /// Creates an empty `MetaInfo`.\n    #[inline]\n    fn ensure_forward_node(\u0026mut self) {\n        if self.forward_node.is_none() {\n            self.forward_node = Some(Node::default())\n        }\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "is_none",
                                    "File": "src/lib.rs",
                                    "Line": 349,
                                    "StartOffset": 10896,
                                    "EndOffset": 10903
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::kv",
                                    "Name": "Node",
                                    "File": "src/lib.rs",
                                    "Line": 350,
                                    "StartOffset": 10945,
                                    "EndOffset": 10949
                                }
                            ]
                        },
                        "MetaInfo.extend": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "MetaInfo.extend",
                            "File": "src/lib.rs",
                            "Line": 309,
                            "StartOffset": 9544,
                            "EndOffset": 10825,
                            "Content": "impl MetaInfo {\n    /// Creates an empty `MetaInfo`.\n    #[inline]\n    /// Extends self with the items from another `MetaInfo`.\n    /// Only extend the items in the current scope.\n    #[inline]\n    pub fn extend(\u0026mut self, other: MetaInfo) {\n        if let Some(tmap) = other.tmap {\n            self.tmap\n                .get_or_insert_with(|| TypeMap::with_capacity(DEFAULT_MAP_SIZE))\n                .extend(tmap);\n        }\n\n        if let Some(smap) = other.smap {\n            self.smap\n                .get_or_insert_with(|| AHashMap::with_capacity(DEFAULT_MAP_SIZE))\n                .extend(smap);\n        }\n\n        if let Some(faststr_tmap) = other.faststr_tmap {\n            self.faststr_tmap\n                .get_or_insert_with(|| FastStrMap::with_capacity(DEFAULT_MAP_SIZE))\n                .extend(faststr_tmap);\n        }\n\n        if let Some(node) = other.forward_node {\n            if self.forward_node.is_none() {\n                self.forward_node = Some(node);\n            } else {\n                self.forward_node.as_mut().unwrap().extend(node);\n            }\n        }\n\n        if let Some(node) = other.backward_node {\n            if self.backward_node.is_none() {\n                self.backward_node = Some(node);\n            } else {\n                self.backward_node.as_mut().unwrap().extend(node);\n            }\n        }\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "FunctionCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap::with_capacity",
                                    "File": "src/lib.rs",
                                    "Line": 315,
                                    "StartOffset": 9826,
                                    "EndOffset": 9839
                                },
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap::with_capacity",
                                    "File": "src/lib.rs",
                                    "Line": 321,
                                    "StartOffset": 10013,
                                    "EndOffset": 10026
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap::with_capacity",
                                    "File": "src/lib.rs",
                                    "Line": 327,
                                    "StartOffset": 10226,
                                    "EndOffset": 10239
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "get_or_insert_with",
                                    "File": "src/lib.rs",
                                    "Line": 315,
                                    "StartOffset": 9795,
                                    "EndOffset": 9813
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap.extend",
                                    "File": "src/lib.rs",
                                    "Line": 316,
                                    "StartOffset": 9876,
                                    "EndOffset": 9882
                                },
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "Extend\u003cAHashMap\u003e.extend",
                                    "File": "src/lib.rs",
                                    "Line": 322,
                                    "StartOffset": 10063,
                                    "EndOffset": 10069
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap.extend",
                                    "File": "src/lib.rs",
                                    "Line": 328,
                                    "StartOffset": 10276,
                                    "EndOffset": 10282
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "is_none",
                                    "File": "src/lib.rs",
                                    "Line": 332,
                                    "StartOffset": 10391,
                                    "EndOffset": 10398
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "as_mut",
                                    "File": "src/lib.rs",
                                    "Line": 335,
                                    "StartOffset": 10506,
                                    "EndOffset": 10512
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "unwrap",
                                    "File": "src/lib.rs",
                                    "Line": 335,
                                    "StartOffset": 10515,
                                    "EndOffset": 10521
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::kv",
                                    "Name": "Node.extend",
                                    "File": "src/lib.rs",
                                    "Line": 335,
                                    "StartOffset": 10524,
                                    "EndOffset": 10530
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo",
                                    "File": "src/lib.rs",
                                    "Line": 312,
                                    "StartOffset": 9703,
                                    "EndOffset": 9711
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap",
                                    "File": "src/lib.rs",
                                    "Line": 315,
                                    "StartOffset": 9817,
                                    "EndOffset": 9824
                                },
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap",
                                    "File": "src/lib.rs",
                                    "Line": 321,
                                    "StartOffset": 10003,
                                    "EndOffset": 10011
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap",
                                    "File": "src/lib.rs",
                                    "Line": 327,
                                    "StartOffset": 10214,
                                    "EndOffset": 10224
                                }
                            ],
                            "GlobalVars": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "DEFAULT_MAP_SIZE",
                                    "File": "src/lib.rs",
                                    "Line": 315,
                                    "StartOffset": 9840,
                                    "EndOffset": 9856
                                }
                            ]
                        },
                        "MetaInfo.get": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "MetaInfo.get",
                            "File": "src/lib.rs",
                            "Line": 226,
                            "StartOffset": 6735,
                            "EndOffset": 7066,
                            "Content": "impl MetaInfo {\n    /// Creates an empty `MetaInfo`.\n    #[inline]\n    /// Get a reference to a type previously inserted on this `MetaInfo`.\n    #[inline]\n    pub fn get\u003cT: 'static\u003e(\u0026self) -\u003e Option\u003c\u0026T\u003e {\n        self.tmap.as_ref().and_then(|tmap| tmap.get()).or_else(|| {\n            self.parent\n                .as_ref()\n                .and_then(|parent| parent.as_ref().get::\u003cT\u003e())\n        })\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "as_ref",
                                    "File": "src/lib.rs",
                                    "Line": 229,
                                    "StartOffset": 6887,
                                    "EndOffset": 6893
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "and_then",
                                    "File": "src/lib.rs",
                                    "Line": 229,
                                    "StartOffset": 6896,
                                    "EndOffset": 6904
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap.get",
                                    "File": "src/lib.rs",
                                    "Line": 229,
                                    "StartOffset": 6917,
                                    "EndOffset": 6920
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "or_else",
                                    "File": "src/lib.rs",
                                    "Line": 229,
                                    "StartOffset": 6924,
                                    "EndOffset": 6931
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "alloc::sync",
                                    "Name": "as_ref",
                                    "File": "src/lib.rs",
                                    "Line": 232,
                                    "StartOffset": 7029,
                                    "EndOffset": 7035
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/lib.rs",
                                    "Line": 228,
                                    "StartOffset": 6856,
                                    "EndOffset": 6862
                                }
                            ]
                        },
                        "MetaInfo.get_all_backword_transients_with_prefix": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "MetaInfo.get_all_backword_transients_with_prefix",
                            "File": "src/lib.rs",
                            "Line": 591,
                            "StartOffset": 18217,
                            "EndOffset": 19070,
                            "Content": "impl MetaInfo {\n    #[inline]\n    #[inline]\n    fn get_all_backword_transients_with_prefix\u003cC\u003e(\n        \u0026self,\n        converter: C,\n    ) -\u003e Option\u003cAHashMap\u003cFastStr, FastStr\u003e\u003e\n    where\n        C: Converter,\n    {\n        match self.backward_node.as_ref() {\n            Some(node) =\u003e {\n                if let Some(t) = node.get_all_transients() {\n                    let new_cap = t.len();\n                    if new_cap == 0 {\n                        return None;\n                    }\n                    let mut map = AHashMap::with_capacity(new_cap);\n                    map.extend(\n                        t.iter()\n                            .map(|(k, v)| (converter.add_transient_prefix(k), v.clone())),\n                    );\n                    Some(map)\n                } else {\n                    None\n                }\n            }\n            None =\u003e None,\n        }\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "FunctionCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::kv",
                                    "Name": "get_all_impl",
                                    "File": "src/lib.rs",
                                    "Line": 601,
                                    "StartOffset": 18507,
                                    "EndOffset": 18525
                                },
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap::with_capacity",
                                    "File": "src/lib.rs",
                                    "Line": 606,
                                    "StartOffset": 18714,
                                    "EndOffset": 18727
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "as_ref",
                                    "File": "src/lib.rs",
                                    "Line": 599,
                                    "StartOffset": 18430,
                                    "EndOffset": 18436
                                },
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "len",
                                    "File": "src/lib.rs",
                                    "Line": 602,
                                    "StartOffset": 18566,
                                    "EndOffset": 18569
                                },
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "Extend\u003cAHashMap\u003e.extend",
                                    "File": "src/lib.rs",
                                    "Line": 607,
                                    "StartOffset": 18762,
                                    "EndOffset": 18768
                                },
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "iter",
                                    "File": "src/lib.rs",
                                    "Line": 608,
                                    "StartOffset": 18796,
                                    "EndOffset": 18800
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::iter::traits::iterator",
                                    "Name": "map",
                                    "File": "src/lib.rs",
                                    "Line": 609,
                                    "StartOffset": 18832,
                                    "EndOffset": 18835
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "add_transient_prefix",
                                    "File": "src/lib.rs",
                                    "Line": 609,
                                    "StartOffset": 18856,
                                    "EndOffset": 18876
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/lib.rs",
                                    "Line": 595,
                                    "StartOffset": 18324,
                                    "EndOffset": 18330
                                },
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap",
                                    "File": "src/lib.rs",
                                    "Line": 595,
                                    "StartOffset": 18331,
                                    "EndOffset": 18339
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/lib.rs",
                                    "Line": 595,
                                    "StartOffset": 18340,
                                    "EndOffset": 18347
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "Converter",
                                    "File": "src/lib.rs",
                                    "Line": 597,
                                    "StartOffset": 18380,
                                    "EndOffset": 18389
                                }
                            ]
                        },
                        "MetaInfo.get_all_persistents_and_transients": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "MetaInfo.get_all_persistents_and_transients",
                            "File": "src/lib.rs",
                            "Line": 553,
                            "StartOffset": 16893,
                            "EndOffset": 18211,
                            "Content": "impl MetaInfo {\n    #[inline]\n    #[inline]\n    fn get_all_persistents_and_transients\u003cC\u003e(\n        \u0026self,\n        converter: C,\n    ) -\u003e Option\u003cAHashMap\u003cFastStr, FastStr\u003e\u003e\n    where\n        C: Converter,\n    {\n        match self.forward_node.as_ref() {\n            Some(node) =\u003e {\n                let persistents = node.get_all_persistents();\n                let transients = node.get_all_transients();\n                let new_cap = persistents.map(|p| p.len()).unwrap_or(0)\n                    + transients.map(|t| t.len()).unwrap_or(0);\n                if new_cap == 0 {\n                    return None;\n                }\n                let mut map = AHashMap::with_capacity(new_cap);\n                if let Some(persistents) = persistents {\n                    map.extend(\n                        persistents\n                            .iter()\n                            .map(|(k, v)| (converter.add_persistent_prefix(k), v.clone())),\n                    );\n                }\n                if let Some(transients) = transients {\n                    map.extend(\n                        transients\n                            .iter()\n                            .map(|(k, v)| (converter.add_transient_prefix(k), v.clone())),\n                    );\n                }\n                Some(map)\n            }\n            None =\u003e None,\n        }\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "FunctionCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::kv",
                                    "Name": "get_all_impl",
                                    "File": "src/lib.rs",
                                    "Line": 563,
                                    "StartOffset": 17178,
                                    "EndOffset": 17197
                                },
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap::with_capacity",
                                    "File": "src/lib.rs",
                                    "Line": 570,
                                    "StartOffset": 17522,
                                    "EndOffset": 17535
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "as_ref",
                                    "File": "src/lib.rs",
                                    "Line": 561,
                                    "StartOffset": 17100,
                                    "EndOffset": 17106
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "map",
                                    "File": "src/lib.rs",
                                    "Line": 565,
                                    "StartOffset": 17303,
                                    "EndOffset": 17306
                                },
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "len",
                                    "File": "src/lib.rs",
                                    "Line": 565,
                                    "StartOffset": 17313,
                                    "EndOffset": 17316
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "unwrap_or",
                                    "File": "src/lib.rs",
                                    "Line": 565,
                                    "StartOffset": 17320,
                                    "EndOffset": 17329
                                },
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "Extend\u003cAHashMap\u003e.extend",
                                    "File": "src/lib.rs",
                                    "Line": 572,
                                    "StartOffset": 17627,
                                    "EndOffset": 17633
                                },
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "iter",
                                    "File": "src/lib.rs",
                                    "Line": 574,
                                    "StartOffset": 17700,
                                    "EndOffset": 17704
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::iter::traits::iterator",
                                    "Name": "map",
                                    "File": "src/lib.rs",
                                    "Line": 575,
                                    "StartOffset": 17736,
                                    "EndOffset": 17739
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "add_transient_prefix",
                                    "File": "src/lib.rs",
                                    "Line": 582,
                                    "StartOffset": 18051,
                                    "EndOffset": 18071
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/lib.rs",
                                    "Line": 557,
                                    "StartOffset": 16995,
                                    "EndOffset": 17001
                                },
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap",
                                    "File": "src/lib.rs",
                                    "Line": 557,
                                    "StartOffset": 17002,
                                    "EndOffset": 17010
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/lib.rs",
                                    "Line": 557,
                                    "StartOffset": 17011,
                                    "EndOffset": 17018
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "Converter",
                                    "File": "src/lib.rs",
                                    "Line": 559,
                                    "StartOffset": 17051,
                                    "EndOffset": 17060
                                }
                            ]
                        },
                        "MetaInfo.get_faststr": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "MetaInfo.get_faststr",
                            "File": "src/lib.rs",
                            "Line": 243,
                            "StartOffset": 7325,
                            "EndOffset": 7786,
                            "Content": "impl MetaInfo {\n    /// Creates an empty `MetaInfo`.\n    #[inline]\n    /// Get a reference to a faststr newtype previously inserted on this `MetaInfo`.\n    #[inline]\n    pub fn get_faststr\u003cT: 'static\u003e(\u0026self) -\u003e Option\u003c\u0026FastStr\u003e {\n        self.faststr_tmap\n            .as_ref()\n            .and_then(|faststr_tmap: \u0026FastStrMap| faststr_tmap.get::\u003cT\u003e())\n            .or_else(|| {\n                self.parent\n                    .as_ref()\n                    .and_then(|parent| parent.as_ref().get_faststr::\u003cT\u003e())\n            })\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "as_ref",
                                    "File": "src/lib.rs",
                                    "Line": 247,
                                    "StartOffset": 7523,
                                    "EndOffset": 7529
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "and_then",
                                    "File": "src/lib.rs",
                                    "Line": 248,
                                    "StartOffset": 7545,
                                    "EndOffset": 7553
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap.get",
                                    "File": "src/lib.rs",
                                    "Line": 248,
                                    "StartOffset": 7595,
                                    "EndOffset": 7598
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "or_else",
                                    "File": "src/lib.rs",
                                    "Line": 249,
                                    "StartOffset": 7620,
                                    "EndOffset": 7627
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "alloc::sync",
                                    "Name": "as_ref",
                                    "File": "src/lib.rs",
                                    "Line": 252,
                                    "StartOffset": 7737,
                                    "EndOffset": 7743
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/lib.rs",
                                    "Line": 245,
                                    "StartOffset": 7465,
                                    "EndOffset": 7471
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/lib.rs",
                                    "Line": 245,
                                    "StartOffset": 7473,
                                    "EndOffset": 7480
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap",
                                    "File": "src/lib.rs",
                                    "Line": 248,
                                    "StartOffset": 7570,
                                    "EndOffset": 7580
                                }
                            ]
                        },
                        "MetaInfo.get_string": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "MetaInfo.get_string",
                            "File": "src/lib.rs",
                            "Line": 265,
                            "StartOffset": 8120,
                            "EndOffset": 8553,
                            "Content": "impl MetaInfo {\n    /// Creates an empty `MetaInfo`.\n    #[inline]\n    /// Get a reference to a string k-v previously inserted on this `MetaInfo`.\n    #[inline]\n    pub fn get_string\u003cK: AsRef\u003cstr\u003e\u003e(\u0026self, key: K) -\u003e Option\u003c\u0026FastStr\u003e {\n        self.smap\n            .as_ref()\n            .and_then(|smap| smap.get(key.as_ref()))\n            .or_else(|| {\n                self.parent\n                    .as_ref()\n                    .and_then(|parent| parent.as_ref().get_string(key))\n            })\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "as_ref",
                                    "File": "src/lib.rs",
                                    "Line": 269,
                                    "StartOffset": 8315,
                                    "EndOffset": 8321
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "and_then",
                                    "File": "src/lib.rs",
                                    "Line": 270,
                                    "StartOffset": 8337,
                                    "EndOffset": 8345
                                },
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap.get",
                                    "File": "src/lib.rs",
                                    "Line": 270,
                                    "StartOffset": 8358,
                                    "EndOffset": 8361
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "as_ref",
                                    "File": "src/lib.rs",
                                    "Line": 270,
                                    "StartOffset": 8366,
                                    "EndOffset": 8372
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "or_else",
                                    "File": "src/lib.rs",
                                    "Line": 271,
                                    "StartOffset": 8390,
                                    "EndOffset": 8397
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "alloc::sync",
                                    "Name": "as_ref",
                                    "File": "src/lib.rs",
                                    "Line": 274,
                                    "StartOffset": 8507,
                                    "EndOffset": 8513
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "AsRef",
                                    "File": "src/lib.rs",
                                    "Line": 267,
                                    "StartOffset": 8235,
                                    "EndOffset": 8240
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/lib.rs",
                                    "Line": 267,
                                    "StartOffset": 8265,
                                    "EndOffset": 8271
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/lib.rs",
                                    "Line": 267,
                                    "StartOffset": 8273,
                                    "EndOffset": 8280
                                }
                            ]
                        },
                        "MetaInfo.insert": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "MetaInfo.insert",
                            "File": "src/lib.rs",
                            "Line": 151,
                            "StartOffset": 4556,
                            "EndOffset": 4801,
                            "Content": "impl MetaInfo {\n    /// Creates an empty `MetaInfo`.\n    #[inline]\n    /// Insert a type into this `MetaInfo`.\n    #[inline]\n    pub fn insert\u003cT: Send + Sync + 'static\u003e(\u0026mut self, val: T) {\n        self.tmap\n            .get_or_insert_with(|| TypeMap::with_capacity(DEFAULT_MAP_SIZE))\n            .insert(val);\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "FunctionCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap::with_capacity",
                                    "File": "src/lib.rs",
                                    "Line": 155,
                                    "StartOffset": 4737,
                                    "EndOffset": 4750
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "get_or_insert_with",
                                    "File": "src/lib.rs",
                                    "Line": 155,
                                    "StartOffset": 4706,
                                    "EndOffset": 4724
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap.insert",
                                    "File": "src/lib.rs",
                                    "Line": 156,
                                    "StartOffset": 4783,
                                    "EndOffset": 4789
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::marker",
                                    "Name": "Send",
                                    "File": "src/lib.rs",
                                    "Line": 153,
                                    "StartOffset": 4631,
                                    "EndOffset": 4635
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::marker",
                                    "Name": "Sync",
                                    "File": "src/lib.rs",
                                    "Line": 153,
                                    "StartOffset": 4638,
                                    "EndOffset": 4642
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap",
                                    "File": "src/lib.rs",
                                    "Line": 155,
                                    "StartOffset": 4728,
                                    "EndOffset": 4735
                                }
                            ],
                            "GlobalVars": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "DEFAULT_MAP_SIZE",
                                    "File": "src/lib.rs",
                                    "Line": 155,
                                    "StartOffset": 4751,
                                    "EndOffset": 4767
                                }
                            ]
                        },
                        "MetaInfo.insert_faststr": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "MetaInfo.insert_faststr",
                            "File": "src/lib.rs",
                            "Line": 159,
                            "StartOffset": 4807,
                            "EndOffset": 5093,
                            "Content": "impl MetaInfo {\n    /// Creates an empty `MetaInfo`.\n    #[inline]\n    /// Insert a faststr newtype into this `MetaInfo`.\n    #[inline]\n    pub fn insert_faststr\u003cT: Send + Sync + 'static\u003e(\u0026mut self, val: FastStr) {\n        self.faststr_tmap\n            .get_or_insert_with(|| FastStrMap::with_capacity(DEFAULT_MAP_SIZE))\n            .insert::\u003cT\u003e(val);\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "FunctionCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap::with_capacity",
                                    "File": "src/lib.rs",
                                    "Line": 163,
                                    "StartOffset": 5024,
                                    "EndOffset": 5037
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "get_or_insert_with",
                                    "File": "src/lib.rs",
                                    "Line": 163,
                                    "StartOffset": 4990,
                                    "EndOffset": 5008
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap.insert",
                                    "File": "src/lib.rs",
                                    "Line": 164,
                                    "StartOffset": 5070,
                                    "EndOffset": 5076
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::marker",
                                    "Name": "Send",
                                    "File": "src/lib.rs",
                                    "Line": 161,
                                    "StartOffset": 4901,
                                    "EndOffset": 4905
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::marker",
                                    "Name": "Sync",
                                    "File": "src/lib.rs",
                                    "Line": 161,
                                    "StartOffset": 4908,
                                    "EndOffset": 4912
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/lib.rs",
                                    "Line": 161,
                                    "StartOffset": 4940,
                                    "EndOffset": 4947
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap",
                                    "File": "src/lib.rs",
                                    "Line": 163,
                                    "StartOffset": 5012,
                                    "EndOffset": 5022
                                }
                            ],
                            "GlobalVars": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "DEFAULT_MAP_SIZE",
                                    "File": "src/lib.rs",
                                    "Line": 163,
                                    "StartOffset": 5038,
                                    "EndOffset": 5054
                                }
                            ]
                        },
                        "MetaInfo.insert_string": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "MetaInfo.insert_string",
                            "File": "src/lib.rs",
                            "Line": 167,
                            "StartOffset": 5099,
                            "EndOffset": 5357,
                            "Content": "impl MetaInfo {\n    /// Creates an empty `MetaInfo`.\n    #[inline]\n    /// Insert a string k-v into this `MetaInfo`.\n    #[inline]\n    pub fn insert_string(\u0026mut self, key: FastStr, val: FastStr) {\n        self.smap\n            .get_or_insert_with(|| AHashMap::with_capacity(DEFAULT_MAP_SIZE))\n            .insert(key, val);\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "FunctionCalls": [
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap::with_capacity",
                                    "File": "src/lib.rs",
                                    "Line": 171,
                                    "StartOffset": 5288,
                                    "EndOffset": 5301
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "get_or_insert_with",
                                    "File": "src/lib.rs",
                                    "Line": 171,
                                    "StartOffset": 5256,
                                    "EndOffset": 5274
                                },
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap.insert",
                                    "File": "src/lib.rs",
                                    "Line": 172,
                                    "StartOffset": 5334,
                                    "EndOffset": 5340
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/lib.rs",
                                    "Line": 169,
                                    "StartOffset": 5200,
                                    "EndOffset": 5207
                                },
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap",
                                    "File": "src/lib.rs",
                                    "Line": 171,
                                    "StartOffset": 5278,
                                    "EndOffset": 5286
                                }
                            ],
                            "GlobalVars": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "DEFAULT_MAP_SIZE",
                                    "File": "src/lib.rs",
                                    "Line": 171,
                                    "StartOffset": 5302,
                                    "EndOffset": 5318
                                }
                            ]
                        },
                        "MetaInfo.remove": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "MetaInfo.remove",
                            "File": "src/lib.rs",
                            "Line": 236,
                            "StartOffset": 7072,
                            "EndOffset": 7319,
                            "Content": "impl MetaInfo {\n    /// Creates an empty `MetaInfo`.\n    #[inline]\n    /// Remove a type from this `MetaInfo` and return it.\n    /// Can only remove the type in the current scope.\n    #[inline]\n    pub fn remove\u003cT: 'static\u003e(\u0026mut self) -\u003e Option\u003cT\u003e {\n        self.tmap.as_mut().and_then(|tmap| tmap.remove::\u003cT\u003e())\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "as_mut",
                                    "File": "src/lib.rs",
                                    "Line": 240,
                                    "StartOffset": 7269,
                                    "EndOffset": 7275
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "and_then",
                                    "File": "src/lib.rs",
                                    "Line": 240,
                                    "StartOffset": 7278,
                                    "EndOffset": 7286
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap.remove",
                                    "File": "src/lib.rs",
                                    "Line": 240,
                                    "StartOffset": 7299,
                                    "EndOffset": 7305
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/lib.rs",
                                    "Line": 239,
                                    "StartOffset": 7239,
                                    "EndOffset": 7245
                                }
                            ]
                        },
                        "MetaInfo.remove_faststr": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "MetaInfo.remove_faststr",
                            "File": "src/lib.rs",
                            "Line": 256,
                            "StartOffset": 7792,
                            "EndOffset": 8114,
                            "Content": "impl MetaInfo {\n    /// Creates an empty `MetaInfo`.\n    #[inline]\n    /// Remove a faststr newtype from this `MetaInfo` and return it.\n    /// Can only remove the type in the current scope.\n    #[inline]\n    pub fn remove_faststr\u003cT: 'static\u003e(\u0026mut self) -\u003e Option\u003cFastStr\u003e {\n        self.faststr_tmap\n            .as_mut()\n            .and_then(|faststr_tmap| faststr_tmap.remove::\u003cT\u003e())\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "as_mut",
                                    "File": "src/lib.rs",
                                    "Line": 261,
                                    "StartOffset": 8035,
                                    "EndOffset": 8041
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "and_then",
                                    "File": "src/lib.rs",
                                    "Line": 262,
                                    "StartOffset": 8057,
                                    "EndOffset": 8065
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap.remove",
                                    "File": "src/lib.rs",
                                    "Line": 262,
                                    "StartOffset": 8094,
                                    "EndOffset": 8100
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/lib.rs",
                                    "Line": 259,
                                    "StartOffset": 7978,
                                    "EndOffset": 7984
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/lib.rs",
                                    "Line": 259,
                                    "StartOffset": 7985,
                                    "EndOffset": 7992
                                }
                            ]
                        },
                        "MetaInfo.remove_string": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "MetaInfo.remove_string",
                            "File": "src/lib.rs",
                            "Line": 278,
                            "StartOffset": 8559,
                            "EndOffset": 8869,
                            "Content": "impl MetaInfo {\n    /// Creates an empty `MetaInfo`.\n    #[inline]\n    /// Remove a string k-v from this `MetaInfo` and return it.\n    /// Can only remove the type in the current scope.\n    #[inline]\n    pub fn remove_string\u003cK: AsRef\u003cstr\u003e\u003e(\u0026mut self, key: K) -\u003e Option\u003cFastStr\u003e {\n        self.smap\n            .as_mut()\n            .and_then(|smap| smap.remove(key.as_ref()))\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "as_mut",
                                    "File": "src/lib.rs",
                                    "Line": 283,
                                    "StartOffset": 8799,
                                    "EndOffset": 8805
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "and_then",
                                    "File": "src/lib.rs",
                                    "Line": 284,
                                    "StartOffset": 8821,
                                    "EndOffset": 8829
                                },
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap.remove",
                                    "File": "src/lib.rs",
                                    "Line": 284,
                                    "StartOffset": 8842,
                                    "EndOffset": 8848
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "as_ref",
                                    "File": "src/lib.rs",
                                    "Line": 284,
                                    "StartOffset": 8853,
                                    "EndOffset": 8859
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "AsRef",
                                    "File": "src/lib.rs",
                                    "Line": 281,
                                    "StartOffset": 8716,
                                    "EndOffset": 8721
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/lib.rs",
                                    "Line": 281,
                                    "StartOffset": 8750,
                                    "EndOffset": 8756
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/lib.rs",
                                    "Line": 281,
                                    "StartOffset": 8757,
                                    "EndOffset": 8764
                                }
                            ]
                        },
                        "MetaInfo::from_node": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "MetaInfo::from_node",
                            "File": "src/lib.rs",
                            "Line": 134,
                            "StartOffset": 4140,
                            "EndOffset": 4550,
                            "Content": "impl MetaInfo {\n    /// Creates an empty `MetaInfo`.\n    #[inline]\n    /// Creates an `MetaInfo` with the parent and node given.\n    fn from_node(\n        parent: Arc\u003cMetaInfo\u003e,\n        forward_node: Option\u003ckv::Node\u003e,\n        backward_node: Option\u003ckv::Node\u003e,\n    ) -\u003e MetaInfo {\n        MetaInfo {\n            parent: Some(parent),\n            tmap: None,\n            smap: None,\n            faststr_tmap: None,\n\n            forward_node,\n            backward_node,\n        }\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo"
                                }
                            },
                            "Types": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "alloc::sync",
                                    "Name": "Arc",
                                    "File": "src/lib.rs",
                                    "Line": 136,
                                    "StartOffset": 4232,
                                    "EndOffset": 4235
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo",
                                    "File": "src/lib.rs",
                                    "Line": 136,
                                    "StartOffset": 4236,
                                    "EndOffset": 4244
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/lib.rs",
                                    "Line": 137,
                                    "StartOffset": 4269,
                                    "EndOffset": 4275
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::kv",
                                    "Name": "Node",
                                    "File": "src/lib.rs",
                                    "Line": 137,
                                    "StartOffset": 4280,
                                    "EndOffset": 4284
                                }
                            ]
                        },
                        "del_impl": {
                            "Exported": true,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "del_impl",
                            "File": "src/lib.rs",
                            "Line": 392,
                            "StartOffset": 12000,
                            "EndOffset": 12396,
                            "Content": "macro_rules! del_impl {\n    ($name:ident,$node:ident,$func_name:ident) =\u003e {\n        paste! {\n            fn [\u003cdel_ $name\u003e]\u003cK: AsRef\u003cstr\u003e\u003e(\u0026mut self, key: K) -\u003e Option\u003cFastStr\u003e {\n                if let Some(node) = self.[\u003c$node _node\u003e].as_mut() {\n                    node.[\u003cdel_ $func_name\u003e](key)\n                } else {\n                    None\n                }\n            }\n        }\n    };\n}"
                        },
                        "get_impl": {
                            "Exported": true,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "get_impl",
                            "File": "src/lib.rs",
                            "Line": 361,
                            "StartOffset": 11136,
                            "EndOffset": 11513,
                            "Content": "macro_rules! get_impl {\n    ($name:ident,$node:ident,$func_name:ident) =\u003e {\n        paste! {\n            fn [\u003cget_ $name\u003e]\u003cK: AsRef\u003cstr\u003e\u003e(\u0026self, key: K) -\u003e Option\u003cFastStr\u003e {\n                match self.[\u003c$node _node\u003e].as_ref() {\n                    Some(node) =\u003e node.[\u003cget_ $func_name\u003e](key),\n                    None =\u003e None,\n                }\n            }\n        }\n    };\n}"
                        },
                        "set_impl": {
                            "Exported": true,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "set_impl",
                            "File": "src/lib.rs",
                            "Line": 374,
                            "StartOffset": 11515,
                            "EndOffset": 11998,
                            "Content": "macro_rules! set_impl {\n    ($name:ident,$node:ident,$func_name:ident) =\u003e {\n        paste! {\n            fn [\u003cset_ $name\u003e]\u003cK: Into\u003cFastStr\u003e, V: Into\u003cFastStr\u003e\u003e(\n                \u0026mut self,\n                key: K,\n                value: V,\n            ) {\n                self.[\u003censure_ $node _node\u003e]();\n                self.[\u003c$node _node\u003e]\n                    .as_mut()\n                    .unwrap()\n                    .[\u003cset_ $func_name\u003e](key, value)\n            }\n        }\n    };\n}"
                        }
                    },
                    "Types": {
                        "MetaInfo": {
                            "Exported": true,
                            "TypeKind": "struct",
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "MetaInfo",
                            "File": "src/lib.rs",
                            "Line": 36,
                            "StartOffset": 892,
                            "EndOffset": 2186,
                            "Content": "/// `MetaInfo` is used to passthrough information between components and even client-server.\n///\n/// It supports two types of info: typed map and string k-v.\n///\n/// It is designed to be tree-like, which means you can share a `MetaInfo` with multiple children.\n///\n/// Note: only the current scope is mutable.\n///\n/// Examples:\n/// ```rust\n/// use metainfo::MetaInfo;\n///\n/// fn test() {\n///     let mut m1 = MetaInfo::new();\n///     m1.insert::\u003ci8\u003e(2);\n///     assert_eq!(*m1.get::\u003ci8\u003e().unwrap(), 2);\n///\n///     let (mut m1, mut m2) = m1.derive();\n///     assert_eq!(*m2.get::\u003ci8\u003e().unwrap(), 2);\n///\n///     m2.insert::\u003ci8\u003e(4);\n///     assert_eq!(*m2.get::\u003ci8\u003e().unwrap(), 4);\n///\n///     m2.remove::\u003ci8\u003e();\n///     assert_eq!(*m2.get::\u003ci8\u003e().unwrap(), 2);\n/// }\n/// ```\n#[derive(Default)]\npub struct MetaInfo {\n    /// Parent is read-only, if we can't find the specified key in the current,\n    /// we search it in the parent scope.\n    parent: Option\u003cArc\u003cMetaInfo\u003e\u003e,\n    tmap: Option\u003cTypeMap\u003e,\n    smap: Option\u003cAHashMap\u003cFastStr, FastStr\u003e\u003e, // for str k-v\n    faststr_tmap: Option\u003cFastStrMap\u003e,         // for newtype wrapper of FastStr\n\n    /// for information transport through client and server.\n    /// e.g. RPC\n    forward_node: Option\u003ckv::Node\u003e,\n    backward_node: Option\u003ckv::Node\u003e,\n}",
                            "SubStruct": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/lib.rs",
                                    "Line": 67,
                                    "StartOffset": 1842,
                                    "EndOffset": 1848
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "alloc::sync",
                                    "Name": "Arc",
                                    "File": "src/lib.rs",
                                    "Line": 67,
                                    "StartOffset": 1849,
                                    "EndOffset": 1852
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/lib.rs",
                                    "Line": 68,
                                    "StartOffset": 1875,
                                    "EndOffset": 1881
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap",
                                    "File": "src/lib.rs",
                                    "Line": 68,
                                    "StartOffset": 1882,
                                    "EndOffset": 1889
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/lib.rs",
                                    "Line": 69,
                                    "StartOffset": 1902,
                                    "EndOffset": 1908
                                },
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap",
                                    "File": "src/lib.rs",
                                    "Line": 69,
                                    "StartOffset": 1909,
                                    "EndOffset": 1917
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/lib.rs",
                                    "Line": 69,
                                    "StartOffset": 1918,
                                    "EndOffset": 1925
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/lib.rs",
                                    "Line": 69,
                                    "StartOffset": 1927,
                                    "EndOffset": 1934
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/lib.rs",
                                    "Line": 70,
                                    "StartOffset": 1971,
                                    "EndOffset": 1977
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap",
                                    "File": "src/lib.rs",
                                    "Line": 70,
                                    "StartOffset": 1978,
                                    "EndOffset": 1988
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/lib.rs",
                                    "Line": 74,
                                    "StartOffset": 2130,
                                    "EndOffset": 2136
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::kv",
                                    "Name": "Node",
                                    "File": "src/lib.rs",
                                    "Line": 74,
                                    "StartOffset": 2141,
                                    "EndOffset": 2145
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/lib.rs",
                                    "Line": 75,
                                    "StartOffset": 2167,
                                    "EndOffset": 2173
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::kv",
                                    "Name": "Node",
                                    "File": "src/lib.rs",
                                    "Line": 75,
                                    "StartOffset": 2178,
                                    "EndOffset": 2182
                                }
                            ],
                            "Methods": {
                                "clear": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo.clear"
                                },
                                "contains": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo.contains"
                                },
                                "contains_faststr": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo.contains_faststr"
                                },
                                "contains_string": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo.contains_string"
                                },
                                "derive": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo.derive"
                                },
                                "ensure_backward_node": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo.ensure_backward_node"
                                },
                                "ensure_forward_node": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo.ensure_forward_node"
                                },
                                "extend": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo.extend"
                                },
                                "fmt": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "Debug\u003cMetaInfo\u003e.fmt"
                                },
                                "get": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo.get"
                                },
                                "get_all_backward_downstreams": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "Backward\u003cMetaInfo\u003e.get_all_backward_downstreams"
                                },
                                "get_all_backward_transients": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "Backward\u003cMetaInfo\u003e.get_all_backward_transients"
                                },
                                "get_all_backward_transients_with_http_prefix": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "Backward\u003cMetaInfo\u003e.get_all_backward_transients_with_http_prefix"
                                },
                                "get_all_backward_transients_with_rpc_prefix": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "Backward\u003cMetaInfo\u003e.get_all_backward_transients_with_rpc_prefix"
                                },
                                "get_all_backword_transients_with_prefix": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo.get_all_backword_transients_with_prefix"
                                },
                                "get_all_persistents": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "Forward\u003cMetaInfo\u003e.get_all_persistents"
                                },
                                "get_all_persistents_and_transients": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo.get_all_persistents_and_transients"
                                },
                                "get_all_persistents_and_transients_with_http_prefix": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "Forward\u003cMetaInfo\u003e.get_all_persistents_and_transients_with_http_prefix"
                                },
                                "get_all_persistents_and_transients_with_rpc_prefix": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "Forward\u003cMetaInfo\u003e.get_all_persistents_and_transients_with_rpc_prefix"
                                },
                                "get_all_transients": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "Forward\u003cMetaInfo\u003e.get_all_transients"
                                },
                                "get_all_upstreams": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "Forward\u003cMetaInfo\u003e.get_all_upstreams"
                                },
                                "get_faststr": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo.get_faststr"
                                },
                                "get_string": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo.get_string"
                                },
                                "insert": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo.insert"
                                },
                                "insert_faststr": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo.insert_faststr"
                                },
                                "insert_string": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo.insert_string"
                                },
                                "remove": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo.remove"
                                },
                                "remove_faststr": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo.remove_faststr"
                                },
                                "remove_string": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "MetaInfo.remove_string"
                                },
                                "strip_http_prefix_and_set_backward_downstream": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "Backward\u003cMetaInfo\u003e.strip_http_prefix_and_set_backward_downstream"
                                },
                                "strip_http_prefix_and_set_persistent": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "Forward\u003cMetaInfo\u003e.strip_http_prefix_and_set_persistent"
                                },
                                "strip_http_prefix_and_set_upstream": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "Forward\u003cMetaInfo\u003e.strip_http_prefix_and_set_upstream"
                                },
                                "strip_rpc_prefix_and_set_backward_downstream": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "Backward\u003cMetaInfo\u003e.strip_rpc_prefix_and_set_backward_downstream"
                                },
                                "strip_rpc_prefix_and_set_persistent": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "Forward\u003cMetaInfo\u003e.strip_rpc_prefix_and_set_persistent"
                                },
                                "strip_rpc_prefix_and_set_upstream": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "Forward\u003cMetaInfo\u003e.strip_rpc_prefix_and_set_upstream"
                                }
                            }
                        }
                    },
                    "Vars": {
                        "DEFAULT_MAP_SIZE": {
                            "IsExported": false,
                            "IsConst": true,
                            "IsPointer": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "DEFAULT_MAP_SIZE",
                            "File": "src/lib.rs",
                            "Line": 34,
                            "StartOffset": 855,
                            "EndOffset": 890,
                            "Content": "const DEFAULT_MAP_SIZE: usize = 10;"
                        },
                        "HTTP_PREFIX_BACKWARD": {
                            "IsExported": true,
                            "IsConst": true,
                            "IsPointer": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "HTTP_PREFIX_BACKWARD",
                            "File": "src/lib.rs",
                            "Line": 32,
                            "StartOffset": 798,
                            "EndOffset": 853,
                            "Content": "pub const HTTP_PREFIX_BACKWARD: \u0026str = \"rpc-backward-\";"
                        },
                        "HTTP_PREFIX_PERSISTENT": {
                            "IsExported": true,
                            "IsConst": true,
                            "IsPointer": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "HTTP_PREFIX_PERSISTENT",
                            "File": "src/lib.rs",
                            "Line": 30,
                            "StartOffset": 685,
                            "EndOffset": 741,
                            "Content": "pub const HTTP_PREFIX_PERSISTENT: \u0026str = \"rpc-persist-\";"
                        },
                        "HTTP_PREFIX_TRANSIENT": {
                            "IsExported": true,
                            "IsConst": true,
                            "IsPointer": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "HTTP_PREFIX_TRANSIENT",
                            "File": "src/lib.rs",
                            "Line": 31,
                            "StartOffset": 742,
                            "EndOffset": 797,
                            "Content": "pub const HTTP_PREFIX_TRANSIENT: \u0026str = \"rpc-transit-\";"
                        },
                        "RPC_PREFIX_BACKWARD": {
                            "IsExported": true,
                            "IsConst": true,
                            "IsPointer": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "RPC_PREFIX_BACKWARD",
                            "File": "src/lib.rs",
                            "Line": 29,
                            "StartOffset": 630,
                            "EndOffset": 684,
                            "Content": "pub const RPC_PREFIX_BACKWARD: \u0026str = \"RPC_BACKWARD_\";"
                        },
                        "RPC_PREFIX_PERSISTENT": {
                            "IsExported": true,
                            "IsConst": true,
                            "IsPointer": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "RPC_PREFIX_PERSISTENT",
                            "File": "src/lib.rs",
                            "Line": 25,
                            "StartOffset": 472,
                            "EndOffset": 574,
                            "Content": "/// Framework should all obey these prefixes.\n\npub const RPC_PREFIX_PERSISTENT: \u0026str = \"RPC_PERSIST_\";"
                        },
                        "RPC_PREFIX_TRANSIENT": {
                            "IsExported": true,
                            "IsConst": true,
                            "IsPointer": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo",
                            "Name": "RPC_PREFIX_TRANSIENT",
                            "File": "src/lib.rs",
                            "Line": 28,
                            "StartOffset": 575,
                            "EndOffset": 629,
                            "Content": "pub const RPC_PREFIX_TRANSIENT: \u0026str = \"RPC_TRANSIT_\";"
                        }
                    }
                },
                "metainfo::backward": {
                    "IsMain": false,
                    "IsTest": false,
                    "PkgPath": "metainfo::backward",
                    "Functions": {},
                    "Types": {
                        "Backward": {
                            "Exported": true,
                            "TypeKind": "interface",
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::backward",
                            "Name": "Backward",
                            "File": "src/backward.rs",
                            "Line": 3,
                            "StartOffset": 44,
                            "EndOffset": 1303,
                            "Content": "pub trait Backward {\n    // We don't think backward persistent makes sense.\n    fn get_backward_transient\u003cK: AsRef\u003cstr\u003e\u003e(\u0026self, key: K) -\u003e Option\u003cFastStr\u003e;\n    fn get_backward_downstream\u003cK: AsRef\u003cstr\u003e\u003e(\u0026self, key: K) -\u003e Option\u003cFastStr\u003e;\n\n    fn get_all_backward_transients(\u0026self) -\u003e Option\u003c\u0026AHashMap\u003cFastStr, FastStr\u003e\u003e;\n    fn get_all_backward_downstreams(\u0026self) -\u003e Option\u003c\u0026AHashMap\u003cFastStr, FastStr\u003e\u003e;\n\n    fn get_all_backward_transients_with_rpc_prefix(\u0026self) -\u003e Option\u003cAHashMap\u003cFastStr, FastStr\u003e\u003e;\n    fn get_all_backward_transients_with_http_prefix(\u0026self) -\u003e Option\u003cAHashMap\u003cFastStr, FastStr\u003e\u003e;\n\n    fn set_backward_transient\u003cK: Into\u003cFastStr\u003e, V: Into\u003cFastStr\u003e\u003e(\u0026mut self, key: K, value: V);\n    fn set_backward_downstream\u003cK: Into\u003cFastStr\u003e, V: Into\u003cFastStr\u003e\u003e(\u0026mut self, key: K, value: V);\n\n    fn strip_rpc_prefix_and_set_backward_downstream\u003cK: AsRef\u003cstr\u003e, V: Into\u003cFastStr\u003e\u003e(\n        \u0026mut self,\n        key: K,\n        value: V,\n    );\n\n    fn strip_http_prefix_and_set_backward_downstream\u003cK: AsRef\u003cstr\u003e, V: Into\u003cFastStr\u003e\u003e(\n        \u0026mut self,\n        key: K,\n        value: V,\n    );\n\n    fn del_backward_transient\u003cK: AsRef\u003cstr\u003e\u003e(\u0026mut self, key: K) -\u003e Option\u003cFastStr\u003e;\n    fn del_backward_downstream\u003cK: AsRef\u003cstr\u003e\u003e(\u0026mut self, key: K) -\u003e Option\u003cFastStr\u003e;\n}",
                            "SubStruct": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "AsRef",
                                    "File": "src/backward.rs",
                                    "Line": 5,
                                    "StartOffset": 153,
                                    "EndOffset": 158
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/backward.rs",
                                    "Line": 5,
                                    "StartOffset": 183,
                                    "EndOffset": 189
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/backward.rs",
                                    "Line": 5,
                                    "StartOffset": 190,
                                    "EndOffset": 197
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "AsRef",
                                    "File": "src/backward.rs",
                                    "Line": 6,
                                    "StartOffset": 234,
                                    "EndOffset": 239
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/backward.rs",
                                    "Line": 6,
                                    "StartOffset": 264,
                                    "EndOffset": 270
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/backward.rs",
                                    "Line": 6,
                                    "StartOffset": 271,
                                    "EndOffset": 278
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/backward.rs",
                                    "Line": 8,
                                    "StartOffset": 327,
                                    "EndOffset": 333
                                },
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap",
                                    "File": "src/backward.rs",
                                    "Line": 8,
                                    "StartOffset": 335,
                                    "EndOffset": 343
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/backward.rs",
                                    "Line": 8,
                                    "StartOffset": 344,
                                    "EndOffset": 351
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/backward.rs",
                                    "Line": 8,
                                    "StartOffset": 353,
                                    "EndOffset": 360
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/backward.rs",
                                    "Line": 9,
                                    "StartOffset": 410,
                                    "EndOffset": 416
                                },
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap",
                                    "File": "src/backward.rs",
                                    "Line": 9,
                                    "StartOffset": 418,
                                    "EndOffset": 426
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/backward.rs",
                                    "Line": 9,
                                    "StartOffset": 427,
                                    "EndOffset": 434
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/backward.rs",
                                    "Line": 9,
                                    "StartOffset": 436,
                                    "EndOffset": 443
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/backward.rs",
                                    "Line": 11,
                                    "StartOffset": 509,
                                    "EndOffset": 515
                                },
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap",
                                    "File": "src/backward.rs",
                                    "Line": 11,
                                    "StartOffset": 516,
                                    "EndOffset": 524
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/backward.rs",
                                    "Line": 11,
                                    "StartOffset": 525,
                                    "EndOffset": 532
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/backward.rs",
                                    "Line": 11,
                                    "StartOffset": 534,
                                    "EndOffset": 541
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/backward.rs",
                                    "Line": 12,
                                    "StartOffset": 607,
                                    "EndOffset": 613
                                },
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap",
                                    "File": "src/backward.rs",
                                    "Line": 12,
                                    "StartOffset": 614,
                                    "EndOffset": 622
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/backward.rs",
                                    "Line": 12,
                                    "StartOffset": 623,
                                    "EndOffset": 630
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/backward.rs",
                                    "Line": 12,
                                    "StartOffset": 632,
                                    "EndOffset": 639
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "Into",
                                    "File": "src/backward.rs",
                                    "Line": 14,
                                    "StartOffset": 677,
                                    "EndOffset": 681
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/backward.rs",
                                    "Line": 14,
                                    "StartOffset": 682,
                                    "EndOffset": 689
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "Into",
                                    "File": "src/backward.rs",
                                    "Line": 14,
                                    "StartOffset": 695,
                                    "EndOffset": 699
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/backward.rs",
                                    "Line": 14,
                                    "StartOffset": 700,
                                    "EndOffset": 707
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "Into",
                                    "File": "src/backward.rs",
                                    "Line": 15,
                                    "StartOffset": 774,
                                    "EndOffset": 778
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/backward.rs",
                                    "Line": 15,
                                    "StartOffset": 779,
                                    "EndOffset": 786
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "Into",
                                    "File": "src/backward.rs",
                                    "Line": 15,
                                    "StartOffset": 792,
                                    "EndOffset": 796
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/backward.rs",
                                    "Line": 15,
                                    "StartOffset": 797,
                                    "EndOffset": 804
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "AsRef",
                                    "File": "src/backward.rs",
                                    "Line": 17,
                                    "StartOffset": 893,
                                    "EndOffset": 898
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "Into",
                                    "File": "src/backward.rs",
                                    "Line": 17,
                                    "StartOffset": 908,
                                    "EndOffset": 912
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/backward.rs",
                                    "Line": 17,
                                    "StartOffset": 913,
                                    "EndOffset": 920
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "AsRef",
                                    "File": "src/backward.rs",
                                    "Line": 23,
                                    "StartOffset": 1041,
                                    "EndOffset": 1046
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "Into",
                                    "File": "src/backward.rs",
                                    "Line": 23,
                                    "StartOffset": 1056,
                                    "EndOffset": 1060
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/backward.rs",
                                    "Line": 23,
                                    "StartOffset": 1061,
                                    "EndOffset": 1068
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "AsRef",
                                    "File": "src/backward.rs",
                                    "Line": 29,
                                    "StartOffset": 1166,
                                    "EndOffset": 1171
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/backward.rs",
                                    "Line": 29,
                                    "StartOffset": 1200,
                                    "EndOffset": 1206
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/backward.rs",
                                    "Line": 29,
                                    "StartOffset": 1207,
                                    "EndOffset": 1214
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "AsRef",
                                    "File": "src/backward.rs",
                                    "Line": 30,
                                    "StartOffset": 1251,
                                    "EndOffset": 1256
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/backward.rs",
                                    "Line": 30,
                                    "StartOffset": 1285,
                                    "EndOffset": 1291
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/backward.rs",
                                    "Line": 30,
                                    "StartOffset": 1292,
                                    "EndOffset": 1299
                                }
                            ]
                        }
                    },
                    "Vars": {}
                },
                "metainfo::convert": {
                    "IsMain": false,
                    "IsTest": false,
                    "PkgPath": "metainfo::convert",
                    "Functions": {
                        "Converter\u003cHttpConverter\u003e.add_backward_prefix": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::convert",
                            "Name": "Converter\u003cHttpConverter\u003e.add_backward_prefix",
                            "File": "src/convert.rs",
                            "Line": 117,
                            "StartOffset": 3590,
                            "EndOffset": 3719,
                            "Content": "impl Converter for HttpConverter {\n    fn add_backward_prefix(\u0026self, key: \u0026str) -\u003e FastStr {\n        self.add_prefix_and_to_http_format(HTTP_PREFIX_BACKWARD, key)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter"
                                }
                            },
                            "Results": [
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/convert.rs",
                                    "Line": 117,
                                    "StartOffset": 3634,
                                    "EndOffset": 3641
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter.add_prefix_and_to_http_format",
                                    "File": "src/convert.rs",
                                    "Line": 118,
                                    "StartOffset": 3657,
                                    "EndOffset": 3686
                                }
                            ],
                            "GlobalVars": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "HTTP_PREFIX_BACKWARD",
                                    "File": "src/convert.rs",
                                    "Line": 118,
                                    "StartOffset": 3687,
                                    "EndOffset": 3707
                                }
                            ]
                        },
                        "Converter\u003cHttpConverter\u003e.add_persistent_prefix": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::convert",
                            "Name": "Converter\u003cHttpConverter\u003e.add_persistent_prefix",
                            "File": "src/convert.rs",
                            "Line": 109,
                            "StartOffset": 3314,
                            "EndOffset": 3447,
                            "Content": "impl Converter for HttpConverter {\n    fn add_persistent_prefix(\u0026self, key: \u0026str) -\u003e FastStr {\n        self.add_prefix_and_to_http_format(HTTP_PREFIX_PERSISTENT, key)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter.add_prefix_and_to_http_format",
                                    "File": "src/convert.rs",
                                    "Line": 110,
                                    "StartOffset": 3383,
                                    "EndOffset": 3412
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/convert.rs",
                                    "Line": 109,
                                    "StartOffset": 3360,
                                    "EndOffset": 3367
                                }
                            ],
                            "GlobalVars": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "HTTP_PREFIX_PERSISTENT",
                                    "File": "src/convert.rs",
                                    "Line": 110,
                                    "StartOffset": 3413,
                                    "EndOffset": 3435
                                }
                            ]
                        },
                        "Converter\u003cHttpConverter\u003e.add_transient_prefix": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::convert",
                            "Name": "Converter\u003cHttpConverter\u003e.add_transient_prefix",
                            "File": "src/convert.rs",
                            "Line": 113,
                            "StartOffset": 3453,
                            "EndOffset": 3584,
                            "Content": "impl Converter for HttpConverter {\n    fn add_transient_prefix(\u0026self, key: \u0026str) -\u003e FastStr {\n        self.add_prefix_and_to_http_format(HTTP_PREFIX_TRANSIENT, key)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter"
                                }
                            },
                            "Results": [
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/convert.rs",
                                    "Line": 113,
                                    "StartOffset": 3498,
                                    "EndOffset": 3505
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter.add_prefix_and_to_http_format",
                                    "File": "src/convert.rs",
                                    "Line": 114,
                                    "StartOffset": 3521,
                                    "EndOffset": 3550
                                }
                            ],
                            "GlobalVars": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "HTTP_PREFIX_TRANSIENT",
                                    "File": "src/convert.rs",
                                    "Line": 114,
                                    "StartOffset": 3551,
                                    "EndOffset": 3572
                                }
                            ]
                        },
                        "Converter\u003cHttpConverter\u003e.remove_backward_prefix": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::convert",
                            "Name": "Converter\u003cHttpConverter\u003e.remove_backward_prefix",
                            "File": "src/convert.rs",
                            "Line": 129,
                            "StartOffset": 4027,
                            "EndOffset": 4169,
                            "Content": "impl Converter for HttpConverter {\n    fn remove_backward_prefix(\u0026self, key: \u0026str) -\u003e Option\u003cFastStr\u003e {\n        self.remove_prefix_and_to_rpc_format(HTTP_PREFIX_BACKWARD, key)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter"
                                }
                            },
                            "Results": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/convert.rs",
                                    "Line": 129,
                                    "StartOffset": 4074,
                                    "EndOffset": 4080
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/convert.rs",
                                    "Line": 129,
                                    "StartOffset": 4081,
                                    "EndOffset": 4088
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter.remove_prefix_and_to_rpc_format",
                                    "File": "src/convert.rs",
                                    "Line": 130,
                                    "StartOffset": 4105,
                                    "EndOffset": 4136
                                }
                            ],
                            "GlobalVars": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "HTTP_PREFIX_BACKWARD",
                                    "File": "src/convert.rs",
                                    "Line": 130,
                                    "StartOffset": 4137,
                                    "EndOffset": 4157
                                }
                            ]
                        },
                        "Converter\u003cHttpConverter\u003e.remove_persistent_prefix": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::convert",
                            "Name": "Converter\u003cHttpConverter\u003e.remove_persistent_prefix",
                            "File": "src/convert.rs",
                            "Line": 121,
                            "StartOffset": 3725,
                            "EndOffset": 3871,
                            "Content": "impl Converter for HttpConverter {\n    fn remove_persistent_prefix(\u0026self, key: \u0026str) -\u003e Option\u003cFastStr\u003e {\n        self.remove_prefix_and_to_rpc_format(HTTP_PREFIX_PERSISTENT, key)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter.remove_prefix_and_to_rpc_format",
                                    "File": "src/convert.rs",
                                    "Line": 122,
                                    "StartOffset": 3805,
                                    "EndOffset": 3836
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/convert.rs",
                                    "Line": 121,
                                    "StartOffset": 3774,
                                    "EndOffset": 3780
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/convert.rs",
                                    "Line": 121,
                                    "StartOffset": 3781,
                                    "EndOffset": 3788
                                }
                            ],
                            "GlobalVars": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "HTTP_PREFIX_PERSISTENT",
                                    "File": "src/convert.rs",
                                    "Line": 122,
                                    "StartOffset": 3837,
                                    "EndOffset": 3859
                                }
                            ]
                        },
                        "Converter\u003cHttpConverter\u003e.remove_transient_prefix": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::convert",
                            "Name": "Converter\u003cHttpConverter\u003e.remove_transient_prefix",
                            "File": "src/convert.rs",
                            "Line": 125,
                            "StartOffset": 3877,
                            "EndOffset": 4021,
                            "Content": "impl Converter for HttpConverter {\n    fn remove_transient_prefix(\u0026self, key: \u0026str) -\u003e Option\u003cFastStr\u003e {\n        self.remove_prefix_and_to_rpc_format(HTTP_PREFIX_TRANSIENT, key)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter.remove_prefix_and_to_rpc_format",
                                    "File": "src/convert.rs",
                                    "Line": 126,
                                    "StartOffset": 3956,
                                    "EndOffset": 3987
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/convert.rs",
                                    "Line": 125,
                                    "StartOffset": 3925,
                                    "EndOffset": 3931
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/convert.rs",
                                    "Line": 125,
                                    "StartOffset": 3932,
                                    "EndOffset": 3939
                                }
                            ],
                            "GlobalVars": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "HTTP_PREFIX_TRANSIENT",
                                    "File": "src/convert.rs",
                                    "Line": 126,
                                    "StartOffset": 3988,
                                    "EndOffset": 4009
                                }
                            ]
                        },
                        "Converter\u003cRpcConverter\u003e.add_backward_prefix": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::convert",
                            "Name": "Converter\u003cRpcConverter\u003e.add_backward_prefix",
                            "File": "src/convert.rs",
                            "Line": 45,
                            "StartOffset": 1389,
                            "EndOffset": 1498,
                            "Content": "impl Converter for RpcConverter {\n    fn add_backward_prefix(\u0026self, key: \u0026str) -\u003e FastStr {\n        self.add_prefix(RPC_PREFIX_BACKWARD, key)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "RpcConverter"
                                }
                            },
                            "Results": [
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/convert.rs",
                                    "Line": 45,
                                    "StartOffset": 1433,
                                    "EndOffset": 1440
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "RpcConverter.add_prefix",
                                    "File": "src/convert.rs",
                                    "Line": 46,
                                    "StartOffset": 1456,
                                    "EndOffset": 1466
                                }
                            ],
                            "GlobalVars": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "RPC_PREFIX_BACKWARD",
                                    "File": "src/convert.rs",
                                    "Line": 46,
                                    "StartOffset": 1467,
                                    "EndOffset": 1486
                                }
                            ]
                        },
                        "Converter\u003cRpcConverter\u003e.add_persistent_prefix": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::convert",
                            "Name": "Converter\u003cRpcConverter\u003e.add_persistent_prefix",
                            "File": "src/convert.rs",
                            "Line": 37,
                            "StartOffset": 1153,
                            "EndOffset": 1266,
                            "Content": "impl Converter for RpcConverter {\n    fn add_persistent_prefix(\u0026self, key: \u0026str) -\u003e FastStr {\n        self.add_prefix(RPC_PREFIX_PERSISTENT, key)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "RpcConverter"
                                }
                            },
                            "Results": [
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/convert.rs",
                                    "Line": 37,
                                    "StartOffset": 1199,
                                    "EndOffset": 1206
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "RpcConverter.add_prefix",
                                    "File": "src/convert.rs",
                                    "Line": 38,
                                    "StartOffset": 1222,
                                    "EndOffset": 1232
                                }
                            ],
                            "GlobalVars": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "RPC_PREFIX_PERSISTENT",
                                    "File": "src/convert.rs",
                                    "Line": 38,
                                    "StartOffset": 1233,
                                    "EndOffset": 1254
                                }
                            ]
                        },
                        "Converter\u003cRpcConverter\u003e.add_transient_prefix": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::convert",
                            "Name": "Converter\u003cRpcConverter\u003e.add_transient_prefix",
                            "File": "src/convert.rs",
                            "Line": 41,
                            "StartOffset": 1272,
                            "EndOffset": 1383,
                            "Content": "impl Converter for RpcConverter {\n    fn add_transient_prefix(\u0026self, key: \u0026str) -\u003e FastStr {\n        self.add_prefix(RPC_PREFIX_TRANSIENT, key)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "RpcConverter"
                                }
                            },
                            "Results": [
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/convert.rs",
                                    "Line": 41,
                                    "StartOffset": 1317,
                                    "EndOffset": 1324
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "RpcConverter.add_prefix",
                                    "File": "src/convert.rs",
                                    "Line": 42,
                                    "StartOffset": 1340,
                                    "EndOffset": 1350
                                }
                            ],
                            "GlobalVars": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "RPC_PREFIX_TRANSIENT",
                                    "File": "src/convert.rs",
                                    "Line": 42,
                                    "StartOffset": 1351,
                                    "EndOffset": 1371
                                }
                            ]
                        },
                        "Converter\u003cRpcConverter\u003e.remove_backward_prefix": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::convert",
                            "Name": "Converter\u003cRpcConverter\u003e.remove_backward_prefix",
                            "File": "src/convert.rs",
                            "Line": 57,
                            "StartOffset": 1768,
                            "EndOffset": 1891,
                            "Content": "impl Converter for RpcConverter {\n    fn remove_backward_prefix(\u0026self, key: \u0026str) -\u003e Option\u003cFastStr\u003e {\n        self.remove_prefix(RPC_PREFIX_BACKWARD, key)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "RpcConverter"
                                }
                            },
                            "Results": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/convert.rs",
                                    "Line": 57,
                                    "StartOffset": 1815,
                                    "EndOffset": 1821
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/convert.rs",
                                    "Line": 57,
                                    "StartOffset": 1822,
                                    "EndOffset": 1829
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "RpcConverter.remove_prefix",
                                    "File": "src/convert.rs",
                                    "Line": 58,
                                    "StartOffset": 1846,
                                    "EndOffset": 1859
                                }
                            ],
                            "GlobalVars": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "RPC_PREFIX_BACKWARD",
                                    "File": "src/convert.rs",
                                    "Line": 58,
                                    "StartOffset": 1860,
                                    "EndOffset": 1879
                                }
                            ]
                        },
                        "Converter\u003cRpcConverter\u003e.remove_persistent_prefix": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::convert",
                            "Name": "Converter\u003cRpcConverter\u003e.remove_persistent_prefix",
                            "File": "src/convert.rs",
                            "Line": 49,
                            "StartOffset": 1504,
                            "EndOffset": 1631,
                            "Content": "impl Converter for RpcConverter {\n    fn remove_persistent_prefix(\u0026self, key: \u0026str) -\u003e Option\u003cFastStr\u003e {\n        self.remove_prefix(RPC_PREFIX_PERSISTENT, key)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "RpcConverter"
                                }
                            },
                            "Results": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/convert.rs",
                                    "Line": 49,
                                    "StartOffset": 1553,
                                    "EndOffset": 1559
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/convert.rs",
                                    "Line": 49,
                                    "StartOffset": 1560,
                                    "EndOffset": 1567
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "RpcConverter.remove_prefix",
                                    "File": "src/convert.rs",
                                    "Line": 50,
                                    "StartOffset": 1584,
                                    "EndOffset": 1597
                                }
                            ],
                            "GlobalVars": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "RPC_PREFIX_PERSISTENT",
                                    "File": "src/convert.rs",
                                    "Line": 50,
                                    "StartOffset": 1598,
                                    "EndOffset": 1619
                                }
                            ]
                        },
                        "Converter\u003cRpcConverter\u003e.remove_transient_prefix": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::convert",
                            "Name": "Converter\u003cRpcConverter\u003e.remove_transient_prefix",
                            "File": "src/convert.rs",
                            "Line": 53,
                            "StartOffset": 1637,
                            "EndOffset": 1762,
                            "Content": "impl Converter for RpcConverter {\n    fn remove_transient_prefix(\u0026self, key: \u0026str) -\u003e Option\u003cFastStr\u003e {\n        self.remove_prefix(RPC_PREFIX_TRANSIENT, key)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "RpcConverter"
                                }
                            },
                            "Results": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/convert.rs",
                                    "Line": 53,
                                    "StartOffset": 1685,
                                    "EndOffset": 1691
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/convert.rs",
                                    "Line": 53,
                                    "StartOffset": 1692,
                                    "EndOffset": 1699
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "RpcConverter.remove_prefix",
                                    "File": "src/convert.rs",
                                    "Line": 54,
                                    "StartOffset": 1716,
                                    "EndOffset": 1729
                                }
                            ],
                            "GlobalVars": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo",
                                    "Name": "RPC_PREFIX_TRANSIENT",
                                    "File": "src/convert.rs",
                                    "Line": 54,
                                    "StartOffset": 1730,
                                    "EndOffset": 1750
                                }
                            ]
                        },
                        "HttpConverter.add_prefix_and_to_http_format": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::convert",
                            "Name": "HttpConverter.add_prefix_and_to_http_format",
                            "File": "src/convert.rs",
                            "Line": 91,
                            "StartOffset": 2682,
                            "EndOffset": 2966,
                            "Content": "impl HttpConverter {\n    /// Convert `RPC_PERSIST_TEST_KEY` to `rpc-persist-test-key`\n    #[inline]\n    #[inline]\n    fn add_prefix_and_to_http_format(\u0026self, prefix: \u0026'static str, key: \u0026str) -\u003e FastStr {\n        let mut buf = String::with_capacity(prefix.len() + key.len());\n        buf.push_str(prefix);\n        self.to_http_format(key, \u0026mut buf);\n        FastStr::from_string(buf)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter"
                                }
                            },
                            "FunctionCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "alloc::string",
                                    "Name": "with_capacity",
                                    "File": "src/convert.rs",
                                    "Line": 93,
                                    "StartOffset": 2812,
                                    "EndOffset": 2825
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr::from_string",
                                    "File": "src/convert.rs",
                                    "Line": 96,
                                    "StartOffset": 2944,
                                    "EndOffset": 2955
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::str",
                                    "Name": "len",
                                    "File": "src/convert.rs",
                                    "Line": 93,
                                    "StartOffset": 2833,
                                    "EndOffset": 2836
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "alloc::string",
                                    "Name": "push_str",
                                    "File": "src/convert.rs",
                                    "Line": 94,
                                    "StartOffset": 2865,
                                    "EndOffset": 2873
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter.to_http_format",
                                    "File": "src/convert.rs",
                                    "Line": 95,
                                    "StartOffset": 2896,
                                    "EndOffset": 2910
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/convert.rs",
                                    "Line": 92,
                                    "StartOffset": 2772,
                                    "EndOffset": 2779
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "alloc::string",
                                    "Name": "String",
                                    "File": "src/convert.rs",
                                    "Line": 93,
                                    "StartOffset": 2804,
                                    "EndOffset": 2810
                                }
                            ]
                        },
                        "HttpConverter.remove_prefix_and_to_rpc_format": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::convert",
                            "Name": "HttpConverter.remove_prefix_and_to_rpc_format",
                            "File": "src/convert.rs",
                            "Line": 99,
                            "StartOffset": 2972,
                            "EndOffset": 3271,
                            "Content": "impl HttpConverter {\n    /// Convert `RPC_PERSIST_TEST_KEY` to `rpc-persist-test-key`\n    #[inline]\n    #[inline]\n    fn remove_prefix_and_to_rpc_format(\u0026self, prefix: \u0026'static str, key: \u0026str) -\u003e Option\u003cFastStr\u003e {\n        let key = key.strip_prefix(prefix)?;\n        let mut buf = String::with_capacity(key.len());\n        self.to_rpc_format(key, \u0026mut buf);\n        Some(FastStr::from_string(buf))\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter"
                                }
                            },
                            "FunctionCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "alloc::string",
                                    "Name": "with_capacity",
                                    "File": "src/convert.rs",
                                    "Line": 102,
                                    "StartOffset": 3157,
                                    "EndOffset": 3170
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr::from_string",
                                    "File": "src/convert.rs",
                                    "Line": 104,
                                    "StartOffset": 3248,
                                    "EndOffset": 3259
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::str",
                                    "Name": "strip_prefix",
                                    "File": "src/convert.rs",
                                    "Line": 101,
                                    "StartOffset": 3104,
                                    "EndOffset": 3116
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::str",
                                    "Name": "len",
                                    "File": "src/convert.rs",
                                    "Line": 102,
                                    "StartOffset": 3175,
                                    "EndOffset": 3178
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter.to_rpc_format",
                                    "File": "src/convert.rs",
                                    "Line": 103,
                                    "StartOffset": 3196,
                                    "EndOffset": 3209
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/convert.rs",
                                    "Line": 100,
                                    "StartOffset": 3064,
                                    "EndOffset": 3070
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/convert.rs",
                                    "Line": 100,
                                    "StartOffset": 3071,
                                    "EndOffset": 3078
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "alloc::string",
                                    "Name": "String",
                                    "File": "src/convert.rs",
                                    "Line": 102,
                                    "StartOffset": 3149,
                                    "EndOffset": 3155
                                }
                            ]
                        },
                        "HttpConverter.to_http_format": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::convert",
                            "Name": "HttpConverter.to_http_format",
                            "File": "src/convert.rs",
                            "Line": 65,
                            "StartOffset": 1947,
                            "EndOffset": 2309,
                            "Content": "impl HttpConverter {\n    /// Convert `RPC_PERSIST_TEST_KEY` to `rpc-persist-test-key`\n    #[inline]\n    /// Convert `RPC_PERSIST_TEST_KEY` to `rpc-persist-test-key`\n    #[inline]\n    fn to_http_format(\u0026self, key: \u0026str, buf: \u0026mut String) {\n        for ch in key.chars() {\n            let ch = match ch {\n                'A'..='Z' =\u003e ch.to_ascii_lowercase(),\n                '_' =\u003e '-',\n                _ =\u003e ch,\n            };\n            buf.push(ch);\n        }\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::str",
                                    "Name": "chars",
                                    "File": "src/convert.rs",
                                    "Line": 68,
                                    "StartOffset": 2104,
                                    "EndOffset": 2109
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::char::methods",
                                    "Name": "to_ascii_lowercase",
                                    "File": "src/convert.rs",
                                    "Line": 70,
                                    "StartOffset": 2178,
                                    "EndOffset": 2196
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "alloc::string",
                                    "Name": "push",
                                    "File": "src/convert.rs",
                                    "Line": 74,
                                    "StartOffset": 2284,
                                    "EndOffset": 2288
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "alloc::string",
                                    "Name": "String",
                                    "File": "src/convert.rs",
                                    "Line": 67,
                                    "StartOffset": 2072,
                                    "EndOffset": 2078
                                }
                            ]
                        },
                        "HttpConverter.to_http_format_string": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::convert",
                            "Name": "HttpConverter.to_http_format_string",
                            "File": "src/convert.rs",
                            "Line": 244,
                            "StartOffset": 7319,
                            "EndOffset": 7507,
                            "Content": "impl HttpConverter {\n    fn to_http_format_string(\u0026self, key: \u0026str) -\u003e String {\n            let mut buf = String::with_capacity(key.len());\n            self.to_http_format(key, \u0026mut buf);\n            buf\n        }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter"
                                }
                            },
                            "FunctionCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "alloc::string",
                                    "Name": "with_capacity",
                                    "File": "src/convert.rs",
                                    "Line": 245,
                                    "StartOffset": 7408,
                                    "EndOffset": 7421
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::str",
                                    "Name": "len",
                                    "File": "src/convert.rs",
                                    "Line": 245,
                                    "StartOffset": 7426,
                                    "EndOffset": 7429
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter.to_http_format",
                                    "File": "src/convert.rs",
                                    "Line": 246,
                                    "StartOffset": 7451,
                                    "EndOffset": 7465
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "alloc::string",
                                    "Name": "String",
                                    "File": "src/convert.rs",
                                    "Line": 244,
                                    "StartOffset": 7365,
                                    "EndOffset": 7371
                                }
                            ]
                        },
                        "HttpConverter.to_rpc_format": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::convert",
                            "Name": "HttpConverter.to_rpc_format",
                            "File": "src/convert.rs",
                            "Line": 78,
                            "StartOffset": 2315,
                            "EndOffset": 2676,
                            "Content": "impl HttpConverter {\n    /// Convert `RPC_PERSIST_TEST_KEY` to `rpc-persist-test-key`\n    #[inline]\n    /// Convert `rpc-persist-test-key` to `RPC_PERSIST_TEST_KEY`\n    #[inline]\n    fn to_rpc_format(\u0026self, key: \u0026str, buf: \u0026mut String) {\n        for ch in key.chars() {\n            let ch = match ch {\n                'a'..='z' =\u003e ch.to_ascii_uppercase(),\n                '-' =\u003e '_',\n                _ =\u003e ch,\n            };\n            buf.push(ch);\n        }\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::str",
                                    "Name": "chars",
                                    "File": "src/convert.rs",
                                    "Line": 81,
                                    "StartOffset": 2471,
                                    "EndOffset": 2476
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::char::methods",
                                    "Name": "to_ascii_uppercase",
                                    "File": "src/convert.rs",
                                    "Line": 83,
                                    "StartOffset": 2545,
                                    "EndOffset": 2563
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "alloc::string",
                                    "Name": "push",
                                    "File": "src/convert.rs",
                                    "Line": 87,
                                    "StartOffset": 2651,
                                    "EndOffset": 2655
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "alloc::string",
                                    "Name": "String",
                                    "File": "src/convert.rs",
                                    "Line": 80,
                                    "StartOffset": 2439,
                                    "EndOffset": 2445
                                }
                            ]
                        },
                        "HttpConverter.to_rpc_format_string": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::convert",
                            "Name": "HttpConverter.to_rpc_format_string",
                            "File": "src/convert.rs",
                            "Line": 250,
                            "StartOffset": 7517,
                            "EndOffset": 7703,
                            "Content": "impl HttpConverter {\n    fn to_rpc_format_string(\u0026self, key: \u0026str) -\u003e String {\n            let mut buf = String::with_capacity(key.len());\n            self.to_rpc_format(key, \u0026mut buf);\n            buf\n        }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter"
                                }
                            },
                            "FunctionCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "alloc::string",
                                    "Name": "with_capacity",
                                    "File": "src/convert.rs",
                                    "Line": 251,
                                    "StartOffset": 7605,
                                    "EndOffset": 7618
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::str",
                                    "Name": "len",
                                    "File": "src/convert.rs",
                                    "Line": 251,
                                    "StartOffset": 7623,
                                    "EndOffset": 7626
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter.to_rpc_format",
                                    "File": "src/convert.rs",
                                    "Line": 252,
                                    "StartOffset": 7648,
                                    "EndOffset": 7661
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "alloc::string",
                                    "Name": "String",
                                    "File": "src/convert.rs",
                                    "Line": 250,
                                    "StartOffset": 7562,
                                    "EndOffset": 7568
                                }
                            ]
                        },
                        "RpcConverter.add_prefix": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::convert",
                            "Name": "RpcConverter.add_prefix",
                            "File": "src/convert.rs",
                            "Line": 21,
                            "StartOffset": 664,
                            "EndOffset": 912,
                            "Content": "impl RpcConverter {\n    #[inline]\n    #[inline]\n    fn add_prefix(\u0026self, prefix: \u0026'static str, key: \u0026str) -\u003e FastStr {\n        let mut res = String::with_capacity(prefix.len() + key.len());\n        res.push_str(prefix);\n        res.push_str(key);\n        FastStr::from_string(res)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "RpcConverter"
                                }
                            },
                            "Results": [
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/convert.rs",
                                    "Line": 22,
                                    "StartOffset": 735,
                                    "EndOffset": 742
                                }
                            ],
                            "FunctionCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "alloc::string",
                                    "Name": "with_capacity",
                                    "File": "src/convert.rs",
                                    "Line": 23,
                                    "StartOffset": 775,
                                    "EndOffset": 788
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr::from_string",
                                    "File": "src/convert.rs",
                                    "Line": 26,
                                    "StartOffset": 890,
                                    "EndOffset": 901
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::str",
                                    "Name": "len",
                                    "File": "src/convert.rs",
                                    "Line": 23,
                                    "StartOffset": 796,
                                    "EndOffset": 799
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "alloc::string",
                                    "Name": "push_str",
                                    "File": "src/convert.rs",
                                    "Line": 24,
                                    "StartOffset": 828,
                                    "EndOffset": 836
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "alloc::string",
                                    "Name": "String",
                                    "File": "src/convert.rs",
                                    "Line": 23,
                                    "StartOffset": 767,
                                    "EndOffset": 773
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/convert.rs",
                                    "Line": 26,
                                    "StartOffset": 881,
                                    "EndOffset": 888
                                }
                            ]
                        },
                        "RpcConverter.remove_prefix": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::convert",
                            "Name": "RpcConverter.remove_prefix",
                            "File": "src/convert.rs",
                            "Line": 29,
                            "StartOffset": 918,
                            "EndOffset": 1111,
                            "Content": "impl RpcConverter {\n    #[inline]\n    #[inline]\n    fn remove_prefix(\u0026self, prefix: \u0026'static str, key: \u0026str) -\u003e Option\u003cFastStr\u003e {\n        let key = key.strip_prefix(prefix)?;\n        Some(FastStr::from_string(key.to_owned()))\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "RpcConverter"
                                }
                            },
                            "FunctionCalls": [
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr::from_string",
                                    "File": "src/convert.rs",
                                    "Line": 32,
                                    "StartOffset": 1077,
                                    "EndOffset": 1088
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::str",
                                    "Name": "strip_prefix",
                                    "File": "src/convert.rs",
                                    "Line": 31,
                                    "StartOffset": 1032,
                                    "EndOffset": 1044
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "alloc::str",
                                    "Name": "to_owned",
                                    "File": "src/convert.rs",
                                    "Line": 32,
                                    "StartOffset": 1093,
                                    "EndOffset": 1101
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/convert.rs",
                                    "Line": 30,
                                    "StartOffset": 992,
                                    "EndOffset": 998
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/convert.rs",
                                    "Line": 30,
                                    "StartOffset": 999,
                                    "EndOffset": 1006
                                }
                            ]
                        }
                    },
                    "Types": {
                        "Converter": {
                            "Exported": true,
                            "TypeKind": "interface",
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::convert",
                            "Name": "Converter",
                            "File": "src/convert.rs",
                            "Line": 7,
                            "StartOffset": 183,
                            "EndOffset": 612,
                            "Content": "pub trait Converter {\n    fn add_persistent_prefix(\u0026self, key: \u0026str) -\u003e FastStr;\n    fn add_transient_prefix(\u0026self, key: \u0026str) -\u003e FastStr;\n    #[allow(dead_code)]\n    fn add_backward_prefix(\u0026self, key: \u0026str) -\u003e FastStr;\n\n    fn remove_persistent_prefix(\u0026self, key: \u0026str) -\u003e Option\u003cFastStr\u003e;\n    fn remove_transient_prefix(\u0026self, key: \u0026str) -\u003e Option\u003cFastStr\u003e;\n    fn remove_backward_prefix(\u0026self, key: \u0026str) -\u003e Option\u003cFastStr\u003e;\n}",
                            "SubStruct": [
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/convert.rs",
                                    "Line": 8,
                                    "StartOffset": 255,
                                    "EndOffset": 262
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/convert.rs",
                                    "Line": 9,
                                    "StartOffset": 313,
                                    "EndOffset": 320
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/convert.rs",
                                    "Line": 11,
                                    "StartOffset": 394,
                                    "EndOffset": 401
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/convert.rs",
                                    "Line": 13,
                                    "StartOffset": 457,
                                    "EndOffset": 463
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/convert.rs",
                                    "Line": 13,
                                    "StartOffset": 464,
                                    "EndOffset": 471
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/convert.rs",
                                    "Line": 14,
                                    "StartOffset": 526,
                                    "EndOffset": 532
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/convert.rs",
                                    "Line": 14,
                                    "StartOffset": 533,
                                    "EndOffset": 540
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/convert.rs",
                                    "Line": 15,
                                    "StartOffset": 594,
                                    "EndOffset": 600
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/convert.rs",
                                    "Line": 15,
                                    "StartOffset": 601,
                                    "EndOffset": 608
                                }
                            ]
                        },
                        "HttpConverter": {
                            "Exported": true,
                            "TypeKind": "struct",
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::convert",
                            "Name": "HttpConverter",
                            "File": "src/convert.rs",
                            "Line": 62,
                            "StartOffset": 1895,
                            "EndOffset": 1920,
                            "Content": "pub struct HttpConverter;",
                            "Methods": {
                                "add_backward_prefix": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "Converter\u003cHttpConverter\u003e.add_backward_prefix"
                                },
                                "add_persistent_prefix": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "Converter\u003cHttpConverter\u003e.add_persistent_prefix"
                                },
                                "add_prefix_and_to_http_format": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter.add_prefix_and_to_http_format"
                                },
                                "add_transient_prefix": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "Converter\u003cHttpConverter\u003e.add_transient_prefix"
                                },
                                "remove_backward_prefix": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "Converter\u003cHttpConverter\u003e.remove_backward_prefix"
                                },
                                "remove_persistent_prefix": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "Converter\u003cHttpConverter\u003e.remove_persistent_prefix"
                                },
                                "remove_prefix_and_to_rpc_format": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter.remove_prefix_and_to_rpc_format"
                                },
                                "remove_transient_prefix": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "Converter\u003cHttpConverter\u003e.remove_transient_prefix"
                                },
                                "to_http_format": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter.to_http_format"
                                },
                                "to_http_format_string": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter.to_http_format_string"
                                },
                                "to_rpc_format": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter.to_rpc_format"
                                },
                                "to_rpc_format_string": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "HttpConverter.to_rpc_format_string"
                                }
                            }
                        },
                        "RpcConverter": {
                            "Exported": true,
                            "TypeKind": "struct",
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::convert",
                            "Name": "RpcConverter",
                            "File": "src/convert.rs",
                            "Line": 18,
                            "StartOffset": 614,
                            "EndOffset": 638,
                            "Content": "pub struct RpcConverter;",
                            "Methods": {
                                "add_backward_prefix": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "Converter\u003cRpcConverter\u003e.add_backward_prefix"
                                },
                                "add_persistent_prefix": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "Converter\u003cRpcConverter\u003e.add_persistent_prefix"
                                },
                                "add_prefix": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "RpcConverter.add_prefix"
                                },
                                "add_transient_prefix": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "Converter\u003cRpcConverter\u003e.add_transient_prefix"
                                },
                                "remove_backward_prefix": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "Converter\u003cRpcConverter\u003e.remove_backward_prefix"
                                },
                                "remove_persistent_prefix": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "Converter\u003cRpcConverter\u003e.remove_persistent_prefix"
                                },
                                "remove_prefix": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "RpcConverter.remove_prefix"
                                },
                                "remove_transient_prefix": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::convert",
                                    "Name": "Converter\u003cRpcConverter\u003e.remove_transient_prefix"
                                }
                            }
                        }
                    },
                    "Vars": {}
                },
                "metainfo::faststr_map": {
                    "IsMain": false,
                    "IsTest": false,
                    "PkgPath": "metainfo::faststr_map",
                    "Functions": {
                        "FastStrMap.capacity": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::faststr_map",
                            "Name": "FastStrMap.capacity",
                            "File": "src/faststr_map.rs",
                            "Line": 83,
                            "StartOffset": 1986,
                            "EndOffset": 2069,
                            "Content": "impl FastStrMap {\n    #[inline]\n    #[inline]\n    pub fn capacity(\u0026self) -\u003e usize {\n        self.inner.capacity()\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "capacity",
                                    "File": "src/faststr_map.rs",
                                    "Line": 85,
                                    "StartOffset": 2053,
                                    "EndOffset": 2061
                                }
                            ]
                        },
                        "FastStrMap.clear": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::faststr_map",
                            "Name": "FastStrMap.clear",
                            "File": "src/faststr_map.rs",
                            "Line": 53,
                            "StartOffset": 1362,
                            "EndOffset": 1435,
                            "Content": "impl FastStrMap {\n    #[inline]\n    #[inline]\n    pub fn clear(\u0026mut self) {\n        self.inner.clear();\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "clear",
                                    "File": "src/faststr_map.rs",
                                    "Line": 55,
                                    "StartOffset": 1421,
                                    "EndOffset": 1426
                                }
                            ]
                        },
                        "FastStrMap.contains": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::faststr_map",
                            "Name": "FastStrMap.contains",
                            "File": "src/faststr_map.rs",
                            "Line": 43,
                            "StartOffset": 1111,
                            "EndOffset": 1227,
                            "Content": "impl FastStrMap {\n    #[inline]\n    #[inline]\n    pub fn contains\u003cT: 'static\u003e(\u0026self) -\u003e bool {\n        self.inner.contains_key(\u0026TypeId::of::\u003cT\u003e())\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap"
                                }
                            },
                            "FunctionCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::any",
                                    "Name": "of",
                                    "File": "src/faststr_map.rs",
                                    "Line": 45,
                                    "StartOffset": 1211,
                                    "EndOffset": 1213
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "contains_key",
                                    "File": "src/faststr_map.rs",
                                    "Line": 45,
                                    "StartOffset": 1189,
                                    "EndOffset": 1201
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::any",
                                    "Name": "TypeId",
                                    "File": "src/faststr_map.rs",
                                    "Line": 45,
                                    "StartOffset": 1203,
                                    "EndOffset": 1209
                                }
                            ]
                        },
                        "FastStrMap.entry": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::faststr_map",
                            "Name": "FastStrMap.entry",
                            "File": "src/faststr_map.rs",
                            "Line": 68,
                            "StartOffset": 1682,
                            "EndOffset": 1813,
                            "Content": "impl FastStrMap {\n    #[inline]\n    #[inline]\n    pub fn entry\u003cT: 'static\u003e(\u0026mut self) -\u003e Entry\u003c'_, TypeId, FastStr\u003e {\n        self.inner.entry(TypeId::of::\u003cT\u003e())\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap"
                                }
                            },
                            "Results": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "Entry",
                                    "File": "src/faststr_map.rs",
                                    "Line": 69,
                                    "StartOffset": 1735,
                                    "EndOffset": 1740
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::any",
                                    "Name": "TypeId",
                                    "File": "src/faststr_map.rs",
                                    "Line": 69,
                                    "StartOffset": 1745,
                                    "EndOffset": 1751
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/faststr_map.rs",
                                    "Line": 69,
                                    "StartOffset": 1753,
                                    "EndOffset": 1760
                                }
                            ],
                            "FunctionCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::any",
                                    "Name": "of",
                                    "File": "src/faststr_map.rs",
                                    "Line": 70,
                                    "StartOffset": 1797,
                                    "EndOffset": 1799
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "entry",
                                    "File": "src/faststr_map.rs",
                                    "Line": 70,
                                    "StartOffset": 1783,
                                    "EndOffset": 1788
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::any",
                                    "Name": "TypeId",
                                    "File": "src/faststr_map.rs",
                                    "Line": 70,
                                    "StartOffset": 1789,
                                    "EndOffset": 1795
                                }
                            ]
                        },
                        "FastStrMap.extend": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::faststr_map",
                            "Name": "FastStrMap.extend",
                            "File": "src/faststr_map.rs",
                            "Line": 58,
                            "StartOffset": 1441,
                            "EndOffset": 1545,
                            "Content": "impl FastStrMap {\n    #[inline]\n    #[inline]\n    pub fn extend(\u0026mut self, other: FastStrMap) {\n        self.inner.extend(other.inner)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "extend",
                                    "File": "src/faststr_map.rs",
                                    "Line": 60,
                                    "StartOffset": 1520,
                                    "EndOffset": 1526
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap",
                                    "File": "src/faststr_map.rs",
                                    "Line": 59,
                                    "StartOffset": 1487,
                                    "EndOffset": 1497
                                }
                            ]
                        },
                        "FastStrMap.get": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::faststr_map",
                            "Name": "FastStrMap.get",
                            "File": "src/faststr_map.rs",
                            "Line": 33,
                            "StartOffset": 855,
                            "EndOffset": 969,
                            "Content": "impl FastStrMap {\n    #[inline]\n    #[inline]\n    pub fn get\u003cT: 'static\u003e(\u0026self) -\u003e Option\u003c\u0026FastStr\u003e {\n        self.inner.get(\u0026TypeId::of::\u003cT\u003e())\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap"
                                }
                            },
                            "FunctionCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::any",
                                    "Name": "of",
                                    "File": "src/faststr_map.rs",
                                    "Line": 35,
                                    "StartOffset": 953,
                                    "EndOffset": 955
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "get",
                                    "File": "src/faststr_map.rs",
                                    "Line": 35,
                                    "StartOffset": 940,
                                    "EndOffset": 943
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/faststr_map.rs",
                                    "Line": 34,
                                    "StartOffset": 902,
                                    "EndOffset": 908
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/faststr_map.rs",
                                    "Line": 34,
                                    "StartOffset": 910,
                                    "EndOffset": 917
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::any",
                                    "Name": "TypeId",
                                    "File": "src/faststr_map.rs",
                                    "Line": 35,
                                    "StartOffset": 945,
                                    "EndOffset": 951
                                }
                            ]
                        },
                        "FastStrMap.get_mut": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::faststr_map",
                            "Name": "FastStrMap.get_mut",
                            "File": "src/faststr_map.rs",
                            "Line": 38,
                            "StartOffset": 975,
                            "EndOffset": 1105,
                            "Content": "impl FastStrMap {\n    #[inline]\n    #[inline]\n    pub fn get_mut\u003cT: 'static\u003e(\u0026mut self) -\u003e Option\u003c\u0026mut FastStr\u003e {\n        self.inner.get_mut(\u0026TypeId::of::\u003cT\u003e())\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap"
                                }
                            },
                            "Results": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/faststr_map.rs",
                                    "Line": 39,
                                    "StartOffset": 1030,
                                    "EndOffset": 1036
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/faststr_map.rs",
                                    "Line": 39,
                                    "StartOffset": 1042,
                                    "EndOffset": 1049
                                }
                            ],
                            "FunctionCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::any",
                                    "Name": "of",
                                    "File": "src/faststr_map.rs",
                                    "Line": 40,
                                    "StartOffset": 1089,
                                    "EndOffset": 1091
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "get_mut",
                                    "File": "src/faststr_map.rs",
                                    "Line": 40,
                                    "StartOffset": 1072,
                                    "EndOffset": 1079
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::any",
                                    "Name": "TypeId",
                                    "File": "src/faststr_map.rs",
                                    "Line": 40,
                                    "StartOffset": 1081,
                                    "EndOffset": 1087
                                }
                            ]
                        },
                        "FastStrMap.insert": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::faststr_map",
                            "Name": "FastStrMap.insert",
                            "File": "src/faststr_map.rs",
                            "Line": 28,
                            "StartOffset": 716,
                            "EndOffset": 849,
                            "Content": "impl FastStrMap {\n    #[inline]\n    #[inline]\n    pub fn insert\u003cT: Send + Sync + 'static\u003e(\u0026mut self, t: FastStr) {\n        self.inner.insert(TypeId::of::\u003cT\u003e(), t);\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap"
                                }
                            },
                            "FunctionCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::any",
                                    "Name": "of",
                                    "File": "src/faststr_map.rs",
                                    "Line": 30,
                                    "StartOffset": 829,
                                    "EndOffset": 831
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "insert",
                                    "File": "src/faststr_map.rs",
                                    "Line": 30,
                                    "StartOffset": 814,
                                    "EndOffset": 820
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::marker",
                                    "Name": "Send",
                                    "File": "src/faststr_map.rs",
                                    "Line": 29,
                                    "StartOffset": 747,
                                    "EndOffset": 751
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::marker",
                                    "Name": "Sync",
                                    "File": "src/faststr_map.rs",
                                    "Line": 29,
                                    "StartOffset": 754,
                                    "EndOffset": 758
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/faststr_map.rs",
                                    "Line": 29,
                                    "StartOffset": 784,
                                    "EndOffset": 791
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::any",
                                    "Name": "TypeId",
                                    "File": "src/faststr_map.rs",
                                    "Line": 30,
                                    "StartOffset": 821,
                                    "EndOffset": 827
                                }
                            ]
                        },
                        "FastStrMap.is_empty": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::faststr_map",
                            "Name": "FastStrMap.is_empty",
                            "File": "src/faststr_map.rs",
                            "Line": 73,
                            "StartOffset": 1819,
                            "EndOffset": 1901,
                            "Content": "impl FastStrMap {\n    #[inline]\n    #[inline]\n    pub fn is_empty(\u0026self) -\u003e bool {\n        self.inner.is_empty()\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "is_empty",
                                    "File": "src/faststr_map.rs",
                                    "Line": 75,
                                    "StartOffset": 1885,
                                    "EndOffset": 1893
                                }
                            ]
                        },
                        "FastStrMap.iter": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::faststr_map",
                            "Name": "FastStrMap.iter",
                            "File": "src/faststr_map.rs",
                            "Line": 63,
                            "StartOffset": 1551,
                            "EndOffset": 1676,
                            "Content": "impl FastStrMap {\n    #[inline]\n    #[inline]\n    pub fn iter(\u0026self) -\u003e ::std::collections::hash_map::Iter\u003c'_, TypeId, FastStr\u003e {\n        self.inner.iter()\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "iter",
                                    "File": "src/faststr_map.rs",
                                    "Line": 65,
                                    "StartOffset": 1664,
                                    "EndOffset": 1668
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "Iter",
                                    "File": "src/faststr_map.rs",
                                    "Line": 64,
                                    "StartOffset": 1617,
                                    "EndOffset": 1621
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::any",
                                    "Name": "TypeId",
                                    "File": "src/faststr_map.rs",
                                    "Line": 64,
                                    "StartOffset": 1626,
                                    "EndOffset": 1632
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/faststr_map.rs",
                                    "Line": 64,
                                    "StartOffset": 1634,
                                    "EndOffset": 1641
                                }
                            ]
                        },
                        "FastStrMap.len": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::faststr_map",
                            "Name": "FastStrMap.len",
                            "File": "src/faststr_map.rs",
                            "Line": 78,
                            "StartOffset": 1907,
                            "EndOffset": 1980,
                            "Content": "impl FastStrMap {\n    #[inline]\n    #[inline]\n    pub fn len(\u0026self) -\u003e usize {\n        self.inner.len()\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "len",
                                    "File": "src/faststr_map.rs",
                                    "Line": 80,
                                    "StartOffset": 1969,
                                    "EndOffset": 1972
                                }
                            ]
                        },
                        "FastStrMap.remove": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::faststr_map",
                            "Name": "FastStrMap.remove",
                            "File": "src/faststr_map.rs",
                            "Line": 48,
                            "StartOffset": 1233,
                            "EndOffset": 1356,
                            "Content": "impl FastStrMap {\n    #[inline]\n    #[inline]\n    pub fn remove\u003cT: 'static\u003e(\u0026mut self) -\u003e Option\u003cFastStr\u003e {\n        self.inner.remove(\u0026TypeId::of::\u003cT\u003e())\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap"
                                }
                            },
                            "FunctionCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::any",
                                    "Name": "of",
                                    "File": "src/faststr_map.rs",
                                    "Line": 50,
                                    "StartOffset": 1340,
                                    "EndOffset": 1342
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "remove",
                                    "File": "src/faststr_map.rs",
                                    "Line": 50,
                                    "StartOffset": 1324,
                                    "EndOffset": 1330
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/faststr_map.rs",
                                    "Line": 49,
                                    "StartOffset": 1287,
                                    "EndOffset": 1293
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/faststr_map.rs",
                                    "Line": 49,
                                    "StartOffset": 1294,
                                    "EndOffset": 1301
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::any",
                                    "Name": "TypeId",
                                    "File": "src/faststr_map.rs",
                                    "Line": 50,
                                    "StartOffset": 1332,
                                    "EndOffset": 1338
                                }
                            ]
                        },
                        "FastStrMap::with_capacity": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::faststr_map",
                            "Name": "FastStrMap::with_capacity",
                            "File": "src/faststr_map.rs",
                            "Line": 21,
                            "StartOffset": 528,
                            "EndOffset": 710,
                            "Content": "impl FastStrMap {\n    #[inline]\n    #[inline]\n    pub fn with_capacity(capacity: usize) -\u003e Self {\n        Self {\n            inner: FxHashMapRand::with_capacity_and_hasher(capacity, Default::default()),\n        }\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap"
                                }
                            },
                            "FunctionCalls": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "with_capacity_and_hasher",
                                    "File": "src/faststr_map.rs",
                                    "Line": 24,
                                    "StartOffset": 639,
                                    "EndOffset": 663
                                },
                                {
                                    "ModPath": "rustc-hash@2.0.0",
                                    "PkgPath": "rustc-hash::random_state",
                                    "Name": "Default\u003cFxRandomState\u003e::default",
                                    "File": "src/faststr_map.rs",
                                    "Line": 24,
                                    "StartOffset": 683,
                                    "EndOffset": 690
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "rustc-hash@2.0.0",
                                    "PkgPath": "rustc-hash::random_state",
                                    "Name": "FxHashMapRand",
                                    "File": "src/faststr_map.rs",
                                    "Line": 24,
                                    "StartOffset": 624,
                                    "EndOffset": 637
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::default",
                                    "Name": "Default",
                                    "File": "src/faststr_map.rs",
                                    "Line": 24,
                                    "StartOffset": 674,
                                    "EndOffset": 681
                                }
                            ]
                        }
                    },
                    "Types": {
                        "FastStrMap": {
                            "Exported": true,
                            "TypeKind": "struct",
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::faststr_map",
                            "Name": "FastStrMap",
                            "File": "src/faststr_map.rs",
                            "Line": 5,
                            "StartOffset": 109,
                            "EndOffset": 386,
                            "Content": "/// This is an optimized version of TypeMap to FastStr that eliminates the need to Box the values.\n///\n/// This map is suitable for T that impls both From\u003cFastStr\u003e and Into\u003cFastStr\u003e.\n#[derive(Debug, Default)]\npub struct FastStrMap {\n    inner: FxHashMapRand\u003cTypeId, FastStr\u003e,\n}",
                            "SubStruct": [
                                {
                                    "ModPath": "rustc-hash@2.0.0",
                                    "PkgPath": "rustc-hash::random_state",
                                    "Name": "FxHashMapRand",
                                    "File": "src/faststr_map.rs",
                                    "Line": 10,
                                    "StartOffset": 353,
                                    "EndOffset": 366
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::any",
                                    "Name": "TypeId",
                                    "File": "src/faststr_map.rs",
                                    "Line": 10,
                                    "StartOffset": 367,
                                    "EndOffset": 373
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/faststr_map.rs",
                                    "Line": 10,
                                    "StartOffset": 375,
                                    "EndOffset": 382
                                }
                            ],
                            "Methods": {
                                "capacity": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap.capacity"
                                },
                                "clear": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap.clear"
                                },
                                "contains": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap.contains"
                                },
                                "entry": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap.entry"
                                },
                                "extend": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap.extend"
                                },
                                "get": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap.get"
                                },
                                "get_mut": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap.get_mut"
                                },
                                "insert": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap.insert"
                                },
                                "is_empty": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap.is_empty"
                                },
                                "iter": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap.iter"
                                },
                                "len": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap.len"
                                },
                                "remove": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::faststr_map",
                                    "Name": "FastStrMap.remove"
                                }
                            }
                        }
                    },
                    "Vars": {}
                },
                "metainfo::forward": {
                    "IsMain": false,
                    "IsTest": false,
                    "PkgPath": "metainfo::forward",
                    "Functions": {},
                    "Types": {
                        "Forward": {
                            "Exported": true,
                            "TypeKind": "interface",
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::forward",
                            "Name": "Forward",
                            "File": "src/forward.rs",
                            "Line": 4,
                            "StartOffset": 45,
                            "EndOffset": 1775,
                            "Content": "pub trait Forward {\n    fn get_persistent\u003cK: AsRef\u003cstr\u003e\u003e(\u0026self, key: K) -\u003e Option\u003cFastStr\u003e;\n    fn get_transient\u003cK: AsRef\u003cstr\u003e\u003e(\u0026self, key: K) -\u003e Option\u003cFastStr\u003e;\n    fn get_upstream\u003cK: AsRef\u003cstr\u003e\u003e(\u0026self, key: K) -\u003e Option\u003cFastStr\u003e;\n\n    fn get_all_persistents(\u0026self) -\u003e Option\u003c\u0026AHashMap\u003cFastStr, FastStr\u003e\u003e;\n    fn get_all_transients(\u0026self) -\u003e Option\u003c\u0026AHashMap\u003cFastStr, FastStr\u003e\u003e;\n    fn get_all_upstreams(\u0026self) -\u003e Option\u003c\u0026AHashMap\u003cFastStr, FastStr\u003e\u003e;\n\n    fn get_all_persistents_and_transients_with_rpc_prefix(\n        \u0026self,\n    ) -\u003e Option\u003cAHashMap\u003cFastStr, FastStr\u003e\u003e;\n    fn get_all_persistents_and_transients_with_http_prefix(\n        \u0026self,\n    ) -\u003e Option\u003cAHashMap\u003cFastStr, FastStr\u003e\u003e;\n\n    fn set_persistent\u003cK: Into\u003cFastStr\u003e, V: Into\u003cFastStr\u003e\u003e(\u0026mut self, key: K, value: V);\n    fn set_transient\u003cK: Into\u003cFastStr\u003e, V: Into\u003cFastStr\u003e\u003e(\u0026mut self, key: K, value: V);\n    fn set_upstream\u003cK: Into\u003cFastStr\u003e, V: Into\u003cFastStr\u003e\u003e(\u0026mut self, key: K, value: V);\n\n    fn strip_rpc_prefix_and_set_persistent\u003cK: AsRef\u003cstr\u003e, V: Into\u003cFastStr\u003e\u003e(\n        \u0026mut self,\n        key: K,\n        value: V,\n    );\n    fn strip_rpc_prefix_and_set_upstream\u003cK: AsRef\u003cstr\u003e, V: Into\u003cFastStr\u003e\u003e(\n        \u0026mut self,\n        key: K,\n        value: V,\n    );\n\n    fn strip_http_prefix_and_set_persistent\u003cK: AsRef\u003cstr\u003e, V: Into\u003cFastStr\u003e\u003e(\n        \u0026mut self,\n        key: K,\n        value: V,\n    );\n    fn strip_http_prefix_and_set_upstream\u003cK: AsRef\u003cstr\u003e, V: Into\u003cFastStr\u003e\u003e(\n        \u0026mut self,\n        key: K,\n        value: V,\n    );\n\n    fn del_persistent\u003cK: AsRef\u003cstr\u003e\u003e(\u0026mut self, key: K) -\u003e Option\u003cFastStr\u003e;\n    fn del_transient\u003cK: AsRef\u003cstr\u003e\u003e(\u0026mut self, key: K) -\u003e Option\u003cFastStr\u003e;\n    fn del_upstream\u003cK: AsRef\u003cstr\u003e\u003e(\u0026mut self, key: K) -\u003e Option\u003cFastStr\u003e;\n}",
                            "SubStruct": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "AsRef",
                                    "File": "src/forward.rs",
                                    "Line": 5,
                                    "StartOffset": 90,
                                    "EndOffset": 95
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/forward.rs",
                                    "Line": 5,
                                    "StartOffset": 120,
                                    "EndOffset": 126
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/forward.rs",
                                    "Line": 5,
                                    "StartOffset": 127,
                                    "EndOffset": 134
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "AsRef",
                                    "File": "src/forward.rs",
                                    "Line": 6,
                                    "StartOffset": 161,
                                    "EndOffset": 166
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/forward.rs",
                                    "Line": 6,
                                    "StartOffset": 191,
                                    "EndOffset": 197
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/forward.rs",
                                    "Line": 6,
                                    "StartOffset": 198,
                                    "EndOffset": 205
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "AsRef",
                                    "File": "src/forward.rs",
                                    "Line": 7,
                                    "StartOffset": 231,
                                    "EndOffset": 236
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/forward.rs",
                                    "Line": 7,
                                    "StartOffset": 261,
                                    "EndOffset": 267
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/forward.rs",
                                    "Line": 7,
                                    "StartOffset": 268,
                                    "EndOffset": 275
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/forward.rs",
                                    "Line": 9,
                                    "StartOffset": 316,
                                    "EndOffset": 322
                                },
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap",
                                    "File": "src/forward.rs",
                                    "Line": 9,
                                    "StartOffset": 324,
                                    "EndOffset": 332
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/forward.rs",
                                    "Line": 9,
                                    "StartOffset": 333,
                                    "EndOffset": 340
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/forward.rs",
                                    "Line": 9,
                                    "StartOffset": 342,
                                    "EndOffset": 349
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/forward.rs",
                                    "Line": 10,
                                    "StartOffset": 389,
                                    "EndOffset": 395
                                },
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap",
                                    "File": "src/forward.rs",
                                    "Line": 10,
                                    "StartOffset": 397,
                                    "EndOffset": 405
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/forward.rs",
                                    "Line": 10,
                                    "StartOffset": 406,
                                    "EndOffset": 413
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/forward.rs",
                                    "Line": 10,
                                    "StartOffset": 415,
                                    "EndOffset": 422
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/forward.rs",
                                    "Line": 11,
                                    "StartOffset": 461,
                                    "EndOffset": 467
                                },
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap",
                                    "File": "src/forward.rs",
                                    "Line": 11,
                                    "StartOffset": 469,
                                    "EndOffset": 477
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/forward.rs",
                                    "Line": 11,
                                    "StartOffset": 478,
                                    "EndOffset": 485
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/forward.rs",
                                    "Line": 11,
                                    "StartOffset": 487,
                                    "EndOffset": 494
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/forward.rs",
                                    "Line": 15,
                                    "StartOffset": 582,
                                    "EndOffset": 588
                                },
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap",
                                    "File": "src/forward.rs",
                                    "Line": 15,
                                    "StartOffset": 589,
                                    "EndOffset": 597
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/forward.rs",
                                    "Line": 15,
                                    "StartOffset": 598,
                                    "EndOffset": 605
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/forward.rs",
                                    "Line": 15,
                                    "StartOffset": 607,
                                    "EndOffset": 614
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/forward.rs",
                                    "Line": 18,
                                    "StartOffset": 702,
                                    "EndOffset": 708
                                },
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap",
                                    "File": "src/forward.rs",
                                    "Line": 18,
                                    "StartOffset": 709,
                                    "EndOffset": 717
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/forward.rs",
                                    "Line": 18,
                                    "StartOffset": 718,
                                    "EndOffset": 725
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/forward.rs",
                                    "Line": 18,
                                    "StartOffset": 727,
                                    "EndOffset": 734
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "Into",
                                    "File": "src/forward.rs",
                                    "Line": 20,
                                    "StartOffset": 764,
                                    "EndOffset": 768
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/forward.rs",
                                    "Line": 20,
                                    "StartOffset": 769,
                                    "EndOffset": 776
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "Into",
                                    "File": "src/forward.rs",
                                    "Line": 20,
                                    "StartOffset": 782,
                                    "EndOffset": 786
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/forward.rs",
                                    "Line": 20,
                                    "StartOffset": 787,
                                    "EndOffset": 794
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "Into",
                                    "File": "src/forward.rs",
                                    "Line": 21,
                                    "StartOffset": 851,
                                    "EndOffset": 855
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/forward.rs",
                                    "Line": 21,
                                    "StartOffset": 856,
                                    "EndOffset": 863
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "Into",
                                    "File": "src/forward.rs",
                                    "Line": 21,
                                    "StartOffset": 869,
                                    "EndOffset": 873
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/forward.rs",
                                    "Line": 21,
                                    "StartOffset": 874,
                                    "EndOffset": 881
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "Into",
                                    "File": "src/forward.rs",
                                    "Line": 22,
                                    "StartOffset": 937,
                                    "EndOffset": 941
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/forward.rs",
                                    "Line": 22,
                                    "StartOffset": 942,
                                    "EndOffset": 949
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "Into",
                                    "File": "src/forward.rs",
                                    "Line": 22,
                                    "StartOffset": 955,
                                    "EndOffset": 959
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/forward.rs",
                                    "Line": 22,
                                    "StartOffset": 960,
                                    "EndOffset": 967
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "AsRef",
                                    "File": "src/forward.rs",
                                    "Line": 24,
                                    "StartOffset": 1047,
                                    "EndOffset": 1052
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "Into",
                                    "File": "src/forward.rs",
                                    "Line": 24,
                                    "StartOffset": 1062,
                                    "EndOffset": 1066
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/forward.rs",
                                    "Line": 24,
                                    "StartOffset": 1067,
                                    "EndOffset": 1074
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "AsRef",
                                    "File": "src/forward.rs",
                                    "Line": 29,
                                    "StartOffset": 1182,
                                    "EndOffset": 1187
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "Into",
                                    "File": "src/forward.rs",
                                    "Line": 29,
                                    "StartOffset": 1197,
                                    "EndOffset": 1201
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/forward.rs",
                                    "Line": 29,
                                    "StartOffset": 1202,
                                    "EndOffset": 1209
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "AsRef",
                                    "File": "src/forward.rs",
                                    "Line": 35,
                                    "StartOffset": 1321,
                                    "EndOffset": 1326
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "Into",
                                    "File": "src/forward.rs",
                                    "Line": 35,
                                    "StartOffset": 1336,
                                    "EndOffset": 1340
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/forward.rs",
                                    "Line": 35,
                                    "StartOffset": 1341,
                                    "EndOffset": 1348
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "AsRef",
                                    "File": "src/forward.rs",
                                    "Line": 40,
                                    "StartOffset": 1457,
                                    "EndOffset": 1462
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "Into",
                                    "File": "src/forward.rs",
                                    "Line": 40,
                                    "StartOffset": 1472,
                                    "EndOffset": 1476
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/forward.rs",
                                    "Line": 40,
                                    "StartOffset": 1477,
                                    "EndOffset": 1484
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "AsRef",
                                    "File": "src/forward.rs",
                                    "Line": 46,
                                    "StartOffset": 1574,
                                    "EndOffset": 1579
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/forward.rs",
                                    "Line": 46,
                                    "StartOffset": 1608,
                                    "EndOffset": 1614
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/forward.rs",
                                    "Line": 46,
                                    "StartOffset": 1615,
                                    "EndOffset": 1622
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "AsRef",
                                    "File": "src/forward.rs",
                                    "Line": 47,
                                    "StartOffset": 1649,
                                    "EndOffset": 1654
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/forward.rs",
                                    "Line": 47,
                                    "StartOffset": 1683,
                                    "EndOffset": 1689
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/forward.rs",
                                    "Line": 47,
                                    "StartOffset": 1690,
                                    "EndOffset": 1697
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::convert",
                                    "Name": "AsRef",
                                    "File": "src/forward.rs",
                                    "Line": 48,
                                    "StartOffset": 1723,
                                    "EndOffset": 1728
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/forward.rs",
                                    "Line": 48,
                                    "StartOffset": 1757,
                                    "EndOffset": 1763
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/forward.rs",
                                    "Line": 48,
                                    "StartOffset": 1764,
                                    "EndOffset": 1771
                                }
                            ]
                        }
                    },
                    "Vars": {}
                },
                "metainfo::kv": {
                    "IsMain": false,
                    "IsTest": false,
                    "PkgPath": "metainfo::kv",
                    "Functions": {
                        "Node.clear": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::kv",
                            "Name": "Node.clear",
                            "File": "src/kv.rs",
                            "Line": 115,
                            "StartOffset": 2989,
                            "EndOffset": 3271,
                            "Content": "impl Node {\n    set_impl!(persistent);\n    set_impl!(transient);\n    set_impl!(stale);\n\n    del_impl!(persistent);\n    del_impl!(transient);\n    del_impl!(stale);\n\n    get_impl!(persistent);\n    get_impl!(transient);\n    get_impl!(stale);\n\n    get_all_impl!(persistent);\n    get_all_impl!(transient);\n    get_all_impl!(stale);\n\n    pub fn clear(\u0026mut self) {\n        if let Some(v) = self.persistent.as_mut() {\n            v.clear();\n        }\n\n        if let Some(v) = self.transient.as_mut() {\n            v.clear();\n        }\n\n        if let Some(v) = self.stale.as_mut() {\n            v.clear();\n        }\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::kv",
                                    "Name": "Node"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "as_mut",
                                    "File": "src/kv.rs",
                                    "Line": 116,
                                    "StartOffset": 3056,
                                    "EndOffset": 3062
                                },
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "clear",
                                    "File": "src/kv.rs",
                                    "Line": 117,
                                    "StartOffset": 3081,
                                    "EndOffset": 3086
                                }
                            ]
                        },
                        "Node.extend": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::kv",
                            "Name": "Node.extend",
                            "File": "src/kv.rs",
                            "Line": 89,
                            "StartOffset": 2252,
                            "EndOffset": 2983,
                            "Content": "impl Node {\n    set_impl!(persistent);\n    set_impl!(transient);\n    set_impl!(stale);\n\n    del_impl!(persistent);\n    del_impl!(transient);\n    del_impl!(stale);\n\n    get_impl!(persistent);\n    get_impl!(transient);\n    get_impl!(stale);\n\n    get_all_impl!(persistent);\n    get_all_impl!(transient);\n    get_all_impl!(stale);\n\n    pub fn extend(\u0026mut self, other: Self) {\n        if let Some(v) = other.persistent {\n            if self.persistent.is_none() {\n                self.persistent = Some(v);\n            } else {\n                self.persistent.as_mut().unwrap().extend(v);\n            }\n        }\n\n        if let Some(v) = other.transient {\n            if self.transient.is_none() {\n                self.transient = Some(v);\n            } else {\n                self.transient.as_mut().unwrap().extend(v);\n            }\n        }\n\n        if let Some(v) = other.stale {\n            if self.stale.is_none() {\n                self.stale = Some(v);\n            } else {\n                self.stale.as_mut().unwrap().extend(v);\n            }\n        }\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::kv",
                                    "Name": "Node"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "is_none",
                                    "File": "src/kv.rs",
                                    "Line": 91,
                                    "StartOffset": 2367,
                                    "EndOffset": 2374
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "as_mut",
                                    "File": "src/kv.rs",
                                    "Line": 94,
                                    "StartOffset": 2475,
                                    "EndOffset": 2481
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "unwrap",
                                    "File": "src/kv.rs",
                                    "Line": 94,
                                    "StartOffset": 2484,
                                    "EndOffset": 2490
                                },
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "Extend\u003cAHashMap\u003e.extend",
                                    "File": "src/kv.rs",
                                    "Line": 94,
                                    "StartOffset": 2493,
                                    "EndOffset": 2499
                                }
                            ]
                        },
                        "del_impl": {
                            "Exported": true,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::kv",
                            "Name": "del_impl",
                            "File": "src/kv.rs",
                            "Line": 23,
                            "StartOffset": 614,
                            "EndOffset": 996,
                            "Content": "macro_rules! del_impl {\n    ($name:ident) =\u003e {\n        paste! {\n            pub fn [\u003cdel_ $name\u003e]\u003cK: AsRef\u003cstr\u003e\u003e(\u0026mut self, key: K) -\u003e Option\u003cFastStr\u003e {\n                let key = key.as_ref();\n                if let Some(v) = self.$name.as_mut() {\n                    v.remove(key)\n                } else {\n                    None\n                }\n            }\n        }\n    };\n}"
                        },
                        "get_all_impl": {
                            "Exported": true,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::kv",
                            "Name": "get_all_impl",
                            "File": "src/kv.rs",
                            "Line": 54,
                            "StartOffset": 1416,
                            "EndOffset": 1640,
                            "Content": "macro_rules! get_all_impl {\n    ($name:ident) =\u003e {\n        paste! {\n            pub fn [\u003cget_all_ $name s\u003e](\u0026self) -\u003e Option\u003c\u0026AHashMap\u003cFastStr, FastStr\u003e\u003e {\n                self.$name.as_ref()\n            }\n        }\n    };\n}"
                        },
                        "get_impl": {
                            "Exported": true,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::kv",
                            "Name": "get_impl",
                            "File": "src/kv.rs",
                            "Line": 38,
                            "StartOffset": 998,
                            "EndOffset": 1414,
                            "Content": "macro_rules! get_impl {\n    ($name:ident) =\u003e {\n        paste! {\n            pub fn [\u003cget_ $name\u003e]\u003cK: AsRef\u003cstr\u003e\u003e(\u0026self, key: K) -\u003e Option\u003cFastStr\u003e {\n                let key = key.as_ref();\n                match self.$name.as_ref() {\n                    Some(v) =\u003e {\n                        v.get(key).cloned()\n                    }\n                    None =\u003e None,\n                }\n            }\n        }\n    };\n}"
                        },
                        "set_impl": {
                            "Exported": true,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::kv",
                            "Name": "set_impl",
                            "File": "src/kv.rs",
                            "Line": 6,
                            "StartOffset": 131,
                            "EndOffset": 612,
                            "Content": "macro_rules! set_impl {\n    ($name:ident) =\u003e {\n        paste! {\n            pub fn [\u003cset_ $name\u003e]\u003cK: Into\u003cFastStr\u003e, V: Into\u003cFastStr\u003e\u003e(\n                \u0026mut self,\n                key: K,\n                value: V,\n            ) {\n                if self.$name.is_none() {\n                    self.$name = Some(AHashMap::with_capacity(DEFAULT_CAPACITY));\n                }\n                self.$name.as_mut().unwrap().insert(key.into(), value.into());\n            }\n        }\n    };\n}"
                        }
                    },
                    "Types": {
                        "Node": {
                            "Exported": true,
                            "TypeKind": "struct",
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::kv",
                            "Name": "Node",
                            "File": "src/kv.rs",
                            "Line": 64,
                            "StartOffset": 1642,
                            "EndOffset": 1918,
                            "Content": "#[derive(Debug, Default, Clone)]\npub struct Node {\n    persistent: Option\u003cAHashMap\u003cFastStr, FastStr\u003e\u003e,\n    transient: Option\u003cAHashMap\u003cFastStr, FastStr\u003e\u003e,\n    // this is called stale because upstream and downstream all use this.\n    stale: Option\u003cAHashMap\u003cFastStr, FastStr\u003e\u003e,\n}",
                            "SubStruct": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/kv.rs",
                                    "Line": 66,
                                    "StartOffset": 1709,
                                    "EndOffset": 1715
                                },
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap",
                                    "File": "src/kv.rs",
                                    "Line": 66,
                                    "StartOffset": 1716,
                                    "EndOffset": 1724
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/kv.rs",
                                    "Line": 66,
                                    "StartOffset": 1725,
                                    "EndOffset": 1732
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/kv.rs",
                                    "Line": 66,
                                    "StartOffset": 1734,
                                    "EndOffset": 1741
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/kv.rs",
                                    "Line": 67,
                                    "StartOffset": 1760,
                                    "EndOffset": 1766
                                },
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap",
                                    "File": "src/kv.rs",
                                    "Line": 67,
                                    "StartOffset": 1767,
                                    "EndOffset": 1775
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/kv.rs",
                                    "Line": 67,
                                    "StartOffset": 1776,
                                    "EndOffset": 1783
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/kv.rs",
                                    "Line": 67,
                                    "StartOffset": 1785,
                                    "EndOffset": 1792
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/kv.rs",
                                    "Line": 69,
                                    "StartOffset": 1881,
                                    "EndOffset": 1887
                                },
                                {
                                    "ModPath": "ahash@0.8.11",
                                    "PkgPath": "ahash::hash_map",
                                    "Name": "AHashMap",
                                    "File": "src/kv.rs",
                                    "Line": 69,
                                    "StartOffset": 1888,
                                    "EndOffset": 1896
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/kv.rs",
                                    "Line": 69,
                                    "StartOffset": 1897,
                                    "EndOffset": 1904
                                },
                                {
                                    "ModPath": "faststr@0.2.19",
                                    "PkgPath": "faststr",
                                    "Name": "FastStr",
                                    "File": "src/kv.rs",
                                    "Line": 69,
                                    "StartOffset": 1906,
                                    "EndOffset": 1913
                                }
                            ],
                            "Methods": {
                                "clear": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::kv",
                                    "Name": "Node.clear"
                                },
                                "extend": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::kv",
                                    "Name": "Node.extend"
                                }
                            }
                        }
                    },
                    "Vars": {
                        "DEFAULT_CAPACITY": {
                            "IsExported": false,
                            "IsConst": true,
                            "IsPointer": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::kv",
                            "Name": "DEFAULT_CAPACITY",
                            "File": "src/kv.rs",
                            "Line": 4,
                            "StartOffset": 62,
                            "EndOffset": 97,
                            "Content": "const DEFAULT_CAPACITY: usize = 10;"
                        }
                    }
                },
                "metainfo::type_map": {
                    "IsMain": false,
                    "IsTest": false,
                    "PkgPath": "metainfo::type_map",
                    "Functions": {
                        "Entry.and_modify": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::type_map",
                            "Name": "Entry.and_modify",
                            "File": "src/type_map.rs",
                            "Line": 43,
                            "StartOffset": 1076,
                            "EndOffset": 1371,
                            "Content": "impl\u003c'a, K, V\u003e Entry\u003c'a, K, V\u003e {\n    #[inline]\n    #[inline]\n    pub fn and_modify\u003cF: FnOnce(\u0026mut V)\u003e(self, f: F) -\u003e Self\n    where\n        V: Send + Sync + 'static,\n    {\n        Entry {\n            inner: self.inner.and_modify(|v| {\n                f(v.downcast_mut().unwrap());\n            }),\n            _marker: PhantomData,\n        }\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "Entry"
                                }
                            },
                            "Results": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "and_modify",
                                    "File": "src/type_map.rs",
                                    "Line": 44,
                                    "StartOffset": 1097,
                                    "EndOffset": 1107
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::ops::function",
                                    "Name": "FnOnce",
                                    "File": "src/type_map.rs",
                                    "Line": 44,
                                    "StartOffset": 1111,
                                    "EndOffset": 1117
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "and_modify",
                                    "File": "src/type_map.rs",
                                    "Line": 49,
                                    "StartOffset": 1243,
                                    "EndOffset": 1253
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::any",
                                    "Name": "downcast_mut",
                                    "File": "src/type_map.rs",
                                    "Line": 50,
                                    "StartOffset": 1280,
                                    "EndOffset": 1292
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "unwrap",
                                    "File": "src/type_map.rs",
                                    "Line": 50,
                                    "StartOffset": 1295,
                                    "EndOffset": 1301
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::ops::function",
                                    "Name": "FnOnce",
                                    "File": "src/type_map.rs",
                                    "Line": 44,
                                    "StartOffset": 1111,
                                    "EndOffset": 1117
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::marker",
                                    "Name": "Send",
                                    "File": "src/type_map.rs",
                                    "Line": 46,
                                    "StartOffset": 1168,
                                    "EndOffset": 1172
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::marker",
                                    "Name": "Sync",
                                    "File": "src/type_map.rs",
                                    "Line": 46,
                                    "StartOffset": 1175,
                                    "EndOffset": 1179
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "Entry",
                                    "File": "src/type_map.rs",
                                    "Line": 48,
                                    "StartOffset": 1205,
                                    "EndOffset": 1210
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::marker",
                                    "Name": "PhantomData",
                                    "File": "src/type_map.rs",
                                    "Line": 52,
                                    "StartOffset": 1343,
                                    "EndOffset": 1354
                                }
                            ]
                        },
                        "Entry.or_default": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::type_map",
                            "Name": "Entry.or_default",
                            "File": "src/type_map.rs",
                            "Line": 56,
                            "StartOffset": 1377,
                            "EndOffset": 1573,
                            "Content": "impl\u003c'a, K, V\u003e Entry\u003c'a, K, V\u003e {\n    #[inline]\n    #[allow(clippy::unwrap_or_default)]\n    #[inline]\n    pub fn or_default(self) -\u003e \u0026'a mut V\n    where\n        V: Default + Send + Sync + 'static,\n    {\n        self.or_insert_with(V::default)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "Entry"
                                }
                            },
                            "Results": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "or_default",
                                    "File": "src/type_map.rs",
                                    "Line": 58,
                                    "StartOffset": 1438,
                                    "EndOffset": 1448
                                }
                            ],
                            "FunctionCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::default",
                                    "Name": "default",
                                    "File": "src/type_map.rs",
                                    "Line": 62,
                                    "StartOffset": 1559,
                                    "EndOffset": 1566
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "Entry.or_insert_with",
                                    "File": "src/type_map.rs",
                                    "Line": 62,
                                    "StartOffset": 1541,
                                    "EndOffset": 1555
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::default",
                                    "Name": "Default",
                                    "File": "src/type_map.rs",
                                    "Line": 60,
                                    "StartOffset": 1489,
                                    "EndOffset": 1496
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::marker",
                                    "Name": "Send",
                                    "File": "src/type_map.rs",
                                    "Line": 60,
                                    "StartOffset": 1499,
                                    "EndOffset": 1503
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::marker",
                                    "Name": "Sync",
                                    "File": "src/type_map.rs",
                                    "Line": 60,
                                    "StartOffset": 1506,
                                    "EndOffset": 1510
                                }
                            ]
                        },
                        "Entry.or_insert": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::type_map",
                            "Name": "Entry.or_insert",
                            "File": "src/type_map.rs",
                            "Line": 16,
                            "StartOffset": 344,
                            "EndOffset": 560,
                            "Content": "impl\u003c'a, K, V\u003e Entry\u003c'a, K, V\u003e {\n    #[inline]\n    #[inline]\n    pub fn or_insert(self, default: V) -\u003e \u0026'a mut V\n    where\n        V: Send + Sync + 'static,\n    {\n        let v = self.inner.or_insert_with(|| Box::new(default));\n        v.downcast_mut().unwrap()\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "Entry"
                                }
                            },
                            "FunctionCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "alloc::boxed",
                                    "Name": "new",
                                    "File": "src/type_map.rs",
                                    "Line": 21,
                                    "StartOffset": 506,
                                    "EndOffset": 509
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "or_insert_with",
                                    "File": "src/type_map.rs",
                                    "Line": 21,
                                    "StartOffset": 483,
                                    "EndOffset": 497
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::any",
                                    "Name": "downcast_mut",
                                    "File": "src/type_map.rs",
                                    "Line": 22,
                                    "StartOffset": 531,
                                    "EndOffset": 543
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "unwrap",
                                    "File": "src/type_map.rs",
                                    "Line": 22,
                                    "StartOffset": 546,
                                    "EndOffset": 552
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::marker",
                                    "Name": "Send",
                                    "File": "src/type_map.rs",
                                    "Line": 19,
                                    "StartOffset": 427,
                                    "EndOffset": 431
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::marker",
                                    "Name": "Sync",
                                    "File": "src/type_map.rs",
                                    "Line": 19,
                                    "StartOffset": 434,
                                    "EndOffset": 438
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "alloc::boxed",
                                    "Name": "Box",
                                    "File": "src/type_map.rs",
                                    "Line": 21,
                                    "StartOffset": 501,
                                    "EndOffset": 504
                                }
                            ]
                        },
                        "Entry.or_insert_with": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::type_map",
                            "Name": "Entry.or_insert_with",
                            "File": "src/type_map.rs",
                            "Line": 25,
                            "StartOffset": 566,
                            "EndOffset": 807,
                            "Content": "impl\u003c'a, K, V\u003e Entry\u003c'a, K, V\u003e {\n    #[inline]\n    #[inline]\n    pub fn or_insert_with\u003cF: FnOnce() -\u003e V\u003e(self, default: F) -\u003e \u0026'a mut V\n    where\n        V: Send + Sync + 'static,\n    {\n        let v = self.inner.or_insert_with(|| Box::new(default()));\n        v.downcast_mut().unwrap()\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "Entry"
                                }
                            },
                            "FunctionCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "alloc::boxed",
                                    "Name": "new",
                                    "File": "src/type_map.rs",
                                    "Line": 30,
                                    "StartOffset": 751,
                                    "EndOffset": 754
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "or_insert_with",
                                    "File": "src/type_map.rs",
                                    "Line": 30,
                                    "StartOffset": 728,
                                    "EndOffset": 742
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::any",
                                    "Name": "downcast_mut",
                                    "File": "src/type_map.rs",
                                    "Line": 31,
                                    "StartOffset": 778,
                                    "EndOffset": 790
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "unwrap",
                                    "File": "src/type_map.rs",
                                    "Line": 31,
                                    "StartOffset": 793,
                                    "EndOffset": 799
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::ops::function",
                                    "Name": "FnOnce",
                                    "File": "src/type_map.rs",
                                    "Line": 26,
                                    "StartOffset": 605,
                                    "EndOffset": 611
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::marker",
                                    "Name": "Send",
                                    "File": "src/type_map.rs",
                                    "Line": 28,
                                    "StartOffset": 672,
                                    "EndOffset": 676
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::marker",
                                    "Name": "Sync",
                                    "File": "src/type_map.rs",
                                    "Line": 28,
                                    "StartOffset": 679,
                                    "EndOffset": 683
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "alloc::boxed",
                                    "Name": "Box",
                                    "File": "src/type_map.rs",
                                    "Line": 30,
                                    "StartOffset": 746,
                                    "EndOffset": 749
                                }
                            ]
                        },
                        "Entry.or_insert_with_key": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::type_map",
                            "Name": "Entry.or_insert_with_key",
                            "File": "src/type_map.rs",
                            "Line": 34,
                            "StartOffset": 813,
                            "EndOffset": 1070,
                            "Content": "impl\u003c'a, K, V\u003e Entry\u003c'a, K, V\u003e {\n    #[inline]\n    #[inline]\n    pub fn or_insert_with_key\u003cF: FnOnce(\u0026K) -\u003e V\u003e(self, default: F) -\u003e \u0026'a mut V\n    where\n        V: Send + Sync + 'static,\n    {\n        let v = self.inner.or_insert_with_key(|key| Box::new(default(key)));\n        v.downcast_mut().unwrap()\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "Entry"
                                }
                            },
                            "FunctionCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "alloc::boxed",
                                    "Name": "new",
                                    "File": "src/type_map.rs",
                                    "Line": 39,
                                    "StartOffset": 1011,
                                    "EndOffset": 1014
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "or_insert_with_key",
                                    "File": "src/type_map.rs",
                                    "Line": 39,
                                    "StartOffset": 981,
                                    "EndOffset": 999
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::any",
                                    "Name": "downcast_mut",
                                    "File": "src/type_map.rs",
                                    "Line": 40,
                                    "StartOffset": 1041,
                                    "EndOffset": 1053
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "unwrap",
                                    "File": "src/type_map.rs",
                                    "Line": 40,
                                    "StartOffset": 1056,
                                    "EndOffset": 1062
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::ops::function",
                                    "Name": "FnOnce",
                                    "File": "src/type_map.rs",
                                    "Line": 35,
                                    "StartOffset": 856,
                                    "EndOffset": 862
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::marker",
                                    "Name": "Send",
                                    "File": "src/type_map.rs",
                                    "Line": 37,
                                    "StartOffset": 925,
                                    "EndOffset": 929
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::marker",
                                    "Name": "Sync",
                                    "File": "src/type_map.rs",
                                    "Line": 37,
                                    "StartOffset": 932,
                                    "EndOffset": 936
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "alloc::boxed",
                                    "Name": "Box",
                                    "File": "src/type_map.rs",
                                    "Line": 39,
                                    "StartOffset": 1006,
                                    "EndOffset": 1009
                                }
                            ]
                        },
                        "TypeMap.capacity": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::type_map",
                            "Name": "TypeMap.capacity",
                            "File": "src/type_map.rs",
                            "Line": 150,
                            "StartOffset": 3540,
                            "EndOffset": 3623,
                            "Content": "impl TypeMap {\n    #[inline]\n    #[inline]\n    pub fn capacity(\u0026self) -\u003e usize {\n        self.inner.capacity()\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "capacity",
                                    "File": "src/type_map.rs",
                                    "Line": 152,
                                    "StartOffset": 3607,
                                    "EndOffset": 3615
                                }
                            ]
                        },
                        "TypeMap.clear": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::type_map",
                            "Name": "TypeMap.clear",
                            "File": "src/type_map.rs",
                            "Line": 117,
                            "StartOffset": 2851,
                            "EndOffset": 2924,
                            "Content": "impl TypeMap {\n    #[inline]\n    #[inline]\n    pub fn clear(\u0026mut self) {\n        self.inner.clear();\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "clear",
                                    "File": "src/type_map.rs",
                                    "Line": 119,
                                    "StartOffset": 2910,
                                    "EndOffset": 2915
                                }
                            ]
                        },
                        "TypeMap.contains": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::type_map",
                            "Name": "TypeMap.contains",
                            "File": "src/type_map.rs",
                            "Line": 105,
                            "StartOffset": 2520,
                            "EndOffset": 2636,
                            "Content": "impl TypeMap {\n    #[inline]\n    #[inline]\n    pub fn contains\u003cT: 'static\u003e(\u0026self) -\u003e bool {\n        self.inner.contains_key(\u0026TypeId::of::\u003cT\u003e())\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap"
                                }
                            },
                            "FunctionCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::any",
                                    "Name": "of",
                                    "File": "src/type_map.rs",
                                    "Line": 107,
                                    "StartOffset": 2620,
                                    "EndOffset": 2622
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "contains_key",
                                    "File": "src/type_map.rs",
                                    "Line": 107,
                                    "StartOffset": 2598,
                                    "EndOffset": 2610
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::any",
                                    "Name": "TypeId",
                                    "File": "src/type_map.rs",
                                    "Line": 107,
                                    "StartOffset": 2612,
                                    "EndOffset": 2618
                                }
                            ]
                        },
                        "TypeMap.entry": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::type_map",
                            "Name": "TypeMap.entry",
                            "File": "src/type_map.rs",
                            "Line": 132,
                            "StartOffset": 3170,
                            "EndOffset": 3367,
                            "Content": "impl TypeMap {\n    #[inline]\n    #[inline]\n    pub fn entry\u003cT: 'static\u003e(\u0026mut self) -\u003e Entry\u003c'_, TypeId, T\u003e {\n        Entry {\n            inner: self.inner.entry(TypeId::of::\u003cT\u003e()),\n            _marker: PhantomData,\n        }\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap"
                                }
                            },
                            "FunctionCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::any",
                                    "Name": "of",
                                    "File": "src/type_map.rs",
                                    "Line": 135,
                                    "StartOffset": 3306,
                                    "EndOffset": 3308
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "entry",
                                    "File": "src/type_map.rs",
                                    "Line": 135,
                                    "StartOffset": 3292,
                                    "EndOffset": 3297
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "Entry",
                                    "File": "src/type_map.rs",
                                    "Line": 133,
                                    "StartOffset": 3223,
                                    "EndOffset": 3228
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::any",
                                    "Name": "TypeId",
                                    "File": "src/type_map.rs",
                                    "Line": 133,
                                    "StartOffset": 3233,
                                    "EndOffset": 3239
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::marker",
                                    "Name": "PhantomData",
                                    "File": "src/type_map.rs",
                                    "Line": 136,
                                    "StartOffset": 3339,
                                    "EndOffset": 3350
                                }
                            ]
                        },
                        "TypeMap.extend": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::type_map",
                            "Name": "TypeMap.extend",
                            "File": "src/type_map.rs",
                            "Line": 122,
                            "StartOffset": 2930,
                            "EndOffset": 3031,
                            "Content": "impl TypeMap {\n    #[inline]\n    #[inline]\n    pub fn extend(\u0026mut self, other: TypeMap) {\n        self.inner.extend(other.inner)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "extend",
                                    "File": "src/type_map.rs",
                                    "Line": 124,
                                    "StartOffset": 3006,
                                    "EndOffset": 3012
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap",
                                    "File": "src/type_map.rs",
                                    "Line": 123,
                                    "StartOffset": 2976,
                                    "EndOffset": 2983
                                }
                            ]
                        },
                        "TypeMap.get": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::type_map",
                            "Name": "TypeMap.get",
                            "File": "src/type_map.rs",
                            "Line": 91,
                            "StartOffset": 2146,
                            "EndOffset": 2319,
                            "Content": "impl TypeMap {\n    #[inline]\n    #[inline]\n    pub fn get\u003cT: 'static\u003e(\u0026self) -\u003e Option\u003c\u0026T\u003e {\n        self.inner\n            .get(\u0026TypeId::of::\u003cT\u003e())\n            .and_then(|boxed| boxed.downcast_ref())\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap"
                                }
                            },
                            "FunctionCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::any",
                                    "Name": "of",
                                    "File": "src/type_map.rs",
                                    "Line": 94,
                                    "StartOffset": 2251,
                                    "EndOffset": 2253
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "get",
                                    "File": "src/type_map.rs",
                                    "Line": 94,
                                    "StartOffset": 2238,
                                    "EndOffset": 2241
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "and_then",
                                    "File": "src/type_map.rs",
                                    "Line": 95,
                                    "StartOffset": 2275,
                                    "EndOffset": 2283
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::any",
                                    "Name": "downcast_ref",
                                    "File": "src/type_map.rs",
                                    "Line": 95,
                                    "StartOffset": 2298,
                                    "EndOffset": 2310
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/type_map.rs",
                                    "Line": 92,
                                    "StartOffset": 2193,
                                    "EndOffset": 2199
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::any",
                                    "Name": "TypeId",
                                    "File": "src/type_map.rs",
                                    "Line": 94,
                                    "StartOffset": 2243,
                                    "EndOffset": 2249
                                }
                            ]
                        },
                        "TypeMap.get_mut": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::type_map",
                            "Name": "TypeMap.get_mut",
                            "File": "src/type_map.rs",
                            "Line": 98,
                            "StartOffset": 2325,
                            "EndOffset": 2514,
                            "Content": "impl TypeMap {\n    #[inline]\n    #[inline]\n    pub fn get_mut\u003cT: 'static\u003e(\u0026mut self) -\u003e Option\u003c\u0026mut T\u003e {\n        self.inner\n            .get_mut(\u0026TypeId::of::\u003cT\u003e())\n            .and_then(|boxed| boxed.downcast_mut())\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap"
                                }
                            },
                            "Results": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/type_map.rs",
                                    "Line": 99,
                                    "StartOffset": 2380,
                                    "EndOffset": 2386
                                }
                            ],
                            "FunctionCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::any",
                                    "Name": "of",
                                    "File": "src/type_map.rs",
                                    "Line": 101,
                                    "StartOffset": 2446,
                                    "EndOffset": 2448
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "get_mut",
                                    "File": "src/type_map.rs",
                                    "Line": 101,
                                    "StartOffset": 2429,
                                    "EndOffset": 2436
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "and_then",
                                    "File": "src/type_map.rs",
                                    "Line": 102,
                                    "StartOffset": 2470,
                                    "EndOffset": 2478
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::any",
                                    "Name": "downcast_mut",
                                    "File": "src/type_map.rs",
                                    "Line": 102,
                                    "StartOffset": 2493,
                                    "EndOffset": 2505
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::any",
                                    "Name": "TypeId",
                                    "File": "src/type_map.rs",
                                    "Line": 101,
                                    "StartOffset": 2438,
                                    "EndOffset": 2444
                                }
                            ]
                        },
                        "TypeMap.insert": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::type_map",
                            "Name": "TypeMap.insert",
                            "File": "src/type_map.rs",
                            "Line": 86,
                            "StartOffset": 2003,
                            "EndOffset": 2140,
                            "Content": "impl TypeMap {\n    #[inline]\n    #[inline]\n    pub fn insert\u003cT: Send + Sync + 'static\u003e(\u0026mut self, t: T) {\n        self.inner.insert(TypeId::of::\u003cT\u003e(), Box::new(t));\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap"
                                }
                            },
                            "FunctionCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::any",
                                    "Name": "of",
                                    "File": "src/type_map.rs",
                                    "Line": 88,
                                    "StartOffset": 2110,
                                    "EndOffset": 2112
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "alloc::boxed",
                                    "Name": "new",
                                    "File": "src/type_map.rs",
                                    "Line": 88,
                                    "StartOffset": 2126,
                                    "EndOffset": 2129
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "insert",
                                    "File": "src/type_map.rs",
                                    "Line": 88,
                                    "StartOffset": 2095,
                                    "EndOffset": 2101
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::marker",
                                    "Name": "Send",
                                    "File": "src/type_map.rs",
                                    "Line": 87,
                                    "StartOffset": 2034,
                                    "EndOffset": 2038
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::marker",
                                    "Name": "Sync",
                                    "File": "src/type_map.rs",
                                    "Line": 87,
                                    "StartOffset": 2041,
                                    "EndOffset": 2045
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::any",
                                    "Name": "TypeId",
                                    "File": "src/type_map.rs",
                                    "Line": 88,
                                    "StartOffset": 2102,
                                    "EndOffset": 2108
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "alloc::boxed",
                                    "Name": "Box",
                                    "File": "src/type_map.rs",
                                    "Line": 88,
                                    "StartOffset": 2121,
                                    "EndOffset": 2124
                                }
                            ]
                        },
                        "TypeMap.is_empty": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::type_map",
                            "Name": "TypeMap.is_empty",
                            "File": "src/type_map.rs",
                            "Line": 140,
                            "StartOffset": 3373,
                            "EndOffset": 3455,
                            "Content": "impl TypeMap {\n    #[inline]\n    #[inline]\n    pub fn is_empty(\u0026self) -\u003e bool {\n        self.inner.is_empty()\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "is_empty",
                                    "File": "src/type_map.rs",
                                    "Line": 142,
                                    "StartOffset": 3439,
                                    "EndOffset": 3447
                                }
                            ]
                        },
                        "TypeMap.iter": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::type_map",
                            "Name": "TypeMap.iter",
                            "File": "src/type_map.rs",
                            "Line": 127,
                            "StartOffset": 3037,
                            "EndOffset": 3164,
                            "Content": "impl TypeMap {\n    #[inline]\n    #[inline]\n    pub fn iter(\u0026self) -\u003e ::std::collections::hash_map::Iter\u003c'_, TypeId, AnyObject\u003e {\n        self.inner.iter()\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "iter",
                                    "File": "src/type_map.rs",
                                    "Line": 129,
                                    "StartOffset": 3152,
                                    "EndOffset": 3156
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "Iter",
                                    "File": "src/type_map.rs",
                                    "Line": 128,
                                    "StartOffset": 3103,
                                    "EndOffset": 3107
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::any",
                                    "Name": "TypeId",
                                    "File": "src/type_map.rs",
                                    "Line": 128,
                                    "StartOffset": 3112,
                                    "EndOffset": 3118
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "AnyObject",
                                    "File": "src/type_map.rs",
                                    "Line": 128,
                                    "StartOffset": 3120,
                                    "EndOffset": 3129
                                }
                            ]
                        },
                        "TypeMap.len": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::type_map",
                            "Name": "TypeMap.len",
                            "File": "src/type_map.rs",
                            "Line": 145,
                            "StartOffset": 3461,
                            "EndOffset": 3534,
                            "Content": "impl TypeMap {\n    #[inline]\n    #[inline]\n    pub fn len(\u0026self) -\u003e usize {\n        self.inner.len()\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap"
                                }
                            },
                            "MethodCalls": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "len",
                                    "File": "src/type_map.rs",
                                    "Line": 147,
                                    "StartOffset": 3523,
                                    "EndOffset": 3526
                                }
                            ]
                        },
                        "TypeMap.remove": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::type_map",
                            "Name": "TypeMap.remove",
                            "File": "src/type_map.rs",
                            "Line": 110,
                            "StartOffset": 2642,
                            "EndOffset": 2845,
                            "Content": "impl TypeMap {\n    #[inline]\n    #[inline]\n    pub fn remove\u003cT: 'static\u003e(\u0026mut self) -\u003e Option\u003cT\u003e {\n        self.inner\n            .remove(\u0026TypeId::of::\u003cT\u003e())\n            .and_then(|boxed| boxed.downcast().ok().map(|boxed| *boxed))\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap"
                                }
                            },
                            "FunctionCalls": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::any",
                                    "Name": "of",
                                    "File": "src/type_map.rs",
                                    "Line": 113,
                                    "StartOffset": 2756,
                                    "EndOffset": 2758
                                }
                            ],
                            "MethodCalls": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "remove",
                                    "File": "src/type_map.rs",
                                    "Line": 113,
                                    "StartOffset": 2740,
                                    "EndOffset": 2746
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "and_then",
                                    "File": "src/type_map.rs",
                                    "Line": 114,
                                    "StartOffset": 2780,
                                    "EndOffset": 2788
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "alloc::boxed::convert",
                                    "Name": "downcast",
                                    "File": "src/type_map.rs",
                                    "Line": 114,
                                    "StartOffset": 2803,
                                    "EndOffset": 2811
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::result",
                                    "Name": "ok",
                                    "File": "src/type_map.rs",
                                    "Line": 114,
                                    "StartOffset": 2814,
                                    "EndOffset": 2816
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "map",
                                    "File": "src/type_map.rs",
                                    "Line": 114,
                                    "StartOffset": 2819,
                                    "EndOffset": 2822
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::option",
                                    "Name": "Option",
                                    "File": "src/type_map.rs",
                                    "Line": 111,
                                    "StartOffset": 2696,
                                    "EndOffset": 2702
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::any",
                                    "Name": "TypeId",
                                    "File": "src/type_map.rs",
                                    "Line": 113,
                                    "StartOffset": 2748,
                                    "EndOffset": 2754
                                }
                            ]
                        },
                        "TypeMap::with_capacity": {
                            "Exported": true,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::type_map",
                            "Name": "TypeMap::with_capacity",
                            "File": "src/type_map.rs",
                            "Line": 79,
                            "StartOffset": 1812,
                            "EndOffset": 1997,
                            "Content": "impl TypeMap {\n    #[inline]\n    #[inline]\n    pub fn with_capacity(capacity: usize) -\u003e Self {\n        TypeMap {\n            inner: FxHashMapRand::with_capacity_and_hasher(capacity, Default::default()),\n        }\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap"
                                }
                            },
                            "FunctionCalls": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "with_capacity_and_hasher",
                                    "File": "src/type_map.rs",
                                    "Line": 82,
                                    "StartOffset": 1926,
                                    "EndOffset": 1950
                                },
                                {
                                    "ModPath": "rustc-hash@2.0.0",
                                    "PkgPath": "rustc-hash::random_state",
                                    "Name": "Default\u003cFxRandomState\u003e::default",
                                    "File": "src/type_map.rs",
                                    "Line": 82,
                                    "StartOffset": 1970,
                                    "EndOffset": 1977
                                }
                            ],
                            "Types": [
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap",
                                    "File": "src/type_map.rs",
                                    "Line": 81,
                                    "StartOffset": 1882,
                                    "EndOffset": 1889
                                },
                                {
                                    "ModPath": "rustc-hash@2.0.0",
                                    "PkgPath": "rustc-hash::random_state",
                                    "Name": "FxHashMapRand",
                                    "File": "src/type_map.rs",
                                    "Line": 82,
                                    "StartOffset": 1911,
                                    "EndOffset": 1924
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::default",
                                    "Name": "Default",
                                    "File": "src/type_map.rs",
                                    "Line": 82,
                                    "StartOffset": 1961,
                                    "EndOffset": 1968
                                }
                            ]
                        }
                    },
                    "Types": {
                        "AnyObject": {
                            "Exported": false,
                            "TypeKind": "type-parameter",
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::type_map",
                            "Name": "AnyObject",
                            "File": "src/type_map.rs",
                            "Line": 8,
                            "StartOffset": 142,
                            "EndOffset": 197,
                            "Content": "pub(crate) type AnyObject = Box\u003cdyn Any + Send + Sync\u003e;",
                            "SubStruct": [
                                {
                                    "ModPath": "",
                                    "PkgPath": "alloc::boxed",
                                    "Name": "Box",
                                    "File": "src/type_map.rs",
                                    "Line": 8,
                                    "StartOffset": 170,
                                    "EndOffset": 173
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::any",
                                    "Name": "Any",
                                    "File": "src/type_map.rs",
                                    "Line": 8,
                                    "StartOffset": 178,
                                    "EndOffset": 181
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::marker",
                                    "Name": "Send",
                                    "File": "src/type_map.rs",
                                    "Line": 8,
                                    "StartOffset": 184,
                                    "EndOffset": 188
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::marker",
                                    "Name": "Sync",
                                    "File": "src/type_map.rs",
                                    "Line": 8,
                                    "StartOffset": 191,
                                    "EndOffset": 195
                                }
                            ]
                        },
                        "Entry": {
                            "Exported": true,
                            "TypeKind": "struct",
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::type_map",
                            "Name": "Entry",
                            "File": "src/type_map.rs",
                            "Line": 10,
                            "StartOffset": 199,
                            "EndOffset": 305,
                            "Content": "pub struct Entry\u003c'a, K: 'a, V: 'a\u003e {\n    inner: MapEntry\u003c'a, K, AnyObject\u003e,\n    _marker: PhantomData\u003cV\u003e,\n}",
                            "SubStruct": [
                                {
                                    "ModPath": "std",
                                    "PkgPath": "std::collections::hash::map",
                                    "Name": "Entry",
                                    "File": "src/type_map.rs",
                                    "Line": 11,
                                    "StartOffset": 247,
                                    "EndOffset": 255
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "AnyObject",
                                    "File": "src/type_map.rs",
                                    "Line": 11,
                                    "StartOffset": 263,
                                    "EndOffset": 272
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::marker",
                                    "Name": "PhantomData",
                                    "File": "src/type_map.rs",
                                    "Line": 12,
                                    "StartOffset": 288,
                                    "EndOffset": 299
                                }
                            ],
                            "Methods": {
                                "and_modify": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "Entry.and_modify"
                                },
                                "or_default": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "Entry.or_default"
                                },
                                "or_insert": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "Entry.or_insert"
                                },
                                "or_insert_with": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "Entry.or_insert_with"
                                },
                                "or_insert_with_key": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "Entry.or_insert_with_key"
                                }
                            }
                        },
                        "TypeMap": {
                            "Exported": true,
                            "TypeKind": "struct",
                            "ModPath": "metainfo",
                            "PkgPath": "metainfo::type_map",
                            "Name": "TypeMap",
                            "File": "src/type_map.rs",
                            "Line": 66,
                            "StartOffset": 1577,
                            "EndOffset": 1670,
                            "Content": "#[derive(Debug, Default)]\npub struct TypeMap {\n    inner: FxHashMapRand\u003cTypeId, AnyObject\u003e,\n}",
                            "SubStruct": [
                                {
                                    "ModPath": "rustc-hash@2.0.0",
                                    "PkgPath": "rustc-hash::random_state",
                                    "Name": "FxHashMapRand",
                                    "File": "src/type_map.rs",
                                    "Line": 68,
                                    "StartOffset": 1635,
                                    "EndOffset": 1648
                                },
                                {
                                    "ModPath": "",
                                    "PkgPath": "core::any",
                                    "Name": "TypeId",
                                    "File": "src/type_map.rs",
                                    "Line": 68,
                                    "StartOffset": 1649,
                                    "EndOffset": 1655
                                },
                                {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "AnyObject",
                                    "File": "src/type_map.rs",
                                    "Line": 68,
                                    "StartOffset": 1657,
                                    "EndOffset": 1666
                                }
                            ],
                            "Methods": {
                                "capacity": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap.capacity"
                                },
                                "clear": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap.clear"
                                },
                                "contains": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap.contains"
                                },
                                "entry": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap.entry"
                                },
                                "extend": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap.extend"
                                },
                                "get": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap.get"
                                },
                                "get_mut": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap.get_mut"
                                },
                                "insert": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap.insert"
                                },
                                "is_empty": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap.is_empty"
                                },
                                "iter": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap.iter"
                                },
                                "len": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap.len"
                                },
                                "remove": {
                                    "ModPath": "metainfo",
                                    "PkgPath": "metainfo::type_map",
                                    "Name": "TypeMap.remove"
                                }
                            }
                        }
                    },
                    "Vars": {}
                }
            },
            "Dependencies": {},
            "Files": {
                "src/backward.rs": {
                    "Path": "src/backward.rs",
                    "Imports": [
                        {
                            "Path": "use ahash::AHashMap;"
                        },
                        {
                            "Path": "use faststr::FastStr;"
                        }
                    ]
                },
                "src/convert.rs": {
                    "Path": "src/convert.rs",
                    "Imports": [
                        {
                            "Path": "use faststr::FastStr;"
                        },
                        {
                            "Path": "use crate::{HTTP_PREFIX_BACKWARD, HTTP_PREFIX_PERSISTENT, HTTP_PREFIX_TRANSIENT, RPC_PREFIX_BACKWARD,RPC_PREFIX_PERSISTENT, RPC_PREFIX_TRANSIENT,};"
                        },
                        {
                            "Path": "use crate::convert::{Converter, HttpConverter, RpcConverter};"
                        }
                    ]
                },
                "src/faststr_map.rs": {
                    "Path": "src/faststr_map.rs",
                    "Imports": [
                        {
                            "Path": "use std::{any::TypeId, collections::hash_map::Entry};"
                        },
                        {
                            "Path": "use faststr::FastStr;"
                        },
                        {
                            "Path": "use rustc_hash::FxHashMapRand;"
                        }
                    ]
                },
                "src/forward.rs": {
                    "Path": "src/forward.rs",
                    "Imports": [
                        {
                            "Path": "use faststr::FastStr;"
                        },
                        {
                            "Path": "use crate::AHashMap;"
                        }
                    ]
                },
                "src/kv.rs": {
                    "Path": "src/kv.rs",
                    "Imports": [
                        {
                            "Path": "use ahash::AHashMap;"
                        },
                        {
                            "Path": "use faststr::FastStr;"
                        },
                        {
                            "Path": "use paste::paste;"
                        },
                        {
                            "Path": "use super::*;"
                        }
                    ]
                },
                "src/lib.rs": {
                    "Path": "src/lib.rs",
                    "Imports": [
                        {
                            "Path": "use std::{fmt, sync::Arc};"
                        },
                        {
                            "Path": "use ahash::AHashMap;"
                        },
                        {
                            "Path": "use convert::{Converter, HttpConverter, RpcConverter};"
                        },
                        {
                            "Path": "use faststr::FastStr;"
                        },
                        {
                            "Path": "use kv::Node;"
                        },
                        {
                            "Path": "use paste::paste;"
                        },
                        {
                            "Path": "use super::*;"
                        }
                    ]
                },
                "src/type_map.rs": {
                    "Path": "src/type_map.rs",
                    "Imports": [
                        {
                            "Path": "use std::{any::{Any, TypeId},collections::hash_map::Entry as MapEntry,marker::PhantomData,};"
                        },
                        {
                            "Path": "use rustc_hash::FxHashMapRand;"
                        }
                    ]
                }
            }
        },
        "rustc-hash@2.0.0": {
            "Language": "rust",
            "Version": "2.0.0",
            "Name": "rustc-hash",
            "Dir": "",
            "Packages": {
                "rustc-hash::random_state": {
                    "IsMain": false,
                    "IsTest": false,
                    "PkgPath": "rustc-hash::random_state",
                    "Functions": {
                        "BuildHasher\u003cFxRandomState\u003e.build_hasher": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "rustc-hash@2.0.0",
                            "PkgPath": "rustc-hash::random_state",
                            "Name": "BuildHasher\u003cFxRandomState\u003e.build_hasher",
                            "File": "random_state.rs",
                            "Line": 47,
                            "StartOffset": 1626,
                            "EndOffset": 1711,
                            "Content": "impl core::hash::BuildHasher for FxRandomState {\n    type Hasher = FxHasher;\n\n    fn build_hasher(\u0026self) -\u003e Self::Hasher {\n        FxHasher::with_seed(self.seed)\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "rustc-hash@2.0.0",
                                    "PkgPath": "rustc-hash::random_state",
                                    "Name": "FxRandomState"
                                }
                            }
                        },
                        "Default\u003cFxRandomState\u003e::default": {
                            "Exported": false,
                            "IsMethod": true,
                            "IsInterfaceMethod": false,
                            "ModPath": "rustc-hash@2.0.0",
                            "PkgPath": "rustc-hash::random_state",
                            "Name": "Default\u003cFxRandomState\u003e::default",
                            "File": "random_state.rs",
                            "Line": 53,
                            "StartOffset": 1752,
                            "EndOffset": 1800,
                            "Content": "impl Default for FxRandomState {\n    fn default() -\u003e Self {\n        Self::new()\n    }\n}",
                            "Receiver": {
                                "IsPointer": false,
                                "Type": {
                                    "ModPath": "rustc-hash@2.0.0",
                                    "PkgPath": "rustc-hash::random_state",
                                    "Name": "FxRandomState"
                                }
                            }
                        }
                    },
                    "Types": {
                        "FxHashMapRand": {
                            "Exported": false,
                            "TypeKind": "type-parameter",
                            "ModPath": "rustc-hash@2.0.0",
                            "PkgPath": "rustc-hash::random_state",
                            "Name": "FxHashMapRand",
                            "File": "random_state.rs",
                            "Line": 4,
                            "StartOffset": 65,
                            "EndOffset": 208,
                            "Content": "/// Type alias for a hashmap using the `fx` hash algorithm with [`FxRandomState`].\npub type FxHashMapRand\u003cK, V\u003e = HashMap\u003cK, V, FxRandomState\u003e;"
                        },
                        "FxHashSetRand": {
                            "Exported": false,
                            "TypeKind": "type-parameter",
                            "ModPath": "rustc-hash@2.0.0",
                            "PkgPath": "rustc-hash::random_state",
                            "Name": "FxHashSetRand",
                            "File": "random_state.rs",
                            "Line": 7,
                            "StartOffset": 210,
                            "EndOffset": 347,
                            "Content": "/// Type alias for a hashmap using the `fx` hash algorithm with [`FxRandomState`].\npub type FxHashSetRand\u003cV\u003e = HashSet\u003cV, FxRandomState\u003e;"
                        },
                        "FxRandomState": {
                            "Exported": false,
                            "TypeKind": "struct",
                            "ModPath": "rustc-hash@2.0.0",
                            "PkgPath": "rustc-hash::random_state",
                            "Name": "FxRandomState",
                            "File": "random_state.rs",
                            "Line": 10,
                            "StartOffset": 349,
                            "EndOffset": 687,
                            "Content": "/// `FxRandomState` is an alternative state for `HashMap` types.\n///\n/// A particular instance `FxRandomState` will create the same instances of\n/// [`Hasher`], but the hashers created by two different `FxRandomState`\n/// instances are unlikely to produce the same result for the same values.\npub struct FxRandomState {\n    seed: usize,\n}",
                            "Methods": {
                                "build_hasher": {
                                    "ModPath": "rustc-hash@2.0.0",
                                    "PkgPath": "rustc-hash::random_state",
                                    "Name": "BuildHasher\u003cFxRandomState\u003e.build_hasher"
                                }
                            }
                        }
                    },
                    "Vars": {}
                }
            },
            "Dependencies": {},
            "Files": {
                "random_state.rs": {
                    "Path": "random_state.rs"
                }
            }
        },
        "std": {
            "Language": "rust",
            "Version": "",
            "Name": "std",
            "Dir": "",
            "Packages": {
                "std::collections::hash::map": {
                    "IsMain": false,
                    "IsTest": false,
                    "PkgPath": "std::collections::hash::map",
                    "Functions": {
                        "and_modify": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "std",
                            "PkgPath": "std::collections::hash::map",
                            "Name": "and_modify",
                            "File": "map.rs",
                            "Line": 2899,
                            "StartOffset": 89098,
                            "EndOffset": 89108,
                            "Content": "and_modify"
                        },
                        "capacity": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "std",
                            "PkgPath": "std::collections::hash::map",
                            "Name": "capacity",
                            "File": "map.rs",
                            "Line": 348,
                            "StartOffset": 13112,
                            "EndOffset": 13120,
                            "Content": "capacity"
                        },
                        "clear": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "std",
                            "PkgPath": "std::collections::hash::map",
                            "Name": "clear",
                            "File": "map.rs",
                            "Line": 726,
                            "StartOffset": 24426,
                            "EndOffset": 24431,
                            "Content": "clear"
                        },
                        "contains_key": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "std",
                            "PkgPath": "std::collections::hash::map",
                            "Name": "contains_key",
                            "File": "map.rs",
                            "Line": 1124,
                            "StartOffset": 37104,
                            "EndOffset": 37116,
                            "Content": "contains_key"
                        },
                        "default": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "std",
                            "PkgPath": "std::collections::hash::map",
                            "Name": "default",
                            "File": "map.rs",
                            "Line": 1405,
                            "StartOffset": 46194,
                            "EndOffset": 46201,
                            "Content": "default"
                        },
                        "entry": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "std",
                            "PkgPath": "std::collections::hash::map",
                            "Name": "entry",
                            "File": "map.rs",
                            "Line": 871,
                            "StartOffset": 29118,
                            "EndOffset": 29123,
                            "Content": "entry"
                        },
                        "extend": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "std",
                            "PkgPath": "std::collections::hash::map",
                            "Name": "extend",
                            "File": "map.rs",
                            "Line": 3245,
                            "StartOffset": 98957,
                            "EndOffset": 98963,
                            "Content": "extend"
                        },
                        "get": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "std",
                            "PkgPath": "std::collections::hash::map",
                            "Name": "get",
                            "File": "map.rs",
                            "Line": 893,
                            "StartOffset": 29785,
                            "EndOffset": 29788,
                            "Content": "get"
                        },
                        "get_mut": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "std",
                            "PkgPath": "std::collections::hash::map",
                            "Name": "get_mut",
                            "File": "map.rs",
                            "Line": 1152,
                            "StartOffset": 37852,
                            "EndOffset": 37859,
                            "Content": "get_mut"
                        },
                        "insert": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "std",
                            "PkgPath": "std::collections::hash::map",
                            "Name": "insert",
                            "File": "map.rs",
                            "Line": 1188,
                            "StartOffset": 39046,
                            "EndOffset": 39052,
                            "Content": "insert"
                        },
                        "is_empty": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "std",
                            "PkgPath": "std::collections::hash::map",
                            "Name": "is_empty",
                            "File": "map.rs",
                            "Line": 604,
                            "StartOffset": 20378,
                            "EndOffset": 20386,
                            "Content": "is_empty"
                        },
                        "iter": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "std",
                            "PkgPath": "std::collections::hash::map",
                            "Name": "iter",
                            "File": "map.rs",
                            "Line": 534,
                            "StartOffset": 18547,
                            "EndOffset": 18551,
                            "Content": "iter"
                        },
                        "len": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "std",
                            "PkgPath": "std::collections::hash::map",
                            "Name": "len",
                            "File": "map.rs",
                            "Line": 586,
                            "StartOffset": 19963,
                            "EndOffset": 19966,
                            "Content": "len"
                        },
                        "or_insert_with": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "std",
                            "PkgPath": "std::collections::hash::map",
                            "Name": "or_insert_with",
                            "File": "map.rs",
                            "Line": 2821,
                            "StartOffset": 86586,
                            "EndOffset": 86600,
                            "Content": "or_insert_with"
                        },
                        "or_insert_with_key": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "std",
                            "PkgPath": "std::collections::hash::map",
                            "Name": "or_insert_with_key",
                            "File": "map.rs",
                            "Line": 2848,
                            "StartOffset": 87634,
                            "EndOffset": 87652,
                            "Content": "or_insert_with_key"
                        },
                        "remove": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "std",
                            "PkgPath": "std::collections::hash::map",
                            "Name": "remove",
                            "File": "map.rs",
                            "Line": 1243,
                            "StartOffset": 40858,
                            "EndOffset": 40864,
                            "Content": "remove"
                        },
                        "with_capacity_and_hasher": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "std",
                            "PkgPath": "std::collections::hash::map",
                            "Name": "with_capacity_and_hasher",
                            "File": "map.rs",
                            "Line": 330,
                            "StartOffset": 12430,
                            "EndOffset": 12454,
                            "Content": "with_capacity_and_hasher"
                        }
                    },
                    "Types": {
                        "Entry": {
                            "Exported": false,
                            "TypeKind": "enum",
                            "ModPath": "std",
                            "PkgPath": "std::collections::hash::map",
                            "Name": "Entry",
                            "File": "map.rs",
                            "Line": 2238,
                            "StartOffset": 70549,
                            "EndOffset": 70554,
                            "Content": "Entry"
                        },
                        "Iter": {
                            "Exported": false,
                            "TypeKind": "struct",
                            "ModPath": "std",
                            "PkgPath": "std::collections::hash::map",
                            "Name": "Iter",
                            "File": "map.rs",
                            "Line": 1485,
                            "StartOffset": 48646,
                            "EndOffset": 48650,
                            "Content": "Iter"
                        }
                    },
                    "Vars": {}
                },
                "std::macros": {
                    "IsMain": false,
                    "IsTest": false,
                    "PkgPath": "std::macros",
                    "Functions": {
                        "println": {
                            "Exported": false,
                            "IsMethod": false,
                            "IsInterfaceMethod": false,
                            "ModPath": "std",
                            "PkgPath": "std::macros",
                            "Name": "println",
                            "File": "macros.rs",
                            "Line": 137,
                            "StartOffset": 4320,
                            "EndOffset": 4327,
                            "Content": "println"
                        }
                    },
                    "Types": {},
                    "Vars": {}
                }
            },
            "Dependencies": {},
            "Files": {
                "macros.rs": {
                    "Path": "macros.rs"
                },
                "map.rs": {
                    "Path": "map.rs"
                }
            }
        }
    },
    "Graph": {
        "?alloc::boxed#Box": {
            "ModPath": "",
            "PkgPath": "alloc::boxed",
            "Name": "Box",
            "Type": "TYPE",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry.or_insert",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry.or_insert_with",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry.or_insert_with_key",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.insert",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "AnyObject",
                    "Line": 0
                }
            ]
        },
        "?alloc::boxed#new": {
            "ModPath": "",
            "PkgPath": "alloc::boxed",
            "Name": "new",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry.or_insert",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry.or_insert_with",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry.or_insert_with_key",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.insert",
                    "Line": 2
                }
            ]
        },
        "?alloc::boxed::convert#downcast": {
            "ModPath": "",
            "PkgPath": "alloc::boxed::convert",
            "Name": "downcast",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.remove",
                    "Line": 4
                }
            ]
        },
        "?alloc::str#to_owned": {
            "ModPath": "",
            "PkgPath": "alloc::str",
            "Name": "to_owned",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "RpcConverter.remove_prefix",
                    "Line": 3
                }
            ]
        },
        "?alloc::string#String": {
            "ModPath": "",
            "PkgPath": "alloc::string",
            "Name": "String",
            "Type": "TYPE",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "RpcConverter.add_prefix",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.to_http_format",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.add_prefix_and_to_http_format",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.to_rpc_format",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.to_rpc_format_string",
                    "Line": 0
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.to_http_format_string",
                    "Line": 0
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.remove_prefix_and_to_rpc_format",
                    "Line": 3
                }
            ]
        },
        "?alloc::string#push": {
            "ModPath": "",
            "PkgPath": "alloc::string",
            "Name": "push",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.to_http_format",
                    "Line": 9
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.to_rpc_format",
                    "Line": 9
                }
            ]
        },
        "?alloc::string#push_str": {
            "ModPath": "",
            "PkgPath": "alloc::string",
            "Name": "push_str",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "RpcConverter.add_prefix",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.add_prefix_and_to_http_format",
                    "Line": 3
                }
            ]
        },
        "?alloc::string#with_capacity": {
            "ModPath": "",
            "PkgPath": "alloc::string",
            "Name": "with_capacity",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "RpcConverter.add_prefix",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.add_prefix_and_to_http_format",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.to_rpc_format_string",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.to_http_format_string",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.remove_prefix_and_to_rpc_format",
                    "Line": 3
                }
            ]
        },
        "?alloc::sync#Arc": {
            "ModPath": "",
            "PkgPath": "alloc::sync",
            "Name": "Arc",
            "Type": "TYPE",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.derive",
                    "Line": 21
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo::from_node",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo",
                    "Line": 31
                }
            ]
        },
        "?alloc::sync#as_ref": {
            "ModPath": "",
            "PkgPath": "alloc::sync",
            "Name": "as_ref",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_string",
                    "Line": 9
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.contains_string",
                    "Line": 13
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.contains_faststr",
                    "Line": 13
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get",
                    "Line": 6
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.contains",
                    "Line": 13
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_faststr",
                    "Line": 9
                }
            ]
        },
        "?alloc::sync#clone": {
            "ModPath": "",
            "PkgPath": "alloc::sync",
            "Name": "clone",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.derive",
                    "Line": 23
                }
            ]
        },
        "?alloc::sync#new": {
            "ModPath": "",
            "PkgPath": "alloc::sync",
            "Name": "new",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.derive",
                    "Line": 21
                }
            ]
        },
        "?core::any#Any": {
            "ModPath": "",
            "PkgPath": "core::any",
            "Name": "Any",
            "Type": "TYPE",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "AnyObject",
                    "Line": 0
                }
            ]
        },
        "?core::any#TypeId": {
            "ModPath": "",
            "PkgPath": "core::any",
            "Name": "TypeId",
            "Type": "TYPE",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.get",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.insert",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.iter",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.entry",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.get_mut",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.remove",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.contains",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.get",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.contains",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.get_mut",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.remove",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.iter",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.entry",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.insert",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap",
                    "Line": 2
                }
            ]
        },
        "?core::any#downcast_mut": {
            "ModPath": "",
            "PkgPath": "core::any",
            "Name": "downcast_mut",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry.or_insert",
                    "Line": 6
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.get_mut",
                    "Line": 4
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry.and_modify",
                    "Line": 7
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry.or_insert_with",
                    "Line": 6
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry.or_insert_with_key",
                    "Line": 6
                }
            ]
        },
        "?core::any#downcast_ref": {
            "ModPath": "",
            "PkgPath": "core::any",
            "Name": "downcast_ref",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.get",
                    "Line": 4
                }
            ]
        },
        "?core::any#of": {
            "ModPath": "",
            "PkgPath": "core::any",
            "Name": "of",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.get",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.insert",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.entry",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.get_mut",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.remove",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.contains",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.get",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.contains",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.get_mut",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.remove",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.entry",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.insert",
                    "Line": 2
                }
            ]
        },
        "?core::char::methods#to_ascii_lowercase": {
            "ModPath": "",
            "PkgPath": "core::char::methods",
            "Name": "to_ascii_lowercase",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.to_http_format",
                    "Line": 5
                }
            ]
        },
        "?core::char::methods#to_ascii_uppercase": {
            "ModPath": "",
            "PkgPath": "core::char::methods",
            "Name": "to_ascii_uppercase",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.to_rpc_format",
                    "Line": 5
                }
            ]
        },
        "?core::convert#AsRef": {
            "ModPath": "",
            "PkgPath": "core::convert",
            "Name": "AsRef",
            "Type": "TYPE",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_string",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.contains_string",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward\u003cMetaInfo\u003e.strip_rpc_prefix_and_set_upstream",
                    "Line": 0
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward\u003cMetaInfo\u003e.strip_http_prefix_and_set_persistent",
                    "Line": 0
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward\u003cMetaInfo\u003e.strip_rpc_prefix_and_set_persistent",
                    "Line": 0
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward\u003cMetaInfo\u003e.strip_http_prefix_and_set_upstream",
                    "Line": 0
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Backward\u003cMetaInfo\u003e.strip_rpc_prefix_and_set_backward_downstream",
                    "Line": 0
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.remove_string",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Backward\u003cMetaInfo\u003e.strip_http_prefix_and_set_backward_downstream",
                    "Line": 0
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::backward",
                    "Name": "Backward",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::backward",
                    "Name": "Backward",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::backward",
                    "Name": "Backward",
                    "Line": 14
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::backward",
                    "Name": "Backward",
                    "Line": 20
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::backward",
                    "Name": "Backward",
                    "Line": 26
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::backward",
                    "Name": "Backward",
                    "Line": 27
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 20
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 25
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 31
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 36
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 42
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 43
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 44
                }
            ]
        },
        "?core::convert#Into": {
            "ModPath": "",
            "PkgPath": "core::convert",
            "Name": "Into",
            "Type": "TYPE",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward\u003cMetaInfo\u003e.strip_rpc_prefix_and_set_upstream",
                    "Line": 0
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward\u003cMetaInfo\u003e.strip_http_prefix_and_set_persistent",
                    "Line": 0
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward\u003cMetaInfo\u003e.strip_rpc_prefix_and_set_persistent",
                    "Line": 0
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward\u003cMetaInfo\u003e.strip_http_prefix_and_set_upstream",
                    "Line": 0
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Backward\u003cMetaInfo\u003e.strip_rpc_prefix_and_set_backward_downstream",
                    "Line": 0
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Backward\u003cMetaInfo\u003e.strip_http_prefix_and_set_backward_downstream",
                    "Line": 0
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::backward",
                    "Name": "Backward",
                    "Line": 11
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::backward",
                    "Name": "Backward",
                    "Line": 11
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::backward",
                    "Name": "Backward",
                    "Line": 12
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::backward",
                    "Name": "Backward",
                    "Line": 12
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::backward",
                    "Name": "Backward",
                    "Line": 14
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::backward",
                    "Name": "Backward",
                    "Line": 20
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 16
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 16
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 17
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 17
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 18
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 18
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 20
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 25
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 31
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 36
                }
            ]
        },
        "?core::convert#as_ref": {
            "ModPath": "",
            "PkgPath": "core::convert",
            "Name": "as_ref",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_string",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.contains_string",
                    "Line": 6
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward\u003cMetaInfo\u003e.strip_rpc_prefix_and_set_upstream",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward\u003cMetaInfo\u003e.strip_http_prefix_and_set_persistent",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward\u003cMetaInfo\u003e.strip_rpc_prefix_and_set_persistent",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward\u003cMetaInfo\u003e.strip_http_prefix_and_set_upstream",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Backward\u003cMetaInfo\u003e.strip_rpc_prefix_and_set_backward_downstream",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.remove_string",
                    "Line": 6
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Backward\u003cMetaInfo\u003e.strip_http_prefix_and_set_backward_downstream",
                    "Line": 5
                }
            ]
        },
        "?core::default#Default": {
            "ModPath": "",
            "PkgPath": "core::default",
            "Name": "Default",
            "Type": "TYPE",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap::with_capacity",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry.or_default",
                    "Line": 4
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap::with_capacity",
                    "Line": 3
                }
            ]
        },
        "?core::default#default": {
            "ModPath": "",
            "PkgPath": "core::default",
            "Name": "default",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry.or_default",
                    "Line": 6
                }
            ]
        },
        "?core::fmt#debug_struct": {
            "ModPath": "",
            "PkgPath": "core::fmt",
            "Name": "debug_struct",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Debug\u003cMetaInfo\u003e.fmt",
                    "Line": 1
                }
            ]
        },
        "?core::fmt::builders#finish": {
            "ModPath": "",
            "PkgPath": "core::fmt::builders",
            "Name": "finish",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Debug\u003cMetaInfo\u003e.fmt",
                    "Line": 1
                }
            ]
        },
        "?core::iter::traits::iterator#map": {
            "ModPath": "",
            "PkgPath": "core::iter::traits::iterator",
            "Name": "map",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_all_backword_transients_with_prefix",
                    "Line": 18
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_all_persistents_and_transients",
                    "Line": 22
                }
            ]
        },
        "?core::marker#PhantomData": {
            "ModPath": "",
            "PkgPath": "core::marker",
            "Name": "PhantomData",
            "Type": "TYPE",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry.and_modify",
                    "Line": 9
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.entry",
                    "Line": 4
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry",
                    "Line": 2
                }
            ]
        },
        "?core::marker#Send": {
            "ModPath": "",
            "PkgPath": "core::marker",
            "Name": "Send",
            "Type": "TYPE",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.insert_faststr",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.insert",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.insert",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry.or_default",
                    "Line": 4
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry.or_insert",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry.and_modify",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry.or_insert_with",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry.or_insert_with_key",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.insert",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "AnyObject",
                    "Line": 0
                }
            ]
        },
        "?core::marker#Sync": {
            "ModPath": "",
            "PkgPath": "core::marker",
            "Name": "Sync",
            "Type": "TYPE",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.insert_faststr",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.insert",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.insert",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry.or_default",
                    "Line": 4
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry.or_insert",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry.and_modify",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry.or_insert_with",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry.or_insert_with_key",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.insert",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "AnyObject",
                    "Line": 0
                }
            ]
        },
        "?core::ops::function#FnOnce": {
            "ModPath": "",
            "PkgPath": "core::ops::function",
            "Name": "FnOnce",
            "Type": "TYPE",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry.and_modify",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry.or_insert_with",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry.or_insert_with_key",
                    "Line": 1
                }
            ]
        },
        "?core::option#Option": {
            "ModPath": "",
            "PkgPath": "core::option",
            "Name": "Option",
            "Type": "TYPE",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_string",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.remove",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.remove_faststr",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_all_backword_transients_with_prefix",
                    "Line": 4
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.remove_string",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_all_persistents_and_transients",
                    "Line": 4
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_faststr",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo::from_node",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo",
                    "Line": 31
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo",
                    "Line": 32
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo",
                    "Line": 33
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo",
                    "Line": 34
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo",
                    "Line": 38
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo",
                    "Line": 39
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.get",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.remove",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "Node",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "Node",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "Node",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::backward",
                    "Name": "Backward",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::backward",
                    "Name": "Backward",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::backward",
                    "Name": "Backward",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::backward",
                    "Name": "Backward",
                    "Line": 6
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::backward",
                    "Name": "Backward",
                    "Line": 8
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::backward",
                    "Name": "Backward",
                    "Line": 9
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::backward",
                    "Name": "Backward",
                    "Line": 26
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::backward",
                    "Name": "Backward",
                    "Line": 27
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.get",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.remove",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 6
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 7
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 11
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 14
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 42
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 43
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 44
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cHttpConverter\u003e.remove_persistent_prefix",
                    "Line": 0
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cHttpConverter\u003e.remove_transient_prefix",
                    "Line": 0
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "RpcConverter.remove_prefix",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.remove_prefix_and_to_rpc_format",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter",
                    "Line": 6
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter",
                    "Line": 7
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter",
                    "Line": 8
                }
            ]
        },
        "?core::option#and_then": {
            "ModPath": "",
            "PkgPath": "core::option",
            "Name": "and_then",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_string",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.remove",
                    "Line": 4
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.remove_faststr",
                    "Line": 6
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.remove_string",
                    "Line": 6
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_faststr",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.get",
                    "Line": 4
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.get_mut",
                    "Line": 4
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.remove",
                    "Line": 4
                }
            ]
        },
        "?core::option#as_mut": {
            "ModPath": "",
            "PkgPath": "core::option",
            "Name": "as_mut",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.extend",
                    "Line": 26
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.remove",
                    "Line": 4
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.remove_faststr",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.clear",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.remove_string",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "Node.extend",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "Node.clear",
                    "Line": 1
                }
            ]
        },
        "?core::option#as_ref": {
            "ModPath": "",
            "PkgPath": "core::option",
            "Name": "as_ref",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward\u003cMetaInfo\u003e.get_all_persistents",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward\u003cMetaInfo\u003e.get_all_transients",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Backward\u003cMetaInfo\u003e.get_all_backward_downstreams",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward\u003cMetaInfo\u003e.get_all_upstreams",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_string",
                    "Line": 4
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.contains_string",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.contains_faststr",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Backward\u003cMetaInfo\u003e.get_all_backward_transients",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_all_backword_transients_with_prefix",
                    "Line": 8
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.contains",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_all_persistents_and_transients",
                    "Line": 8
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_faststr",
                    "Line": 4
                }
            ]
        },
        "?core::option#clone": {
            "ModPath": "",
            "PkgPath": "core::option",
            "Name": "clone",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.derive",
                    "Line": 10
                }
            ]
        },
        "?core::option#get_or_insert_with": {
            "ModPath": "",
            "PkgPath": "core::option",
            "Name": "get_or_insert_with",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.extend",
                    "Line": 6
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.insert_faststr",
                    "Line": 4
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.insert_string",
                    "Line": 4
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.insert",
                    "Line": 4
                }
            ]
        },
        "?core::option#is_none": {
            "ModPath": "",
            "PkgPath": "core::option",
            "Name": "is_none",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.extend",
                    "Line": 23
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.derive",
                    "Line": 7
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.ensure_backward_node",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.ensure_forward_node",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "Node.extend",
                    "Line": 2
                }
            ]
        },
        "?core::option#map": {
            "ModPath": "",
            "PkgPath": "core::option",
            "Name": "map",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.contains_string",
                    "Line": 6
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.contains_faststr",
                    "Line": 6
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.contains",
                    "Line": 6
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_all_persistents_and_transients",
                    "Line": 12
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.remove",
                    "Line": 4
                }
            ]
        },
        "?core::option#or_else": {
            "ModPath": "",
            "PkgPath": "core::option",
            "Name": "or_else",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_string",
                    "Line": 6
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_faststr",
                    "Line": 6
                }
            ]
        },
        "?core::option#take": {
            "ModPath": "",
            "PkgPath": "core::option",
            "Name": "take",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.derive",
                    "Line": 19
                }
            ]
        },
        "?core::option#unwrap": {
            "ModPath": "",
            "PkgPath": "core::option",
            "Name": "unwrap",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.extend",
                    "Line": 26
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "Node.extend",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry.or_insert",
                    "Line": 6
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry.and_modify",
                    "Line": 7
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry.or_insert_with",
                    "Line": 6
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry.or_insert_with_key",
                    "Line": 6
                }
            ]
        },
        "?core::option#unwrap_or": {
            "ModPath": "",
            "PkgPath": "core::option",
            "Name": "unwrap_or",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.contains_string",
                    "Line": 7
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.contains_faststr",
                    "Line": 7
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.contains",
                    "Line": 7
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_all_persistents_and_transients",
                    "Line": 12
                }
            ]
        },
        "?core::result#ok": {
            "ModPath": "",
            "PkgPath": "core::result",
            "Name": "ok",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.remove",
                    "Line": 4
                }
            ]
        },
        "?core::str#chars": {
            "ModPath": "",
            "PkgPath": "core::str",
            "Name": "chars",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.to_http_format",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.to_rpc_format",
                    "Line": 3
                }
            ]
        },
        "?core::str#len": {
            "ModPath": "",
            "PkgPath": "core::str",
            "Name": "len",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "RpcConverter.add_prefix",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.add_prefix_and_to_http_format",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.to_rpc_format_string",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.to_http_format_string",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.remove_prefix_and_to_rpc_format",
                    "Line": 3
                }
            ]
        },
        "?core::str#strip_prefix": {
            "ModPath": "",
            "PkgPath": "core::str",
            "Name": "strip_prefix",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "RpcConverter.remove_prefix",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.remove_prefix_and_to_rpc_format",
                    "Line": 2
                }
            ]
        },
        "ahash@0.8.11?ahash::hash_map#AHashMap": {
            "ModPath": "ahash@0.8.11",
            "PkgPath": "ahash::hash_map",
            "Name": "AHashMap",
            "Type": "TYPE",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.extend",
                    "Line": 12
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.insert_string",
                    "Line": 4
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_all_backword_transients_with_prefix",
                    "Line": 4
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_all_persistents_and_transients",
                    "Line": 4
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo",
                    "Line": 33
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "Node",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "Node",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "Node",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::backward",
                    "Name": "Backward",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::backward",
                    "Name": "Backward",
                    "Line": 6
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::backward",
                    "Name": "Backward",
                    "Line": 8
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::backward",
                    "Name": "Backward",
                    "Line": 9
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 6
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 7
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 11
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 14
                }
            ]
        },
        "ahash@0.8.11?ahash::hash_map#AHashMap.get": {
            "ModPath": "ahash@0.8.11",
            "PkgPath": "ahash::hash_map",
            "Name": "AHashMap.get",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_string",
                    "Line": 5
                }
            ]
        },
        "ahash@0.8.11?ahash::hash_map#AHashMap.insert": {
            "ModPath": "ahash@0.8.11",
            "PkgPath": "ahash::hash_map",
            "Name": "AHashMap.insert",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.insert_string",
                    "Line": 5
                }
            ]
        },
        "ahash@0.8.11?ahash::hash_map#AHashMap.remove": {
            "ModPath": "ahash@0.8.11",
            "PkgPath": "ahash::hash_map",
            "Name": "AHashMap.remove",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.remove_string",
                    "Line": 6
                }
            ]
        },
        "ahash@0.8.11?ahash::hash_map#AHashMap::with_capacity": {
            "ModPath": "ahash@0.8.11",
            "PkgPath": "ahash::hash_map",
            "Name": "AHashMap::with_capacity",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.extend",
                    "Line": 12
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.insert_string",
                    "Line": 4
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_all_backword_transients_with_prefix",
                    "Line": 15
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_all_persistents_and_transients",
                    "Line": 17
                }
            ]
        },
        "ahash@0.8.11?ahash::hash_map#Extend\u003cAHashMap\u003e.extend": {
            "ModPath": "ahash@0.8.11",
            "PkgPath": "ahash::hash_map",
            "Name": "Extend\u003cAHashMap\u003e.extend",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.extend",
                    "Line": 13
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_all_backword_transients_with_prefix",
                    "Line": 16
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_all_persistents_and_transients",
                    "Line": 19
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "Node.extend",
                    "Line": 5
                }
            ]
        },
        "faststr@0.2.19?faststr#FastStr": {
            "ModPath": "faststr@0.2.19",
            "PkgPath": "faststr",
            "Name": "FastStr",
            "Type": "TYPE",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.insert_faststr",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_string",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward\u003cMetaInfo\u003e.strip_rpc_prefix_and_set_upstream",
                    "Line": 0
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward\u003cMetaInfo\u003e.strip_http_prefix_and_set_persistent",
                    "Line": 0
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.remove_faststr",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.insert_string",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward\u003cMetaInfo\u003e.strip_rpc_prefix_and_set_persistent",
                    "Line": 0
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward\u003cMetaInfo\u003e.strip_http_prefix_and_set_upstream",
                    "Line": 0
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Backward\u003cMetaInfo\u003e.strip_rpc_prefix_and_set_backward_downstream",
                    "Line": 0
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_all_backword_transients_with_prefix",
                    "Line": 4
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.remove_string",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_all_persistents_and_transients",
                    "Line": 4
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_faststr",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Backward\u003cMetaInfo\u003e.strip_http_prefix_and_set_backward_downstream",
                    "Line": 0
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo",
                    "Line": 33
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo",
                    "Line": 33
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.get",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.insert",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.iter",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.remove",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "Node",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "Node",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "Node",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "Node",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "Node",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "Node",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::backward",
                    "Name": "Backward",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::backward",
                    "Name": "Backward",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::backward",
                    "Name": "Backward",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::backward",
                    "Name": "Backward",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::backward",
                    "Name": "Backward",
                    "Line": 6
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::backward",
                    "Name": "Backward",
                    "Line": 6
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::backward",
                    "Name": "Backward",
                    "Line": 8
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::backward",
                    "Name": "Backward",
                    "Line": 8
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::backward",
                    "Name": "Backward",
                    "Line": 9
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::backward",
                    "Name": "Backward",
                    "Line": 9
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::backward",
                    "Name": "Backward",
                    "Line": 11
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::backward",
                    "Name": "Backward",
                    "Line": 11
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::backward",
                    "Name": "Backward",
                    "Line": 12
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::backward",
                    "Name": "Backward",
                    "Line": 12
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::backward",
                    "Name": "Backward",
                    "Line": 14
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::backward",
                    "Name": "Backward",
                    "Line": 20
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::backward",
                    "Name": "Backward",
                    "Line": 26
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::backward",
                    "Name": "Backward",
                    "Line": 27
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 6
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 6
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 7
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 7
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 11
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 11
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 14
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 14
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 16
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 16
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 17
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 17
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 18
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 18
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 20
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 25
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 31
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 36
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 42
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 43
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::forward",
                    "Name": "Forward",
                    "Line": 44
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cHttpConverter\u003e.remove_persistent_prefix",
                    "Line": 0
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "RpcConverter.add_prefix",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.add_prefix_and_to_http_format",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cHttpConverter\u003e.add_persistent_prefix",
                    "Line": 0
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cHttpConverter\u003e.remove_transient_prefix",
                    "Line": 0
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "RpcConverter.remove_prefix",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.remove_prefix_and_to_rpc_format",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter",
                    "Line": 4
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter",
                    "Line": 6
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter",
                    "Line": 7
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter",
                    "Line": 8
                }
            ]
        },
        "faststr@0.2.19?faststr#FastStr::from_string": {
            "ModPath": "faststr@0.2.19",
            "PkgPath": "faststr",
            "Name": "FastStr::from_string",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "RpcConverter.add_prefix",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.add_prefix_and_to_http_format",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "RpcConverter.remove_prefix",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.remove_prefix_and_to_rpc_format",
                    "Line": 5
                }
            ]
        },
        "metainfo?metainfo#Backward\u003cMetaInfo\u003e.get_all_backward_downstreams": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "Backward\u003cMetaInfo\u003e.get_all_backward_downstreams",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "get_all_impl",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "as_ref",
                    "Line": 1
                }
            ],
            "References": null
        },
        "metainfo?metainfo#Backward\u003cMetaInfo\u003e.get_all_backward_transients": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "Backward\u003cMetaInfo\u003e.get_all_backward_transients",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "get_all_impl",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "as_ref",
                    "Line": 1
                }
            ],
            "References": null
        },
        "metainfo?metainfo#Backward\u003cMetaInfo\u003e.get_all_backward_transients_with_http_prefix": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "Backward\u003cMetaInfo\u003e.get_all_backward_transients_with_http_prefix",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_all_backword_transients_with_prefix",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter",
                    "Line": 1
                }
            ],
            "References": null
        },
        "metainfo?metainfo#Backward\u003cMetaInfo\u003e.get_all_backward_transients_with_rpc_prefix": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "Backward\u003cMetaInfo\u003e.get_all_backward_transients_with_rpc_prefix",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_all_backword_transients_with_prefix",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "RpcConverter",
                    "Line": 1
                }
            ],
            "References": null
        },
        "metainfo?metainfo#Backward\u003cMetaInfo\u003e.strip_http_prefix_and_set_backward_downstream": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "Backward\u003cMetaInfo\u003e.strip_http_prefix_and_set_backward_downstream",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "set_impl",
                    "Line": 7
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "as_ref",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cHttpConverter\u003e.remove_backward_prefix",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "AsRef",
                    "Line": 0
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "Into",
                    "Line": 0
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 0
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter",
                    "Line": 6
                }
            ],
            "References": null
        },
        "metainfo?metainfo#Backward\u003cMetaInfo\u003e.strip_rpc_prefix_and_set_backward_downstream": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "Backward\u003cMetaInfo\u003e.strip_rpc_prefix_and_set_backward_downstream",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "set_impl",
                    "Line": 7
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "as_ref",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cRpcConverter\u003e.remove_backward_prefix",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "AsRef",
                    "Line": 0
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "Into",
                    "Line": 0
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 0
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "RpcConverter",
                    "Line": 6
                }
            ],
            "References": null
        },
        "metainfo?metainfo#DEFAULT_MAP_SIZE": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "DEFAULT_MAP_SIZE",
            "Type": "VAR",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.extend",
                    "Line": 6
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.insert_faststr",
                    "Line": 4
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.insert_string",
                    "Line": 4
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.insert",
                    "Line": 4
                }
            ]
        },
        "metainfo?metainfo#Debug\u003cMetaInfo\u003e.fmt": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "Debug\u003cMetaInfo\u003e.fmt",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::fmt",
                    "Name": "debug_struct",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::fmt::builders",
                    "Name": "finish",
                    "Line": 1
                }
            ],
            "References": null
        },
        "metainfo?metainfo#Forward\u003cMetaInfo\u003e.get_all_persistents": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "Forward\u003cMetaInfo\u003e.get_all_persistents",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "get_all_impl",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "as_ref",
                    "Line": 1
                }
            ],
            "References": null
        },
        "metainfo?metainfo#Forward\u003cMetaInfo\u003e.get_all_persistents_and_transients_with_http_prefix": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "Forward\u003cMetaInfo\u003e.get_all_persistents_and_transients_with_http_prefix",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_all_persistents_and_transients",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter",
                    "Line": 3
                }
            ],
            "References": null
        },
        "metainfo?metainfo#Forward\u003cMetaInfo\u003e.get_all_persistents_and_transients_with_rpc_prefix": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "Forward\u003cMetaInfo\u003e.get_all_persistents_and_transients_with_rpc_prefix",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_all_persistents_and_transients",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "RpcConverter",
                    "Line": 3
                }
            ],
            "References": null
        },
        "metainfo?metainfo#Forward\u003cMetaInfo\u003e.get_all_transients": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "Forward\u003cMetaInfo\u003e.get_all_transients",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "get_all_impl",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "as_ref",
                    "Line": 1
                }
            ],
            "References": null
        },
        "metainfo?metainfo#Forward\u003cMetaInfo\u003e.get_all_upstreams": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "Forward\u003cMetaInfo\u003e.get_all_upstreams",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "get_all_impl",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "as_ref",
                    "Line": 1
                }
            ],
            "References": null
        },
        "metainfo?metainfo#Forward\u003cMetaInfo\u003e.strip_http_prefix_and_set_persistent": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "Forward\u003cMetaInfo\u003e.strip_http_prefix_and_set_persistent",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "set_impl",
                    "Line": 7
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "as_ref",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cHttpConverter\u003e.remove_persistent_prefix",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "AsRef",
                    "Line": 0
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "Into",
                    "Line": 0
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 0
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter",
                    "Line": 6
                }
            ],
            "References": null
        },
        "metainfo?metainfo#Forward\u003cMetaInfo\u003e.strip_http_prefix_and_set_upstream": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "Forward\u003cMetaInfo\u003e.strip_http_prefix_and_set_upstream",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "set_impl",
                    "Line": 7
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "as_ref",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cHttpConverter\u003e.remove_transient_prefix",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "AsRef",
                    "Line": 0
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "Into",
                    "Line": 0
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 0
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter",
                    "Line": 6
                }
            ],
            "References": null
        },
        "metainfo?metainfo#Forward\u003cMetaInfo\u003e.strip_rpc_prefix_and_set_persistent": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "Forward\u003cMetaInfo\u003e.strip_rpc_prefix_and_set_persistent",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "set_impl",
                    "Line": 7
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "as_ref",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cRpcConverter\u003e.remove_persistent_prefix",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "AsRef",
                    "Line": 0
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "Into",
                    "Line": 0
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 0
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "RpcConverter",
                    "Line": 6
                }
            ],
            "References": null
        },
        "metainfo?metainfo#Forward\u003cMetaInfo\u003e.strip_rpc_prefix_and_set_upstream": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "Forward\u003cMetaInfo\u003e.strip_rpc_prefix_and_set_upstream",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "set_impl",
                    "Line": 7
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "as_ref",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cRpcConverter\u003e.remove_transient_prefix",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "AsRef",
                    "Line": 0
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "Into",
                    "Line": 0
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 0
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "RpcConverter",
                    "Line": 6
                }
            ],
            "References": null
        },
        "metainfo?metainfo#HTTP_PREFIX_BACKWARD": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "HTTP_PREFIX_BACKWARD",
            "Type": "VAR",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cHttpConverter\u003e.add_backward_prefix",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cHttpConverter\u003e.remove_backward_prefix",
                    "Line": 1
                }
            ]
        },
        "metainfo?metainfo#HTTP_PREFIX_PERSISTENT": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "HTTP_PREFIX_PERSISTENT",
            "Type": "VAR",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cHttpConverter\u003e.remove_persistent_prefix",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cHttpConverter\u003e.add_persistent_prefix",
                    "Line": 1
                }
            ]
        },
        "metainfo?metainfo#HTTP_PREFIX_TRANSIENT": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "HTTP_PREFIX_TRANSIENT",
            "Type": "VAR",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cHttpConverter\u003e.remove_transient_prefix",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cHttpConverter\u003e.add_transient_prefix",
                    "Line": 1
                }
            ]
        },
        "metainfo?metainfo#MetaInfo": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "MetaInfo",
            "Type": "TYPE",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 31
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "alloc::sync",
                    "Name": "Arc",
                    "Line": 31
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 32
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap",
                    "Line": 32
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 33
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "ahash@0.8.11",
                    "PkgPath": "ahash::hash_map",
                    "Name": "AHashMap",
                    "Line": 33
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 33
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 33
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 34
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap",
                    "Line": 34
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 38
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "Node",
                    "Line": 38
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 39
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "Node",
                    "Line": 39
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.extend",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.derive",
                    "Line": 6
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo::from_node",
                    "Line": 2
                }
            ]
        },
        "metainfo?metainfo#MetaInfo.clear": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "MetaInfo.clear",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "as_mut",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.clear",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "clear",
                    "Line": 9
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.clear",
                    "Line": 12
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "Node.clear",
                    "Line": 15
                }
            ],
            "References": null
        },
        "metainfo?metainfo#MetaInfo.contains": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "MetaInfo.contains",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "as_ref",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "map",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.contains",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "unwrap_or",
                    "Line": 7
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "alloc::sync",
                    "Name": "as_ref",
                    "Line": 13
                }
            ],
            "References": null
        },
        "metainfo?metainfo#MetaInfo.contains_faststr": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "MetaInfo.contains_faststr",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "as_ref",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "map",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.contains",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "unwrap_or",
                    "Line": 7
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "alloc::sync",
                    "Name": "as_ref",
                    "Line": 13
                }
            ],
            "References": null
        },
        "metainfo?metainfo#MetaInfo.contains_string": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "MetaInfo.contains_string",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "as_ref",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "map",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "contains_key",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "as_ref",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "unwrap_or",
                    "Line": 7
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "alloc::sync",
                    "Name": "as_ref",
                    "Line": 13
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "AsRef",
                    "Line": 2
                }
            ],
            "References": null
        },
        "metainfo?metainfo#MetaInfo.derive": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "MetaInfo.derive",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "alloc::sync",
                    "Name": "new",
                    "Line": 21
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo::from_node",
                    "Line": 23
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "is_none",
                    "Line": 7
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "clone",
                    "Line": 10
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "take",
                    "Line": 19
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "alloc::sync",
                    "Name": "clone",
                    "Line": 23
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "alloc::sync",
                    "Name": "Arc",
                    "Line": 21
                }
            ],
            "References": null
        },
        "metainfo?metainfo#MetaInfo.ensure_backward_node": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "MetaInfo.ensure_backward_node",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "is_none",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "Node",
                    "Line": 2
                }
            ],
            "References": null
        },
        "metainfo?metainfo#MetaInfo.ensure_forward_node": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "MetaInfo.ensure_forward_node",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "is_none",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "Node",
                    "Line": 2
                }
            ],
            "References": null
        },
        "metainfo?metainfo#MetaInfo.extend": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "MetaInfo.extend",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap::with_capacity",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "ahash@0.8.11",
                    "PkgPath": "ahash::hash_map",
                    "Name": "AHashMap::with_capacity",
                    "Line": 12
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap::with_capacity",
                    "Line": 18
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "get_or_insert_with",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.extend",
                    "Line": 7
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "ahash@0.8.11",
                    "PkgPath": "ahash::hash_map",
                    "Name": "Extend\u003cAHashMap\u003e.extend",
                    "Line": 13
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.extend",
                    "Line": 19
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "is_none",
                    "Line": 23
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "as_mut",
                    "Line": 26
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "unwrap",
                    "Line": 26
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "Node.extend",
                    "Line": 26
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "ahash@0.8.11",
                    "PkgPath": "ahash::hash_map",
                    "Name": "AHashMap",
                    "Line": 12
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap",
                    "Line": 18
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "DEFAULT_MAP_SIZE",
                    "Line": 6
                }
            ],
            "References": null
        },
        "metainfo?metainfo#MetaInfo.get": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "MetaInfo.get",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "as_ref",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "and_then",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.get",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "or_else",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "alloc::sync",
                    "Name": "as_ref",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 2
                }
            ],
            "References": null
        },
        "metainfo?metainfo#MetaInfo.get_all_backword_transients_with_prefix": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "MetaInfo.get_all_backword_transients_with_prefix",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "get_all_impl",
                    "Line": 10
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "ahash@0.8.11",
                    "PkgPath": "ahash::hash_map",
                    "Name": "AHashMap::with_capacity",
                    "Line": 15
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "as_ref",
                    "Line": 8
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "len",
                    "Line": 11
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "ahash@0.8.11",
                    "PkgPath": "ahash::hash_map",
                    "Name": "Extend\u003cAHashMap\u003e.extend",
                    "Line": 16
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "iter",
                    "Line": 17
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::iter::traits::iterator",
                    "Name": "map",
                    "Line": 18
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "add_transient_prefix",
                    "Line": 18
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "ahash@0.8.11",
                    "PkgPath": "ahash::hash_map",
                    "Name": "AHashMap",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter",
                    "Line": 6
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Backward\u003cMetaInfo\u003e.get_all_backward_transients_with_rpc_prefix",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Backward\u003cMetaInfo\u003e.get_all_backward_transients_with_http_prefix",
                    "Line": 1
                }
            ]
        },
        "metainfo?metainfo#MetaInfo.get_all_persistents_and_transients": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "MetaInfo.get_all_persistents_and_transients",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "get_all_impl",
                    "Line": 10
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "ahash@0.8.11",
                    "PkgPath": "ahash::hash_map",
                    "Name": "AHashMap::with_capacity",
                    "Line": 17
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "as_ref",
                    "Line": 8
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "map",
                    "Line": 12
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "len",
                    "Line": 12
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "unwrap_or",
                    "Line": 12
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "ahash@0.8.11",
                    "PkgPath": "ahash::hash_map",
                    "Name": "Extend\u003cAHashMap\u003e.extend",
                    "Line": 19
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "iter",
                    "Line": 21
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::iter::traits::iterator",
                    "Name": "map",
                    "Line": 22
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "add_transient_prefix",
                    "Line": 29
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "ahash@0.8.11",
                    "PkgPath": "ahash::hash_map",
                    "Name": "AHashMap",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter",
                    "Line": 6
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward\u003cMetaInfo\u003e.get_all_persistents_and_transients_with_rpc_prefix",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward\u003cMetaInfo\u003e.get_all_persistents_and_transients_with_http_prefix",
                    "Line": 3
                }
            ]
        },
        "metainfo?metainfo#MetaInfo.get_faststr": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "MetaInfo.get_faststr",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "as_ref",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "and_then",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.get",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "or_else",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "alloc::sync",
                    "Name": "as_ref",
                    "Line": 9
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap",
                    "Line": 5
                }
            ],
            "References": null
        },
        "metainfo?metainfo#MetaInfo.get_string": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "MetaInfo.get_string",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "as_ref",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "and_then",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "ahash@0.8.11",
                    "PkgPath": "ahash::hash_map",
                    "Name": "AHashMap.get",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "as_ref",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "or_else",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "alloc::sync",
                    "Name": "as_ref",
                    "Line": 9
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "AsRef",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 2
                }
            ],
            "References": null
        },
        "metainfo?metainfo#MetaInfo.insert": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "MetaInfo.insert",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap::with_capacity",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "get_or_insert_with",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.insert",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::marker",
                    "Name": "Send",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::marker",
                    "Name": "Sync",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "DEFAULT_MAP_SIZE",
                    "Line": 4
                }
            ],
            "References": null
        },
        "metainfo?metainfo#MetaInfo.insert_faststr": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "MetaInfo.insert_faststr",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap::with_capacity",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "get_or_insert_with",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.insert",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::marker",
                    "Name": "Send",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::marker",
                    "Name": "Sync",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "DEFAULT_MAP_SIZE",
                    "Line": 4
                }
            ],
            "References": null
        },
        "metainfo?metainfo#MetaInfo.insert_string": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "MetaInfo.insert_string",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "ahash@0.8.11",
                    "PkgPath": "ahash::hash_map",
                    "Name": "AHashMap::with_capacity",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "get_or_insert_with",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "ahash@0.8.11",
                    "PkgPath": "ahash::hash_map",
                    "Name": "AHashMap.insert",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "ahash@0.8.11",
                    "PkgPath": "ahash::hash_map",
                    "Name": "AHashMap",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "DEFAULT_MAP_SIZE",
                    "Line": 4
                }
            ],
            "References": null
        },
        "metainfo?metainfo#MetaInfo.remove": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "MetaInfo.remove",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "as_mut",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "and_then",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.remove",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 3
                }
            ],
            "References": null
        },
        "metainfo?metainfo#MetaInfo.remove_faststr": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "MetaInfo.remove_faststr",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "as_mut",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "and_then",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.remove",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 3
                }
            ],
            "References": null
        },
        "metainfo?metainfo#MetaInfo.remove_string": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "MetaInfo.remove_string",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "as_mut",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "and_then",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "ahash@0.8.11",
                    "PkgPath": "ahash::hash_map",
                    "Name": "AHashMap.remove",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "as_ref",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "AsRef",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 3
                }
            ],
            "References": null
        },
        "metainfo?metainfo#MetaInfo::from_node": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "MetaInfo::from_node",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "alloc::sync",
                    "Name": "Arc",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "Node",
                    "Line": 3
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.derive",
                    "Line": 23
                }
            ]
        },
        "metainfo?metainfo#RPC_PREFIX_BACKWARD": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "RPC_PREFIX_BACKWARD",
            "Type": "VAR",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cRpcConverter\u003e.add_backward_prefix",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cRpcConverter\u003e.remove_backward_prefix",
                    "Line": 1
                }
            ]
        },
        "metainfo?metainfo#RPC_PREFIX_PERSISTENT": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "RPC_PREFIX_PERSISTENT",
            "Type": "VAR",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cRpcConverter\u003e.remove_persistent_prefix",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cRpcConverter\u003e.add_persistent_prefix",
                    "Line": 1
                }
            ]
        },
        "metainfo?metainfo#RPC_PREFIX_TRANSIENT": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "RPC_PREFIX_TRANSIENT",
            "Type": "VAR",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cRpcConverter\u003e.add_transient_prefix",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cRpcConverter\u003e.remove_transient_prefix",
                    "Line": 1
                }
            ]
        },
        "metainfo?metainfo#del_impl": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "del_impl",
            "Type": "FUNC",
            "Dependencies": null,
            "References": null
        },
        "metainfo?metainfo#get_impl": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "get_impl",
            "Type": "FUNC",
            "Dependencies": null,
            "References": null
        },
        "metainfo?metainfo#set_impl": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo",
            "Name": "set_impl",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward\u003cMetaInfo\u003e.strip_rpc_prefix_and_set_upstream",
                    "Line": 7
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward\u003cMetaInfo\u003e.strip_http_prefix_and_set_persistent",
                    "Line": 7
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward\u003cMetaInfo\u003e.strip_rpc_prefix_and_set_persistent",
                    "Line": 7
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward\u003cMetaInfo\u003e.strip_http_prefix_and_set_upstream",
                    "Line": 7
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Backward\u003cMetaInfo\u003e.strip_rpc_prefix_and_set_backward_downstream",
                    "Line": 7
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Backward\u003cMetaInfo\u003e.strip_http_prefix_and_set_backward_downstream",
                    "Line": 7
                }
            ]
        },
        "metainfo?metainfo::backward#Backward": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::backward",
            "Name": "Backward",
            "Type": "TYPE",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "AsRef",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "AsRef",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "ahash@0.8.11",
                    "PkgPath": "ahash::hash_map",
                    "Name": "AHashMap",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "ahash@0.8.11",
                    "PkgPath": "ahash::hash_map",
                    "Name": "AHashMap",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 8
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "ahash@0.8.11",
                    "PkgPath": "ahash::hash_map",
                    "Name": "AHashMap",
                    "Line": 8
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 8
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 8
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 9
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "ahash@0.8.11",
                    "PkgPath": "ahash::hash_map",
                    "Name": "AHashMap",
                    "Line": 9
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 9
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 9
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "Into",
                    "Line": 11
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 11
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "Into",
                    "Line": 11
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 11
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "Into",
                    "Line": 12
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 12
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "Into",
                    "Line": 12
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 12
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "AsRef",
                    "Line": 14
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "Into",
                    "Line": 14
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 14
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "AsRef",
                    "Line": 20
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "Into",
                    "Line": 20
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 20
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "AsRef",
                    "Line": 26
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 26
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 26
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "AsRef",
                    "Line": 27
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 27
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 27
                }
            ],
            "References": null
        },
        "metainfo?metainfo::convert#Converter": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::convert",
            "Name": "Converter",
            "Type": "TYPE",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 7
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 7
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 8
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 8
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_all_backword_transients_with_prefix",
                    "Line": 6
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_all_persistents_and_transients",
                    "Line": 6
                }
            ]
        },
        "metainfo?metainfo::convert#Converter\u003cHttpConverter\u003e.add_backward_prefix": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::convert",
            "Name": "Converter\u003cHttpConverter\u003e.add_backward_prefix",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.add_prefix_and_to_http_format",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "HTTP_PREFIX_BACKWARD",
                    "Line": 1
                }
            ],
            "References": null
        },
        "metainfo?metainfo::convert#Converter\u003cHttpConverter\u003e.add_persistent_prefix": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::convert",
            "Name": "Converter\u003cHttpConverter\u003e.add_persistent_prefix",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.add_prefix_and_to_http_format",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 0
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "HTTP_PREFIX_PERSISTENT",
                    "Line": 1
                }
            ],
            "References": null
        },
        "metainfo?metainfo::convert#Converter\u003cHttpConverter\u003e.add_transient_prefix": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::convert",
            "Name": "Converter\u003cHttpConverter\u003e.add_transient_prefix",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.add_prefix_and_to_http_format",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "HTTP_PREFIX_TRANSIENT",
                    "Line": 1
                }
            ],
            "References": null
        },
        "metainfo?metainfo::convert#Converter\u003cHttpConverter\u003e.remove_backward_prefix": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::convert",
            "Name": "Converter\u003cHttpConverter\u003e.remove_backward_prefix",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.remove_prefix_and_to_rpc_format",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "HTTP_PREFIX_BACKWARD",
                    "Line": 1
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Backward\u003cMetaInfo\u003e.strip_http_prefix_and_set_backward_downstream",
                    "Line": 6
                }
            ]
        },
        "metainfo?metainfo::convert#Converter\u003cHttpConverter\u003e.remove_persistent_prefix": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::convert",
            "Name": "Converter\u003cHttpConverter\u003e.remove_persistent_prefix",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.remove_prefix_and_to_rpc_format",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 0
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 0
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "HTTP_PREFIX_PERSISTENT",
                    "Line": 1
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward\u003cMetaInfo\u003e.strip_http_prefix_and_set_persistent",
                    "Line": 6
                }
            ]
        },
        "metainfo?metainfo::convert#Converter\u003cHttpConverter\u003e.remove_transient_prefix": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::convert",
            "Name": "Converter\u003cHttpConverter\u003e.remove_transient_prefix",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.remove_prefix_and_to_rpc_format",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 0
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 0
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "HTTP_PREFIX_TRANSIENT",
                    "Line": 1
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward\u003cMetaInfo\u003e.strip_http_prefix_and_set_upstream",
                    "Line": 6
                }
            ]
        },
        "metainfo?metainfo::convert#Converter\u003cRpcConverter\u003e.add_backward_prefix": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::convert",
            "Name": "Converter\u003cRpcConverter\u003e.add_backward_prefix",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "RpcConverter.add_prefix",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "RPC_PREFIX_BACKWARD",
                    "Line": 1
                }
            ],
            "References": null
        },
        "metainfo?metainfo::convert#Converter\u003cRpcConverter\u003e.add_persistent_prefix": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::convert",
            "Name": "Converter\u003cRpcConverter\u003e.add_persistent_prefix",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "RpcConverter.add_prefix",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "RPC_PREFIX_PERSISTENT",
                    "Line": 1
                }
            ],
            "References": null
        },
        "metainfo?metainfo::convert#Converter\u003cRpcConverter\u003e.add_transient_prefix": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::convert",
            "Name": "Converter\u003cRpcConverter\u003e.add_transient_prefix",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "RpcConverter.add_prefix",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "RPC_PREFIX_TRANSIENT",
                    "Line": 1
                }
            ],
            "References": null
        },
        "metainfo?metainfo::convert#Converter\u003cRpcConverter\u003e.remove_backward_prefix": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::convert",
            "Name": "Converter\u003cRpcConverter\u003e.remove_backward_prefix",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "RpcConverter.remove_prefix",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "RPC_PREFIX_BACKWARD",
                    "Line": 1
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Backward\u003cMetaInfo\u003e.strip_rpc_prefix_and_set_backward_downstream",
                    "Line": 6
                }
            ]
        },
        "metainfo?metainfo::convert#Converter\u003cRpcConverter\u003e.remove_persistent_prefix": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::convert",
            "Name": "Converter\u003cRpcConverter\u003e.remove_persistent_prefix",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "RpcConverter.remove_prefix",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "RPC_PREFIX_PERSISTENT",
                    "Line": 1
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward\u003cMetaInfo\u003e.strip_rpc_prefix_and_set_persistent",
                    "Line": 6
                }
            ]
        },
        "metainfo?metainfo::convert#Converter\u003cRpcConverter\u003e.remove_transient_prefix": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::convert",
            "Name": "Converter\u003cRpcConverter\u003e.remove_transient_prefix",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "RpcConverter.remove_prefix",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "RPC_PREFIX_TRANSIENT",
                    "Line": 1
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward\u003cMetaInfo\u003e.strip_rpc_prefix_and_set_upstream",
                    "Line": 6
                }
            ]
        },
        "metainfo?metainfo::convert#HttpConverter": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::convert",
            "Name": "HttpConverter",
            "Type": "TYPE",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward\u003cMetaInfo\u003e.strip_http_prefix_and_set_persistent",
                    "Line": 6
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward\u003cMetaInfo\u003e.strip_http_prefix_and_set_upstream",
                    "Line": 6
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Backward\u003cMetaInfo\u003e.get_all_backward_transients_with_http_prefix",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward\u003cMetaInfo\u003e.get_all_persistents_and_transients_with_http_prefix",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Backward\u003cMetaInfo\u003e.strip_http_prefix_and_set_backward_downstream",
                    "Line": 6
                }
            ]
        },
        "metainfo?metainfo::convert#HttpConverter.add_prefix_and_to_http_format": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::convert",
            "Name": "HttpConverter.add_prefix_and_to_http_format",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "alloc::string",
                    "Name": "with_capacity",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr::from_string",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::str",
                    "Name": "len",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "alloc::string",
                    "Name": "push_str",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.to_http_format",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "alloc::string",
                    "Name": "String",
                    "Line": 2
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cHttpConverter\u003e.add_backward_prefix",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cHttpConverter\u003e.add_persistent_prefix",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cHttpConverter\u003e.add_transient_prefix",
                    "Line": 1
                }
            ]
        },
        "metainfo?metainfo::convert#HttpConverter.remove_prefix_and_to_rpc_format": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::convert",
            "Name": "HttpConverter.remove_prefix_and_to_rpc_format",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "alloc::string",
                    "Name": "with_capacity",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr::from_string",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::str",
                    "Name": "strip_prefix",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::str",
                    "Name": "len",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.to_rpc_format",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "alloc::string",
                    "Name": "String",
                    "Line": 3
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cHttpConverter\u003e.remove_persistent_prefix",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cHttpConverter\u003e.remove_transient_prefix",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cHttpConverter\u003e.remove_backward_prefix",
                    "Line": 1
                }
            ]
        },
        "metainfo?metainfo::convert#HttpConverter.to_http_format": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::convert",
            "Name": "HttpConverter.to_http_format",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::str",
                    "Name": "chars",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::char::methods",
                    "Name": "to_ascii_lowercase",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "alloc::string",
                    "Name": "push",
                    "Line": 9
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "alloc::string",
                    "Name": "String",
                    "Line": 2
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.add_prefix_and_to_http_format",
                    "Line": 4
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.to_http_format_string",
                    "Line": 2
                }
            ]
        },
        "metainfo?metainfo::convert#HttpConverter.to_http_format_string": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::convert",
            "Name": "HttpConverter.to_http_format_string",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "alloc::string",
                    "Name": "with_capacity",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::str",
                    "Name": "len",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.to_http_format",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "alloc::string",
                    "Name": "String",
                    "Line": 0
                }
            ],
            "References": null
        },
        "metainfo?metainfo::convert#HttpConverter.to_rpc_format": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::convert",
            "Name": "HttpConverter.to_rpc_format",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::str",
                    "Name": "chars",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::char::methods",
                    "Name": "to_ascii_uppercase",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "alloc::string",
                    "Name": "push",
                    "Line": 9
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "alloc::string",
                    "Name": "String",
                    "Line": 2
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.to_rpc_format_string",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.remove_prefix_and_to_rpc_format",
                    "Line": 4
                }
            ]
        },
        "metainfo?metainfo::convert#HttpConverter.to_rpc_format_string": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::convert",
            "Name": "HttpConverter.to_rpc_format_string",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "alloc::string",
                    "Name": "with_capacity",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::str",
                    "Name": "len",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "HttpConverter.to_rpc_format",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "alloc::string",
                    "Name": "String",
                    "Line": 0
                }
            ],
            "References": null
        },
        "metainfo?metainfo::convert#RpcConverter": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::convert",
            "Name": "RpcConverter",
            "Type": "TYPE",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Backward\u003cMetaInfo\u003e.get_all_backward_transients_with_rpc_prefix",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward\u003cMetaInfo\u003e.strip_rpc_prefix_and_set_upstream",
                    "Line": 6
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward\u003cMetaInfo\u003e.strip_rpc_prefix_and_set_persistent",
                    "Line": 6
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward\u003cMetaInfo\u003e.get_all_persistents_and_transients_with_rpc_prefix",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Backward\u003cMetaInfo\u003e.strip_rpc_prefix_and_set_backward_downstream",
                    "Line": 6
                }
            ]
        },
        "metainfo?metainfo::convert#RpcConverter.add_prefix": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::convert",
            "Name": "RpcConverter.add_prefix",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "alloc::string",
                    "Name": "with_capacity",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr::from_string",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::str",
                    "Name": "len",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "alloc::string",
                    "Name": "push_str",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "alloc::string",
                    "Name": "String",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 5
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cRpcConverter\u003e.add_transient_prefix",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cRpcConverter\u003e.add_persistent_prefix",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cRpcConverter\u003e.add_backward_prefix",
                    "Line": 1
                }
            ]
        },
        "metainfo?metainfo::convert#RpcConverter.remove_prefix": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::convert",
            "Name": "RpcConverter.remove_prefix",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr::from_string",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::str",
                    "Name": "strip_prefix",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "alloc::str",
                    "Name": "to_owned",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 1
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cRpcConverter\u003e.remove_transient_prefix",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cRpcConverter\u003e.remove_persistent_prefix",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::convert",
                    "Name": "Converter\u003cRpcConverter\u003e.remove_backward_prefix",
                    "Line": 1
                }
            ]
        },
        "metainfo?metainfo::convert#add_transient_prefix": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::convert",
            "Name": "add_transient_prefix",
            "Type": "UNKNOWN",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_all_backword_transients_with_prefix",
                    "Line": 18
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_all_persistents_and_transients",
                    "Line": 29
                }
            ]
        },
        "metainfo?metainfo::faststr_map#FastStrMap": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::faststr_map",
            "Name": "FastStrMap",
            "Type": "TYPE",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "rustc-hash@2.0.0",
                    "PkgPath": "rustc-hash::random_state",
                    "Name": "FxHashMapRand",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::any",
                    "Name": "TypeId",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 5
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.extend",
                    "Line": 18
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.insert_faststr",
                    "Line": 4
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_faststr",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo",
                    "Line": 34
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.extend",
                    "Line": 1
                }
            ]
        },
        "metainfo?metainfo::faststr_map#FastStrMap.capacity": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::faststr_map",
            "Name": "FastStrMap.capacity",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "capacity",
                    "Line": 2
                }
            ],
            "References": null
        },
        "metainfo?metainfo::faststr_map#FastStrMap.clear": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::faststr_map",
            "Name": "FastStrMap.clear",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "clear",
                    "Line": 2
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.clear",
                    "Line": 12
                }
            ]
        },
        "metainfo?metainfo::faststr_map#FastStrMap.contains": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::faststr_map",
            "Name": "FastStrMap.contains",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::any",
                    "Name": "of",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "contains_key",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::any",
                    "Name": "TypeId",
                    "Line": 2
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.contains_faststr",
                    "Line": 6
                }
            ]
        },
        "metainfo?metainfo::faststr_map#FastStrMap.entry": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::faststr_map",
            "Name": "FastStrMap.entry",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::any",
                    "Name": "of",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "entry",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::any",
                    "Name": "TypeId",
                    "Line": 2
                }
            ],
            "References": null
        },
        "metainfo?metainfo::faststr_map#FastStrMap.extend": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::faststr_map",
            "Name": "FastStrMap.extend",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "extend",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap",
                    "Line": 1
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.extend",
                    "Line": 19
                }
            ]
        },
        "metainfo?metainfo::faststr_map#FastStrMap.get": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::faststr_map",
            "Name": "FastStrMap.get",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::any",
                    "Name": "of",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "get",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::any",
                    "Name": "TypeId",
                    "Line": 2
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_faststr",
                    "Line": 5
                }
            ]
        },
        "metainfo?metainfo::faststr_map#FastStrMap.get_mut": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::faststr_map",
            "Name": "FastStrMap.get_mut",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::any",
                    "Name": "of",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "get_mut",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::any",
                    "Name": "TypeId",
                    "Line": 2
                }
            ],
            "References": null
        },
        "metainfo?metainfo::faststr_map#FastStrMap.insert": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::faststr_map",
            "Name": "FastStrMap.insert",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::any",
                    "Name": "of",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "insert",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::marker",
                    "Name": "Send",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::marker",
                    "Name": "Sync",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::any",
                    "Name": "TypeId",
                    "Line": 2
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.insert_faststr",
                    "Line": 5
                }
            ]
        },
        "metainfo?metainfo::faststr_map#FastStrMap.is_empty": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::faststr_map",
            "Name": "FastStrMap.is_empty",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "is_empty",
                    "Line": 2
                }
            ],
            "References": null
        },
        "metainfo?metainfo::faststr_map#FastStrMap.iter": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::faststr_map",
            "Name": "FastStrMap.iter",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "iter",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "Iter",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::any",
                    "Name": "TypeId",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 1
                }
            ],
            "References": null
        },
        "metainfo?metainfo::faststr_map#FastStrMap.len": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::faststr_map",
            "Name": "FastStrMap.len",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "len",
                    "Line": 2
                }
            ],
            "References": null
        },
        "metainfo?metainfo::faststr_map#FastStrMap.remove": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::faststr_map",
            "Name": "FastStrMap.remove",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::any",
                    "Name": "of",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "remove",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::any",
                    "Name": "TypeId",
                    "Line": 2
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.remove_faststr",
                    "Line": 6
                }
            ]
        },
        "metainfo?metainfo::faststr_map#FastStrMap::with_capacity": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::faststr_map",
            "Name": "FastStrMap::with_capacity",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "with_capacity_and_hasher",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "rustc-hash@2.0.0",
                    "PkgPath": "rustc-hash::random_state",
                    "Name": "Default\u003cFxRandomState\u003e::default",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "rustc-hash@2.0.0",
                    "PkgPath": "rustc-hash::random_state",
                    "Name": "FxHashMapRand",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::default",
                    "Name": "Default",
                    "Line": 3
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.extend",
                    "Line": 18
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.insert_faststr",
                    "Line": 4
                }
            ]
        },
        "metainfo?metainfo::forward#Forward": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::forward",
            "Name": "Forward",
            "Type": "TYPE",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "AsRef",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "AsRef",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "AsRef",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "ahash@0.8.11",
                    "PkgPath": "ahash::hash_map",
                    "Name": "AHashMap",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "ahash@0.8.11",
                    "PkgPath": "ahash::hash_map",
                    "Name": "AHashMap",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 7
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "ahash@0.8.11",
                    "PkgPath": "ahash::hash_map",
                    "Name": "AHashMap",
                    "Line": 7
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 7
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 7
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 11
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "ahash@0.8.11",
                    "PkgPath": "ahash::hash_map",
                    "Name": "AHashMap",
                    "Line": 11
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 11
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 11
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 14
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "ahash@0.8.11",
                    "PkgPath": "ahash::hash_map",
                    "Name": "AHashMap",
                    "Line": 14
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 14
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 14
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "Into",
                    "Line": 16
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 16
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "Into",
                    "Line": 16
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 16
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "Into",
                    "Line": 17
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 17
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "Into",
                    "Line": 17
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 17
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "Into",
                    "Line": 18
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 18
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "Into",
                    "Line": 18
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 18
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "AsRef",
                    "Line": 20
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "Into",
                    "Line": 20
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 20
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "AsRef",
                    "Line": 25
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "Into",
                    "Line": 25
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 25
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "AsRef",
                    "Line": 31
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "Into",
                    "Line": 31
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 31
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "AsRef",
                    "Line": 36
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "Into",
                    "Line": 36
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 36
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "AsRef",
                    "Line": 42
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 42
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 42
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "AsRef",
                    "Line": 43
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 43
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 43
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::convert",
                    "Name": "AsRef",
                    "Line": 44
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 44
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 44
                }
            ],
            "References": null
        },
        "metainfo?metainfo::kv#DEFAULT_CAPACITY": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::kv",
            "Name": "DEFAULT_CAPACITY",
            "Type": "VAR",
            "Dependencies": null,
            "References": null
        },
        "metainfo?metainfo::kv#Node": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::kv",
            "Name": "Node",
            "Type": "TYPE",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "ahash@0.8.11",
                    "PkgPath": "ahash::hash_map",
                    "Name": "AHashMap",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "ahash@0.8.11",
                    "PkgPath": "ahash::hash_map",
                    "Name": "AHashMap",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "ahash@0.8.11",
                    "PkgPath": "ahash::hash_map",
                    "Name": "AHashMap",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "faststr@0.2.19",
                    "PkgPath": "faststr",
                    "Name": "FastStr",
                    "Line": 5
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.ensure_backward_node",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.ensure_forward_node",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo::from_node",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo",
                    "Line": 38
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo",
                    "Line": 39
                }
            ]
        },
        "metainfo?metainfo::kv#Node.clear": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::kv",
            "Name": "Node.clear",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "as_mut",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "clear",
                    "Line": 2
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.clear",
                    "Line": 15
                }
            ]
        },
        "metainfo?metainfo::kv#Node.extend": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::kv",
            "Name": "Node.extend",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "is_none",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "as_mut",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "unwrap",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "ahash@0.8.11",
                    "PkgPath": "ahash::hash_map",
                    "Name": "Extend\u003cAHashMap\u003e.extend",
                    "Line": 5
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.extend",
                    "Line": 26
                }
            ]
        },
        "metainfo?metainfo::kv#del_impl": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::kv",
            "Name": "del_impl",
            "Type": "FUNC",
            "Dependencies": null,
            "References": null
        },
        "metainfo?metainfo::kv#get_all_impl": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::kv",
            "Name": "get_all_impl",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward\u003cMetaInfo\u003e.get_all_persistents",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward\u003cMetaInfo\u003e.get_all_transients",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Backward\u003cMetaInfo\u003e.get_all_backward_downstreams",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Forward\u003cMetaInfo\u003e.get_all_upstreams",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "Backward\u003cMetaInfo\u003e.get_all_backward_transients",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_all_backword_transients_with_prefix",
                    "Line": 10
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_all_persistents_and_transients",
                    "Line": 10
                }
            ]
        },
        "metainfo?metainfo::kv#get_impl": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::kv",
            "Name": "get_impl",
            "Type": "FUNC",
            "Dependencies": null,
            "References": null
        },
        "metainfo?metainfo::kv#set_impl": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::kv",
            "Name": "set_impl",
            "Type": "FUNC",
            "Dependencies": null,
            "References": null
        },
        "metainfo?metainfo::type_map#AnyObject": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::type_map",
            "Name": "AnyObject",
            "Type": "TYPE",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "alloc::boxed",
                    "Name": "Box",
                    "Line": 0
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::any",
                    "Name": "Any",
                    "Line": 0
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::marker",
                    "Name": "Send",
                    "Line": 0
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::marker",
                    "Name": "Sync",
                    "Line": 0
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.iter",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap",
                    "Line": 2
                }
            ]
        },
        "metainfo?metainfo::type_map#Entry": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::type_map",
            "Name": "Entry",
            "Type": "TYPE",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "Entry",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "AnyObject",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::marker",
                    "Name": "PhantomData",
                    "Line": 2
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry.and_modify",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.entry",
                    "Line": 1
                }
            ]
        },
        "metainfo?metainfo::type_map#Entry.and_modify": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::type_map",
            "Name": "Entry.and_modify",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "and_modify",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::any",
                    "Name": "downcast_mut",
                    "Line": 7
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "unwrap",
                    "Line": 7
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::ops::function",
                    "Name": "FnOnce",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::marker",
                    "Name": "Send",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::marker",
                    "Name": "Sync",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::marker",
                    "Name": "PhantomData",
                    "Line": 9
                }
            ],
            "References": null
        },
        "metainfo?metainfo::type_map#Entry.or_default": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::type_map",
            "Name": "Entry.or_default",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::default",
                    "Name": "default",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry.or_insert_with",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::default",
                    "Name": "Default",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::marker",
                    "Name": "Send",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::marker",
                    "Name": "Sync",
                    "Line": 4
                }
            ],
            "References": null
        },
        "metainfo?metainfo::type_map#Entry.or_insert": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::type_map",
            "Name": "Entry.or_insert",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "alloc::boxed",
                    "Name": "new",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "or_insert_with",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::any",
                    "Name": "downcast_mut",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "unwrap",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::marker",
                    "Name": "Send",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::marker",
                    "Name": "Sync",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "alloc::boxed",
                    "Name": "Box",
                    "Line": 5
                }
            ],
            "References": null
        },
        "metainfo?metainfo::type_map#Entry.or_insert_with": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::type_map",
            "Name": "Entry.or_insert_with",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "alloc::boxed",
                    "Name": "new",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "or_insert_with",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::any",
                    "Name": "downcast_mut",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "unwrap",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::ops::function",
                    "Name": "FnOnce",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::marker",
                    "Name": "Send",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::marker",
                    "Name": "Sync",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "alloc::boxed",
                    "Name": "Box",
                    "Line": 5
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry.or_default",
                    "Line": 6
                }
            ]
        },
        "metainfo?metainfo::type_map#Entry.or_insert_with_key": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::type_map",
            "Name": "Entry.or_insert_with_key",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "alloc::boxed",
                    "Name": "new",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "or_insert_with_key",
                    "Line": 5
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::any",
                    "Name": "downcast_mut",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "unwrap",
                    "Line": 6
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::ops::function",
                    "Name": "FnOnce",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::marker",
                    "Name": "Send",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::marker",
                    "Name": "Sync",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "alloc::boxed",
                    "Name": "Box",
                    "Line": 5
                }
            ],
            "References": null
        },
        "metainfo?metainfo::type_map#TypeMap": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::type_map",
            "Name": "TypeMap",
            "Type": "TYPE",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "rustc-hash@2.0.0",
                    "PkgPath": "rustc-hash::random_state",
                    "Name": "FxHashMapRand",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::any",
                    "Name": "TypeId",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "AnyObject",
                    "Line": 2
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.extend",
                    "Line": 6
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.insert",
                    "Line": 4
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo",
                    "Line": 32
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.extend",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap::with_capacity",
                    "Line": 2
                }
            ]
        },
        "metainfo?metainfo::type_map#TypeMap.capacity": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::type_map",
            "Name": "TypeMap.capacity",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "capacity",
                    "Line": 2
                }
            ],
            "References": null
        },
        "metainfo?metainfo::type_map#TypeMap.clear": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::type_map",
            "Name": "TypeMap.clear",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "clear",
                    "Line": 2
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.clear",
                    "Line": 6
                }
            ]
        },
        "metainfo?metainfo::type_map#TypeMap.contains": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::type_map",
            "Name": "TypeMap.contains",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::any",
                    "Name": "of",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "contains_key",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::any",
                    "Name": "TypeId",
                    "Line": 2
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.contains",
                    "Line": 6
                }
            ]
        },
        "metainfo?metainfo::type_map#TypeMap.entry": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::type_map",
            "Name": "TypeMap.entry",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::any",
                    "Name": "of",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "entry",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::any",
                    "Name": "TypeId",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::marker",
                    "Name": "PhantomData",
                    "Line": 4
                }
            ],
            "References": null
        },
        "metainfo?metainfo::type_map#TypeMap.extend": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::type_map",
            "Name": "TypeMap.extend",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "extend",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap",
                    "Line": 1
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.extend",
                    "Line": 7
                }
            ]
        },
        "metainfo?metainfo::type_map#TypeMap.get": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::type_map",
            "Name": "TypeMap.get",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::any",
                    "Name": "of",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "get",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "and_then",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::any",
                    "Name": "downcast_ref",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::any",
                    "Name": "TypeId",
                    "Line": 3
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get",
                    "Line": 3
                }
            ]
        },
        "metainfo?metainfo::type_map#TypeMap.get_mut": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::type_map",
            "Name": "TypeMap.get_mut",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::any",
                    "Name": "of",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "get_mut",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "and_then",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::any",
                    "Name": "downcast_mut",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::any",
                    "Name": "TypeId",
                    "Line": 3
                }
            ],
            "References": null
        },
        "metainfo?metainfo::type_map#TypeMap.insert": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::type_map",
            "Name": "TypeMap.insert",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::any",
                    "Name": "of",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "alloc::boxed",
                    "Name": "new",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "insert",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::marker",
                    "Name": "Send",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::marker",
                    "Name": "Sync",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::any",
                    "Name": "TypeId",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "alloc::boxed",
                    "Name": "Box",
                    "Line": 2
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.insert",
                    "Line": 5
                }
            ]
        },
        "metainfo?metainfo::type_map#TypeMap.is_empty": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::type_map",
            "Name": "TypeMap.is_empty",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "is_empty",
                    "Line": 2
                }
            ],
            "References": null
        },
        "metainfo?metainfo::type_map#TypeMap.iter": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::type_map",
            "Name": "TypeMap.iter",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "iter",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "Iter",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::any",
                    "Name": "TypeId",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "AnyObject",
                    "Line": 1
                }
            ],
            "References": null
        },
        "metainfo?metainfo::type_map#TypeMap.len": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::type_map",
            "Name": "TypeMap.len",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "len",
                    "Line": 2
                }
            ],
            "References": null
        },
        "metainfo?metainfo::type_map#TypeMap.remove": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::type_map",
            "Name": "TypeMap.remove",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::any",
                    "Name": "of",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "remove",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "and_then",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "alloc::boxed::convert",
                    "Name": "downcast",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::result",
                    "Name": "ok",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "map",
                    "Line": 4
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::option",
                    "Name": "Option",
                    "Line": 1
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::any",
                    "Name": "TypeId",
                    "Line": 3
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.remove",
                    "Line": 4
                }
            ]
        },
        "metainfo?metainfo::type_map#TypeMap::with_capacity": {
            "ModPath": "metainfo",
            "PkgPath": "metainfo::type_map",
            "Name": "TypeMap::with_capacity",
            "Type": "FUNC",
            "Dependencies": [
                {
                    "Kind": "Dependency",
                    "ModPath": "std",
                    "PkgPath": "std::collections::hash::map",
                    "Name": "with_capacity_and_hasher",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "rustc-hash@2.0.0",
                    "PkgPath": "rustc-hash::random_state",
                    "Name": "Default\u003cFxRandomState\u003e::default",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap",
                    "Line": 2
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "rustc-hash@2.0.0",
                    "PkgPath": "rustc-hash::random_state",
                    "Name": "FxHashMapRand",
                    "Line": 3
                },
                {
                    "Kind": "Dependency",
                    "ModPath": "",
                    "PkgPath": "core::default",
                    "Name": "Default",
                    "Line": 3
                }
            ],
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.extend",
                    "Line": 6
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.insert",
                    "Line": 4
                }
            ]
        },
        "rustc-hash@2.0.0?rustc-hash::random_state#Default\u003cFxRandomState\u003e::default": {
            "ModPath": "rustc-hash@2.0.0",
            "PkgPath": "rustc-hash::random_state",
            "Name": "Default\u003cFxRandomState\u003e::default",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap::with_capacity",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap::with_capacity",
                    "Line": 3
                }
            ]
        },
        "rustc-hash@2.0.0?rustc-hash::random_state#FxHashMapRand": {
            "ModPath": "rustc-hash@2.0.0",
            "PkgPath": "rustc-hash::random_state",
            "Name": "FxHashMapRand",
            "Type": "TYPE",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap::with_capacity",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap::with_capacity",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap",
                    "Line": 2
                }
            ]
        },
        "std?std::collections::hash::map#Entry": {
            "ModPath": "std",
            "PkgPath": "std::collections::hash::map",
            "Name": "Entry",
            "Type": "TYPE",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry",
                    "Line": 1
                }
            ]
        },
        "std?std::collections::hash::map#Iter": {
            "ModPath": "std",
            "PkgPath": "std::collections::hash::map",
            "Name": "Iter",
            "Type": "TYPE",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.iter",
                    "Line": 1
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.iter",
                    "Line": 1
                }
            ]
        },
        "std?std::collections::hash::map#and_modify": {
            "ModPath": "std",
            "PkgPath": "std::collections::hash::map",
            "Name": "and_modify",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry.and_modify",
                    "Line": 6
                }
            ]
        },
        "std?std::collections::hash::map#capacity": {
            "ModPath": "std",
            "PkgPath": "std::collections::hash::map",
            "Name": "capacity",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.capacity",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.capacity",
                    "Line": 2
                }
            ]
        },
        "std?std::collections::hash::map#clear": {
            "ModPath": "std",
            "PkgPath": "std::collections::hash::map",
            "Name": "clear",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.clear",
                    "Line": 9
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.clear",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::kv",
                    "Name": "Node.clear",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.clear",
                    "Line": 2
                }
            ]
        },
        "std?std::collections::hash::map#contains_key": {
            "ModPath": "std",
            "PkgPath": "std::collections::hash::map",
            "Name": "contains_key",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.contains_string",
                    "Line": 6
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.contains",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.contains",
                    "Line": 2
                }
            ]
        },
        "std?std::collections::hash::map#entry": {
            "ModPath": "std",
            "PkgPath": "std::collections::hash::map",
            "Name": "entry",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.entry",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.entry",
                    "Line": 3
                }
            ]
        },
        "std?std::collections::hash::map#extend": {
            "ModPath": "std",
            "PkgPath": "std::collections::hash::map",
            "Name": "extend",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.extend",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.extend",
                    "Line": 2
                }
            ]
        },
        "std?std::collections::hash::map#get": {
            "ModPath": "std",
            "PkgPath": "std::collections::hash::map",
            "Name": "get",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.get",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.get",
                    "Line": 3
                }
            ]
        },
        "std?std::collections::hash::map#get_mut": {
            "ModPath": "std",
            "PkgPath": "std::collections::hash::map",
            "Name": "get_mut",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.get_mut",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.get_mut",
                    "Line": 3
                }
            ]
        },
        "std?std::collections::hash::map#insert": {
            "ModPath": "std",
            "PkgPath": "std::collections::hash::map",
            "Name": "insert",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.insert",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.insert",
                    "Line": 2
                }
            ]
        },
        "std?std::collections::hash::map#is_empty": {
            "ModPath": "std",
            "PkgPath": "std::collections::hash::map",
            "Name": "is_empty",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.is_empty",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.is_empty",
                    "Line": 2
                }
            ]
        },
        "std?std::collections::hash::map#iter": {
            "ModPath": "std",
            "PkgPath": "std::collections::hash::map",
            "Name": "iter",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_all_backword_transients_with_prefix",
                    "Line": 17
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_all_persistents_and_transients",
                    "Line": 21
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.iter",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.iter",
                    "Line": 2
                }
            ]
        },
        "std?std::collections::hash::map#len": {
            "ModPath": "std",
            "PkgPath": "std::collections::hash::map",
            "Name": "len",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_all_backword_transients_with_prefix",
                    "Line": 11
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo",
                    "Name": "MetaInfo.get_all_persistents_and_transients",
                    "Line": 12
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.len",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.len",
                    "Line": 2
                }
            ]
        },
        "std?std::collections::hash::map#or_insert_with": {
            "ModPath": "std",
            "PkgPath": "std::collections::hash::map",
            "Name": "or_insert_with",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry.or_insert",
                    "Line": 5
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry.or_insert_with",
                    "Line": 5
                }
            ]
        },
        "std?std::collections::hash::map#or_insert_with_key": {
            "ModPath": "std",
            "PkgPath": "std::collections::hash::map",
            "Name": "or_insert_with_key",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "Entry.or_insert_with_key",
                    "Line": 5
                }
            ]
        },
        "std?std::collections::hash::map#remove": {
            "ModPath": "std",
            "PkgPath": "std::collections::hash::map",
            "Name": "remove",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap.remove",
                    "Line": 2
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap.remove",
                    "Line": 3
                }
            ]
        },
        "std?std::collections::hash::map#with_capacity_and_hasher": {
            "ModPath": "std",
            "PkgPath": "std::collections::hash::map",
            "Name": "with_capacity_and_hasher",
            "Type": "FUNC",
            "Dependencies": null,
            "References": [
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::faststr_map",
                    "Name": "FastStrMap::with_capacity",
                    "Line": 3
                },
                {
                    "Kind": "Reference",
                    "ModPath": "metainfo",
                    "PkgPath": "metainfo::type_map",
                    "Name": "TypeMap::with_capacity",
                    "Line": 3
                }
            ]
        }
    }
}